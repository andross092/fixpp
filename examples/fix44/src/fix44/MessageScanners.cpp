// Generated by https://github.com/sashamakarenko/fixpp
// Copyright (c) 2021 sashamakarenko
// https://github.com/sashamakarenko/fixpp/blob/main/LICENSE

#include <fix44/Messages.h>

namespace fix44
{

// start of MessageScanners.cxx

// Generated


// -------------------------------------- scan ----------------------------------------

offset_t MessageHeader::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginString) 
     fieldBeginString.offset = pos;
     break;

   case FieldBodyLength::RAW_TAG :
     FIXPP_PRINT_FIELD(BodyLength) 
     fieldBodyLength.offset = pos;
     break;

   case FieldMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgType) 
     fieldMsgType.offset = pos;
     break;

   case FieldSenderCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderCompID) 
     fieldSenderCompID.offset = pos;
     break;

   case FieldTargetCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetCompID) 
     fieldTargetCompID.offset = pos;
     break;

   case FieldOnBehalfOfCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfCompID) 
     fieldOnBehalfOfCompID.offset = pos;
     break;

   case FieldDeliverToCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToCompID) 
     fieldDeliverToCompID.offset = pos;
     break;

   case FieldSecureDataLen::RAW_TAG :
     FIXPP_PRINT_FIELD(SecureDataLen) 
     fieldSecureDataLen.offset = pos;
     break;

   case FieldSecureData::RAW_TAG :
     FIXPP_PRINT_FIELD(SecureData) 
     fieldSecureData.offset = pos;
     break;

   case FieldMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgSeqNum) 
     fieldMsgSeqNum.offset = pos;
     break;

   case FieldSenderSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderSubID) 
     fieldSenderSubID.offset = pos;
     break;

   case FieldSenderLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderLocationID) 
     fieldSenderLocationID.offset = pos;
     break;

   case FieldTargetSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetSubID) 
     fieldTargetSubID.offset = pos;
     break;

   case FieldTargetLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetLocationID) 
     fieldTargetLocationID.offset = pos;
     break;

   case FieldOnBehalfOfSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfSubID) 
     fieldOnBehalfOfSubID.offset = pos;
     break;

   case FieldOnBehalfOfLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfLocationID) 
     fieldOnBehalfOfLocationID.offset = pos;
     break;

   case FieldDeliverToSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToSubID) 
     fieldDeliverToSubID.offset = pos;
     break;

   case FieldDeliverToLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToLocationID) 
     fieldDeliverToLocationID.offset = pos;
     break;

   case FieldPossDupFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(PossDupFlag) 
     fieldPossDupFlag.offset = pos;
     break;

   case FieldPossResend::RAW_TAG :
     FIXPP_PRINT_FIELD(PossResend) 
     fieldPossResend.offset = pos;
     break;

   case FieldSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(SendingTime) 
     fieldSendingTime.offset = pos;
     break;

   case FieldOrigSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigSendingTime) 
     fieldOrigSendingTime.offset = pos;
     break;

   case FieldXmlDataLen::RAW_TAG :
     FIXPP_PRINT_FIELD(XmlDataLen) 
     fieldXmlDataLen.offset = pos;
     break;

   case FieldXmlData::RAW_TAG :
     FIXPP_PRINT_FIELD(XmlData) 
     fieldXmlData.offset = pos;
     break;

   case FieldMessageEncoding::RAW_TAG :
     FIXPP_PRINT_FIELD(MessageEncoding) 
     fieldMessageEncoding.offset = pos;
     break;

   case FieldLastMsgSeqNumProcessed::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMsgSeqNumProcessed) 
     fieldLastMsgSeqNumProcessed.offset = pos;
     break;

   case FieldNoHops::RAW_TAG :
     FIXPP_PRINT_FIELD(NoHops) 
     fieldNoHops.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupHops::scan( groupsHops, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageHeartbeat::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TestReqID) 
     fieldTestReqID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTestRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TestReqID) 
     fieldTestReqID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageResendRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginSeqNo) 
     fieldBeginSeqNo.offset = pos;
     break;

   case FieldEndSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(EndSeqNo) 
     fieldEndSeqNo.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     fieldRefSeqNum.offset = pos;
     break;

   case FieldRefTagID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefTagID) 
     fieldRefTagID.offset = pos;
     break;

   case FieldRefMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(RefMsgType) 
     fieldRefMsgType.offset = pos;
     break;

   case FieldSessionRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(SessionRejectReason) 
     fieldSessionRejectReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSequenceReset::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldGapFillFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(GapFillFlag) 
     fieldGapFillFlag.offset = pos;
     break;

   case FieldNewSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(NewSeqNo) 
     fieldNewSeqNo.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageLogout::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageIOI::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldIOITransType::RAW_TAG :
     FIXPP_PRINT_FIELD(IOITransType) 
     fieldIOITransType.offset = pos;
     break;

   case FieldIOIRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIRefID) 
     fieldIOIRefID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldIOIQty::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIQty) 
     fieldIOIQty.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldIOIQltyInd::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIQltyInd) 
     fieldIOIQltyInd.offset = pos;
     break;

   case FieldIOINaturalFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(IOINaturalFlag) 
     fieldIOINaturalFlag.offset = pos;
     break;

   case FieldNoIOIQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoIOIQualifiers) 
     fieldNoIOIQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupIOIQualifiers::scan( groupsIOIQualifiers, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAdvertisement::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAdvId::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvId) 
     fieldAdvId.offset = pos;
     break;

   case FieldAdvTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvTransType) 
     fieldAdvTransType.offset = pos;
     break;

   case FieldAdvRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvRefID) 
     fieldAdvRefID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldAdvSide::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvSide) 
     fieldAdvSide.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageExecutionReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     fieldOrdStatusReqID.offset = pos;
     break;

   case FieldMassStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     fieldMassStatusReqID.offset = pos;
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldNoContraBrokers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoContraBrokers) 
     fieldNoContraBrokers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContraBrokers::scan( groupsContraBrokers, fix+pos, len - pos );
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRefID) 
     fieldExecRefID.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldWorkingIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     fieldWorkingIndicator.offset = pos;
     break;

   case FieldOrdRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdRejReason) 
     fieldOrdRejReason.offset = pos;
     break;

   case FieldExecRestatementReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     fieldExecRestatementReason.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldPeggedPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(PeggedPrice) 
     fieldPeggedPrice.offset = pos;
     break;

   case FieldDiscretionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionPrice) 
     fieldDiscretionPrice.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldTargetStrategyPerformance::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyPerformance) 
     fieldTargetStrategyPerformance.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldUnderlyingLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLastQty) 
     fieldUnderlyingLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldUnderlyingLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLastPx) 
     fieldUnderlyingLastPx.offset = pos;
     break;

   case FieldLastParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastParPx) 
     fieldLastParPx.offset = pos;
     break;

   case FieldLastSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     fieldLastSpotRate.offset = pos;
     break;

   case FieldLastForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     fieldLastForwardPoints.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTimeBracket::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeBracket) 
     fieldTimeBracket.offset = pos;
     break;

   case FieldLastCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(LastCapacity) 
     fieldLastCapacity.offset = pos;
     break;

   case FieldLeavesQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LeavesQty) 
     fieldLeavesQty.offset = pos;
     break;

   case FieldCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CumQty) 
     fieldCumQty.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldDayOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(DayOrderQty) 
     fieldDayOrderQty.offset = pos;
     break;

   case FieldDayCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(DayCumQty) 
     fieldDayCumQty.offset = pos;
     break;

   case FieldDayAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(DayAvgPx) 
     fieldDayAvgPx.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldReportToExch::RAW_TAG :
     FIXPP_PRINT_FIELD(ReportToExch) 
     fieldReportToExch.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldExDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDate) 
     fieldExDate.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldTradedFlatSwitch::RAW_TAG :
     FIXPP_PRINT_FIELD(TradedFlatSwitch) 
     fieldTradedFlatSwitch.offset = pos;
     break;

   case FieldBasisFeatureDate::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisFeatureDate) 
     fieldBasisFeatureDate.offset = pos;
     break;

   case FieldBasisFeaturePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisFeaturePrice) 
     fieldBasisFeaturePrice.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     fieldSettlCurrAmt.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     fieldSettlCurrFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldLastForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints2) 
     fieldLastForwardPoints2.offset = pos;
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldTransBkdTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransBkdTime) 
     fieldTransBkdTime.offset = pos;
     break;

   case FieldExecValuationPoint::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecValuationPoint) 
     fieldExecValuationPoint.offset = pos;
     break;

   case FieldExecPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecPriceType) 
     fieldExecPriceType.offset = pos;
     break;

   case FieldExecPriceAdjustment::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecPriceAdjustment) 
     fieldExecPriceAdjustment.offset = pos;
     break;

   case FieldPriorityIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorityIndicator) 
     fieldPriorityIndicator.offset = pos;
     break;

   case FieldPriceImprovement::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceImprovement) 
     fieldPriceImprovement.offset = pos;
     break;

   case FieldLastLiquidityInd::RAW_TAG :
     FIXPP_PRINT_FIELD(LastLiquidityInd) 
     fieldLastLiquidityInd.offset = pos;
     break;

   case FieldNoContAmts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoContAmts) 
     fieldNoContAmts.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContAmts::scan( groupsContAmts, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldWorkingIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     fieldWorkingIndicator.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCxlRejResponseTo::RAW_TAG :
     FIXPP_PRINT_FIELD(CxlRejResponseTo) 
     fieldCxlRejResponseTo.offset = pos;
     break;

   case FieldCxlRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CxlRejReason) 
     fieldCxlRejReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageLogon::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEncryptMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(EncryptMethod) 
     fieldEncryptMethod.offset = pos;
     break;

   case FieldHeartBtInt::RAW_TAG :
     FIXPP_PRINT_FIELD(HeartBtInt) 
     fieldHeartBtInt.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldResetSeqNumFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(ResetSeqNumFlag) 
     fieldResetSeqNumFlag.offset = pos;
     break;

   case FieldNextExpectedMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(NextExpectedMsgSeqNum) 
     fieldNextExpectedMsgSeqNum.offset = pos;
     break;

   case FieldMaxMessageSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxMessageSize) 
     fieldMaxMessageSize.offset = pos;
     break;

   case FieldNoMsgTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMsgTypes) 
     fieldNoMsgTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMsgTypes::scan( groupsMsgTypes, fix+pos, len - pos );
     break;

   case FieldTestMessageIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(TestMessageIndicator) 
     fieldTestMessageIndicator.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(Password) 
     fieldPassword.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNews::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigTime) 
     fieldOrigTime.offset = pos;
     break;

   case FieldUrgency::RAW_TAG :
     FIXPP_PRINT_FIELD(Urgency) 
     fieldUrgency.offset = pos;
     break;

   case FieldHeadline::RAW_TAG :
     FIXPP_PRINT_FIELD(Headline) 
     fieldHeadline.offset = pos;
     break;

   case FieldEncodedHeadlineLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedHeadlineLen) 
     fieldEncodedHeadlineLen.offset = pos;
     break;

   case FieldEncodedHeadline::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedHeadline) 
     fieldEncodedHeadline.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLinesOfText::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     fieldNoLinesOfText.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::scan( groupsLinesOfText, fix+pos, len - pos );
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageEmail::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEmailThreadID::RAW_TAG :
     FIXPP_PRINT_FIELD(EmailThreadID) 
     fieldEmailThreadID.offset = pos;
     break;

   case FieldEmailType::RAW_TAG :
     FIXPP_PRINT_FIELD(EmailType) 
     fieldEmailType.offset = pos;
     break;

   case FieldOrigTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigTime) 
     fieldOrigTime.offset = pos;
     break;

   case FieldSubject::RAW_TAG :
     FIXPP_PRINT_FIELD(Subject) 
     fieldSubject.offset = pos;
     break;

   case FieldEncodedSubjectLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSubjectLen) 
     fieldEncodedSubjectLen.offset = pos;
     break;

   case FieldEncodedSubject::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSubject) 
     fieldEncodedSubject.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoLinesOfText::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     fieldNoLinesOfText.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::scan( groupsLinesOfText, fix+pos, len - pos );
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderSingle::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldPrice2::RAW_TAG :
     FIXPP_PRINT_FIELD(Price2) 
     fieldPrice2.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderList::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldProgRptReqs::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     fieldProgRptReqs.offset = pos;
     break;

   case FieldBidType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidType) 
     fieldBidType.offset = pos;
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     fieldProgPeriodInterval.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldListExecInstType::RAW_TAG :
     FIXPP_PRINT_FIELD(ListExecInstType) 
     fieldListExecInstType.offset = pos;
     break;

   case FieldListExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ListExecInst) 
     fieldListExecInst.offset = pos;
     break;

   case FieldEncodedListExecInstLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListExecInstLen) 
     fieldEncodedListExecInstLen.offset = pos;
     break;

   case FieldEncodedListExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListExecInst) 
     fieldEncodedListExecInst.offset = pos;
     break;

   case FieldAllowableOneSidednessPct::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessPct) 
     fieldAllowableOneSidednessPct.offset = pos;
     break;

   case FieldAllowableOneSidednessValue::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessValue) 
     fieldAllowableOneSidednessValue.offset = pos;
     break;

   case FieldAllowableOneSidednessCurr::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessCurr) 
     fieldAllowableOneSidednessCurr.offset = pos;
     break;

   case FieldTotNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     fieldTotNoOrders.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldPrice2::RAW_TAG :
     FIXPP_PRINT_FIELD(Price2) 
     fieldPrice2.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     fieldOrdStatusReqID.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationInstruction::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldAllocTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocTransType) 
     fieldAllocTransType.offset = pos;
     break;

   case FieldAllocType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocType) 
     fieldAllocType.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldRefAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefAllocID) 
     fieldRefAllocID.offset = pos;
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     fieldAllocCancReplaceReason.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldAllocLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     fieldAllocLinkID.offset = pos;
     break;

   case FieldAllocLinkType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     fieldAllocLinkType.offset = pos;
     break;

   case FieldBookingRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingRefID) 
     fieldBookingRefID.offset = pos;
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     fieldAllocNoOrdersType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldReversalIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     fieldReversalIndicator.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     fieldAutoAcceptIndicator.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     fieldTotalAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldTotNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     fieldTotNoAllocs.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListExecute::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldListStatusType::RAW_TAG :
     FIXPP_PRINT_FIELD(ListStatusType) 
     fieldListStatusType.offset = pos;
     break;

   case FieldNoRpts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRpts) 
     fieldNoRpts.offset = pos;
     break;

   case FieldListOrderStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(ListOrderStatus) 
     fieldListOrderStatus.offset = pos;
     break;

   case FieldRptSeq::RAW_TAG :
     FIXPP_PRINT_FIELD(RptSeq) 
     fieldRptSeq.offset = pos;
     break;

   case FieldListStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(ListStatusText) 
     fieldListStatusText.offset = pos;
     break;

   case FieldEncodedListStatusTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListStatusTextLen) 
     fieldEncodedListStatusTextLen.offset = pos;
     break;

   case FieldEncodedListStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListStatusText) 
     fieldEncodedListStatusText.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTotNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     fieldTotNoOrders.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationInstructionAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldAllocType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocType) 
     fieldAllocType.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDontKnowTrade::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldDKReason::RAW_TAG :
     FIXPP_PRINT_FIELD(DKReason) 
     fieldDKReason.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuote::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSettlementInstructions::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstMsgID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstMsgID) 
     fieldSettlInstMsgID.offset = pos;
     break;

   case FieldSettlInstReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     fieldSettlInstReqID.offset = pos;
     break;

   case FieldSettlInstMode::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstMode) 
     fieldSettlInstMode.offset = pos;
     break;

   case FieldSettlInstReqRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqRejCode) 
     fieldSettlInstReqRejCode.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoSettlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSettlInst) 
     fieldNoSettlInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSettlInst::scan( groupsSettlInst, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldMarketDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(MarketDepth) 
     fieldMarketDepth.offset = pos;
     break;

   case FieldMDUpdateType::RAW_TAG :
     FIXPP_PRINT_FIELD(MDUpdateType) 
     fieldMDUpdateType.offset = pos;
     break;

   case FieldAggregatedBook::RAW_TAG :
     FIXPP_PRINT_FIELD(AggregatedBook) 
     fieldAggregatedBook.offset = pos;
     break;

   case FieldOpenCloseSettlFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(OpenCloseSettlFlag) 
     fieldOpenCloseSettlFlag.offset = pos;
     break;

   case FieldScope::RAW_TAG :
     FIXPP_PRINT_FIELD(Scope) 
     fieldScope.offset = pos;
     break;

   case FieldMDImplicitDelete::RAW_TAG :
     FIXPP_PRINT_FIELD(MDImplicitDelete) 
     fieldMDImplicitDelete.offset = pos;
     break;

   case FieldNoMDEntryTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntryTypes) 
     fieldNoMDEntryTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntryTypes::scan( groupsMDEntryTypes, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldApplQueueAction::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueAction) 
     fieldApplQueueAction.offset = pos;
     break;

   case FieldApplQueueMax::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueMax) 
     fieldApplQueueMax.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldFinancialStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     fieldFinancialStatus.offset = pos;
     break;

   case FieldCorporateAction::RAW_TAG :
     FIXPP_PRINT_FIELD(CorporateAction) 
     fieldCorporateAction.offset = pos;
     break;

   case FieldNetChgPrevDay::RAW_TAG :
     FIXPP_PRINT_FIELD(NetChgPrevDay) 
     fieldNetChgPrevDay.offset = pos;
     break;

   case FieldNoMDEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     fieldNoMDEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::scan( groupsMDEntries, fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     fieldApplQueueDepth.offset = pos;
     break;

   case FieldApplQueueResolution::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     fieldApplQueueResolution.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldNoMDEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     fieldNoMDEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::scan( groupsMDEntries, fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     fieldApplQueueDepth.offset = pos;
     break;

   case FieldApplQueueResolution::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     fieldApplQueueResolution.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataRequestReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldMDReqRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqRejReason) 
     fieldMDReqRejReason.offset = pos;
     break;

   case FieldNoAltMDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAltMDSource) 
     fieldNoAltMDSource.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAltMDSource::scan( groupsAltMDSource, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteCancel::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteCancelType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteCancelType) 
     fieldQuoteCancelType.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldNoQuoteEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteEntries) 
     fieldNoQuoteEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteEntries::scan( groupsQuoteEntries, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     fieldQuoteStatusReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     fieldQuoteStatus.offset = pos;
     break;

   case FieldQuoteRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRejectReason) 
     fieldQuoteRejectReason.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoQuoteSets::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     fieldNoQuoteSets.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::scan( groupsQuoteSets, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityDefinitionRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestType) 
     fieldSecurityRequestType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     fieldExpirationCycle.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityDefinition::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     fieldSecurityResponseType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     fieldExpirationCycle.offset = pos;
     break;

   case FieldRoundLot::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundLot) 
     fieldRoundLot.offset = pos;
     break;

   case FieldMinTradeVol::RAW_TAG :
     FIXPP_PRINT_FIELD(MinTradeVol) 
     fieldMinTradeVol.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     fieldSecurityStatusReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     fieldSecurityStatusReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldSecurityTradingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityTradingStatus) 
     fieldSecurityTradingStatus.offset = pos;
     break;

   case FieldFinancialStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     fieldFinancialStatus.offset = pos;
     break;

   case FieldCorporateAction::RAW_TAG :
     FIXPP_PRINT_FIELD(CorporateAction) 
     fieldCorporateAction.offset = pos;
     break;

   case FieldHaltReasonChar::RAW_TAG :
     FIXPP_PRINT_FIELD(HaltReasonChar) 
     fieldHaltReasonChar.offset = pos;
     break;

   case FieldInViewOfCommon::RAW_TAG :
     FIXPP_PRINT_FIELD(InViewOfCommon) 
     fieldInViewOfCommon.offset = pos;
     break;

   case FieldDueToRelated::RAW_TAG :
     FIXPP_PRINT_FIELD(DueToRelated) 
     fieldDueToRelated.offset = pos;
     break;

   case FieldBuyVolume::RAW_TAG :
     FIXPP_PRINT_FIELD(BuyVolume) 
     fieldBuyVolume.offset = pos;
     break;

   case FieldSellVolume::RAW_TAG :
     FIXPP_PRINT_FIELD(SellVolume) 
     fieldSellVolume.offset = pos;
     break;

   case FieldHighPx::RAW_TAG :
     FIXPP_PRINT_FIELD(HighPx) 
     fieldHighPx.offset = pos;
     break;

   case FieldLowPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LowPx) 
     fieldLowPx.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAdjustment::RAW_TAG :
     FIXPP_PRINT_FIELD(Adjustment) 
     fieldAdjustment.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradingSessionStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     fieldTradSesReqID.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTradSesMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     fieldTradSesMethod.offset = pos;
     break;

   case FieldTradSesMode::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMode) 
     fieldTradSesMode.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradingSessionStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     fieldTradSesReqID.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTradSesMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     fieldTradSesMethod.offset = pos;
     break;

   case FieldTradSesMode::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMode) 
     fieldTradSesMode.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldTradSesStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStatus) 
     fieldTradSesStatus.offset = pos;
     break;

   case FieldTradSesStatusRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStatusRejReason) 
     fieldTradSesStatusRejReason.offset = pos;
     break;

   case FieldTradSesStartTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStartTime) 
     fieldTradSesStartTime.offset = pos;
     break;

   case FieldTradSesOpenTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesOpenTime) 
     fieldTradSesOpenTime.offset = pos;
     break;

   case FieldTradSesPreCloseTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesPreCloseTime) 
     fieldTradSesPreCloseTime.offset = pos;
     break;

   case FieldTradSesCloseTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesCloseTime) 
     fieldTradSesCloseTime.offset = pos;
     break;

   case FieldTradSesEndTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesEndTime) 
     fieldTradSesEndTime.offset = pos;
     break;

   case FieldTotalVolumeTraded::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalVolumeTraded) 
     fieldTotalVolumeTraded.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMassQuote::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDefBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(DefBidSize) 
     fieldDefBidSize.offset = pos;
     break;

   case FieldDefOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(DefOfferSize) 
     fieldDefOfferSize.offset = pos;
     break;

   case FieldNoQuoteSets::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     fieldNoQuoteSets.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::scan( groupsQuoteSets, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBusinessMessageReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     fieldRefSeqNum.offset = pos;
     break;

   case FieldRefMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(RefMsgType) 
     fieldRefMsgType.offset = pos;
     break;

   case FieldBusinessRejectRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BusinessRejectRefID) 
     fieldBusinessRejectRefID.offset = pos;
     break;

   case FieldBusinessRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(BusinessRejectReason) 
     fieldBusinessRejectReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBidRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldBidRequestTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidRequestTransType) 
     fieldBidRequestTransType.offset = pos;
     break;

   case FieldListName::RAW_TAG :
     FIXPP_PRINT_FIELD(ListName) 
     fieldListName.offset = pos;
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldBidType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidType) 
     fieldBidType.offset = pos;
     break;

   case FieldNumTickets::RAW_TAG :
     FIXPP_PRINT_FIELD(NumTickets) 
     fieldNumTickets.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSideValue1::RAW_TAG :
     FIXPP_PRINT_FIELD(SideValue1) 
     fieldSideValue1.offset = pos;
     break;

   case FieldSideValue2::RAW_TAG :
     FIXPP_PRINT_FIELD(SideValue2) 
     fieldSideValue2.offset = pos;
     break;

   case FieldNoBidDescriptors::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidDescriptors) 
     fieldNoBidDescriptors.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidDescriptors::scan( groupsBidDescriptors, fix+pos, len - pos );
     break;

   case FieldNoBidComponents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     fieldNoBidComponents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::scan( groupsBidComponents, fix+pos, len - pos );
     break;

   case FieldLiquidityIndType::RAW_TAG :
     FIXPP_PRINT_FIELD(LiquidityIndType) 
     fieldLiquidityIndType.offset = pos;
     break;

   case FieldWtAverageLiquidity::RAW_TAG :
     FIXPP_PRINT_FIELD(WtAverageLiquidity) 
     fieldWtAverageLiquidity.offset = pos;
     break;

   case FieldExchangeForPhysical::RAW_TAG :
     FIXPP_PRINT_FIELD(ExchangeForPhysical) 
     fieldExchangeForPhysical.offset = pos;
     break;

   case FieldOutMainCntryUIndex::RAW_TAG :
     FIXPP_PRINT_FIELD(OutMainCntryUIndex) 
     fieldOutMainCntryUIndex.offset = pos;
     break;

   case FieldCrossPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPercent) 
     fieldCrossPercent.offset = pos;
     break;

   case FieldProgRptReqs::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     fieldProgRptReqs.offset = pos;
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     fieldProgPeriodInterval.offset = pos;
     break;

   case FieldIncTaxInd::RAW_TAG :
     FIXPP_PRINT_FIELD(IncTaxInd) 
     fieldIncTaxInd.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldNumBidders::RAW_TAG :
     FIXPP_PRINT_FIELD(NumBidders) 
     fieldNumBidders.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldBidTradeType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidTradeType) 
     fieldBidTradeType.offset = pos;
     break;

   case FieldBasisPxType::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisPxType) 
     fieldBasisPxType.offset = pos;
     break;

   case FieldStrikeTime::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeTime) 
     fieldStrikeTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBidResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldNoBidComponents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     fieldNoBidComponents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::scan( groupsBidComponents, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStrikePrice::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldTotNoStrikes::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoStrikes) 
     fieldTotNoStrikes.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoStrikes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStrikes) 
     fieldNoStrikes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStrikes::scan( groupsStrikes, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageXMLnonFIX::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRegistrationInstructions::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldRegistTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistTransType) 
     fieldRegistTransType.offset = pos;
     break;

   case FieldRegistRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRefID) 
     fieldRegistRefID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldRegistAcctType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistAcctType) 
     fieldRegistAcctType.offset = pos;
     break;

   case FieldTaxAdvantageType::RAW_TAG :
     FIXPP_PRINT_FIELD(TaxAdvantageType) 
     fieldTaxAdvantageType.offset = pos;
     break;

   case FieldOwnershipType::RAW_TAG :
     FIXPP_PRINT_FIELD(OwnershipType) 
     fieldOwnershipType.offset = pos;
     break;

   case FieldNoRegistDtls::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRegistDtls) 
     fieldNoRegistDtls.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRegistDtls::scan( groupsRegistDtls, fix+pos, len - pos );
     break;

   case FieldNoDistribInsts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDistribInsts) 
     fieldNoDistribInsts.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDistribInsts::scan( groupsDistribInsts, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldRegistTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistTransType) 
     fieldRegistTransType.offset = pos;
     break;

   case FieldRegistRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRefID) 
     fieldRegistRefID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldRegistStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistStatus) 
     fieldRegistStatus.offset = pos;
     break;

   case FieldRegistRejReasonCode::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRejReasonCode) 
     fieldRegistRejReasonCode.offset = pos;
     break;

   case FieldRegistRejReasonText::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRejReasonText) 
     fieldRegistRejReasonText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     fieldMassCancelRequestType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassCancelReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     fieldMassCancelRequestType.offset = pos;
     break;

   case FieldMassCancelResponse::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelResponse) 
     fieldMassCancelResponse.offset = pos;
     break;

   case FieldMassCancelRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRejectReason) 
     fieldMassCancelRejectReason.offset = pos;
     break;

   case FieldTotalAffectedOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAffectedOrders) 
     fieldTotalAffectedOrders.offset = pos;
     break;

   case FieldNoAffectedOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAffectedOrders) 
     fieldNoAffectedOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAffectedOrders::scan( groupsAffectedOrders, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderCross::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCrossOrderCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityTypeRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityTypes::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     fieldSecurityResponseType.offset = pos;
     break;

   case FieldTotNoSecurityTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoSecurityTypes) 
     fieldTotNoSecurityTypes.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoSecurityTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityTypes) 
     fieldNoSecurityTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityTypes::scan( groupsSecurityTypes, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityListRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     fieldSecurityListRequestType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityList::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     fieldSecurityRequestResult.offset = pos;
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     fieldSecurityListRequestType.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDerivativeSecurityList::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     fieldSecurityRequestResult.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderMultileg::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     fieldMultiLegRptTypeReq.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     fieldMultiLegRptTypeReq.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTradeRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     fieldTradeRequestType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoDates::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDates) 
     fieldNoDates.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDates::scan( groupsDates, fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTimeBracket::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeBracket) 
     fieldTimeBracket.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldTradeInputSource::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeInputSource) 
     fieldTradeInputSource.offset = pos;
     break;

   case FieldTradeInputDevice::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeInputDevice) 
     fieldTradeInputDevice.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldTradeReportTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     fieldTradeReportTransType.offset = pos;
     break;

   case FieldTradeReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportType) 
     fieldTradeReportType.offset = pos;
     break;

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     fieldTotNumTradeReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     fieldTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     fieldSecondaryTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldExecRestatementReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     fieldExecRestatementReason.offset = pos;
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldUnderlyingTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionID) 
     fieldUnderlyingTradingSessionID.offset = pos;
     break;

   case FieldUnderlyingTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionSubID) 
     fieldUnderlyingTradingSessionSubID.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldLastParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastParPx) 
     fieldLastParPx.offset = pos;
     break;

   case FieldLastSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     fieldLastSpotRate.offset = pos;
     break;

   case FieldLastForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     fieldLastForwardPoints.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldAvgPxIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxIndicator) 
     fieldAvgPxIndicator.offset = pos;
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldTradeLegRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLegRefID) 
     fieldTradeLegRefID.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldPublishTrdIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PublishTrdIndicator) 
     fieldPublishTrdIndicator.offset = pos;
     break;

   case FieldShortSaleReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ShortSaleReason) 
     fieldShortSaleReason.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMassStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     fieldMassStatusReqID.offset = pos;
     break;

   case FieldMassStatusReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqType) 
     fieldMassStatusReqType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteRequestReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldQuoteRequestRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRequestRejectReason) 
     fieldQuoteRequestRejectReason.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRFQRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteStatusReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     fieldQuoteStatusReqID.offset = pos;
     break;

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldQuoteStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     fieldQuoteStatus.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespType) 
     fieldQuoteRespType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmation::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmID) 
     fieldConfirmID.offset = pos;
     break;

   case FieldConfirmRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmRefID) 
     fieldConfirmRefID.offset = pos;
     break;

   case FieldConfirmReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     fieldConfirmReqID.offset = pos;
     break;

   case FieldConfirmTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmTransType) 
     fieldConfirmTransType.offset = pos;
     break;

   case FieldConfirmType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmType) 
     fieldConfirmType.offset = pos;
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldConfirmStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmStatus) 
     fieldConfirmStatus.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldIndividualAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     fieldIndividualAllocID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldAllocQty::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocQty) 
     fieldAllocQty.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldNoCapacities::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCapacities) 
     fieldNoCapacities.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCapacities::scan( groupsCapacities, fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldAllocAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     fieldAllocAccountType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldReportedPx::RAW_TAG :
     FIXPP_PRINT_FIELD(ReportedPx) 
     fieldReportedPx.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldExDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDate) 
     fieldExDate.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldMaturityNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityNetMoney) 
     fieldMaturityNetMoney.offset = pos;
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     fieldSettlCurrAmt.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     fieldSettlCurrFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldSharedCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(SharedCommission) 
     fieldSharedCommission.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionMaintenanceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosTransType) 
     fieldPosTransType.offset = pos;
     break;

   case FieldPosMaintAction::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     fieldPosMaintAction.offset = pos;
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     fieldOrigPosReqRefID.offset = pos;
     break;

   case FieldPosMaintRptRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptRefID) 
     fieldPosMaintRptRefID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     fieldAdjustmentType.offset = pos;
     break;

   case FieldContraryInstructionIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ContraryInstructionIndicator) 
     fieldContraryInstructionIndicator.offset = pos;
     break;

   case FieldPriorSpreadIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorSpreadIndicator) 
     fieldPriorSpreadIndicator.offset = pos;
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionMaintenanceReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosTransType) 
     fieldPosTransType.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosMaintAction::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     fieldPosMaintAction.offset = pos;
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     fieldOrigPosReqRefID.offset = pos;
     break;

   case FieldPosMaintStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintStatus) 
     fieldPosMaintStatus.offset = pos;
     break;

   case FieldPosMaintResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintResult) 
     fieldPosMaintResult.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     fieldAdjustmentType.offset = pos;
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRequestForPositions::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqType) 
     fieldPosReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRequestForPositionsAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     fieldTotalNumPosReports.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldPosReqResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqResult) 
     fieldPosReqResult.offset = pos;
     break;

   case FieldPosReqStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqStatus) 
     fieldPosReqStatus.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqType) 
     fieldPosReqType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     fieldTotalNumPosReports.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldPosReqResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqResult) 
     fieldPosReqResult.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPrice) 
     fieldSettlPrice.offset = pos;
     break;

   case FieldSettlPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     fieldSettlPriceType.offset = pos;
     break;

   case FieldPriorSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorSettlPrice) 
     fieldPriorSettlPrice.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldRegistStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistStatus) 
     fieldRegistStatus.offset = pos;
     break;

   case FieldDeliveryDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryDate) 
     fieldDeliveryDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTradeRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     fieldTradeRequestType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     fieldTotNumTradeReports.offset = pos;
     break;

   case FieldTradeRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestResult) 
     fieldTradeRequestResult.offset = pos;
     break;

   case FieldTradeRequestStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestStatus) 
     fieldTradeRequestStatus.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldTradeReportTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     fieldTradeReportTransType.offset = pos;
     break;

   case FieldTradeReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportType) 
     fieldTradeReportType.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     fieldTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     fieldSecondaryTradeReportRefID.offset = pos;
     break;

   case FieldTrdRptStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdRptStatus) 
     fieldTrdRptStatus.offset = pos;
     break;

   case FieldTradeReportRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRejectReason) 
     fieldTradeReportRejectReason.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportID) 
     fieldAllocReportID.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldAllocTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocTransType) 
     fieldAllocTransType.offset = pos;
     break;

   case FieldAllocReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportRefID) 
     fieldAllocReportRefID.offset = pos;
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     fieldAllocCancReplaceReason.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldAllocReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportType) 
     fieldAllocReportType.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldRefAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefAllocID) 
     fieldRefAllocID.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldAllocLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     fieldAllocLinkID.offset = pos;
     break;

   case FieldAllocLinkType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     fieldAllocLinkType.offset = pos;
     break;

   case FieldBookingRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingRefID) 
     fieldBookingRefID.offset = pos;
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     fieldAllocNoOrdersType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldReversalIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     fieldReversalIndicator.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     fieldAutoAcceptIndicator.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     fieldTotalAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldTotNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     fieldTotNoAllocs.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationReportAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportID) 
     fieldAllocReportID.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldAllocReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportType) 
     fieldAllocReportType.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmationAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmID) 
     fieldConfirmID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAffirmStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AffirmStatus) 
     fieldAffirmStatus.offset = pos;
     break;

   case FieldConfirmRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmRejReason) 
     fieldConfirmRejReason.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSettlementInstructionRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     fieldSettlInstReqID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldLastUpdateTime::RAW_TAG :
     FIXPP_PRINT_FIELD(LastUpdateTime) 
     fieldLastUpdateTime.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAssignmentReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAsgnRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(AsgnRptID) 
     fieldAsgnRptID.offset = pos;
     break;

   case FieldTotNumAssignmentReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumAssignmentReports) 
     fieldTotNumAssignmentReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPrice) 
     fieldSettlPrice.offset = pos;
     break;

   case FieldSettlPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     fieldSettlPriceType.offset = pos;
     break;

   case FieldUnderlyingSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSettlPrice) 
     fieldUnderlyingSettlPrice.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldAssignmentMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(AssignmentMethod) 
     fieldAssignmentMethod.offset = pos;
     break;

   case FieldAssignmentUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(AssignmentUnit) 
     fieldAssignmentUnit.offset = pos;
     break;

   case FieldOpenInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(OpenInterest) 
     fieldOpenInterest.offset = pos;
     break;

   case FieldExerciseMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(ExerciseMethod) 
     fieldExerciseMethod.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralAssignment::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollAsgnID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     fieldCollAsgnID.offset = pos;
     break;

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     fieldCollAsgnTransType.offset = pos;
     break;

   case FieldCollAsgnRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRefID) 
     fieldCollAsgnRefID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollRespID) 
     fieldCollRespID.offset = pos;
     break;

   case FieldCollAsgnID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     fieldCollAsgnID.offset = pos;
     break;

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     fieldCollAsgnTransType.offset = pos;
     break;

   case FieldCollAsgnRespType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRespType) 
     fieldCollAsgnRespType.offset = pos;
     break;

   case FieldCollAsgnRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRejectReason) 
     fieldCollAsgnRejectReason.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollRptID) 
     fieldCollRptID.offset = pos;
     break;

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldCollStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(CollStatus) 
     fieldCollStatus.offset = pos;
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralInquiry::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     fieldNoCollInquiryQualifier.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::scan( groupsCollInquiryQualifier, fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestType) 
     fieldNetworkRequestType.offset = pos;
     break;

   case FieldNetworkRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     fieldNetworkRequestID.offset = pos;
     break;

   case FieldNoCompIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     fieldNoCompIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::scan( groupsCompIDs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkStatusResponseType) 
     fieldNetworkStatusResponseType.offset = pos;
     break;

   case FieldNetworkRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     fieldNetworkRequestID.offset = pos;
     break;

   case FieldNetworkResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkResponseID) 
     fieldNetworkResponseID.offset = pos;
     break;

   case FieldLastNetworkResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(LastNetworkResponseID) 
     fieldLastNetworkResponseID.offset = pos;
     break;

   case FieldNoCompIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     fieldNoCompIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::scan( groupsCompIDs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageUserRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestID) 
     fieldUserRequestID.offset = pos;
     break;

   case FieldUserRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestType) 
     fieldUserRequestType.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(Password) 
     fieldPassword.offset = pos;
     break;

   case FieldNewPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(NewPassword) 
     fieldNewPassword.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageUserResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestID) 
     fieldUserRequestID.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldUserStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(UserStatus) 
     fieldUserStatus.offset = pos;
     break;

   case FieldUserStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(UserStatusText) 
     fieldUserStatusText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralInquiryAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldCollInquiryStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryStatus) 
     fieldCollInquiryStatus.offset = pos;
     break;

   case FieldCollInquiryResult::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryResult) 
     fieldCollInquiryResult.offset = pos;
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     fieldNoCollInquiryQualifier.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::scan( groupsCollInquiryQualifier, fix+pos, len - pos );
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmationRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     fieldConfirmReqID.offset = pos;
     break;

   case FieldConfirmType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmType) 
     fieldConfirmType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldIndividualAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     fieldIndividualAllocID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldAllocAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     fieldAllocAccountType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}


// -------------------------------------- skip ----------------------------------------

offset_t MessageHeader::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     break;

   case FieldBodyLength::RAW_TAG :
     break;

   case FieldMsgType::RAW_TAG :
     break;

   case FieldSenderCompID::RAW_TAG :
     break;

   case FieldTargetCompID::RAW_TAG :
     break;

   case FieldOnBehalfOfCompID::RAW_TAG :
     break;

   case FieldDeliverToCompID::RAW_TAG :
     break;

   case FieldSecureDataLen::RAW_TAG :
     break;

   case FieldSecureData::RAW_TAG :
     break;

   case FieldMsgSeqNum::RAW_TAG :
     break;

   case FieldSenderSubID::RAW_TAG :
     break;

   case FieldSenderLocationID::RAW_TAG :
     break;

   case FieldTargetSubID::RAW_TAG :
     break;

   case FieldTargetLocationID::RAW_TAG :
     break;

   case FieldOnBehalfOfSubID::RAW_TAG :
     break;

   case FieldOnBehalfOfLocationID::RAW_TAG :
     break;

   case FieldDeliverToSubID::RAW_TAG :
     break;

   case FieldDeliverToLocationID::RAW_TAG :
     break;

   case FieldPossDupFlag::RAW_TAG :
     break;

   case FieldPossResend::RAW_TAG :
     break;

   case FieldSendingTime::RAW_TAG :
     break;

   case FieldOrigSendingTime::RAW_TAG :
     break;

   case FieldXmlDataLen::RAW_TAG :
     break;

   case FieldXmlData::RAW_TAG :
     break;

   case FieldMessageEncoding::RAW_TAG :
     break;

   case FieldLastMsgSeqNumProcessed::RAW_TAG :
     break;

   case FieldNoHops::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupHops::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageHeartbeat::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTestRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageResendRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginSeqNo::RAW_TAG :
     break;

   case FieldEndSeqNo::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     break;

   case FieldRefTagID::RAW_TAG :
     break;

   case FieldRefMsgType::RAW_TAG :
     break;

   case FieldSessionRejectReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSequenceReset::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldGapFillFlag::RAW_TAG :
     break;

   case FieldNewSeqNo::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogout::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageIOI::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldIOIID::RAW_TAG :
     break;

   case FieldIOITransType::RAW_TAG :
     break;

   case FieldIOIRefID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldIOIQty::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldIOIQltyInd::RAW_TAG :
     break;

   case FieldIOINaturalFlag::RAW_TAG :
     break;

   case FieldNoIOIQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupIOIQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAdvertisement::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAdvId::RAW_TAG :
     break;

   case FieldAdvTransType::RAW_TAG :
     break;

   case FieldAdvRefID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldAdvSide::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageExecutionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     break;

   case FieldMassStatusReqID::RAW_TAG :
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldNoContraBrokers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContraBrokers::skip( fix+pos, len - pos );
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldExecRefID::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldWorkingIndicator::RAW_TAG :
     break;

   case FieldOrdRejReason::RAW_TAG :
     break;

   case FieldExecRestatementReason::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldPeggedPrice::RAW_TAG :
     break;

   case FieldDiscretionPrice::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldTargetStrategyPerformance::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldUnderlyingLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldUnderlyingLastPx::RAW_TAG :
     break;

   case FieldLastParPx::RAW_TAG :
     break;

   case FieldLastSpotRate::RAW_TAG :
     break;

   case FieldLastForwardPoints::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTimeBracket::RAW_TAG :
     break;

   case FieldLastCapacity::RAW_TAG :
     break;

   case FieldLeavesQty::RAW_TAG :
     break;

   case FieldCumQty::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldDayOrderQty::RAW_TAG :
     break;

   case FieldDayCumQty::RAW_TAG :
     break;

   case FieldDayAvgPx::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldReportToExch::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldExDate::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldTradedFlatSwitch::RAW_TAG :
     break;

   case FieldBasisFeatureDate::RAW_TAG :
     break;

   case FieldBasisFeaturePrice::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldLastForwardPoints2::RAW_TAG :
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldTransBkdTime::RAW_TAG :
     break;

   case FieldExecValuationPoint::RAW_TAG :
     break;

   case FieldExecPriceType::RAW_TAG :
     break;

   case FieldExecPriceAdjustment::RAW_TAG :
     break;

   case FieldPriorityIndicator::RAW_TAG :
     break;

   case FieldPriceImprovement::RAW_TAG :
     break;

   case FieldLastLiquidityInd::RAW_TAG :
     break;

   case FieldNoContAmts::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContAmts::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldWorkingIndicator::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldCxlRejResponseTo::RAW_TAG :
     break;

   case FieldCxlRejReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogon::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEncryptMethod::RAW_TAG :
     break;

   case FieldHeartBtInt::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldResetSeqNumFlag::RAW_TAG :
     break;

   case FieldNextExpectedMsgSeqNum::RAW_TAG :
     break;

   case FieldMaxMessageSize::RAW_TAG :
     break;

   case FieldNoMsgTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMsgTypes::skip( fix+pos, len - pos );
     break;

   case FieldTestMessageIndicator::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldPassword::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNews::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigTime::RAW_TAG :
     break;

   case FieldUrgency::RAW_TAG :
     break;

   case FieldHeadline::RAW_TAG :
     break;

   case FieldEncodedHeadlineLen::RAW_TAG :
     break;

   case FieldEncodedHeadline::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLinesOfText::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::skip( fix+pos, len - pos );
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageEmail::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEmailThreadID::RAW_TAG :
     break;

   case FieldEmailType::RAW_TAG :
     break;

   case FieldOrigTime::RAW_TAG :
     break;

   case FieldSubject::RAW_TAG :
     break;

   case FieldEncodedSubjectLen::RAW_TAG :
     break;

   case FieldEncodedSubject::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoLinesOfText::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::skip( fix+pos, len - pos );
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderSingle::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldPrice2::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldProgRptReqs::RAW_TAG :
     break;

   case FieldBidType::RAW_TAG :
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldListExecInstType::RAW_TAG :
     break;

   case FieldListExecInst::RAW_TAG :
     break;

   case FieldEncodedListExecInstLen::RAW_TAG :
     break;

   case FieldEncodedListExecInst::RAW_TAG :
     break;

   case FieldAllowableOneSidednessPct::RAW_TAG :
     break;

   case FieldAllowableOneSidednessValue::RAW_TAG :
     break;

   case FieldAllowableOneSidednessCurr::RAW_TAG :
     break;

   case FieldTotNoOrders::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldPrice2::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstruction::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     break;

   case FieldAllocTransType::RAW_TAG :
     break;

   case FieldAllocType::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldRefAllocID::RAW_TAG :
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldAllocLinkID::RAW_TAG :
     break;

   case FieldAllocLinkType::RAW_TAG :
     break;

   case FieldBookingRefID::RAW_TAG :
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldReversalIndicator::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldTotNoAllocs::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListExecute::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldBidID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldListStatusType::RAW_TAG :
     break;

   case FieldNoRpts::RAW_TAG :
     break;

   case FieldListOrderStatus::RAW_TAG :
     break;

   case FieldRptSeq::RAW_TAG :
     break;

   case FieldListStatusText::RAW_TAG :
     break;

   case FieldEncodedListStatusTextLen::RAW_TAG :
     break;

   case FieldEncodedListStatusText::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTotNoOrders::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstructionAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldAllocType::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDontKnowTrade::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldDKReason::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuote::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstMsgID::RAW_TAG :
     break;

   case FieldSettlInstReqID::RAW_TAG :
     break;

   case FieldSettlInstMode::RAW_TAG :
     break;

   case FieldSettlInstReqRejCode::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoSettlInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSettlInst::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldMarketDepth::RAW_TAG :
     break;

   case FieldMDUpdateType::RAW_TAG :
     break;

   case FieldAggregatedBook::RAW_TAG :
     break;

   case FieldOpenCloseSettlFlag::RAW_TAG :
     break;

   case FieldScope::RAW_TAG :
     break;

   case FieldMDImplicitDelete::RAW_TAG :
     break;

   case FieldNoMDEntryTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntryTypes::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueAction::RAW_TAG :
     break;

   case FieldApplQueueMax::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldFinancialStatus::RAW_TAG :
     break;

   case FieldCorporateAction::RAW_TAG :
     break;

   case FieldNetChgPrevDay::RAW_TAG :
     break;

   case FieldNoMDEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     break;

   case FieldApplQueueResolution::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldNoMDEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     break;

   case FieldApplQueueResolution::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequestReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldMDReqRejReason::RAW_TAG :
     break;

   case FieldNoAltMDSource::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAltMDSource::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteCancel::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteCancelType::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldNoQuoteEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteEntries::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteStatus::RAW_TAG :
     break;

   case FieldQuoteRejectReason::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoQuoteSets::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinitionRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityRequestType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinition::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityResponseType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     break;

   case FieldRoundLot::RAW_TAG :
     break;

   case FieldMinTradeVol::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldSecurityTradingStatus::RAW_TAG :
     break;

   case FieldFinancialStatus::RAW_TAG :
     break;

   case FieldCorporateAction::RAW_TAG :
     break;

   case FieldHaltReasonChar::RAW_TAG :
     break;

   case FieldInViewOfCommon::RAW_TAG :
     break;

   case FieldDueToRelated::RAW_TAG :
     break;

   case FieldBuyVolume::RAW_TAG :
     break;

   case FieldSellVolume::RAW_TAG :
     break;

   case FieldHighPx::RAW_TAG :
     break;

   case FieldLowPx::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAdjustment::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTradSesMethod::RAW_TAG :
     break;

   case FieldTradSesMode::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTradSesMethod::RAW_TAG :
     break;

   case FieldTradSesMode::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldTradSesStatus::RAW_TAG :
     break;

   case FieldTradSesStatusRejReason::RAW_TAG :
     break;

   case FieldTradSesStartTime::RAW_TAG :
     break;

   case FieldTradSesOpenTime::RAW_TAG :
     break;

   case FieldTradSesPreCloseTime::RAW_TAG :
     break;

   case FieldTradSesCloseTime::RAW_TAG :
     break;

   case FieldTradSesEndTime::RAW_TAG :
     break;

   case FieldTotalVolumeTraded::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuote::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDefBidSize::RAW_TAG :
     break;

   case FieldDefOfferSize::RAW_TAG :
     break;

   case FieldNoQuoteSets::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBusinessMessageReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     break;

   case FieldRefMsgType::RAW_TAG :
     break;

   case FieldBusinessRejectRefID::RAW_TAG :
     break;

   case FieldBusinessRejectReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldBidRequestTransType::RAW_TAG :
     break;

   case FieldListName::RAW_TAG :
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldBidType::RAW_TAG :
     break;

   case FieldNumTickets::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSideValue1::RAW_TAG :
     break;

   case FieldSideValue2::RAW_TAG :
     break;

   case FieldNoBidDescriptors::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidDescriptors::skip( fix+pos, len - pos );
     break;

   case FieldNoBidComponents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::skip( fix+pos, len - pos );
     break;

   case FieldLiquidityIndType::RAW_TAG :
     break;

   case FieldWtAverageLiquidity::RAW_TAG :
     break;

   case FieldExchangeForPhysical::RAW_TAG :
     break;

   case FieldOutMainCntryUIndex::RAW_TAG :
     break;

   case FieldCrossPercent::RAW_TAG :
     break;

   case FieldProgRptReqs::RAW_TAG :
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     break;

   case FieldIncTaxInd::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldNumBidders::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldBidTradeType::RAW_TAG :
     break;

   case FieldBasisPxType::RAW_TAG :
     break;

   case FieldStrikeTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldNoBidComponents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStrikePrice::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldTotNoStrikes::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoStrikes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStrikes::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageXMLnonFIX::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     break;

   case FieldRegistTransType::RAW_TAG :
     break;

   case FieldRegistRefID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldRegistAcctType::RAW_TAG :
     break;

   case FieldTaxAdvantageType::RAW_TAG :
     break;

   case FieldOwnershipType::RAW_TAG :
     break;

   case FieldNoRegistDtls::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRegistDtls::skip( fix+pos, len - pos );
     break;

   case FieldNoDistribInsts::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDistribInsts::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     break;

   case FieldRegistTransType::RAW_TAG :
     break;

   case FieldRegistRefID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldRegistStatus::RAW_TAG :
     break;

   case FieldRegistRejReasonCode::RAW_TAG :
     break;

   case FieldRegistRejReasonText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     break;

   case FieldMassCancelResponse::RAW_TAG :
     break;

   case FieldMassCancelRejectReason::RAW_TAG :
     break;

   case FieldTotalAffectedOrders::RAW_TAG :
     break;

   case FieldNoAffectedOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAffectedOrders::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderCross::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypeRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypes::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityResponseType::RAW_TAG :
     break;

   case FieldTotNoSecurityTypes::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoSecurityTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityTypes::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityListRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderMultileg::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTradeRequestType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoDates::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDates::skip( fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTimeBracket::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldTradeInputSource::RAW_TAG :
     break;

   case FieldTradeInputDevice::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldTradeReportTransType::RAW_TAG :
     break;

   case FieldTradeReportType::RAW_TAG :
     break;

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldExecRestatementReason::RAW_TAG :
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingTradingSessionID::RAW_TAG :
     break;

   case FieldUnderlyingTradingSessionSubID::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldLastParPx::RAW_TAG :
     break;

   case FieldLastSpotRate::RAW_TAG :
     break;

   case FieldLastForwardPoints::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldAvgPxIndicator::RAW_TAG :
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldTradeLegRefID::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldPublishTrdIndicator::RAW_TAG :
     break;

   case FieldShortSaleReason::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMassStatusReqID::RAW_TAG :
     break;

   case FieldMassStatusReqType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequestReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldQuoteRequestRejectReason::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRFQRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     break;

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldQuoteStatus::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmation::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     break;

   case FieldConfirmRefID::RAW_TAG :
     break;

   case FieldConfirmReqID::RAW_TAG :
     break;

   case FieldConfirmTransType::RAW_TAG :
     break;

   case FieldConfirmType::RAW_TAG :
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldConfirmStatus::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldIndividualAllocID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldAllocQty::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldNoCapacities::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCapacities::skip( fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldAllocAccountType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldReportedPx::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldExDate::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldMaturityNetMoney::RAW_TAG :
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldSharedCommission::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosTransType::RAW_TAG :
     break;

   case FieldPosMaintAction::RAW_TAG :
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     break;

   case FieldPosMaintRptRefID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     break;

   case FieldContraryInstructionIndicator::RAW_TAG :
     break;

   case FieldPriorSpreadIndicator::RAW_TAG :
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosTransType::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosMaintAction::RAW_TAG :
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     break;

   case FieldPosMaintStatus::RAW_TAG :
     break;

   case FieldPosMaintResult::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositionsAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldPosReqResult::RAW_TAG :
     break;

   case FieldPosReqStatus::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosReqType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldPosReqResult::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSettlPrice::RAW_TAG :
     break;

   case FieldSettlPriceType::RAW_TAG :
     break;

   case FieldPriorSettlPrice::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldRegistStatus::RAW_TAG :
     break;

   case FieldDeliveryDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTradeRequestType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     break;

   case FieldTradeRequestResult::RAW_TAG :
     break;

   case FieldTradeRequestStatus::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldTradeReportTransType::RAW_TAG :
     break;

   case FieldTradeReportType::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     break;

   case FieldTrdRptStatus::RAW_TAG :
     break;

   case FieldTradeReportRejectReason::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldAllocTransType::RAW_TAG :
     break;

   case FieldAllocReportRefID::RAW_TAG :
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldAllocReportType::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldRefAllocID::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldAllocLinkID::RAW_TAG :
     break;

   case FieldAllocLinkType::RAW_TAG :
     break;

   case FieldBookingRefID::RAW_TAG :
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldReversalIndicator::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldTotNoAllocs::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReportAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldAllocReportType::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAffirmStatus::RAW_TAG :
     break;

   case FieldConfirmRejReason::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructionRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstReqID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldLastUpdateTime::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAssignmentReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAsgnRptID::RAW_TAG :
     break;

   case FieldTotNumAssignmentReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldSettlPrice::RAW_TAG :
     break;

   case FieldSettlPriceType::RAW_TAG :
     break;

   case FieldUnderlyingSettlPrice::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldAssignmentMethod::RAW_TAG :
     break;

   case FieldAssignmentUnit::RAW_TAG :
     break;

   case FieldOpenInterest::RAW_TAG :
     break;

   case FieldExerciseMethod::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralAssignment::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollAsgnID::RAW_TAG :
     break;

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     break;

   case FieldCollAsgnRefID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRespID::RAW_TAG :
     break;

   case FieldCollAsgnID::RAW_TAG :
     break;

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     break;

   case FieldCollAsgnRespType::RAW_TAG :
     break;

   case FieldCollAsgnRejectReason::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRptID::RAW_TAG :
     break;

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldCollStatus::RAW_TAG :
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiry::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::skip( fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkRequestType::RAW_TAG :
     break;

   case FieldNetworkRequestID::RAW_TAG :
     break;

   case FieldNoCompIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW_TAG :
     break;

   case FieldNetworkRequestID::RAW_TAG :
     break;

   case FieldNetworkResponseID::RAW_TAG :
     break;

   case FieldLastNetworkResponseID::RAW_TAG :
     break;

   case FieldNoCompIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     break;

   case FieldUserRequestType::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldPassword::RAW_TAG :
     break;

   case FieldNewPassword::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldUserStatus::RAW_TAG :
     break;

   case FieldUserStatusText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiryAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldCollInquiryStatus::RAW_TAG :
     break;

   case FieldCollInquiryResult::RAW_TAG :
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::skip( fix+pos, len - pos );
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmReqID::RAW_TAG :
     break;

   case FieldConfirmType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldIndividualAllocID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldAllocAccountType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}


// -------------------------------------- reset ----------------------------------------

void MessageHeader::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBeginString.offset = -1;
     fieldBodyLength.offset = -1;
     fieldMsgType.offset = -1;
     fieldSenderCompID.offset = -1;
     fieldTargetCompID.offset = -1;
     fieldOnBehalfOfCompID.offset = -1;
     fieldDeliverToCompID.offset = -1;
     fieldSecureDataLen.offset = -1;
     fieldSecureData.offset = -1;
     fieldMsgSeqNum.offset = -1;
     fieldSenderSubID.offset = -1;
     fieldSenderLocationID.offset = -1;
     fieldTargetSubID.offset = -1;
     fieldTargetLocationID.offset = -1;
     fieldOnBehalfOfSubID.offset = -1;
     fieldOnBehalfOfLocationID.offset = -1;
     fieldDeliverToSubID.offset = -1;
     fieldDeliverToLocationID.offset = -1;
     fieldPossDupFlag.offset = -1;
     fieldPossResend.offset = -1;
     fieldSendingTime.offset = -1;
     fieldOrigSendingTime.offset = -1;
     fieldXmlDataLen.offset = -1;
     fieldXmlData.offset = -1;
     fieldMessageEncoding.offset = -1;
     fieldLastMsgSeqNumProcessed.offset = -1;
     for( auto g = groupsHops.begin(); g != groupsHops.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageHeartbeat::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTestReqID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTestRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTestReqID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageResendRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBeginSeqNo.offset = -1;
     fieldEndSeqNo.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRefSeqNum.offset = -1;
     fieldRefTagID.offset = -1;
     fieldRefMsgType.offset = -1;
     fieldSessionRejectReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSequenceReset::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldGapFillFlag.offset = -1;
     fieldNewSeqNo.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageLogout::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageIOI::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldIOIID.offset = -1;
     fieldIOITransType.offset = -1;
     fieldIOIRefID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldIOIQty.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldIOIQltyInd.offset = -1;
     fieldIOINaturalFlag.offset = -1;
     for( auto g = groupsIOIQualifiers.begin(); g != groupsIOIQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTransactTime.offset = -1;
     fieldURLLink.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAdvertisement::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAdvId.offset = -1;
     fieldAdvTransType.offset = -1;
     fieldAdvRefID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdvSide.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldPrice.offset = -1;
     fieldCurrency.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldURLLink.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageExecutionReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldOrdStatusReqID.offset = -1;
     fieldMassStatusReqID.offset = -1;
     fieldTotNumReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     for( auto g = groupsContraBrokers.begin(); g != groupsContraBrokers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldListID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldExecID.offset = -1;
     fieldExecRefID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldWorkingIndicator.offset = -1;
     fieldOrdRejReason.offset = -1;
     fieldExecRestatementReason.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldPeggedPrice.offset = -1;
     fieldDiscretionPrice.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldTargetStrategyPerformance.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldExecInst.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldLastQty.offset = -1;
     fieldUnderlyingLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldUnderlyingLastPx.offset = -1;
     fieldLastParPx.offset = -1;
     fieldLastSpotRate.offset = -1;
     fieldLastForwardPoints.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTimeBracket.offset = -1;
     fieldLastCapacity.offset = -1;
     fieldLeavesQty.offset = -1;
     fieldCumQty.offset = -1;
     fieldAvgPx.offset = -1;
     fieldDayOrderQty.offset = -1;
     fieldDayCumQty.offset = -1;
     fieldDayAvgPx.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldReportToExch.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldExDate.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldTradedFlatSwitch.offset = -1;
     fieldBasisFeatureDate.offset = -1;
     fieldBasisFeaturePrice.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldSettlCurrAmt.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldSettlCurrFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldHandlInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldMaxShow.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldLastForwardPoints2.offset = -1;
     fieldMultiLegReportingType.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldTransBkdTime.offset = -1;
     fieldExecValuationPoint.offset = -1;
     fieldExecPriceType.offset = -1;
     fieldExecPriceAdjustment.offset = -1;
     fieldPriorityIndicator.offset = -1;
     fieldPriceImprovement.offset = -1;
     fieldLastLiquidityInd.offset = -1;
     for( auto g = groupsContAmts.begin(); g != groupsContAmts.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCopyMsgIndicator.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldWorkingIndicator.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldListID.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldCxlRejResponseTo.offset = -1;
     fieldCxlRejReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageLogon::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldEncryptMethod.offset = -1;
     fieldHeartBtInt.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldResetSeqNumFlag.offset = -1;
     fieldNextExpectedMsgSeqNum.offset = -1;
     fieldMaxMessageSize.offset = -1;
     for( auto g = groupsMsgTypes.begin(); g != groupsMsgTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTestMessageIndicator.offset = -1;
     fieldUsername.offset = -1;
     fieldPassword.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNews::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrigTime.offset = -1;
     fieldUrgency.offset = -1;
     fieldHeadline.offset = -1;
     fieldEncodedHeadlineLen.offset = -1;
     fieldEncodedHeadline.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLinesOfText.begin(); g != groupsLinesOfText.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldURLLink.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageEmail::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldEmailThreadID.offset = -1;
     fieldEmailType.offset = -1;
     fieldOrigTime.offset = -1;
     fieldSubject.offset = -1;
     fieldEncodedSubjectLen.offset = -1;
     fieldEncodedSubject.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsLinesOfText.begin(); g != groupsLinesOfText.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderSingle::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     fieldSide.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldPrice2.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldProgRptReqs.offset = -1;
     fieldBidType.offset = -1;
     fieldProgPeriodInterval.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldListExecInstType.offset = -1;
     fieldListExecInst.offset = -1;
     fieldEncodedListExecInstLen.offset = -1;
     fieldEncodedListExecInst.offset = -1;
     fieldAllowableOneSidednessPct.offset = -1;
     fieldAllowableOneSidednessValue.offset = -1;
     fieldAllowableOneSidednessCurr.offset = -1;
     fieldTotNoOrders.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrigClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldListID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldComplianceID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelReplaceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldListID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldCurrency.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldPrice2.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdStatusReqID.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAllocationInstruction::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocID.offset = -1;
     fieldAllocTransType.offset = -1;
     fieldAllocType.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldRefAllocID.offset = -1;
     fieldAllocCancReplaceReason.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldAllocLinkID.offset = -1;
     fieldAllocLinkType.offset = -1;
     fieldBookingRefID.offset = -1;
     fieldAllocNoOrdersType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPreviouslyReported.offset = -1;
     fieldReversalIndicator.offset = -1;
     fieldMatchType.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldCurrency.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldBookingType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldAutoAcceptIndicator.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldTotalAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldLegalConfirm.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldTotNoAllocs.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageListCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListExecute::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldBidID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldListStatusType.offset = -1;
     fieldNoRpts.offset = -1;
     fieldListOrderStatus.offset = -1;
     fieldRptSeq.offset = -1;
     fieldListStatusText.offset = -1;
     fieldEncodedListStatusTextLen.offset = -1;
     fieldEncodedListStatusText.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTotNoOrders.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationInstructionAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecondaryAllocID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldAllocType.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageDontKnowTrade::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldExecID.offset = -1;
     fieldDKReason.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldRFQReqID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderCapacity.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuote::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommType.offset = -1;
     fieldCommission.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSettlementInstructions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSettlInstMsgID.offset = -1;
     fieldSettlInstReqID.offset = -1;
     fieldSettlInstMode.offset = -1;
     fieldSettlInstReqRejCode.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldClOrdID.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsSettlInst.begin(); g != groupsSettlInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageMarketDataRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldMarketDepth.offset = -1;
     fieldMDUpdateType.offset = -1;
     fieldAggregatedBook.offset = -1;
     fieldOpenCloseSettlFlag.offset = -1;
     fieldScope.offset = -1;
     fieldMDImplicitDelete.offset = -1;
     for( auto g = groupsMDEntryTypes.begin(); g != groupsMDEntryTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueAction.offset = -1;
     fieldApplQueueMax.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataSnapshotFullRefresh::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldFinancialStatus.offset = -1;
     fieldCorporateAction.offset = -1;
     fieldNetChgPrevDay.offset = -1;
     for( auto g = groupsMDEntries.begin(); g != groupsMDEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueDepth.offset = -1;
     fieldApplQueueResolution.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataIncrementalRefresh::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     for( auto g = groupsMDEntries.begin(); g != groupsMDEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueDepth.offset = -1;
     fieldApplQueueResolution.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataRequestReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldMDReqRejReason.offset = -1;
     for( auto g = groupsAltMDSource.begin(); g != groupsAltMDSource.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteCancel::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteCancelType.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     for( auto g = groupsQuoteEntries.begin(); g != groupsQuoteEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageQuoteStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteStatusReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMassQuoteAcknowledgement::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteStatus.offset = -1;
     fieldQuoteRejectReason.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsQuoteSets.begin(); g != groupsQuoteSets.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageSecurityDefinitionRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityRequestType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpirationCycle.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityDefinition::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityResponseType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpirationCycle.offset = -1;
     fieldRoundLot.offset = -1;
     fieldMinTradeVol.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityStatusReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityStatusReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldSecurityTradingStatus.offset = -1;
     fieldFinancialStatus.offset = -1;
     fieldCorporateAction.offset = -1;
     fieldHaltReasonChar.offset = -1;
     fieldInViewOfCommon.offset = -1;
     fieldDueToRelated.offset = -1;
     fieldBuyVolume.offset = -1;
     fieldSellVolume.offset = -1;
     fieldHighPx.offset = -1;
     fieldLowPx.offset = -1;
     fieldLastPx.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAdjustment.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradingSessionStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradSesReqID.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTradSesMethod.offset = -1;
     fieldTradSesMode.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradingSessionStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradSesReqID.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTradSesMethod.offset = -1;
     fieldTradSesMode.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldTradSesStatus.offset = -1;
     fieldTradSesStatusRejReason.offset = -1;
     fieldTradSesStartTime.offset = -1;
     fieldTradSesOpenTime.offset = -1;
     fieldTradSesPreCloseTime.offset = -1;
     fieldTradSesCloseTime.offset = -1;
     fieldTradSesEndTime.offset = -1;
     fieldTotalVolumeTraded.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMassQuote::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteType.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDefBidSize.offset = -1;
     fieldDefOfferSize.offset = -1;
     for( auto g = groupsQuoteSets.begin(); g != groupsQuoteSets.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageBusinessMessageReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRefSeqNum.offset = -1;
     fieldRefMsgType.offset = -1;
     fieldBusinessRejectRefID.offset = -1;
     fieldBusinessRejectReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageBidRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldBidRequestTransType.offset = -1;
     fieldListName.offset = -1;
     fieldTotNoRelatedSym.offset = -1;
     fieldBidType.offset = -1;
     fieldNumTickets.offset = -1;
     fieldCurrency.offset = -1;
     fieldSideValue1.offset = -1;
     fieldSideValue2.offset = -1;
     for( auto g = groupsBidDescriptors.begin(); g != groupsBidDescriptors.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsBidComponents.begin(); g != groupsBidComponents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLiquidityIndType.offset = -1;
     fieldWtAverageLiquidity.offset = -1;
     fieldExchangeForPhysical.offset = -1;
     fieldOutMainCntryUIndex.offset = -1;
     fieldCrossPercent.offset = -1;
     fieldProgRptReqs.offset = -1;
     fieldProgPeriodInterval.offset = -1;
     fieldIncTaxInd.offset = -1;
     fieldForexReq.offset = -1;
     fieldNumBidders.offset = -1;
     fieldTradeDate.offset = -1;
     fieldBidTradeType.offset = -1;
     fieldBasisPxType.offset = -1;
     fieldStrikeTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageBidResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     for( auto g = groupsBidComponents.begin(); g != groupsBidComponents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageListStrikePrice::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldTotNoStrikes.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsStrikes.begin(); g != groupsStrikes.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageXMLnonFIX::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCheckSum.offset = -1;
}

void MessageRegistrationInstructions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRegistID.offset = -1;
     fieldRegistTransType.offset = -1;
     fieldRegistRefID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldRegistAcctType.offset = -1;
     fieldTaxAdvantageType.offset = -1;
     fieldOwnershipType.offset = -1;
     for( auto g = groupsRegistDtls.begin(); g != groupsRegistDtls.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsDistribInsts.begin(); g != groupsDistribInsts.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageRegistrationInstructionsResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRegistID.offset = -1;
     fieldRegistTransType.offset = -1;
     fieldRegistRefID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldRegistStatus.offset = -1;
     fieldRegistRejReasonCode.offset = -1;
     fieldRegistRejReasonText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldMassCancelRequestType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassCancelReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldMassCancelRequestType.offset = -1;
     fieldMassCancelResponse.offset = -1;
     fieldMassCancelRejectReason.offset = -1;
     fieldTotalAffectedOrders.offset = -1;
     for( auto g = groupsAffectedOrders.begin(); g != groupsAffectedOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderCross::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldPrevClosePx.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCrossOrderCancelReplaceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldPrevClosePx.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCrossOrderCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityTypeRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityTypes::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityResponseType.offset = -1;
     fieldTotNoSecurityTypes.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsSecurityTypes.begin(); g != groupsSecurityTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityListRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityListRequestType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityRequestResult.offset = -1;
     fieldTotNoRelatedSym.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageDerivativeSecurityListRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityListRequestType.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecuritySubType.offset = -1;
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageDerivativeSecurityList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityRequestResult.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTotNoRelatedSym.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageNewOrderMultileg::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldMultiLegRptTypeReq.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMultilegOrderCancelReplace::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldMultiLegRptTypeReq.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeRequestID.offset = -1;
     fieldTradeRequestType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeReportID.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldExecID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsDates.begin(); g != groupsDates.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingBusinessDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTimeBracket.offset = -1;
     fieldSide.offset = -1;
     fieldMultiLegReportingType.offset = -1;
     fieldTradeInputSource.offset = -1;
     fieldTradeInputDevice.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeReportID.offset = -1;
     fieldTradeReportTransType.offset = -1;
     fieldTradeReportType.offset = -1;
     fieldTradeRequestID.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldExecType.offset = -1;
     fieldTotNumTradeReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldExecID.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldExecRestatementReason.offset = -1;
     fieldPreviouslyReported.offset = -1;
     fieldPriceType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldQtyType.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingTradingSessionID.offset = -1;
     fieldUnderlyingTradingSessionSubID.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldLastParPx.offset = -1;
     fieldLastSpotRate.offset = -1;
     fieldLastForwardPoints.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeDate.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldAvgPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldAvgPxIndicator.offset = -1;
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMultiLegReportingType.offset = -1;
     fieldTradeLegRefID.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldMatchType.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCopyMsgIndicator.offset = -1;
     fieldPublishTrdIndicator.offset = -1;
     fieldShortSaleReason.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMassStatusReqID.offset = -1;
     fieldMassStatusReqType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteRequestReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldRFQReqID.offset = -1;
     fieldQuoteRequestRejectReason.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRFQRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRFQReqID.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteStatusReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteStatusReqID.offset = -1;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpireTime.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommType.offset = -1;
     fieldCommission.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldQuoteStatus.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteRespID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageConfirmation::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmID.offset = -1;
     fieldConfirmRefID.offset = -1;
     fieldConfirmReqID.offset = -1;
     fieldConfirmTransType.offset = -1;
     fieldConfirmType.offset = -1;
     fieldCopyMsgIndicator.offset = -1;
     fieldLegalConfirm.offset = -1;
     fieldConfirmStatus.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocID.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldIndividualAllocID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTradeDate.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldAllocQty.offset = -1;
     fieldQtyType.offset = -1;
     fieldSide.offset = -1;
     fieldCurrency.offset = -1;
     fieldLastMkt.offset = -1;
     for( auto g = groupsCapacities.begin(); g != groupsCapacities.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldAllocAccountType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldReportedPx.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldProcessCode.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldExDate.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldMaturityNetMoney.offset = -1;
     fieldSettlCurrAmt.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldSettlCurrFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldSharedCommission.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessagePositionMaintenanceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosReqID.offset = -1;
     fieldPosTransType.offset = -1;
     fieldPosMaintAction.offset = -1;
     fieldOrigPosReqRefID.offset = -1;
     fieldPosMaintRptRefID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdjustmentType.offset = -1;
     fieldContraryInstructionIndicator.offset = -1;
     fieldPriorSpreadIndicator.offset = -1;
     fieldThresholdAmount.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessagePositionMaintenanceReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosTransType.offset = -1;
     fieldPosReqID.offset = -1;
     fieldPosMaintAction.offset = -1;
     fieldOrigPosReqRefID.offset = -1;
     fieldPosMaintStatus.offset = -1;
     fieldPosMaintResult.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdjustmentType.offset = -1;
     fieldThresholdAmount.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRequestForPositions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosReqID.offset = -1;
     fieldPosReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRequestForPositionsAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosReqID.offset = -1;
     fieldTotalNumPosReports.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldPosReqResult.offset = -1;
     fieldPosReqStatus.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessagePositionReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosReqID.offset = -1;
     fieldPosReqType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTotalNumPosReports.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldPosReqResult.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldSettlPrice.offset = -1;
     fieldSettlPriceType.offset = -1;
     fieldPriorSettlPrice.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldRegistStatus.offset = -1;
     fieldDeliveryDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportRequestAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeRequestID.offset = -1;
     fieldTradeRequestType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTotNumTradeReports.offset = -1;
     fieldTradeRequestResult.offset = -1;
     fieldTradeRequestStatus.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMultiLegReportingType.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeReportID.offset = -1;
     fieldTradeReportTransType.offset = -1;
     fieldTradeReportType.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldExecType.offset = -1;
     fieldTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportRefID.offset = -1;
     fieldTrdRptStatus.offset = -1;
     fieldTradeReportRejectReason.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldExecID.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingFeeIndicator.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldPreallocMethod.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocReportID.offset = -1;
     fieldAllocID.offset = -1;
     fieldAllocTransType.offset = -1;
     fieldAllocReportRefID.offset = -1;
     fieldAllocCancReplaceReason.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldAllocReportType.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldRefAllocID.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldAllocLinkID.offset = -1;
     fieldAllocLinkType.offset = -1;
     fieldBookingRefID.offset = -1;
     fieldAllocNoOrdersType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPreviouslyReported.offset = -1;
     fieldReversalIndicator.offset = -1;
     fieldMatchType.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldCurrency.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldBookingType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldAutoAcceptIndicator.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldTotalAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldLegalConfirm.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldTotNoAllocs.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationReportAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocReportID.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecondaryAllocID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldAllocReportType.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageConfirmationAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAffirmStatus.offset = -1;
     fieldConfirmRejReason.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSettlementInstructionRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSettlInstReqID.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldSide.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldCFICode.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireTime.offset = -1;
     fieldLastUpdateTime.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAssignmentReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAsgnRptID.offset = -1;
     fieldTotNumAssignmentReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldThresholdAmount.offset = -1;
     fieldSettlPrice.offset = -1;
     fieldSettlPriceType.offset = -1;
     fieldUnderlyingSettlPrice.offset = -1;
     fieldExpireDate.offset = -1;
     fieldAssignmentMethod.offset = -1;
     fieldAssignmentUnit.offset = -1;
     fieldOpenInterest.offset = -1;
     fieldExerciseMethod.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldTransactTime.offset = -1;
     fieldExpireTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralAssignment::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollAsgnID.offset = -1;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldCollAsgnTransType.offset = -1;
     fieldCollAsgnRefID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldExpireTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollRespID.offset = -1;
     fieldCollAsgnID.offset = -1;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldCollAsgnTransType.offset = -1;
     fieldCollAsgnRespType.offset = -1;
     fieldCollAsgnRejectReason.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollRptID.offset = -1;
     fieldCollInquiryID.offset = -1;
     fieldCollStatus.offset = -1;
     fieldTotNumReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralInquiry::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollInquiryID.offset = -1;
     for( auto g = groupsCollInquiryQualifier.begin(); g != groupsCollInquiryQualifier.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSubscriptionRequestType.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNetworkCounterpartySystemStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldNetworkRequestType.offset = -1;
     fieldNetworkRequestID.offset = -1;
     for( auto g = groupsCompIDs.begin(); g != groupsCompIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageNetworkCounterpartySystemStatusResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldNetworkStatusResponseType.offset = -1;
     fieldNetworkRequestID.offset = -1;
     fieldNetworkResponseID.offset = -1;
     fieldLastNetworkResponseID.offset = -1;
     for( auto g = groupsCompIDs.begin(); g != groupsCompIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageUserRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldUserRequestID.offset = -1;
     fieldUserRequestType.offset = -1;
     fieldUsername.offset = -1;
     fieldPassword.offset = -1;
     fieldNewPassword.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageUserResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldUserRequestID.offset = -1;
     fieldUsername.offset = -1;
     fieldUserStatus.offset = -1;
     fieldUserStatusText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralInquiryAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollInquiryID.offset = -1;
     fieldCollInquiryStatus.offset = -1;
     fieldCollInquiryResult.offset = -1;
     for( auto g = groupsCollInquiryQualifier.begin(); g != groupsCollInquiryQualifier.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTotNumReports.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageConfirmationRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmReqID.offset = -1;
     fieldConfirmType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocID.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldIndividualAllocID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldAllocAccountType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}
// end of MessageScanners.cxx


} // namespace fix44
