// Generated by https://github.com/sashamakarenko/fixpp
// Copyright (c) 2021 sashamakarenko
// https://github.com/sashamakarenko/fixpp/blob/main/LICENSE

#include <vector>
#include <set>

#include <fix44/Messages.h>

namespace fix44
{

// start of Messages.cxx

// Generated

// -------------------------- getMessageName getMessageType -------------------------

const std::string EMPTY_STRING;

const char * MessageHeader::getMessageName(){
     return "Header";
}

const std::string & MessageHeader::getMessageType(){
     return EMPTY_STRING;
}


const char * MessageHeartbeat::getMessageName(){
     return "Heartbeat";
}

const std::string & MessageHeartbeat::getMessageType(){
     return MsgTypeEnums::HEARTBEAT.str;
}


const char * MessageTestRequest::getMessageName(){
     return "TestRequest";
}

const std::string & MessageTestRequest::getMessageType(){
     return MsgTypeEnums::TEST_REQUEST.str;
}


const char * MessageResendRequest::getMessageName(){
     return "ResendRequest";
}

const std::string & MessageResendRequest::getMessageType(){
     return MsgTypeEnums::RESEND_REQUEST.str;
}


const char * MessageReject::getMessageName(){
     return "Reject";
}

const std::string & MessageReject::getMessageType(){
     return MsgTypeEnums::REJECT.str;
}


const char * MessageSequenceReset::getMessageName(){
     return "SequenceReset";
}

const std::string & MessageSequenceReset::getMessageType(){
     return MsgTypeEnums::SEQUENCE_RESET.str;
}


const char * MessageLogout::getMessageName(){
     return "Logout";
}

const std::string & MessageLogout::getMessageType(){
     return MsgTypeEnums::LOGOUT.str;
}


const char * MessageIOI::getMessageName(){
     return "IOI";
}

const std::string & MessageIOI::getMessageType(){
     return MsgTypeEnums::INDICATION_OF_INTEREST.str;
}


const char * MessageAdvertisement::getMessageName(){
     return "Advertisement";
}

const std::string & MessageAdvertisement::getMessageType(){
     return MsgTypeEnums::ADVERTISEMENT.str;
}


const char * MessageExecutionReport::getMessageName(){
     return "ExecutionReport";
}

const std::string & MessageExecutionReport::getMessageType(){
     return MsgTypeEnums::EXECUTION_REPORT.str;
}


const char * MessageOrderCancelReject::getMessageName(){
     return "OrderCancelReject";
}

const std::string & MessageOrderCancelReject::getMessageType(){
     return MsgTypeEnums::ORDER_CANCEL_REJECT.str;
}


const char * MessageLogon::getMessageName(){
     return "Logon";
}

const std::string & MessageLogon::getMessageType(){
     return MsgTypeEnums::LOGON.str;
}


const char * MessageNews::getMessageName(){
     return "News";
}

const std::string & MessageNews::getMessageType(){
     return MsgTypeEnums::NEWS.str;
}


const char * MessageEmail::getMessageName(){
     return "Email";
}

const std::string & MessageEmail::getMessageType(){
     return MsgTypeEnums::EMAIL.str;
}


const char * MessageNewOrderSingle::getMessageName(){
     return "NewOrderSingle";
}

const std::string & MessageNewOrderSingle::getMessageType(){
     return MsgTypeEnums::ORDER_SINGLE.str;
}


const char * MessageNewOrderList::getMessageName(){
     return "NewOrderList";
}

const std::string & MessageNewOrderList::getMessageType(){
     return MsgTypeEnums::ORDER_LIST.str;
}


const char * MessageOrderCancelRequest::getMessageName(){
     return "OrderCancelRequest";
}

const std::string & MessageOrderCancelRequest::getMessageType(){
     return MsgTypeEnums::ORDER_CANCEL_REQUEST.str;
}


const char * MessageOrderCancelReplaceRequest::getMessageName(){
     return "OrderCancelReplaceRequest";
}

const std::string & MessageOrderCancelReplaceRequest::getMessageType(){
     return MsgTypeEnums::ORDER_CANCEL_REPLACE_REQUEST.str;
}


const char * MessageOrderStatusRequest::getMessageName(){
     return "OrderStatusRequest";
}

const std::string & MessageOrderStatusRequest::getMessageType(){
     return MsgTypeEnums::ORDER_STATUS_REQUEST.str;
}


const char * MessageAllocationInstruction::getMessageName(){
     return "AllocationInstruction";
}

const std::string & MessageAllocationInstruction::getMessageType(){
     return MsgTypeEnums::ALLOCATION_INSTRUCTION.str;
}


const char * MessageListCancelRequest::getMessageName(){
     return "ListCancelRequest";
}

const std::string & MessageListCancelRequest::getMessageType(){
     return MsgTypeEnums::LIST_CANCEL_REQUEST.str;
}


const char * MessageListExecute::getMessageName(){
     return "ListExecute";
}

const std::string & MessageListExecute::getMessageType(){
     return MsgTypeEnums::LIST_EXECUTE.str;
}


const char * MessageListStatusRequest::getMessageName(){
     return "ListStatusRequest";
}

const std::string & MessageListStatusRequest::getMessageType(){
     return MsgTypeEnums::LIST_STATUS_REQUEST.str;
}


const char * MessageListStatus::getMessageName(){
     return "ListStatus";
}

const std::string & MessageListStatus::getMessageType(){
     return MsgTypeEnums::LIST_STATUS.str;
}


const char * MessageAllocationInstructionAck::getMessageName(){
     return "AllocationInstructionAck";
}

const std::string & MessageAllocationInstructionAck::getMessageType(){
     return MsgTypeEnums::ALLOCATION_INSTRUCTION_ACK.str;
}


const char * MessageDontKnowTrade::getMessageName(){
     return "DontKnowTrade";
}

const std::string & MessageDontKnowTrade::getMessageType(){
     return MsgTypeEnums::DONT_KNOW_TRADE.str;
}


const char * MessageQuoteRequest::getMessageName(){
     return "QuoteRequest";
}

const std::string & MessageQuoteRequest::getMessageType(){
     return MsgTypeEnums::QUOTE_REQUEST.str;
}


const char * MessageQuote::getMessageName(){
     return "Quote";
}

const std::string & MessageQuote::getMessageType(){
     return MsgTypeEnums::QUOTE.str;
}


const char * MessageSettlementInstructions::getMessageName(){
     return "SettlementInstructions";
}

const std::string & MessageSettlementInstructions::getMessageType(){
     return MsgTypeEnums::SETTLEMENT_INSTRUCTIONS.str;
}


const char * MessageMarketDataRequest::getMessageName(){
     return "MarketDataRequest";
}

const std::string & MessageMarketDataRequest::getMessageType(){
     return MsgTypeEnums::MARKET_DATA_REQUEST.str;
}


const char * MessageMarketDataSnapshotFullRefresh::getMessageName(){
     return "MarketDataSnapshotFullRefresh";
}

const std::string & MessageMarketDataSnapshotFullRefresh::getMessageType(){
     return MsgTypeEnums::MARKET_DATA_SNAPSHOT_FULL_REFRESH.str;
}


const char * MessageMarketDataIncrementalRefresh::getMessageName(){
     return "MarketDataIncrementalRefresh";
}

const std::string & MessageMarketDataIncrementalRefresh::getMessageType(){
     return MsgTypeEnums::MARKET_DATA_INCREMENTAL_REFRESH.str;
}


const char * MessageMarketDataRequestReject::getMessageName(){
     return "MarketDataRequestReject";
}

const std::string & MessageMarketDataRequestReject::getMessageType(){
     return MsgTypeEnums::MARKET_DATA_REQUEST_REJECT.str;
}


const char * MessageQuoteCancel::getMessageName(){
     return "QuoteCancel";
}

const std::string & MessageQuoteCancel::getMessageType(){
     return MsgTypeEnums::QUOTE_CANCEL.str;
}


const char * MessageQuoteStatusRequest::getMessageName(){
     return "QuoteStatusRequest";
}

const std::string & MessageQuoteStatusRequest::getMessageType(){
     return MsgTypeEnums::QUOTE_STATUS_REQUEST.str;
}


const char * MessageMassQuoteAcknowledgement::getMessageName(){
     return "MassQuoteAcknowledgement";
}

const std::string & MessageMassQuoteAcknowledgement::getMessageType(){
     return MsgTypeEnums::MASS_QUOTE_ACKNOWLEDGEMENT.str;
}


const char * MessageSecurityDefinitionRequest::getMessageName(){
     return "SecurityDefinitionRequest";
}

const std::string & MessageSecurityDefinitionRequest::getMessageType(){
     return MsgTypeEnums::SECURITY_DEFINITION_REQUEST.str;
}


const char * MessageSecurityDefinition::getMessageName(){
     return "SecurityDefinition";
}

const std::string & MessageSecurityDefinition::getMessageType(){
     return MsgTypeEnums::SECURITY_DEFINITION.str;
}


const char * MessageSecurityStatusRequest::getMessageName(){
     return "SecurityStatusRequest";
}

const std::string & MessageSecurityStatusRequest::getMessageType(){
     return MsgTypeEnums::SECURITY_STATUS_REQUEST.str;
}


const char * MessageSecurityStatus::getMessageName(){
     return "SecurityStatus";
}

const std::string & MessageSecurityStatus::getMessageType(){
     return MsgTypeEnums::SECURITY_STATUS.str;
}


const char * MessageTradingSessionStatusRequest::getMessageName(){
     return "TradingSessionStatusRequest";
}

const std::string & MessageTradingSessionStatusRequest::getMessageType(){
     return MsgTypeEnums::TRADING_SESSION_STATUS_REQUEST.str;
}


const char * MessageTradingSessionStatus::getMessageName(){
     return "TradingSessionStatus";
}

const std::string & MessageTradingSessionStatus::getMessageType(){
     return MsgTypeEnums::TRADING_SESSION_STATUS.str;
}


const char * MessageMassQuote::getMessageName(){
     return "MassQuote";
}

const std::string & MessageMassQuote::getMessageType(){
     return MsgTypeEnums::MASS_QUOTE.str;
}


const char * MessageBusinessMessageReject::getMessageName(){
     return "BusinessMessageReject";
}

const std::string & MessageBusinessMessageReject::getMessageType(){
     return MsgTypeEnums::BUSINESS_MESSAGE_REJECT.str;
}


const char * MessageBidRequest::getMessageName(){
     return "BidRequest";
}

const std::string & MessageBidRequest::getMessageType(){
     return MsgTypeEnums::BID_REQUEST.str;
}


const char * MessageBidResponse::getMessageName(){
     return "BidResponse";
}

const std::string & MessageBidResponse::getMessageType(){
     return MsgTypeEnums::BID_RESPONSE.str;
}


const char * MessageListStrikePrice::getMessageName(){
     return "ListStrikePrice";
}

const std::string & MessageListStrikePrice::getMessageType(){
     return MsgTypeEnums::LIST_STRIKE_PRICE.str;
}


const char * MessageXMLnonFIX::getMessageName(){
     return "XMLnonFIX";
}

const std::string & MessageXMLnonFIX::getMessageType(){
     return MsgTypeEnums::XML_MESSAGE.str;
}


const char * MessageRegistrationInstructions::getMessageName(){
     return "RegistrationInstructions";
}

const std::string & MessageRegistrationInstructions::getMessageType(){
     return MsgTypeEnums::REGISTRATION_INSTRUCTIONS.str;
}


const char * MessageRegistrationInstructionsResponse::getMessageName(){
     return "RegistrationInstructionsResponse";
}

const std::string & MessageRegistrationInstructionsResponse::getMessageType(){
     return MsgTypeEnums::REGISTRATION_INSTRUCTIONS_RESPONSE.str;
}


const char * MessageOrderMassCancelRequest::getMessageName(){
     return "OrderMassCancelRequest";
}

const std::string & MessageOrderMassCancelRequest::getMessageType(){
     return MsgTypeEnums::ORDER_MASS_CANCEL_REQUEST.str;
}


const char * MessageOrderMassCancelReport::getMessageName(){
     return "OrderMassCancelReport";
}

const std::string & MessageOrderMassCancelReport::getMessageType(){
     return MsgTypeEnums::ORDER_MASS_CANCEL_REPORT.str;
}


const char * MessageNewOrderCross::getMessageName(){
     return "NewOrderCross";
}

const std::string & MessageNewOrderCross::getMessageType(){
     return MsgTypeEnums::NEW_ORDER_s.str;
}


const char * MessageCrossOrderCancelReplaceRequest::getMessageName(){
     return "CrossOrderCancelReplaceRequest";
}

const std::string & MessageCrossOrderCancelReplaceRequest::getMessageType(){
     return MsgTypeEnums::CROSS_ORDER_CANCEL_REPLACE_REQUEST.str;
}


const char * MessageCrossOrderCancelRequest::getMessageName(){
     return "CrossOrderCancelRequest";
}

const std::string & MessageCrossOrderCancelRequest::getMessageType(){
     return MsgTypeEnums::CROSS_ORDER_CANCEL_REQUEST.str;
}


const char * MessageSecurityTypeRequest::getMessageName(){
     return "SecurityTypeRequest";
}

const std::string & MessageSecurityTypeRequest::getMessageType(){
     return MsgTypeEnums::SECURITY_TYPE_REQUEST.str;
}


const char * MessageSecurityTypes::getMessageName(){
     return "SecurityTypes";
}

const std::string & MessageSecurityTypes::getMessageType(){
     return MsgTypeEnums::SECURITY_TYPES.str;
}


const char * MessageSecurityListRequest::getMessageName(){
     return "SecurityListRequest";
}

const std::string & MessageSecurityListRequest::getMessageType(){
     return MsgTypeEnums::SECURITY_LIST_REQUEST.str;
}


const char * MessageSecurityList::getMessageName(){
     return "SecurityList";
}

const std::string & MessageSecurityList::getMessageType(){
     return MsgTypeEnums::SECURITY_LIST.str;
}


const char * MessageDerivativeSecurityListRequest::getMessageName(){
     return "DerivativeSecurityListRequest";
}

const std::string & MessageDerivativeSecurityListRequest::getMessageType(){
     return MsgTypeEnums::DERIVATIVE_SECURITY_LIST_REQUEST.str;
}


const char * MessageDerivativeSecurityList::getMessageName(){
     return "DerivativeSecurityList";
}

const std::string & MessageDerivativeSecurityList::getMessageType(){
     return MsgTypeEnums::DERIVATIVE_SECURITY_LIST.str;
}


const char * MessageNewOrderMultileg::getMessageName(){
     return "NewOrderMultileg";
}

const std::string & MessageNewOrderMultileg::getMessageType(){
     return MsgTypeEnums::NEW_ORDER_AB.str;
}


const char * MessageMultilegOrderCancelReplace::getMessageName(){
     return "MultilegOrderCancelReplace";
}

const std::string & MessageMultilegOrderCancelReplace::getMessageType(){
     return MsgTypeEnums::MULTILEG_ORDER_CANCEL_REPLACE.str;
}


const char * MessageTradeCaptureReportRequest::getMessageName(){
     return "TradeCaptureReportRequest";
}

const std::string & MessageTradeCaptureReportRequest::getMessageType(){
     return MsgTypeEnums::TRADE_CAPTURE_REPORT_REQUEST.str;
}


const char * MessageTradeCaptureReport::getMessageName(){
     return "TradeCaptureReport";
}

const std::string & MessageTradeCaptureReport::getMessageType(){
     return MsgTypeEnums::TRADE_CAPTURE_REPORT.str;
}


const char * MessageOrderMassStatusRequest::getMessageName(){
     return "OrderMassStatusRequest";
}

const std::string & MessageOrderMassStatusRequest::getMessageType(){
     return MsgTypeEnums::ORDER_MASS_STATUS_REQUEST.str;
}


const char * MessageQuoteRequestReject::getMessageName(){
     return "QuoteRequestReject";
}

const std::string & MessageQuoteRequestReject::getMessageType(){
     return MsgTypeEnums::QUOTE_REQUEST_REJECT.str;
}


const char * MessageRFQRequest::getMessageName(){
     return "RFQRequest";
}

const std::string & MessageRFQRequest::getMessageType(){
     return MsgTypeEnums::RFQ_REQUEST.str;
}


const char * MessageQuoteStatusReport::getMessageName(){
     return "QuoteStatusReport";
}

const std::string & MessageQuoteStatusReport::getMessageType(){
     return MsgTypeEnums::QUOTE_STATUS_REPORT.str;
}


const char * MessageQuoteResponse::getMessageName(){
     return "QuoteResponse";
}

const std::string & MessageQuoteResponse::getMessageType(){
     return MsgTypeEnums::QUOTE_RESPONSE.str;
}


const char * MessageConfirmation::getMessageName(){
     return "Confirmation";
}

const std::string & MessageConfirmation::getMessageType(){
     return MsgTypeEnums::CONFIRMATION.str;
}


const char * MessagePositionMaintenanceRequest::getMessageName(){
     return "PositionMaintenanceRequest";
}

const std::string & MessagePositionMaintenanceRequest::getMessageType(){
     return MsgTypeEnums::POSITION_MAINTENANCE_REQUEST.str;
}


const char * MessagePositionMaintenanceReport::getMessageName(){
     return "PositionMaintenanceReport";
}

const std::string & MessagePositionMaintenanceReport::getMessageType(){
     return MsgTypeEnums::POSITION_MAINTENANCE_REPORT.str;
}


const char * MessageRequestForPositions::getMessageName(){
     return "RequestForPositions";
}

const std::string & MessageRequestForPositions::getMessageType(){
     return MsgTypeEnums::REQUEST_FOR_POSITIONS.str;
}


const char * MessageRequestForPositionsAck::getMessageName(){
     return "RequestForPositionsAck";
}

const std::string & MessageRequestForPositionsAck::getMessageType(){
     return MsgTypeEnums::REQUEST_FOR_POSITIONS_ACK.str;
}


const char * MessagePositionReport::getMessageName(){
     return "PositionReport";
}

const std::string & MessagePositionReport::getMessageType(){
     return MsgTypeEnums::POSITION_REPORT.str;
}


const char * MessageTradeCaptureReportRequestAck::getMessageName(){
     return "TradeCaptureReportRequestAck";
}

const std::string & MessageTradeCaptureReportRequestAck::getMessageType(){
     return MsgTypeEnums::TRADE_CAPTURE_REPORT_REQUEST_ACK.str;
}


const char * MessageTradeCaptureReportAck::getMessageName(){
     return "TradeCaptureReportAck";
}

const std::string & MessageTradeCaptureReportAck::getMessageType(){
     return MsgTypeEnums::TRADE_CAPTURE_REPORT_ACK.str;
}


const char * MessageAllocationReport::getMessageName(){
     return "AllocationReport";
}

const std::string & MessageAllocationReport::getMessageType(){
     return MsgTypeEnums::ALLOCATION_REPORT.str;
}


const char * MessageAllocationReportAck::getMessageName(){
     return "AllocationReportAck";
}

const std::string & MessageAllocationReportAck::getMessageType(){
     return MsgTypeEnums::ALLOCATION_REPORT_ACK.str;
}


const char * MessageConfirmationAck::getMessageName(){
     return "ConfirmationAck";
}

const std::string & MessageConfirmationAck::getMessageType(){
     return MsgTypeEnums::CONFIRMATION_ACK.str;
}


const char * MessageSettlementInstructionRequest::getMessageName(){
     return "SettlementInstructionRequest";
}

const std::string & MessageSettlementInstructionRequest::getMessageType(){
     return MsgTypeEnums::SETTLEMENT_INSTRUCTION_REQUEST.str;
}


const char * MessageAssignmentReport::getMessageName(){
     return "AssignmentReport";
}

const std::string & MessageAssignmentReport::getMessageType(){
     return MsgTypeEnums::ASSIGNMENT_REPORT.str;
}


const char * MessageCollateralRequest::getMessageName(){
     return "CollateralRequest";
}

const std::string & MessageCollateralRequest::getMessageType(){
     return MsgTypeEnums::COLLATERAL_REQUEST.str;
}


const char * MessageCollateralAssignment::getMessageName(){
     return "CollateralAssignment";
}

const std::string & MessageCollateralAssignment::getMessageType(){
     return MsgTypeEnums::COLLATERAL_ASSIGNMENT.str;
}


const char * MessageCollateralResponse::getMessageName(){
     return "CollateralResponse";
}

const std::string & MessageCollateralResponse::getMessageType(){
     return MsgTypeEnums::COLLATERAL_RESPONSE.str;
}


const char * MessageCollateralReport::getMessageName(){
     return "CollateralReport";
}

const std::string & MessageCollateralReport::getMessageType(){
     return MsgTypeEnums::COLLATERAL_REPORT.str;
}


const char * MessageCollateralInquiry::getMessageName(){
     return "CollateralInquiry";
}

const std::string & MessageCollateralInquiry::getMessageType(){
     return MsgTypeEnums::COLLATERAL_INQUIRY.str;
}


const char * MessageNetworkCounterpartySystemStatusRequest::getMessageName(){
     return "NetworkCounterpartySystemStatusRequest";
}

const std::string & MessageNetworkCounterpartySystemStatusRequest::getMessageType(){
     return MsgTypeEnums::NETWORK_BC.str;
}


const char * MessageNetworkCounterpartySystemStatusResponse::getMessageName(){
     return "NetworkCounterpartySystemStatusResponse";
}

const std::string & MessageNetworkCounterpartySystemStatusResponse::getMessageType(){
     return MsgTypeEnums::NETWORK_BD.str;
}


const char * MessageUserRequest::getMessageName(){
     return "UserRequest";
}

const std::string & MessageUserRequest::getMessageType(){
     return MsgTypeEnums::USER_REQUEST.str;
}


const char * MessageUserResponse::getMessageName(){
     return "UserResponse";
}

const std::string & MessageUserResponse::getMessageType(){
     return MsgTypeEnums::USER_RESPONSE.str;
}


const char * MessageCollateralInquiryAck::getMessageName(){
     return "CollateralInquiryAck";
}

const std::string & MessageCollateralInquiryAck::getMessageType(){
     return MsgTypeEnums::COLLATERAL_INQUIRY_ACK.str;
}


const char * MessageConfirmationRequest::getMessageName(){
     return "ConfirmationRequest";
}

const std::string & MessageConfirmationRequest::getMessageType(){
     return MsgTypeEnums::CONFIRMATION_REQUEST.str;
}


// -------------------------------------- scan ----------------------------------------

offset_t MessageHeader::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginString) 
     fieldBeginString.offset = pos;
     break;

   case FieldBodyLength::RAW_TAG :
     FIXPP_PRINT_FIELD(BodyLength) 
     fieldBodyLength.offset = pos;
     break;

   case FieldMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgType) 
     fieldMsgType.offset = pos;
     break;

   case FieldSenderCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderCompID) 
     fieldSenderCompID.offset = pos;
     break;

   case FieldTargetCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetCompID) 
     fieldTargetCompID.offset = pos;
     break;

   case FieldOnBehalfOfCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfCompID) 
     fieldOnBehalfOfCompID.offset = pos;
     break;

   case FieldDeliverToCompID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToCompID) 
     fieldDeliverToCompID.offset = pos;
     break;

   case FieldSecureDataLen::RAW_TAG :
     FIXPP_PRINT_FIELD(SecureDataLen) 
     fieldSecureDataLen.offset = pos;
     break;

   case FieldSecureData::RAW_TAG :
     FIXPP_PRINT_FIELD(SecureData) 
     fieldSecureData.offset = pos;
     break;

   case FieldMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(MsgSeqNum) 
     fieldMsgSeqNum.offset = pos;
     break;

   case FieldSenderSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderSubID) 
     fieldSenderSubID.offset = pos;
     break;

   case FieldSenderLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(SenderLocationID) 
     fieldSenderLocationID.offset = pos;
     break;

   case FieldTargetSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetSubID) 
     fieldTargetSubID.offset = pos;
     break;

   case FieldTargetLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetLocationID) 
     fieldTargetLocationID.offset = pos;
     break;

   case FieldOnBehalfOfSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfSubID) 
     fieldOnBehalfOfSubID.offset = pos;
     break;

   case FieldOnBehalfOfLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(OnBehalfOfLocationID) 
     fieldOnBehalfOfLocationID.offset = pos;
     break;

   case FieldDeliverToSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToSubID) 
     fieldDeliverToSubID.offset = pos;
     break;

   case FieldDeliverToLocationID::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliverToLocationID) 
     fieldDeliverToLocationID.offset = pos;
     break;

   case FieldPossDupFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(PossDupFlag) 
     fieldPossDupFlag.offset = pos;
     break;

   case FieldPossResend::RAW_TAG :
     FIXPP_PRINT_FIELD(PossResend) 
     fieldPossResend.offset = pos;
     break;

   case FieldSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(SendingTime) 
     fieldSendingTime.offset = pos;
     break;

   case FieldOrigSendingTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigSendingTime) 
     fieldOrigSendingTime.offset = pos;
     break;

   case FieldXmlDataLen::RAW_TAG :
     FIXPP_PRINT_FIELD(XmlDataLen) 
     fieldXmlDataLen.offset = pos;
     break;

   case FieldXmlData::RAW_TAG :
     FIXPP_PRINT_FIELD(XmlData) 
     fieldXmlData.offset = pos;
     break;

   case FieldMessageEncoding::RAW_TAG :
     FIXPP_PRINT_FIELD(MessageEncoding) 
     fieldMessageEncoding.offset = pos;
     break;

   case FieldLastMsgSeqNumProcessed::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMsgSeqNumProcessed) 
     fieldLastMsgSeqNumProcessed.offset = pos;
     break;

   case FieldNoHops::RAW_TAG :
     FIXPP_PRINT_FIELD(NoHops) 
     fieldNoHops.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupHops::scan( groupsHops, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageHeartbeat::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TestReqID) 
     fieldTestReqID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTestRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TestReqID) 
     fieldTestReqID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageResendRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(BeginSeqNo) 
     fieldBeginSeqNo.offset = pos;
     break;

   case FieldEndSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(EndSeqNo) 
     fieldEndSeqNo.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     fieldRefSeqNum.offset = pos;
     break;

   case FieldRefTagID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefTagID) 
     fieldRefTagID.offset = pos;
     break;

   case FieldRefMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(RefMsgType) 
     fieldRefMsgType.offset = pos;
     break;

   case FieldSessionRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(SessionRejectReason) 
     fieldSessionRejectReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSequenceReset::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldGapFillFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(GapFillFlag) 
     fieldGapFillFlag.offset = pos;
     break;

   case FieldNewSeqNo::RAW_TAG :
     FIXPP_PRINT_FIELD(NewSeqNo) 
     fieldNewSeqNo.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageLogout::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageIOI::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldIOITransType::RAW_TAG :
     FIXPP_PRINT_FIELD(IOITransType) 
     fieldIOITransType.offset = pos;
     break;

   case FieldIOIRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIRefID) 
     fieldIOIRefID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldIOIQty::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIQty) 
     fieldIOIQty.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldIOIQltyInd::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIQltyInd) 
     fieldIOIQltyInd.offset = pos;
     break;

   case FieldIOINaturalFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(IOINaturalFlag) 
     fieldIOINaturalFlag.offset = pos;
     break;

   case FieldNoIOIQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoIOIQualifiers) 
     fieldNoIOIQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupIOIQualifiers::scan( groupsIOIQualifiers, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAdvertisement::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAdvId::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvId) 
     fieldAdvId.offset = pos;
     break;

   case FieldAdvTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvTransType) 
     fieldAdvTransType.offset = pos;
     break;

   case FieldAdvRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvRefID) 
     fieldAdvRefID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldAdvSide::RAW_TAG :
     FIXPP_PRINT_FIELD(AdvSide) 
     fieldAdvSide.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageExecutionReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     fieldOrdStatusReqID.offset = pos;
     break;

   case FieldMassStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     fieldMassStatusReqID.offset = pos;
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldNoContraBrokers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoContraBrokers) 
     fieldNoContraBrokers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContraBrokers::scan( groupsContraBrokers, fix+pos, len - pos );
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRefID) 
     fieldExecRefID.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldWorkingIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     fieldWorkingIndicator.offset = pos;
     break;

   case FieldOrdRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdRejReason) 
     fieldOrdRejReason.offset = pos;
     break;

   case FieldExecRestatementReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     fieldExecRestatementReason.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldPeggedPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(PeggedPrice) 
     fieldPeggedPrice.offset = pos;
     break;

   case FieldDiscretionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionPrice) 
     fieldDiscretionPrice.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldTargetStrategyPerformance::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyPerformance) 
     fieldTargetStrategyPerformance.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldUnderlyingLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLastQty) 
     fieldUnderlyingLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldUnderlyingLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLastPx) 
     fieldUnderlyingLastPx.offset = pos;
     break;

   case FieldLastParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastParPx) 
     fieldLastParPx.offset = pos;
     break;

   case FieldLastSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     fieldLastSpotRate.offset = pos;
     break;

   case FieldLastForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     fieldLastForwardPoints.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTimeBracket::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeBracket) 
     fieldTimeBracket.offset = pos;
     break;

   case FieldLastCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(LastCapacity) 
     fieldLastCapacity.offset = pos;
     break;

   case FieldLeavesQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LeavesQty) 
     fieldLeavesQty.offset = pos;
     break;

   case FieldCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CumQty) 
     fieldCumQty.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldDayOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(DayOrderQty) 
     fieldDayOrderQty.offset = pos;
     break;

   case FieldDayCumQty::RAW_TAG :
     FIXPP_PRINT_FIELD(DayCumQty) 
     fieldDayCumQty.offset = pos;
     break;

   case FieldDayAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(DayAvgPx) 
     fieldDayAvgPx.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldReportToExch::RAW_TAG :
     FIXPP_PRINT_FIELD(ReportToExch) 
     fieldReportToExch.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldExDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDate) 
     fieldExDate.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldTradedFlatSwitch::RAW_TAG :
     FIXPP_PRINT_FIELD(TradedFlatSwitch) 
     fieldTradedFlatSwitch.offset = pos;
     break;

   case FieldBasisFeatureDate::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisFeatureDate) 
     fieldBasisFeatureDate.offset = pos;
     break;

   case FieldBasisFeaturePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisFeaturePrice) 
     fieldBasisFeaturePrice.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     fieldSettlCurrAmt.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     fieldSettlCurrFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldLastForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints2) 
     fieldLastForwardPoints2.offset = pos;
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldTransBkdTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransBkdTime) 
     fieldTransBkdTime.offset = pos;
     break;

   case FieldExecValuationPoint::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecValuationPoint) 
     fieldExecValuationPoint.offset = pos;
     break;

   case FieldExecPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecPriceType) 
     fieldExecPriceType.offset = pos;
     break;

   case FieldExecPriceAdjustment::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecPriceAdjustment) 
     fieldExecPriceAdjustment.offset = pos;
     break;

   case FieldPriorityIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorityIndicator) 
     fieldPriorityIndicator.offset = pos;
     break;

   case FieldPriceImprovement::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceImprovement) 
     fieldPriceImprovement.offset = pos;
     break;

   case FieldLastLiquidityInd::RAW_TAG :
     FIXPP_PRINT_FIELD(LastLiquidityInd) 
     fieldLastLiquidityInd.offset = pos;
     break;

   case FieldNoContAmts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoContAmts) 
     fieldNoContAmts.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContAmts::scan( groupsContAmts, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldWorkingIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     fieldWorkingIndicator.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCxlRejResponseTo::RAW_TAG :
     FIXPP_PRINT_FIELD(CxlRejResponseTo) 
     fieldCxlRejResponseTo.offset = pos;
     break;

   case FieldCxlRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CxlRejReason) 
     fieldCxlRejReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageLogon::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEncryptMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(EncryptMethod) 
     fieldEncryptMethod.offset = pos;
     break;

   case FieldHeartBtInt::RAW_TAG :
     FIXPP_PRINT_FIELD(HeartBtInt) 
     fieldHeartBtInt.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldResetSeqNumFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(ResetSeqNumFlag) 
     fieldResetSeqNumFlag.offset = pos;
     break;

   case FieldNextExpectedMsgSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(NextExpectedMsgSeqNum) 
     fieldNextExpectedMsgSeqNum.offset = pos;
     break;

   case FieldMaxMessageSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxMessageSize) 
     fieldMaxMessageSize.offset = pos;
     break;

   case FieldNoMsgTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMsgTypes) 
     fieldNoMsgTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMsgTypes::scan( groupsMsgTypes, fix+pos, len - pos );
     break;

   case FieldTestMessageIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(TestMessageIndicator) 
     fieldTestMessageIndicator.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(Password) 
     fieldPassword.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNews::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigTime) 
     fieldOrigTime.offset = pos;
     break;

   case FieldUrgency::RAW_TAG :
     FIXPP_PRINT_FIELD(Urgency) 
     fieldUrgency.offset = pos;
     break;

   case FieldHeadline::RAW_TAG :
     FIXPP_PRINT_FIELD(Headline) 
     fieldHeadline.offset = pos;
     break;

   case FieldEncodedHeadlineLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedHeadlineLen) 
     fieldEncodedHeadlineLen.offset = pos;
     break;

   case FieldEncodedHeadline::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedHeadline) 
     fieldEncodedHeadline.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLinesOfText::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     fieldNoLinesOfText.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::scan( groupsLinesOfText, fix+pos, len - pos );
     break;

   case FieldURLLink::RAW_TAG :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageEmail::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEmailThreadID::RAW_TAG :
     FIXPP_PRINT_FIELD(EmailThreadID) 
     fieldEmailThreadID.offset = pos;
     break;

   case FieldEmailType::RAW_TAG :
     FIXPP_PRINT_FIELD(EmailType) 
     fieldEmailType.offset = pos;
     break;

   case FieldOrigTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigTime) 
     fieldOrigTime.offset = pos;
     break;

   case FieldSubject::RAW_TAG :
     FIXPP_PRINT_FIELD(Subject) 
     fieldSubject.offset = pos;
     break;

   case FieldEncodedSubjectLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSubjectLen) 
     fieldEncodedSubjectLen.offset = pos;
     break;

   case FieldEncodedSubject::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSubject) 
     fieldEncodedSubject.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoLinesOfText::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     fieldNoLinesOfText.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::scan( groupsLinesOfText, fix+pos, len - pos );
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderSingle::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldPrice2::RAW_TAG :
     FIXPP_PRINT_FIELD(Price2) 
     fieldPrice2.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderList::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldProgRptReqs::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     fieldProgRptReqs.offset = pos;
     break;

   case FieldBidType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidType) 
     fieldBidType.offset = pos;
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     fieldProgPeriodInterval.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldListExecInstType::RAW_TAG :
     FIXPP_PRINT_FIELD(ListExecInstType) 
     fieldListExecInstType.offset = pos;
     break;

   case FieldListExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ListExecInst) 
     fieldListExecInst.offset = pos;
     break;

   case FieldEncodedListExecInstLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListExecInstLen) 
     fieldEncodedListExecInstLen.offset = pos;
     break;

   case FieldEncodedListExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListExecInst) 
     fieldEncodedListExecInst.offset = pos;
     break;

   case FieldAllowableOneSidednessPct::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessPct) 
     fieldAllowableOneSidednessPct.offset = pos;
     break;

   case FieldAllowableOneSidednessValue::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessValue) 
     fieldAllowableOneSidednessValue.offset = pos;
     break;

   case FieldAllowableOneSidednessCurr::RAW_TAG :
     FIXPP_PRINT_FIELD(AllowableOneSidednessCurr) 
     fieldAllowableOneSidednessCurr.offset = pos;
     break;

   case FieldTotNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     fieldTotNoOrders.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldPrice2::RAW_TAG :
     FIXPP_PRINT_FIELD(Price2) 
     fieldPrice2.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     fieldOrdStatusReqID.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationInstruction::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldAllocTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocTransType) 
     fieldAllocTransType.offset = pos;
     break;

   case FieldAllocType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocType) 
     fieldAllocType.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldRefAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefAllocID) 
     fieldRefAllocID.offset = pos;
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     fieldAllocCancReplaceReason.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldAllocLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     fieldAllocLinkID.offset = pos;
     break;

   case FieldAllocLinkType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     fieldAllocLinkType.offset = pos;
     break;

   case FieldBookingRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingRefID) 
     fieldBookingRefID.offset = pos;
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     fieldAllocNoOrdersType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldReversalIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     fieldReversalIndicator.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     fieldAutoAcceptIndicator.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     fieldTotalAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldTotNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     fieldTotNoAllocs.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListExecute::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldListStatusType::RAW_TAG :
     FIXPP_PRINT_FIELD(ListStatusType) 
     fieldListStatusType.offset = pos;
     break;

   case FieldNoRpts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRpts) 
     fieldNoRpts.offset = pos;
     break;

   case FieldListOrderStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(ListOrderStatus) 
     fieldListOrderStatus.offset = pos;
     break;

   case FieldRptSeq::RAW_TAG :
     FIXPP_PRINT_FIELD(RptSeq) 
     fieldRptSeq.offset = pos;
     break;

   case FieldListStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(ListStatusText) 
     fieldListStatusText.offset = pos;
     break;

   case FieldEncodedListStatusTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListStatusTextLen) 
     fieldEncodedListStatusTextLen.offset = pos;
     break;

   case FieldEncodedListStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedListStatusText) 
     fieldEncodedListStatusText.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTotNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     fieldTotNoOrders.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationInstructionAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldAllocType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocType) 
     fieldAllocType.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDontKnowTrade::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldDKReason::RAW_TAG :
     FIXPP_PRINT_FIELD(DKReason) 
     fieldDKReason.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuote::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSettlementInstructions::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstMsgID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstMsgID) 
     fieldSettlInstMsgID.offset = pos;
     break;

   case FieldSettlInstReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     fieldSettlInstReqID.offset = pos;
     break;

   case FieldSettlInstMode::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstMode) 
     fieldSettlInstMode.offset = pos;
     break;

   case FieldSettlInstReqRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqRejCode) 
     fieldSettlInstReqRejCode.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoSettlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSettlInst) 
     fieldNoSettlInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSettlInst::scan( groupsSettlInst, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldMarketDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(MarketDepth) 
     fieldMarketDepth.offset = pos;
     break;

   case FieldMDUpdateType::RAW_TAG :
     FIXPP_PRINT_FIELD(MDUpdateType) 
     fieldMDUpdateType.offset = pos;
     break;

   case FieldAggregatedBook::RAW_TAG :
     FIXPP_PRINT_FIELD(AggregatedBook) 
     fieldAggregatedBook.offset = pos;
     break;

   case FieldOpenCloseSettlFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(OpenCloseSettlFlag) 
     fieldOpenCloseSettlFlag.offset = pos;
     break;

   case FieldScope::RAW_TAG :
     FIXPP_PRINT_FIELD(Scope) 
     fieldScope.offset = pos;
     break;

   case FieldMDImplicitDelete::RAW_TAG :
     FIXPP_PRINT_FIELD(MDImplicitDelete) 
     fieldMDImplicitDelete.offset = pos;
     break;

   case FieldNoMDEntryTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntryTypes) 
     fieldNoMDEntryTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntryTypes::scan( groupsMDEntryTypes, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldApplQueueAction::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueAction) 
     fieldApplQueueAction.offset = pos;
     break;

   case FieldApplQueueMax::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueMax) 
     fieldApplQueueMax.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldFinancialStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     fieldFinancialStatus.offset = pos;
     break;

   case FieldCorporateAction::RAW_TAG :
     FIXPP_PRINT_FIELD(CorporateAction) 
     fieldCorporateAction.offset = pos;
     break;

   case FieldNetChgPrevDay::RAW_TAG :
     FIXPP_PRINT_FIELD(NetChgPrevDay) 
     fieldNetChgPrevDay.offset = pos;
     break;

   case FieldNoMDEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     fieldNoMDEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::scan( groupsMDEntries, fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     fieldApplQueueDepth.offset = pos;
     break;

   case FieldApplQueueResolution::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     fieldApplQueueResolution.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldNoMDEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     fieldNoMDEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::scan( groupsMDEntries, fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     fieldApplQueueDepth.offset = pos;
     break;

   case FieldApplQueueResolution::RAW_TAG :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     fieldApplQueueResolution.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMarketDataRequestReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldMDReqRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(MDReqRejReason) 
     fieldMDReqRejReason.offset = pos;
     break;

   case FieldNoAltMDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAltMDSource) 
     fieldNoAltMDSource.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAltMDSource::scan( groupsAltMDSource, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteCancel::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteCancelType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteCancelType) 
     fieldQuoteCancelType.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldNoQuoteEntries::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteEntries) 
     fieldNoQuoteEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteEntries::scan( groupsQuoteEntries, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     fieldQuoteStatusReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     fieldQuoteStatus.offset = pos;
     break;

   case FieldQuoteRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRejectReason) 
     fieldQuoteRejectReason.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoQuoteSets::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     fieldNoQuoteSets.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::scan( groupsQuoteSets, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityDefinitionRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestType) 
     fieldSecurityRequestType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     fieldExpirationCycle.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityDefinition::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     fieldSecurityResponseType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     fieldExpirationCycle.offset = pos;
     break;

   case FieldRoundLot::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundLot) 
     fieldRoundLot.offset = pos;
     break;

   case FieldMinTradeVol::RAW_TAG :
     FIXPP_PRINT_FIELD(MinTradeVol) 
     fieldMinTradeVol.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     fieldSecurityStatusReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     fieldSecurityStatusReqID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldSecurityTradingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityTradingStatus) 
     fieldSecurityTradingStatus.offset = pos;
     break;

   case FieldFinancialStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     fieldFinancialStatus.offset = pos;
     break;

   case FieldCorporateAction::RAW_TAG :
     FIXPP_PRINT_FIELD(CorporateAction) 
     fieldCorporateAction.offset = pos;
     break;

   case FieldHaltReasonChar::RAW_TAG :
     FIXPP_PRINT_FIELD(HaltReasonChar) 
     fieldHaltReasonChar.offset = pos;
     break;

   case FieldInViewOfCommon::RAW_TAG :
     FIXPP_PRINT_FIELD(InViewOfCommon) 
     fieldInViewOfCommon.offset = pos;
     break;

   case FieldDueToRelated::RAW_TAG :
     FIXPP_PRINT_FIELD(DueToRelated) 
     fieldDueToRelated.offset = pos;
     break;

   case FieldBuyVolume::RAW_TAG :
     FIXPP_PRINT_FIELD(BuyVolume) 
     fieldBuyVolume.offset = pos;
     break;

   case FieldSellVolume::RAW_TAG :
     FIXPP_PRINT_FIELD(SellVolume) 
     fieldSellVolume.offset = pos;
     break;

   case FieldHighPx::RAW_TAG :
     FIXPP_PRINT_FIELD(HighPx) 
     fieldHighPx.offset = pos;
     break;

   case FieldLowPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LowPx) 
     fieldLowPx.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAdjustment::RAW_TAG :
     FIXPP_PRINT_FIELD(Adjustment) 
     fieldAdjustment.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradingSessionStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     fieldTradSesReqID.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTradSesMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     fieldTradSesMethod.offset = pos;
     break;

   case FieldTradSesMode::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMode) 
     fieldTradSesMode.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradingSessionStatus::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     fieldTradSesReqID.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTradSesMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     fieldTradSesMethod.offset = pos;
     break;

   case FieldTradSesMode::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesMode) 
     fieldTradSesMode.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldTradSesStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStatus) 
     fieldTradSesStatus.offset = pos;
     break;

   case FieldTradSesStatusRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStatusRejReason) 
     fieldTradSesStatusRejReason.offset = pos;
     break;

   case FieldTradSesStartTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesStartTime) 
     fieldTradSesStartTime.offset = pos;
     break;

   case FieldTradSesOpenTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesOpenTime) 
     fieldTradSesOpenTime.offset = pos;
     break;

   case FieldTradSesPreCloseTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesPreCloseTime) 
     fieldTradSesPreCloseTime.offset = pos;
     break;

   case FieldTradSesCloseTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesCloseTime) 
     fieldTradSesCloseTime.offset = pos;
     break;

   case FieldTradSesEndTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TradSesEndTime) 
     fieldTradSesEndTime.offset = pos;
     break;

   case FieldTotalVolumeTraded::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalVolumeTraded) 
     fieldTotalVolumeTraded.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMassQuote::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDefBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(DefBidSize) 
     fieldDefBidSize.offset = pos;
     break;

   case FieldDefOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(DefOfferSize) 
     fieldDefOfferSize.offset = pos;
     break;

   case FieldNoQuoteSets::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     fieldNoQuoteSets.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::scan( groupsQuoteSets, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBusinessMessageReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     fieldRefSeqNum.offset = pos;
     break;

   case FieldRefMsgType::RAW_TAG :
     FIXPP_PRINT_FIELD(RefMsgType) 
     fieldRefMsgType.offset = pos;
     break;

   case FieldBusinessRejectRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BusinessRejectRefID) 
     fieldBusinessRejectRefID.offset = pos;
     break;

   case FieldBusinessRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(BusinessRejectReason) 
     fieldBusinessRejectReason.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBidRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldBidRequestTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidRequestTransType) 
     fieldBidRequestTransType.offset = pos;
     break;

   case FieldListName::RAW_TAG :
     FIXPP_PRINT_FIELD(ListName) 
     fieldListName.offset = pos;
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldBidType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidType) 
     fieldBidType.offset = pos;
     break;

   case FieldNumTickets::RAW_TAG :
     FIXPP_PRINT_FIELD(NumTickets) 
     fieldNumTickets.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSideValue1::RAW_TAG :
     FIXPP_PRINT_FIELD(SideValue1) 
     fieldSideValue1.offset = pos;
     break;

   case FieldSideValue2::RAW_TAG :
     FIXPP_PRINT_FIELD(SideValue2) 
     fieldSideValue2.offset = pos;
     break;

   case FieldNoBidDescriptors::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidDescriptors) 
     fieldNoBidDescriptors.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidDescriptors::scan( groupsBidDescriptors, fix+pos, len - pos );
     break;

   case FieldNoBidComponents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     fieldNoBidComponents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::scan( groupsBidComponents, fix+pos, len - pos );
     break;

   case FieldLiquidityIndType::RAW_TAG :
     FIXPP_PRINT_FIELD(LiquidityIndType) 
     fieldLiquidityIndType.offset = pos;
     break;

   case FieldWtAverageLiquidity::RAW_TAG :
     FIXPP_PRINT_FIELD(WtAverageLiquidity) 
     fieldWtAverageLiquidity.offset = pos;
     break;

   case FieldExchangeForPhysical::RAW_TAG :
     FIXPP_PRINT_FIELD(ExchangeForPhysical) 
     fieldExchangeForPhysical.offset = pos;
     break;

   case FieldOutMainCntryUIndex::RAW_TAG :
     FIXPP_PRINT_FIELD(OutMainCntryUIndex) 
     fieldOutMainCntryUIndex.offset = pos;
     break;

   case FieldCrossPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPercent) 
     fieldCrossPercent.offset = pos;
     break;

   case FieldProgRptReqs::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     fieldProgRptReqs.offset = pos;
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     fieldProgPeriodInterval.offset = pos;
     break;

   case FieldIncTaxInd::RAW_TAG :
     FIXPP_PRINT_FIELD(IncTaxInd) 
     fieldIncTaxInd.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldNumBidders::RAW_TAG :
     FIXPP_PRINT_FIELD(NumBidders) 
     fieldNumBidders.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldBidTradeType::RAW_TAG :
     FIXPP_PRINT_FIELD(BidTradeType) 
     fieldBidTradeType.offset = pos;
     break;

   case FieldBasisPxType::RAW_TAG :
     FIXPP_PRINT_FIELD(BasisPxType) 
     fieldBasisPxType.offset = pos;
     break;

   case FieldStrikeTime::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeTime) 
     fieldStrikeTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageBidResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldNoBidComponents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     fieldNoBidComponents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::scan( groupsBidComponents, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageListStrikePrice::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldTotNoStrikes::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoStrikes) 
     fieldTotNoStrikes.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoStrikes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStrikes) 
     fieldNoStrikes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStrikes::scan( groupsStrikes, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageXMLnonFIX::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRegistrationInstructions::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldRegistTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistTransType) 
     fieldRegistTransType.offset = pos;
     break;

   case FieldRegistRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRefID) 
     fieldRegistRefID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldRegistAcctType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistAcctType) 
     fieldRegistAcctType.offset = pos;
     break;

   case FieldTaxAdvantageType::RAW_TAG :
     FIXPP_PRINT_FIELD(TaxAdvantageType) 
     fieldTaxAdvantageType.offset = pos;
     break;

   case FieldOwnershipType::RAW_TAG :
     FIXPP_PRINT_FIELD(OwnershipType) 
     fieldOwnershipType.offset = pos;
     break;

   case FieldNoRegistDtls::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRegistDtls) 
     fieldNoRegistDtls.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRegistDtls::scan( groupsRegistDtls, fix+pos, len - pos );
     break;

   case FieldNoDistribInsts::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDistribInsts) 
     fieldNoDistribInsts.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDistribInsts::scan( groupsDistribInsts, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldRegistTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistTransType) 
     fieldRegistTransType.offset = pos;
     break;

   case FieldRegistRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRefID) 
     fieldRegistRefID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldRegistStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistStatus) 
     fieldRegistStatus.offset = pos;
     break;

   case FieldRegistRejReasonCode::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRejReasonCode) 
     fieldRegistRejReasonCode.offset = pos;
     break;

   case FieldRegistRejReasonText::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistRejReasonText) 
     fieldRegistRejReasonText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     fieldMassCancelRequestType.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassCancelReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     fieldMassCancelRequestType.offset = pos;
     break;

   case FieldMassCancelResponse::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelResponse) 
     fieldMassCancelResponse.offset = pos;
     break;

   case FieldMassCancelRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(MassCancelRejectReason) 
     fieldMassCancelRejectReason.offset = pos;
     break;

   case FieldTotalAffectedOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAffectedOrders) 
     fieldTotalAffectedOrders.offset = pos;
     break;

   case FieldNoAffectedOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAffectedOrders) 
     fieldNoAffectedOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAffectedOrders::scan( groupsAffectedOrders, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderCross::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCrossOrderCancelRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW_TAG :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityTypeRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityTypes::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     fieldSecurityResponseType.offset = pos;
     break;

   case FieldTotNoSecurityTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoSecurityTypes) 
     fieldTotNoSecurityTypes.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoSecurityTypes::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityTypes) 
     fieldNoSecurityTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityTypes::scan( groupsSecurityTypes, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityListRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     fieldSecurityListRequestType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSecurityList::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     fieldSecurityRequestResult.offset = pos;
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     fieldSecurityListRequestType.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageDerivativeSecurityList::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     fieldSecurityRequestResult.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNewOrderMultileg::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     fieldMultiLegRptTypeReq.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW_TAG :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW_TAG :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW_TAG :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW_TAG :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW_TAG :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW_TAG :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW_TAG :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW_TAG :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW_TAG :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW_TAG :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW_TAG :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW_TAG :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW_TAG :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW_TAG :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     fieldMultiLegRptTypeReq.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTradeRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     fieldTradeRequestType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoDates::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDates) 
     fieldNoDates.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDates::scan( groupsDates, fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTimeBracket::RAW_TAG :
     FIXPP_PRINT_FIELD(TimeBracket) 
     fieldTimeBracket.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldTradeInputSource::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeInputSource) 
     fieldTradeInputSource.offset = pos;
     break;

   case FieldTradeInputDevice::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeInputDevice) 
     fieldTradeInputDevice.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldTradeReportTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     fieldTradeReportTransType.offset = pos;
     break;

   case FieldTradeReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportType) 
     fieldTradeReportType.offset = pos;
     break;

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     fieldTotNumTradeReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     fieldTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     fieldSecondaryTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldOrdStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldExecRestatementReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     fieldExecRestatementReason.offset = pos;
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldUnderlyingTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionID) 
     fieldUnderlyingTradingSessionID.offset = pos;
     break;

   case FieldUnderlyingTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionSubID) 
     fieldUnderlyingTradingSessionSubID.offset = pos;
     break;

   case FieldLastQty::RAW_TAG :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldLastParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(LastParPx) 
     fieldLastParPx.offset = pos;
     break;

   case FieldLastSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     fieldLastSpotRate.offset = pos;
     break;

   case FieldLastForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     fieldLastForwardPoints.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldAvgPxIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxIndicator) 
     fieldAvgPxIndicator.offset = pos;
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldTradeLegRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLegRefID) 
     fieldTradeLegRefID.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldNoSides::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldPublishTrdIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PublishTrdIndicator) 
     fieldPublishTrdIndicator.offset = pos;
     break;

   case FieldShortSaleReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ShortSaleReason) 
     fieldShortSaleReason.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageOrderMassStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMassStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     fieldMassStatusReqID.offset = pos;
     break;

   case FieldMassStatusReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(MassStatusReqType) 
     fieldMassStatusReqType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteRequestReject::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldQuoteRequestRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRequestRejectReason) 
     fieldQuoteRequestRejectReason.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRFQRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRFQReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldNoRelatedSym::RAW_TAG :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteStatusReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     fieldQuoteStatusReqID.offset = pos;
     break;

   case FieldQuoteReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldQuoteStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     fieldQuoteStatus.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageQuoteResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteID::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteRespType) 
     fieldQuoteRespType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldIOIID::RAW_TAG :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteType::RAW_TAG :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW_TAG :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW_TAG :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW_TAG :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmation::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmID) 
     fieldConfirmID.offset = pos;
     break;

   case FieldConfirmRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmRefID) 
     fieldConfirmRefID.offset = pos;
     break;

   case FieldConfirmReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     fieldConfirmReqID.offset = pos;
     break;

   case FieldConfirmTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmTransType) 
     fieldConfirmTransType.offset = pos;
     break;

   case FieldConfirmType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmType) 
     fieldConfirmType.offset = pos;
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldConfirmStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmStatus) 
     fieldConfirmStatus.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldIndividualAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     fieldIndividualAllocID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldAllocQty::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocQty) 
     fieldAllocQty.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldNoCapacities::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCapacities) 
     fieldNoCapacities.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCapacities::scan( groupsCapacities, fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldAllocAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     fieldAllocAccountType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldReportedPx::RAW_TAG :
     FIXPP_PRINT_FIELD(ReportedPx) 
     fieldReportedPx.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldProcessCode::RAW_TAG :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldExDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExDate) 
     fieldExDate.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldMaturityNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityNetMoney) 
     fieldMaturityNetMoney.offset = pos;
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     fieldSettlCurrAmt.offset = pos;
     break;

   case FieldSettlCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     fieldSettlCurrFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW_TAG :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldSharedCommission::RAW_TAG :
     FIXPP_PRINT_FIELD(SharedCommission) 
     fieldSharedCommission.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionMaintenanceRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosTransType) 
     fieldPosTransType.offset = pos;
     break;

   case FieldPosMaintAction::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     fieldPosMaintAction.offset = pos;
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     fieldOrigPosReqRefID.offset = pos;
     break;

   case FieldPosMaintRptRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptRefID) 
     fieldPosMaintRptRefID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     fieldAdjustmentType.offset = pos;
     break;

   case FieldContraryInstructionIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ContraryInstructionIndicator) 
     fieldContraryInstructionIndicator.offset = pos;
     break;

   case FieldPriorSpreadIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorSpreadIndicator) 
     fieldPriorSpreadIndicator.offset = pos;
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionMaintenanceReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosTransType) 
     fieldPosTransType.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosMaintAction::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     fieldPosMaintAction.offset = pos;
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     fieldOrigPosReqRefID.offset = pos;
     break;

   case FieldPosMaintStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintStatus) 
     fieldPosMaintStatus.offset = pos;
     break;

   case FieldPosMaintResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintResult) 
     fieldPosMaintResult.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     fieldAdjustmentType.offset = pos;
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRequestForPositions::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqType) 
     fieldPosReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoTradingSessions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageRequestForPositionsAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     fieldTotalNumPosReports.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldPosReqResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqResult) 
     fieldPosReqResult.offset = pos;
     break;

   case FieldPosReqStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqStatus) 
     fieldPosReqStatus.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessagePositionReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqType) 
     fieldPosReqType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     fieldTotalNumPosReports.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldPosReqResult::RAW_TAG :
     FIXPP_PRINT_FIELD(PosReqResult) 
     fieldPosReqResult.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPrice) 
     fieldSettlPrice.offset = pos;
     break;

   case FieldSettlPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     fieldSettlPriceType.offset = pos;
     break;

   case FieldPriorSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(PriorSettlPrice) 
     fieldPriorSettlPrice.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldRegistStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(RegistStatus) 
     fieldRegistStatus.offset = pos;
     break;

   case FieldDeliveryDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryDate) 
     fieldDeliveryDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTradeRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     fieldTradeRequestType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     fieldTotNumTradeReports.offset = pos;
     break;

   case FieldTradeRequestResult::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestResult) 
     fieldTradeRequestResult.offset = pos;
     break;

   case FieldTradeRequestStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeRequestStatus) 
     fieldTradeRequestStatus.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageTradeCaptureReportAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldTradeReportTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     fieldTradeReportTransType.offset = pos;
     break;

   case FieldTradeReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportType) 
     fieldTradeReportType.offset = pos;
     break;

   case FieldTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTransferReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldExecType::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     fieldTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     fieldSecondaryTradeReportRefID.offset = pos;
     break;

   case FieldTrdRptStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdRptStatus) 
     fieldTrdRptStatus.offset = pos;
     break;

   case FieldTradeReportRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeReportRejectReason) 
     fieldTradeReportRejectReason.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW_TAG :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldSecondaryExecID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldPreallocMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportID) 
     fieldAllocReportID.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldAllocTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocTransType) 
     fieldAllocTransType.offset = pos;
     break;

   case FieldAllocReportRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportRefID) 
     fieldAllocReportRefID.offset = pos;
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     fieldAllocCancReplaceReason.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldAllocReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportType) 
     fieldAllocReportType.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldRefAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(RefAllocID) 
     fieldRefAllocID.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldAllocLinkID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     fieldAllocLinkID.offset = pos;
     break;

   case FieldAllocLinkType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     fieldAllocLinkType.offset = pos;
     break;

   case FieldBookingRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingRefID) 
     fieldBookingRefID.offset = pos;
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     fieldAllocNoOrdersType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldReversalIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     fieldReversalIndicator.offset = pos;
     break;

   case FieldMatchType::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW_TAG :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldLastMkt::RAW_TAG :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgParPx::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldSettlType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldBookingType::RAW_TAG :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldConcession::RAW_TAG :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW_TAG :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldPositionEffect::RAW_TAG :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     fieldAutoAcceptIndicator.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNumDaysInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     fieldTotalAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldLegalConfirm::RAW_TAG :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW_TAG :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldTotNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     fieldTotNoAllocs.offset = pos;
     break;

   case FieldLastFragment::RAW_TAG :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAllocationReportAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportID) 
     fieldAllocReportID.offset = pos;
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldAllocReportType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocReportType) 
     fieldAllocReportType.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoAllocs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmationAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmID) 
     fieldConfirmID.offset = pos;
     break;

   case FieldTradeDate::RAW_TAG :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAffirmStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(AffirmStatus) 
     fieldAffirmStatus.offset = pos;
     break;

   case FieldConfirmRejReason::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmRejReason) 
     fieldConfirmRejReason.offset = pos;
     break;

   case FieldMatchStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageSettlementInstructionRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     fieldSettlInstReqID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldEffectiveTime::RAW_TAG :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldLastUpdateTime::RAW_TAG :
     FIXPP_PRINT_FIELD(LastUpdateTime) 
     fieldLastUpdateTime.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageAssignmentReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAsgnRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(AsgnRptID) 
     fieldAsgnRptID.offset = pos;
     break;

   case FieldTotNumAssignmentReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumAssignmentReports) 
     fieldTotNumAssignmentReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldThresholdAmount::RAW_TAG :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPrice) 
     fieldSettlPrice.offset = pos;
     break;

   case FieldSettlPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     fieldSettlPriceType.offset = pos;
     break;

   case FieldUnderlyingSettlPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(UnderlyingSettlPrice) 
     fieldUnderlyingSettlPrice.offset = pos;
     break;

   case FieldExpireDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldAssignmentMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(AssignmentMethod) 
     fieldAssignmentMethod.offset = pos;
     break;

   case FieldAssignmentUnit::RAW_TAG :
     FIXPP_PRINT_FIELD(AssignmentUnit) 
     fieldAssignmentUnit.offset = pos;
     break;

   case FieldOpenInterest::RAW_TAG :
     FIXPP_PRINT_FIELD(OpenInterest) 
     fieldOpenInterest.offset = pos;
     break;

   case FieldExerciseMethod::RAW_TAG :
     FIXPP_PRINT_FIELD(ExerciseMethod) 
     fieldExerciseMethod.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralAssignment::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollAsgnID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     fieldCollAsgnID.offset = pos;
     break;

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     fieldCollAsgnTransType.offset = pos;
     break;

   case FieldCollAsgnRefID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRefID) 
     fieldCollAsgnRefID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldExpireTime::RAW_TAG :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRespID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollRespID) 
     fieldCollRespID.offset = pos;
     break;

   case FieldCollAsgnID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     fieldCollAsgnID.offset = pos;
     break;

   case FieldCollReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     fieldCollAsgnTransType.offset = pos;
     break;

   case FieldCollAsgnRespType::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRespType) 
     fieldCollAsgnRespType.offset = pos;
     break;

   case FieldCollAsgnRejectReason::RAW_TAG :
     FIXPP_PRINT_FIELD(CollAsgnRejectReason) 
     fieldCollAsgnRejectReason.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralReport::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRptID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollRptID) 
     fieldCollRptID.offset = pos;
     break;

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldCollStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(CollStatus) 
     fieldCollStatus.offset = pos;
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW_TAG :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW_TAG :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralInquiry::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     fieldNoCollInquiryQualifier.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::scan( groupsCollInquiryQualifier, fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW_TAG :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW_TAG :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW_TAG :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW_TAG :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW_TAG :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW_TAG :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW_TAG :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW_TAG :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestType) 
     fieldNetworkRequestType.offset = pos;
     break;

   case FieldNetworkRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     fieldNetworkRequestID.offset = pos;
     break;

   case FieldNoCompIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     fieldNoCompIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::scan( groupsCompIDs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkStatusResponseType) 
     fieldNetworkStatusResponseType.offset = pos;
     break;

   case FieldNetworkRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     fieldNetworkRequestID.offset = pos;
     break;

   case FieldNetworkResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(NetworkResponseID) 
     fieldNetworkResponseID.offset = pos;
     break;

   case FieldLastNetworkResponseID::RAW_TAG :
     FIXPP_PRINT_FIELD(LastNetworkResponseID) 
     fieldLastNetworkResponseID.offset = pos;
     break;

   case FieldNoCompIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     fieldNoCompIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::scan( groupsCompIDs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageUserRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestID) 
     fieldUserRequestID.offset = pos;
     break;

   case FieldUserRequestType::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestType) 
     fieldUserRequestType.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(Password) 
     fieldPassword.offset = pos;
     break;

   case FieldNewPassword::RAW_TAG :
     FIXPP_PRINT_FIELD(NewPassword) 
     fieldNewPassword.offset = pos;
     break;

   case FieldRawDataLength::RAW_TAG :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW_TAG :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageUserResponse::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     FIXPP_PRINT_FIELD(UserRequestID) 
     fieldUserRequestID.offset = pos;
     break;

   case FieldUsername::RAW_TAG :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldUserStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(UserStatus) 
     fieldUserStatus.offset = pos;
     break;

   case FieldUserStatusText::RAW_TAG :
     FIXPP_PRINT_FIELD(UserStatusText) 
     fieldUserStatusText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageCollateralInquiryAck::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldCollInquiryStatus::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryStatus) 
     fieldCollInquiryStatus.offset = pos;
     break;

   case FieldCollInquiryResult::RAW_TAG :
     FIXPP_PRINT_FIELD(CollInquiryResult) 
     fieldCollInquiryResult.offset = pos;
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     fieldNoCollInquiryQualifier.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::scan( groupsCollInquiryQualifier, fix+pos, len - pos );
     break;

   case FieldTotNumReports::RAW_TAG :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldNoPartyIDs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW_TAG :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW_TAG :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW_TAG :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW_TAG :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW_TAG :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW_TAG :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW_TAG :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW_TAG :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW_TAG :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW_TAG :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW_TAG :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW_TAG :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW_TAG :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW_TAG :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW_TAG :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW_TAG :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW_TAG :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW_TAG :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW_TAG :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW_TAG :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW_TAG :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW_TAG :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW_TAG :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW_TAG :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW_TAG :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW_TAG :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW_TAG :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW_TAG :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldResponseTransportType::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW_TAG :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}

offset_t MessageConfirmationRequest::scan( const char * fix, unsigned len ){
_fixPtr = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmReqID::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     fieldConfirmReqID.offset = pos;
     break;

   case FieldConfirmType::RAW_TAG :
     FIXPP_PRINT_FIELD(ConfirmType) 
     fieldConfirmType.offset = pos;
     break;

   case FieldNoOrders::RAW_TAG :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldIndividualAllocID::RAW_TAG :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     fieldIndividualAllocID.offset = pos;
     break;

   case FieldTransactTime::RAW_TAG :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocAccount::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldAllocAccountType::RAW_TAG :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     fieldAllocAccountType.offset = pos;
     break;

   case FieldText::RAW_TAG :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW_TAG :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW_TAG :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     _fixLength = pos;
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     _fixLength = prev;
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 _fixLength = pos;
 return pos;
}


// -------------------------------------- skip ----------------------------------------

offset_t MessageHeader::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW_TAG :
     break;

   case FieldBodyLength::RAW_TAG :
     break;

   case FieldMsgType::RAW_TAG :
     break;

   case FieldSenderCompID::RAW_TAG :
     break;

   case FieldTargetCompID::RAW_TAG :
     break;

   case FieldOnBehalfOfCompID::RAW_TAG :
     break;

   case FieldDeliverToCompID::RAW_TAG :
     break;

   case FieldSecureDataLen::RAW_TAG :
     break;

   case FieldSecureData::RAW_TAG :
     break;

   case FieldMsgSeqNum::RAW_TAG :
     break;

   case FieldSenderSubID::RAW_TAG :
     break;

   case FieldSenderLocationID::RAW_TAG :
     break;

   case FieldTargetSubID::RAW_TAG :
     break;

   case FieldTargetLocationID::RAW_TAG :
     break;

   case FieldOnBehalfOfSubID::RAW_TAG :
     break;

   case FieldOnBehalfOfLocationID::RAW_TAG :
     break;

   case FieldDeliverToSubID::RAW_TAG :
     break;

   case FieldDeliverToLocationID::RAW_TAG :
     break;

   case FieldPossDupFlag::RAW_TAG :
     break;

   case FieldPossResend::RAW_TAG :
     break;

   case FieldSendingTime::RAW_TAG :
     break;

   case FieldOrigSendingTime::RAW_TAG :
     break;

   case FieldXmlDataLen::RAW_TAG :
     break;

   case FieldXmlData::RAW_TAG :
     break;

   case FieldMessageEncoding::RAW_TAG :
     break;

   case FieldLastMsgSeqNumProcessed::RAW_TAG :
     break;

   case FieldNoHops::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupHops::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageHeartbeat::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTestRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageResendRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginSeqNo::RAW_TAG :
     break;

   case FieldEndSeqNo::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     break;

   case FieldRefTagID::RAW_TAG :
     break;

   case FieldRefMsgType::RAW_TAG :
     break;

   case FieldSessionRejectReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSequenceReset::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldGapFillFlag::RAW_TAG :
     break;

   case FieldNewSeqNo::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogout::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageIOI::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldIOIID::RAW_TAG :
     break;

   case FieldIOITransType::RAW_TAG :
     break;

   case FieldIOIRefID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldIOIQty::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldIOIQltyInd::RAW_TAG :
     break;

   case FieldIOINaturalFlag::RAW_TAG :
     break;

   case FieldNoIOIQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupIOIQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAdvertisement::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAdvId::RAW_TAG :
     break;

   case FieldAdvTransType::RAW_TAG :
     break;

   case FieldAdvRefID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldAdvSide::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageExecutionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     break;

   case FieldMassStatusReqID::RAW_TAG :
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldNoContraBrokers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContraBrokers::skip( fix+pos, len - pos );
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldExecRefID::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldWorkingIndicator::RAW_TAG :
     break;

   case FieldOrdRejReason::RAW_TAG :
     break;

   case FieldExecRestatementReason::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldPeggedPrice::RAW_TAG :
     break;

   case FieldDiscretionPrice::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldTargetStrategyPerformance::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldUnderlyingLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldUnderlyingLastPx::RAW_TAG :
     break;

   case FieldLastParPx::RAW_TAG :
     break;

   case FieldLastSpotRate::RAW_TAG :
     break;

   case FieldLastForwardPoints::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTimeBracket::RAW_TAG :
     break;

   case FieldLastCapacity::RAW_TAG :
     break;

   case FieldLeavesQty::RAW_TAG :
     break;

   case FieldCumQty::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldDayOrderQty::RAW_TAG :
     break;

   case FieldDayCumQty::RAW_TAG :
     break;

   case FieldDayAvgPx::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldReportToExch::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldExDate::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldTradedFlatSwitch::RAW_TAG :
     break;

   case FieldBasisFeatureDate::RAW_TAG :
     break;

   case FieldBasisFeaturePrice::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldLastForwardPoints2::RAW_TAG :
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldTransBkdTime::RAW_TAG :
     break;

   case FieldExecValuationPoint::RAW_TAG :
     break;

   case FieldExecPriceType::RAW_TAG :
     break;

   case FieldExecPriceAdjustment::RAW_TAG :
     break;

   case FieldPriorityIndicator::RAW_TAG :
     break;

   case FieldPriceImprovement::RAW_TAG :
     break;

   case FieldLastLiquidityInd::RAW_TAG :
     break;

   case FieldNoContAmts::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContAmts::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldWorkingIndicator::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldCxlRejResponseTo::RAW_TAG :
     break;

   case FieldCxlRejReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogon::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEncryptMethod::RAW_TAG :
     break;

   case FieldHeartBtInt::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldResetSeqNumFlag::RAW_TAG :
     break;

   case FieldNextExpectedMsgSeqNum::RAW_TAG :
     break;

   case FieldMaxMessageSize::RAW_TAG :
     break;

   case FieldNoMsgTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMsgTypes::skip( fix+pos, len - pos );
     break;

   case FieldTestMessageIndicator::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldPassword::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNews::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigTime::RAW_TAG :
     break;

   case FieldUrgency::RAW_TAG :
     break;

   case FieldHeadline::RAW_TAG :
     break;

   case FieldEncodedHeadlineLen::RAW_TAG :
     break;

   case FieldEncodedHeadline::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLinesOfText::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::skip( fix+pos, len - pos );
     break;

   case FieldURLLink::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageEmail::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEmailThreadID::RAW_TAG :
     break;

   case FieldEmailType::RAW_TAG :
     break;

   case FieldOrigTime::RAW_TAG :
     break;

   case FieldSubject::RAW_TAG :
     break;

   case FieldEncodedSubjectLen::RAW_TAG :
     break;

   case FieldEncodedSubject::RAW_TAG :
     break;

   case FieldNoRoutingIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoLinesOfText::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::skip( fix+pos, len - pos );
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderSingle::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldPrice2::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldProgRptReqs::RAW_TAG :
     break;

   case FieldBidType::RAW_TAG :
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldListExecInstType::RAW_TAG :
     break;

   case FieldListExecInst::RAW_TAG :
     break;

   case FieldEncodedListExecInstLen::RAW_TAG :
     break;

   case FieldEncodedListExecInst::RAW_TAG :
     break;

   case FieldAllowableOneSidednessPct::RAW_TAG :
     break;

   case FieldAllowableOneSidednessValue::RAW_TAG :
     break;

   case FieldAllowableOneSidednessCurr::RAW_TAG :
     break;

   case FieldTotNoOrders::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldListID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldPrice2::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldOrdStatusReqID::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstruction::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     break;

   case FieldAllocTransType::RAW_TAG :
     break;

   case FieldAllocType::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldRefAllocID::RAW_TAG :
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldAllocLinkID::RAW_TAG :
     break;

   case FieldAllocLinkType::RAW_TAG :
     break;

   case FieldBookingRefID::RAW_TAG :
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldReversalIndicator::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldTotNoAllocs::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListExecute::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldBidID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldListStatusType::RAW_TAG :
     break;

   case FieldNoRpts::RAW_TAG :
     break;

   case FieldListOrderStatus::RAW_TAG :
     break;

   case FieldRptSeq::RAW_TAG :
     break;

   case FieldListStatusText::RAW_TAG :
     break;

   case FieldEncodedListStatusTextLen::RAW_TAG :
     break;

   case FieldEncodedListStatusText::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTotNoOrders::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstructionAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldAllocType::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDontKnowTrade::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldDKReason::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuote::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstMsgID::RAW_TAG :
     break;

   case FieldSettlInstReqID::RAW_TAG :
     break;

   case FieldSettlInstMode::RAW_TAG :
     break;

   case FieldSettlInstReqRejCode::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoSettlInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSettlInst::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldMarketDepth::RAW_TAG :
     break;

   case FieldMDUpdateType::RAW_TAG :
     break;

   case FieldAggregatedBook::RAW_TAG :
     break;

   case FieldOpenCloseSettlFlag::RAW_TAG :
     break;

   case FieldScope::RAW_TAG :
     break;

   case FieldMDImplicitDelete::RAW_TAG :
     break;

   case FieldNoMDEntryTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntryTypes::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueAction::RAW_TAG :
     break;

   case FieldApplQueueMax::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldFinancialStatus::RAW_TAG :
     break;

   case FieldCorporateAction::RAW_TAG :
     break;

   case FieldNetChgPrevDay::RAW_TAG :
     break;

   case FieldNoMDEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     break;

   case FieldApplQueueResolution::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldNoMDEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW_TAG :
     break;

   case FieldApplQueueResolution::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequestReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW_TAG :
     break;

   case FieldMDReqRejReason::RAW_TAG :
     break;

   case FieldNoAltMDSource::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAltMDSource::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteCancel::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteCancelType::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldNoQuoteEntries::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteEntries::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteStatus::RAW_TAG :
     break;

   case FieldQuoteRejectReason::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoQuoteSets::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinitionRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityRequestType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinition::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityResponseType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW_TAG :
     break;

   case FieldRoundLot::RAW_TAG :
     break;

   case FieldMinTradeVol::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldSecurityTradingStatus::RAW_TAG :
     break;

   case FieldFinancialStatus::RAW_TAG :
     break;

   case FieldCorporateAction::RAW_TAG :
     break;

   case FieldHaltReasonChar::RAW_TAG :
     break;

   case FieldInViewOfCommon::RAW_TAG :
     break;

   case FieldDueToRelated::RAW_TAG :
     break;

   case FieldBuyVolume::RAW_TAG :
     break;

   case FieldSellVolume::RAW_TAG :
     break;

   case FieldHighPx::RAW_TAG :
     break;

   case FieldLowPx::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAdjustment::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTradSesMethod::RAW_TAG :
     break;

   case FieldTradSesMode::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTradSesMethod::RAW_TAG :
     break;

   case FieldTradSesMode::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldTradSesStatus::RAW_TAG :
     break;

   case FieldTradSesStatusRejReason::RAW_TAG :
     break;

   case FieldTradSesStartTime::RAW_TAG :
     break;

   case FieldTradSesOpenTime::RAW_TAG :
     break;

   case FieldTradSesPreCloseTime::RAW_TAG :
     break;

   case FieldTradSesCloseTime::RAW_TAG :
     break;

   case FieldTradSesEndTime::RAW_TAG :
     break;

   case FieldTotalVolumeTraded::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuote::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldQuoteResponseLevel::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDefBidSize::RAW_TAG :
     break;

   case FieldDefOfferSize::RAW_TAG :
     break;

   case FieldNoQuoteSets::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBusinessMessageReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW_TAG :
     break;

   case FieldRefMsgType::RAW_TAG :
     break;

   case FieldBusinessRejectRefID::RAW_TAG :
     break;

   case FieldBusinessRejectReason::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldBidRequestTransType::RAW_TAG :
     break;

   case FieldListName::RAW_TAG :
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldBidType::RAW_TAG :
     break;

   case FieldNumTickets::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSideValue1::RAW_TAG :
     break;

   case FieldSideValue2::RAW_TAG :
     break;

   case FieldNoBidDescriptors::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidDescriptors::skip( fix+pos, len - pos );
     break;

   case FieldNoBidComponents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::skip( fix+pos, len - pos );
     break;

   case FieldLiquidityIndType::RAW_TAG :
     break;

   case FieldWtAverageLiquidity::RAW_TAG :
     break;

   case FieldExchangeForPhysical::RAW_TAG :
     break;

   case FieldOutMainCntryUIndex::RAW_TAG :
     break;

   case FieldCrossPercent::RAW_TAG :
     break;

   case FieldProgRptReqs::RAW_TAG :
     break;

   case FieldProgPeriodInterval::RAW_TAG :
     break;

   case FieldIncTaxInd::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldNumBidders::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldBidTradeType::RAW_TAG :
     break;

   case FieldBasisPxType::RAW_TAG :
     break;

   case FieldStrikeTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW_TAG :
     break;

   case FieldClientBidID::RAW_TAG :
     break;

   case FieldNoBidComponents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStrikePrice::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW_TAG :
     break;

   case FieldTotNoStrikes::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoStrikes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStrikes::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageXMLnonFIX::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     break;

   case FieldRegistTransType::RAW_TAG :
     break;

   case FieldRegistRefID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldRegistAcctType::RAW_TAG :
     break;

   case FieldTaxAdvantageType::RAW_TAG :
     break;

   case FieldOwnershipType::RAW_TAG :
     break;

   case FieldNoRegistDtls::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRegistDtls::skip( fix+pos, len - pos );
     break;

   case FieldNoDistribInsts::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDistribInsts::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW_TAG :
     break;

   case FieldRegistTransType::RAW_TAG :
     break;

   case FieldRegistRefID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldRegistStatus::RAW_TAG :
     break;

   case FieldRegistRejReasonCode::RAW_TAG :
     break;

   case FieldRegistRejReasonText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldMassCancelRequestType::RAW_TAG :
     break;

   case FieldMassCancelResponse::RAW_TAG :
     break;

   case FieldMassCancelRejectReason::RAW_TAG :
     break;

   case FieldTotalAffectedOrders::RAW_TAG :
     break;

   case FieldNoAffectedOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAffectedOrders::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderCross::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldCrossID::RAW_TAG :
     break;

   case FieldOrigCrossID::RAW_TAG :
     break;

   case FieldCrossType::RAW_TAG :
     break;

   case FieldCrossPrioritization::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypeRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypes::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityResponseType::RAW_TAG :
     break;

   case FieldTotNoSecurityTypes::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoSecurityTypes::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityTypes::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityListRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityListRequestType::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW_TAG :
     break;

   case FieldSecurityResponseID::RAW_TAG :
     break;

   case FieldSecurityRequestResult::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldTotNoRelatedSym::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderMultileg::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW_TAG :
     break;

   case FieldOrigClOrdID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldClOrdLinkID::RAW_TAG :
     break;

   case FieldOrigOrdModTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldDayBookingInst::RAW_TAG :
     break;

   case FieldBookingUnit::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldCashMargin::RAW_TAG :
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldHandlInst::RAW_TAG :
     break;

   case FieldExecInst::RAW_TAG :
     break;

   case FieldMinQty::RAW_TAG :
     break;

   case FieldMaxFloor::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldStopPx::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldComplianceID::RAW_TAG :
     break;

   case FieldSolicitedFlag::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldTimeInForce::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldGTBookingInst::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldForexReq::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldCoveredOrUncovered::RAW_TAG :
     break;

   case FieldMaxShow::RAW_TAG :
     break;

   case FieldPegOffsetValue::RAW_TAG :
     break;

   case FieldPegMoveType::RAW_TAG :
     break;

   case FieldPegOffsetType::RAW_TAG :
     break;

   case FieldPegLimitType::RAW_TAG :
     break;

   case FieldPegRoundDirection::RAW_TAG :
     break;

   case FieldPegScope::RAW_TAG :
     break;

   case FieldDiscretionInst::RAW_TAG :
     break;

   case FieldDiscretionOffsetValue::RAW_TAG :
     break;

   case FieldDiscretionMoveType::RAW_TAG :
     break;

   case FieldDiscretionOffsetType::RAW_TAG :
     break;

   case FieldDiscretionLimitType::RAW_TAG :
     break;

   case FieldDiscretionRoundDirection::RAW_TAG :
     break;

   case FieldDiscretionScope::RAW_TAG :
     break;

   case FieldTargetStrategy::RAW_TAG :
     break;

   case FieldTargetStrategyParameters::RAW_TAG :
     break;

   case FieldParticipationRate::RAW_TAG :
     break;

   case FieldCancellationRights::RAW_TAG :
     break;

   case FieldMoneyLaunderingStatus::RAW_TAG :
     break;

   case FieldRegistID::RAW_TAG :
     break;

   case FieldDesignation::RAW_TAG :
     break;

   case FieldMultiLegRptTypeReq::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTradeRequestType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoDates::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDates::skip( fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldTimeBracket::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldTradeInputSource::RAW_TAG :
     break;

   case FieldTradeInputDevice::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldTradeReportTransType::RAW_TAG :
     break;

   case FieldTradeReportType::RAW_TAG :
     break;

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldOrdStatus::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldExecRestatementReason::RAW_TAG :
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingTradingSessionID::RAW_TAG :
     break;

   case FieldUnderlyingTradingSessionSubID::RAW_TAG :
     break;

   case FieldLastQty::RAW_TAG :
     break;

   case FieldLastPx::RAW_TAG :
     break;

   case FieldLastParPx::RAW_TAG :
     break;

   case FieldLastSpotRate::RAW_TAG :
     break;

   case FieldLastForwardPoints::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldAvgPxIndicator::RAW_TAG :
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldTradeLegRefID::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldNoSides::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldPublishTrdIndicator::RAW_TAG :
     break;

   case FieldShortSaleReason::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMassStatusReqID::RAW_TAG :
     break;

   case FieldMassStatusReqType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldUnderlyingSymbol::RAW_TAG :
     break;

   case FieldUnderlyingSymbolSfx::RAW_TAG :
     break;

   case FieldUnderlyingSecurityID::RAW_TAG :
     break;

   case FieldUnderlyingSecurityIDSource::RAW_TAG :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW_TAG :
     break;

   case FieldUnderlyingCFICode::RAW_TAG :
     break;

   case FieldUnderlyingSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingSecuritySubType::RAW_TAG :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     break;

   case FieldUnderlyingMaturityDate::RAW_TAG :
     break;

   case FieldUnderlyingPutOrCall::RAW_TAG :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     break;

   case FieldUnderlyingIssueDate::RAW_TAG :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     break;

   case FieldUnderlyingRepurchaseRate::RAW_TAG :
     break;

   case FieldUnderlyingFactor::RAW_TAG :
     break;

   case FieldUnderlyingCreditRating::RAW_TAG :
     break;

   case FieldUnderlyingInstrRegistry::RAW_TAG :
     break;

   case FieldUnderlyingCountryOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     break;

   case FieldUnderlyingRedemptionDate::RAW_TAG :
     break;

   case FieldUnderlyingStrikePrice::RAW_TAG :
     break;

   case FieldUnderlyingStrikeCurrency::RAW_TAG :
     break;

   case FieldUnderlyingOptAttribute::RAW_TAG :
     break;

   case FieldUnderlyingContractMultiplier::RAW_TAG :
     break;

   case FieldUnderlyingCouponRate::RAW_TAG :
     break;

   case FieldUnderlyingSecurityExchange::RAW_TAG :
     break;

   case FieldUnderlyingIssuer::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingIssuer::RAW_TAG :
     break;

   case FieldUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     break;

   case FieldUnderlyingCPProgram::RAW_TAG :
     break;

   case FieldUnderlyingCPRegType::RAW_TAG :
     break;

   case FieldUnderlyingCurrency::RAW_TAG :
     break;

   case FieldUnderlyingQty::RAW_TAG :
     break;

   case FieldUnderlyingPx::RAW_TAG :
     break;

   case FieldUnderlyingDirtyPrice::RAW_TAG :
     break;

   case FieldUnderlyingEndPrice::RAW_TAG :
     break;

   case FieldUnderlyingStartValue::RAW_TAG :
     break;

   case FieldUnderlyingCurrentValue::RAW_TAG :
     break;

   case FieldUnderlyingEndValue::RAW_TAG :
     break;

   case FieldNoUnderlyingStips::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequestReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldQuoteRequestRejectReason::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRFQRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRFQReqID::RAW_TAG :
     break;

   case FieldNoRelatedSym::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW_TAG :
     break;

   case FieldQuoteReqID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldQuoteStatus::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteRespID::RAW_TAG :
     break;

   case FieldQuoteID::RAW_TAG :
     break;

   case FieldQuoteRespType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldIOIID::RAW_TAG :
     break;

   case FieldQuoteType::RAW_TAG :
     break;

   case FieldNoQuoteQualifiers::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldOrderQty::RAW_TAG :
     break;

   case FieldCashOrderQty::RAW_TAG :
     break;

   case FieldOrderPercent::RAW_TAG :
     break;

   case FieldRoundingDirection::RAW_TAG :
     break;

   case FieldRoundingModulus::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDate2::RAW_TAG :
     break;

   case FieldOrderQty2::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldBidPx::RAW_TAG :
     break;

   case FieldOfferPx::RAW_TAG :
     break;

   case FieldMktBidPx::RAW_TAG :
     break;

   case FieldMktOfferPx::RAW_TAG :
     break;

   case FieldMinBidSize::RAW_TAG :
     break;

   case FieldBidSize::RAW_TAG :
     break;

   case FieldMinOfferSize::RAW_TAG :
     break;

   case FieldOfferSize::RAW_TAG :
     break;

   case FieldValidUntilTime::RAW_TAG :
     break;

   case FieldBidSpotRate::RAW_TAG :
     break;

   case FieldOfferSpotRate::RAW_TAG :
     break;

   case FieldBidForwardPoints::RAW_TAG :
     break;

   case FieldOfferForwardPoints::RAW_TAG :
     break;

   case FieldMidPx::RAW_TAG :
     break;

   case FieldBidYield::RAW_TAG :
     break;

   case FieldMidYield::RAW_TAG :
     break;

   case FieldOfferYield::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldOrdType::RAW_TAG :
     break;

   case FieldBidForwardPoints2::RAW_TAG :
     break;

   case FieldOfferForwardPoints2::RAW_TAG :
     break;

   case FieldSettlCurrBidFxRate::RAW_TAG :
     break;

   case FieldSettlCurrOfferFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldExDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmation::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     break;

   case FieldConfirmRefID::RAW_TAG :
     break;

   case FieldConfirmReqID::RAW_TAG :
     break;

   case FieldConfirmTransType::RAW_TAG :
     break;

   case FieldConfirmType::RAW_TAG :
     break;

   case FieldCopyMsgIndicator::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldConfirmStatus::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldIndividualAllocID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldAllocQty::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldNoCapacities::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCapacities::skip( fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldAllocAccountType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldReportedPx::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldProcessCode::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldExDate::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldMaturityNetMoney::RAW_TAG :
     break;

   case FieldSettlCurrAmt::RAW_TAG :
     break;

   case FieldSettlCurrency::RAW_TAG :
     break;

   case FieldSettlCurrFxRate::RAW_TAG :
     break;

   case FieldSettlCurrFxRateCalc::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldCommission::RAW_TAG :
     break;

   case FieldCommType::RAW_TAG :
     break;

   case FieldCommCurrency::RAW_TAG :
     break;

   case FieldFundRenewWaiv::RAW_TAG :
     break;

   case FieldSharedCommission::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosTransType::RAW_TAG :
     break;

   case FieldPosMaintAction::RAW_TAG :
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     break;

   case FieldPosMaintRptRefID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     break;

   case FieldContraryInstructionIndicator::RAW_TAG :
     break;

   case FieldPriorSpreadIndicator::RAW_TAG :
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosTransType::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosMaintAction::RAW_TAG :
     break;

   case FieldOrigPosReqRefID::RAW_TAG :
     break;

   case FieldPosMaintStatus::RAW_TAG :
     break;

   case FieldPosMaintResult::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW_TAG :
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoTradingSessions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositionsAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldPosReqResult::RAW_TAG :
     break;

   case FieldPosReqStatus::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW_TAG :
     break;

   case FieldPosReqID::RAW_TAG :
     break;

   case FieldPosReqType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTotalNumPosReports::RAW_TAG :
     break;

   case FieldUnsolicitedIndicator::RAW_TAG :
     break;

   case FieldPosReqResult::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldSettlPrice::RAW_TAG :
     break;

   case FieldSettlPriceType::RAW_TAG :
     break;

   case FieldPriorSettlPrice::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldRegistStatus::RAW_TAG :
     break;

   case FieldDeliveryDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW_TAG :
     break;

   case FieldTradeRequestType::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTotNumTradeReports::RAW_TAG :
     break;

   case FieldTradeRequestResult::RAW_TAG :
     break;

   case FieldTradeRequestStatus::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW_TAG :
     break;

   case FieldTradeReportTransType::RAW_TAG :
     break;

   case FieldTradeReportType::RAW_TAG :
     break;

   case FieldTrdType::RAW_TAG :
     break;

   case FieldTrdSubType::RAW_TAG :
     break;

   case FieldSecondaryTrdType::RAW_TAG :
     break;

   case FieldTransferReason::RAW_TAG :
     break;

   case FieldExecType::RAW_TAG :
     break;

   case FieldTradeReportRefID::RAW_TAG :
     break;

   case FieldSecondaryTradeReportRefID::RAW_TAG :
     break;

   case FieldTrdRptStatus::RAW_TAG :
     break;

   case FieldTradeReportRejectReason::RAW_TAG :
     break;

   case FieldSecondaryTradeReportID::RAW_TAG :
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldTradeLinkID::RAW_TAG :
     break;

   case FieldTrdMatchID::RAW_TAG :
     break;

   case FieldExecID::RAW_TAG :
     break;

   case FieldSecondaryExecID::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldClearingFeeIndicator::RAW_TAG :
     break;

   case FieldOrderCapacity::RAW_TAG :
     break;

   case FieldOrderRestrictions::RAW_TAG :
     break;

   case FieldCustOrderCapacity::RAW_TAG :
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAcctIDSource::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldPreallocMethod::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldAllocTransType::RAW_TAG :
     break;

   case FieldAllocReportRefID::RAW_TAG :
     break;

   case FieldAllocCancReplaceReason::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldAllocReportType::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldRefAllocID::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldAllocLinkID::RAW_TAG :
     break;

   case FieldAllocLinkType::RAW_TAG :
     break;

   case FieldBookingRefID::RAW_TAG :
     break;

   case FieldAllocNoOrdersType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW_TAG :
     break;

   case FieldReversalIndicator::RAW_TAG :
     break;

   case FieldMatchType::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldDeliveryForm::RAW_TAG :
     break;

   case FieldPctAtRisk::RAW_TAG :
     break;

   case FieldNoInstrAttrib::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldLastMkt::RAW_TAG :
     break;

   case FieldTradeOriginationDate::RAW_TAG :
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAvgPx::RAW_TAG :
     break;

   case FieldAvgParPx::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldAvgPxPrecision::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldSettlType::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldBookingType::RAW_TAG :
     break;

   case FieldGrossTradeAmt::RAW_TAG :
     break;

   case FieldConcession::RAW_TAG :
     break;

   case FieldTotalTakedown::RAW_TAG :
     break;

   case FieldNetMoney::RAW_TAG :
     break;

   case FieldPositionEffect::RAW_TAG :
     break;

   case FieldAutoAcceptIndicator::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNumDaysInterest::RAW_TAG :
     break;

   case FieldAccruedInterestRate::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldTotalAccruedInterestAmt::RAW_TAG :
     break;

   case FieldInterestAtMaturity::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldLegalConfirm::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW_TAG :
     break;

   case FieldYield::RAW_TAG :
     break;

   case FieldYieldCalcDate::RAW_TAG :
     break;

   case FieldYieldRedemptionDate::RAW_TAG :
     break;

   case FieldYieldRedemptionPrice::RAW_TAG :
     break;

   case FieldYieldRedemptionPriceType::RAW_TAG :
     break;

   case FieldTotNoAllocs::RAW_TAG :
     break;

   case FieldLastFragment::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReportAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW_TAG :
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocStatus::RAW_TAG :
     break;

   case FieldAllocRejCode::RAW_TAG :
     break;

   case FieldAllocReportType::RAW_TAG :
     break;

   case FieldAllocIntermedReqType::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldNoAllocs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW_TAG :
     break;

   case FieldTradeDate::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAffirmStatus::RAW_TAG :
     break;

   case FieldConfirmRejReason::RAW_TAG :
     break;

   case FieldMatchStatus::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructionRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstReqID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldEffectiveTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldLastUpdateTime::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAssignmentReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAsgnRptID::RAW_TAG :
     break;

   case FieldTotNumAssignmentReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldThresholdAmount::RAW_TAG :
     break;

   case FieldSettlPrice::RAW_TAG :
     break;

   case FieldSettlPriceType::RAW_TAG :
     break;

   case FieldUnderlyingSettlPrice::RAW_TAG :
     break;

   case FieldExpireDate::RAW_TAG :
     break;

   case FieldAssignmentMethod::RAW_TAG :
     break;

   case FieldAssignmentUnit::RAW_TAG :
     break;

   case FieldOpenInterest::RAW_TAG :
     break;

   case FieldExerciseMethod::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralAssignment::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollAsgnID::RAW_TAG :
     break;

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     break;

   case FieldCollAsgnRefID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldExpireTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRespID::RAW_TAG :
     break;

   case FieldCollAsgnID::RAW_TAG :
     break;

   case FieldCollReqID::RAW_TAG :
     break;

   case FieldCollAsgnReason::RAW_TAG :
     break;

   case FieldCollAsgnTransType::RAW_TAG :
     break;

   case FieldCollAsgnRespType::RAW_TAG :
     break;

   case FieldCollAsgnRejectReason::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRptID::RAW_TAG :
     break;

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldCollStatus::RAW_TAG :
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldLastRptRequested::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldNoMiscFees::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiry::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::skip( fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW_TAG :
     break;

   case FieldTotalNetValue::RAW_TAG :
     break;

   case FieldCashOutstanding::RAW_TAG :
     break;

   case FieldNoTrdRegTimestamps::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW_TAG :
     break;

   case FieldPrice::RAW_TAG :
     break;

   case FieldPriceType::RAW_TAG :
     break;

   case FieldAccruedInterestAmt::RAW_TAG :
     break;

   case FieldEndAccruedInterestAmt::RAW_TAG :
     break;

   case FieldStartCash::RAW_TAG :
     break;

   case FieldEndCash::RAW_TAG :
     break;

   case FieldSpread::RAW_TAG :
     break;

   case FieldBenchmarkCurveCurrency::RAW_TAG :
     break;

   case FieldBenchmarkCurveName::RAW_TAG :
     break;

   case FieldBenchmarkCurvePoint::RAW_TAG :
     break;

   case FieldBenchmarkPrice::RAW_TAG :
     break;

   case FieldBenchmarkPriceType::RAW_TAG :
     break;

   case FieldBenchmarkSecurityID::RAW_TAG :
     break;

   case FieldBenchmarkSecurityIDSource::RAW_TAG :
     break;

   case FieldNoStipulations::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW_TAG :
     break;

   case FieldStandInstDbType::RAW_TAG :
     break;

   case FieldStandInstDbName::RAW_TAG :
     break;

   case FieldStandInstDbID::RAW_TAG :
     break;

   case FieldNoDlvyInst::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkRequestType::RAW_TAG :
     break;

   case FieldNetworkRequestID::RAW_TAG :
     break;

   case FieldNoCompIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW_TAG :
     break;

   case FieldNetworkRequestID::RAW_TAG :
     break;

   case FieldNetworkResponseID::RAW_TAG :
     break;

   case FieldLastNetworkResponseID::RAW_TAG :
     break;

   case FieldNoCompIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     break;

   case FieldUserRequestType::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldPassword::RAW_TAG :
     break;

   case FieldNewPassword::RAW_TAG :
     break;

   case FieldRawDataLength::RAW_TAG :
     break;

   case FieldRawData::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW_TAG :
     break;

   case FieldUsername::RAW_TAG :
     break;

   case FieldUserStatus::RAW_TAG :
     break;

   case FieldUserStatusText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiryAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW_TAG :
     break;

   case FieldCollInquiryStatus::RAW_TAG :
     break;

   case FieldCollInquiryResult::RAW_TAG :
     break;

   case FieldNoCollInquiryQualifier::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::skip( fix+pos, len - pos );
     break;

   case FieldTotNumReports::RAW_TAG :
     break;

   case FieldNoPartyIDs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW_TAG :
     break;

   case FieldAccountType::RAW_TAG :
     break;

   case FieldClOrdID::RAW_TAG :
     break;

   case FieldOrderID::RAW_TAG :
     break;

   case FieldSecondaryOrderID::RAW_TAG :
     break;

   case FieldSecondaryClOrdID::RAW_TAG :
     break;

   case FieldNoExecs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW_TAG :
     break;

   case FieldSymbolSfx::RAW_TAG :
     break;

   case FieldSecurityID::RAW_TAG :
     break;

   case FieldSecurityIDSource::RAW_TAG :
     break;

   case FieldNoSecurityAltID::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW_TAG :
     break;

   case FieldCFICode::RAW_TAG :
     break;

   case FieldSecurityType::RAW_TAG :
     break;

   case FieldSecuritySubType::RAW_TAG :
     break;

   case FieldMaturityMonthYear::RAW_TAG :
     break;

   case FieldMaturityDate::RAW_TAG :
     break;

   case FieldPutOrCall::RAW_TAG :
     break;

   case FieldCouponPaymentDate::RAW_TAG :
     break;

   case FieldIssueDate::RAW_TAG :
     break;

   case FieldRepoCollateralSecurityType::RAW_TAG :
     break;

   case FieldRepurchaseTerm::RAW_TAG :
     break;

   case FieldRepurchaseRate::RAW_TAG :
     break;

   case FieldFactor::RAW_TAG :
     break;

   case FieldCreditRating::RAW_TAG :
     break;

   case FieldInstrRegistry::RAW_TAG :
     break;

   case FieldCountryOfIssue::RAW_TAG :
     break;

   case FieldStateOrProvinceOfIssue::RAW_TAG :
     break;

   case FieldLocaleOfIssue::RAW_TAG :
     break;

   case FieldRedemptionDate::RAW_TAG :
     break;

   case FieldStrikePrice::RAW_TAG :
     break;

   case FieldStrikeCurrency::RAW_TAG :
     break;

   case FieldOptAttribute::RAW_TAG :
     break;

   case FieldContractMultiplier::RAW_TAG :
     break;

   case FieldCouponRate::RAW_TAG :
     break;

   case FieldSecurityExchange::RAW_TAG :
     break;

   case FieldIssuer::RAW_TAG :
     break;

   case FieldEncodedIssuerLen::RAW_TAG :
     break;

   case FieldEncodedIssuer::RAW_TAG :
     break;

   case FieldSecurityDesc::RAW_TAG :
     break;

   case FieldEncodedSecurityDescLen::RAW_TAG :
     break;

   case FieldEncodedSecurityDesc::RAW_TAG :
     break;

   case FieldPool::RAW_TAG :
     break;

   case FieldContractSettlMonth::RAW_TAG :
     break;

   case FieldCPProgram::RAW_TAG :
     break;

   case FieldCPRegType::RAW_TAG :
     break;

   case FieldNoEvents::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW_TAG :
     break;

   case FieldInterestAccrualDate::RAW_TAG :
     break;

   case FieldAgreementDesc::RAW_TAG :
     break;

   case FieldAgreementID::RAW_TAG :
     break;

   case FieldAgreementDate::RAW_TAG :
     break;

   case FieldAgreementCurrency::RAW_TAG :
     break;

   case FieldTerminationType::RAW_TAG :
     break;

   case FieldStartDate::RAW_TAG :
     break;

   case FieldEndDate::RAW_TAG :
     break;

   case FieldDeliveryType::RAW_TAG :
     break;

   case FieldMarginRatio::RAW_TAG :
     break;

   case FieldSettlDate::RAW_TAG :
     break;

   case FieldQuantity::RAW_TAG :
     break;

   case FieldQtyType::RAW_TAG :
     break;

   case FieldCurrency::RAW_TAG :
     break;

   case FieldNoLegs::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW_TAG :
     break;

   case FieldTradingSessionSubID::RAW_TAG :
     break;

   case FieldSettlSessID::RAW_TAG :
     break;

   case FieldSettlSessSubID::RAW_TAG :
     break;

   case FieldClearingBusinessDate::RAW_TAG :
     break;

   case FieldResponseTransportType::RAW_TAG :
     break;

   case FieldResponseDestination::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = loadRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmReqID::RAW_TAG :
     break;

   case FieldConfirmType::RAW_TAG :
     break;

   case FieldNoOrders::RAW_TAG :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldAllocID::RAW_TAG :
     break;

   case FieldSecondaryAllocID::RAW_TAG :
     break;

   case FieldIndividualAllocID::RAW_TAG :
     break;

   case FieldTransactTime::RAW_TAG :
     break;

   case FieldAllocAccount::RAW_TAG :
     break;

   case FieldAllocAcctIDSource::RAW_TAG :
     break;

   case FieldAllocAccountType::RAW_TAG :
     break;

   case FieldText::RAW_TAG :
     break;

   case FieldEncodedTextLen::RAW_TAG :
     break;

   case FieldEncodedText::RAW_TAG :
     break;

   case FieldCheckSum::RAW_TAG :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}


// ---------------------------------- fields ---------------------------------

GetDepthMethod MessageHeader::groupGetDepthMethods[] = {
  GroupHops::getFieldDepth,
  nullptr };

GetDepthMethod MessageHeartbeat::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageTestRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageResendRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageReject::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageSequenceReset::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageLogout::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageIOI::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupIOIQualifiers::getFieldDepth,
  GroupRoutingIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageAdvertisement::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageExecutionReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupContraBrokers::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupContAmts::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderCancelReject::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageLogon::groupGetDepthMethods[] = {
  GroupMsgTypes::getFieldDepth,
  nullptr };

GetDepthMethod MessageNews::groupGetDepthMethods[] = {
  GroupRoutingIDs::getFieldDepth,
  GroupRelatedSym::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLinesOfText::getFieldDepth,
  nullptr };

GetDepthMethod MessageEmail::groupGetDepthMethods[] = {
  GroupRoutingIDs::getFieldDepth,
  GroupRelatedSym::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupLinesOfText::getFieldDepth,
  nullptr };

GetDepthMethod MessageNewOrderSingle::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageNewOrderList::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderCancelRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderCancelReplaceRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderStatusRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageAllocationInstruction::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageListCancelRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageListExecute::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageListStatusRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageListStatus::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  nullptr };

GetDepthMethod MessageAllocationInstructionAck::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageDontKnowTrade::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteRequest::groupGetDepthMethods[] = {
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuote::groupGetDepthMethods[] = {
  GroupQuoteQualifiers::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSettlementInstructions::groupGetDepthMethods[] = {
  GroupSettlInst::getFieldDepth,
  nullptr };

GetDepthMethod MessageMarketDataRequest::groupGetDepthMethods[] = {
  GroupMDEntryTypes::getFieldDepth,
  GroupRelatedSym::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  nullptr };

GetDepthMethod MessageMarketDataSnapshotFullRefresh::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupMDEntries::getFieldDepth,
  nullptr };

GetDepthMethod MessageMarketDataIncrementalRefresh::groupGetDepthMethods[] = {
  GroupMDEntries::getFieldDepth,
  nullptr };

GetDepthMethod MessageMarketDataRequestReject::groupGetDepthMethods[] = {
  GroupAltMDSource::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteCancel::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupQuoteEntries::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteStatusRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageMassQuoteAcknowledgement::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupQuoteSets::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityDefinitionRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityDefinition::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityStatusRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityStatus::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradingSessionStatusRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageTradingSessionStatus::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageMassQuote::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupQuoteSets::getFieldDepth,
  nullptr };

GetDepthMethod MessageBusinessMessageReject::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageBidRequest::groupGetDepthMethods[] = {
  GroupBidDescriptors::getFieldDepth,
  GroupBidComponents::getFieldDepth,
  nullptr };

GetDepthMethod MessageBidResponse::groupGetDepthMethods[] = {
  GroupBidComponents::getFieldDepth,
  nullptr };

GetDepthMethod MessageListStrikePrice::groupGetDepthMethods[] = {
  GroupStrikes::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageXMLnonFIX::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageRegistrationInstructions::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupRegistDtls::getFieldDepth,
  GroupDistribInsts::getFieldDepth,
  nullptr };

GetDepthMethod MessageRegistrationInstructionsResponse::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderMassCancelRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderMassCancelReport::groupGetDepthMethods[] = {
  GroupAffectedOrders::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  nullptr };

GetDepthMethod MessageNewOrderCross::groupGetDepthMethods[] = {
  GroupSides::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageCrossOrderCancelReplaceRequest::groupGetDepthMethods[] = {
  GroupSides::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageCrossOrderCancelRequest::groupGetDepthMethods[] = {
  GroupSides::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityTypeRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageSecurityTypes::groupGetDepthMethods[] = {
  GroupSecurityTypes::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityListRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityList::groupGetDepthMethods[] = {
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageDerivativeSecurityListRequest::groupGetDepthMethods[] = {
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  nullptr };

GetDepthMethod MessageDerivativeSecurityList::groupGetDepthMethods[] = {
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageNewOrderMultileg::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageMultilegOrderCancelReplace::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradeCaptureReportRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupDates::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradeCaptureReport::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupPosAmt::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupSides::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderMassStatusRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteRequestReject::groupGetDepthMethods[] = {
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageRFQRequest::groupGetDepthMethods[] = {
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteStatusReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupQuoteQualifiers::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteResponse::groupGetDepthMethods[] = {
  GroupQuoteQualifiers::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageConfirmation::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupOrders::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupCapacities::getFieldDepth,
  GroupDlvyInst::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  nullptr };

GetDepthMethod MessagePositionMaintenanceRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupPositions::getFieldDepth,
  nullptr };

GetDepthMethod MessagePositionMaintenanceReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupPositions::getFieldDepth,
  GroupPosAmt::getFieldDepth,
  nullptr };

GetDepthMethod MessageRequestForPositions::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  nullptr };

GetDepthMethod MessageRequestForPositionsAck::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessagePositionReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupPositions::getFieldDepth,
  GroupPosAmt::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradeCaptureReportRequestAck::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradeCaptureReportAck::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageAllocationReport::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageAllocationReportAck::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageConfirmationAck::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageSettlementInstructionRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageAssignmentReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupPositions::getFieldDepth,
  GroupPosAmt::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralAssignment::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupDlvyInst::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralResponse::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupDlvyInst::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralInquiry::groupGetDepthMethods[] = {
  GroupCollInquiryQualifier::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupDlvyInst::getFieldDepth,
  nullptr };

GetDepthMethod MessageNetworkCounterpartySystemStatusRequest::groupGetDepthMethods[] = {
  GroupCompIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageNetworkCounterpartySystemStatusResponse::groupGetDepthMethods[] = {
  GroupCompIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageUserRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageUserResponse::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageCollateralInquiryAck::groupGetDepthMethods[] = {
  GroupCollInquiryQualifier::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageConfirmationRequest::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  nullptr };


FieldDepth MessageHeader::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBeginString::RAW_TAG :
     case FieldBodyLength::RAW_TAG :
     case FieldMsgType::RAW_TAG :
     case FieldSenderCompID::RAW_TAG :
     case FieldTargetCompID::RAW_TAG :
     case FieldOnBehalfOfCompID::RAW_TAG :
     case FieldDeliverToCompID::RAW_TAG :
     case FieldSecureDataLen::RAW_TAG :
     case FieldSecureData::RAW_TAG :
     case FieldMsgSeqNum::RAW_TAG :
     case FieldSenderSubID::RAW_TAG :
     case FieldSenderLocationID::RAW_TAG :
     case FieldTargetSubID::RAW_TAG :
     case FieldTargetLocationID::RAW_TAG :
     case FieldOnBehalfOfSubID::RAW_TAG :
     case FieldOnBehalfOfLocationID::RAW_TAG :
     case FieldDeliverToSubID::RAW_TAG :
     case FieldDeliverToLocationID::RAW_TAG :
     case FieldPossDupFlag::RAW_TAG :
     case FieldPossResend::RAW_TAG :
     case FieldSendingTime::RAW_TAG :
     case FieldOrigSendingTime::RAW_TAG :
     case FieldXmlDataLen::RAW_TAG :
     case FieldXmlData::RAW_TAG :
     case FieldMessageEncoding::RAW_TAG :
     case FieldLastMsgSeqNumProcessed::RAW_TAG :
     case FieldNoHops::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageHeartbeat::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTestReqID::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTestRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTestReqID::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageResendRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBeginSeqNo::RAW_TAG :
     case FieldEndSeqNo::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRefSeqNum::RAW_TAG :
     case FieldRefTagID::RAW_TAG :
     case FieldRefMsgType::RAW_TAG :
     case FieldSessionRejectReason::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSequenceReset::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldGapFillFlag::RAW_TAG :
     case FieldNewSeqNo::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageLogout::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageIOI::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldIOIID::RAW_TAG :
     case FieldIOITransType::RAW_TAG :
     case FieldIOIRefID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldIOIQty::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldValidUntilTime::RAW_TAG :
     case FieldIOIQltyInd::RAW_TAG :
     case FieldIOINaturalFlag::RAW_TAG :
     case FieldNoIOIQualifiers::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldURLLink::RAW_TAG :
     case FieldNoRoutingIDs::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAdvertisement::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAdvId::RAW_TAG :
     case FieldAdvTransType::RAW_TAG :
     case FieldAdvRefID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldAdvSide::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldURLLink::RAW_TAG :
     case FieldLastMkt::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageExecutionReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldSecondaryExecID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrigClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldQuoteRespID::RAW_TAG :
     case FieldOrdStatusReqID::RAW_TAG :
     case FieldMassStatusReqID::RAW_TAG :
     case FieldTotNumReports::RAW_TAG :
     case FieldLastRptRequested::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldNoContraBrokers::RAW_TAG :
     case FieldListID::RAW_TAG :
     case FieldCrossID::RAW_TAG :
     case FieldOrigCrossID::RAW_TAG :
     case FieldCrossType::RAW_TAG :
     case FieldExecID::RAW_TAG :
     case FieldExecRefID::RAW_TAG :
     case FieldExecType::RAW_TAG :
     case FieldOrdStatus::RAW_TAG :
     case FieldWorkingIndicator::RAW_TAG :
     case FieldOrdRejReason::RAW_TAG :
     case FieldExecRestatementReason::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldDayBookingInst::RAW_TAG :
     case FieldBookingUnit::RAW_TAG :
     case FieldPreallocMethod::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldCashMargin::RAW_TAG :
     case FieldClearingFeeIndicator::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldStopPx::RAW_TAG :
     case FieldPegOffsetValue::RAW_TAG :
     case FieldPegMoveType::RAW_TAG :
     case FieldPegOffsetType::RAW_TAG :
     case FieldPegLimitType::RAW_TAG :
     case FieldPegRoundDirection::RAW_TAG :
     case FieldPegScope::RAW_TAG :
     case FieldDiscretionInst::RAW_TAG :
     case FieldDiscretionOffsetValue::RAW_TAG :
     case FieldDiscretionMoveType::RAW_TAG :
     case FieldDiscretionOffsetType::RAW_TAG :
     case FieldDiscretionLimitType::RAW_TAG :
     case FieldDiscretionRoundDirection::RAW_TAG :
     case FieldDiscretionScope::RAW_TAG :
     case FieldPeggedPrice::RAW_TAG :
     case FieldDiscretionPrice::RAW_TAG :
     case FieldTargetStrategy::RAW_TAG :
     case FieldTargetStrategyParameters::RAW_TAG :
     case FieldParticipationRate::RAW_TAG :
     case FieldTargetStrategyPerformance::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldSolicitedFlag::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldOrderRestrictions::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldLastQty::RAW_TAG :
     case FieldUnderlyingLastQty::RAW_TAG :
     case FieldLastPx::RAW_TAG :
     case FieldUnderlyingLastPx::RAW_TAG :
     case FieldLastParPx::RAW_TAG :
     case FieldLastSpotRate::RAW_TAG :
     case FieldLastForwardPoints::RAW_TAG :
     case FieldLastMkt::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldTimeBracket::RAW_TAG :
     case FieldLastCapacity::RAW_TAG :
     case FieldLeavesQty::RAW_TAG :
     case FieldCumQty::RAW_TAG :
     case FieldAvgPx::RAW_TAG :
     case FieldDayOrderQty::RAW_TAG :
     case FieldDayCumQty::RAW_TAG :
     case FieldDayAvgPx::RAW_TAG :
     case FieldGTBookingInst::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldReportToExch::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommCurrency::RAW_TAG :
     case FieldFundRenewWaiv::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldGrossTradeAmt::RAW_TAG :
     case FieldNumDaysInterest::RAW_TAG :
     case FieldExDate::RAW_TAG :
     case FieldAccruedInterestRate::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldInterestAtMaturity::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldTradedFlatSwitch::RAW_TAG :
     case FieldBasisFeatureDate::RAW_TAG :
     case FieldBasisFeaturePrice::RAW_TAG :
     case FieldConcession::RAW_TAG :
     case FieldTotalTakedown::RAW_TAG :
     case FieldNetMoney::RAW_TAG :
     case FieldSettlCurrAmt::RAW_TAG :
     case FieldSettlCurrency::RAW_TAG :
     case FieldSettlCurrFxRate::RAW_TAG :
     case FieldSettlCurrFxRateCalc::RAW_TAG :
     case FieldHandlInst::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldMaxFloor::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldMaxShow::RAW_TAG :
     case FieldBookingType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldSettlDate2::RAW_TAG :
     case FieldOrderQty2::RAW_TAG :
     case FieldLastForwardPoints2::RAW_TAG :
     case FieldMultiLegReportingType::RAW_TAG :
     case FieldCancellationRights::RAW_TAG :
     case FieldMoneyLaunderingStatus::RAW_TAG :
     case FieldRegistID::RAW_TAG :
     case FieldDesignation::RAW_TAG :
     case FieldTransBkdTime::RAW_TAG :
     case FieldExecValuationPoint::RAW_TAG :
     case FieldExecPriceType::RAW_TAG :
     case FieldExecPriceAdjustment::RAW_TAG :
     case FieldPriorityIndicator::RAW_TAG :
     case FieldPriceImprovement::RAW_TAG :
     case FieldLastLiquidityInd::RAW_TAG :
     case FieldNoContAmts::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldCopyMsgIndicator::RAW_TAG :
     case FieldNoMiscFees::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderCancelReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldOrigClOrdID::RAW_TAG :
     case FieldOrdStatus::RAW_TAG :
     case FieldWorkingIndicator::RAW_TAG :
     case FieldOrigOrdModTime::RAW_TAG :
     case FieldListID::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldCxlRejResponseTo::RAW_TAG :
     case FieldCxlRejReason::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageLogon::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldEncryptMethod::RAW_TAG :
     case FieldHeartBtInt::RAW_TAG :
     case FieldRawDataLength::RAW_TAG :
     case FieldRawData::RAW_TAG :
     case FieldResetSeqNumFlag::RAW_TAG :
     case FieldNextExpectedMsgSeqNum::RAW_TAG :
     case FieldMaxMessageSize::RAW_TAG :
     case FieldNoMsgTypes::RAW_TAG :
     case FieldTestMessageIndicator::RAW_TAG :
     case FieldUsername::RAW_TAG :
     case FieldPassword::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNews::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrigTime::RAW_TAG :
     case FieldUrgency::RAW_TAG :
     case FieldHeadline::RAW_TAG :
     case FieldEncodedHeadlineLen::RAW_TAG :
     case FieldEncodedHeadline::RAW_TAG :
     case FieldNoRoutingIDs::RAW_TAG :
     case FieldNoRelatedSym::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLinesOfText::RAW_TAG :
     case FieldURLLink::RAW_TAG :
     case FieldRawDataLength::RAW_TAG :
     case FieldRawData::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageEmail::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldEmailThreadID::RAW_TAG :
     case FieldEmailType::RAW_TAG :
     case FieldOrigTime::RAW_TAG :
     case FieldSubject::RAW_TAG :
     case FieldEncodedSubjectLen::RAW_TAG :
     case FieldEncodedSubject::RAW_TAG :
     case FieldNoRoutingIDs::RAW_TAG :
     case FieldNoRelatedSym::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldNoLinesOfText::RAW_TAG :
     case FieldRawDataLength::RAW_TAG :
     case FieldRawData::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNewOrderSingle::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldDayBookingInst::RAW_TAG :
     case FieldBookingUnit::RAW_TAG :
     case FieldPreallocMethod::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldCashMargin::RAW_TAG :
     case FieldClearingFeeIndicator::RAW_TAG :
     case FieldHandlInst::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldMaxFloor::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldProcessCode::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldPrevClosePx::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldLocateReqd::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldStopPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldSolicitedFlag::RAW_TAG :
     case FieldIOIID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldGTBookingInst::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommCurrency::RAW_TAG :
     case FieldFundRenewWaiv::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldOrderRestrictions::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldForexReq::RAW_TAG :
     case FieldSettlCurrency::RAW_TAG :
     case FieldBookingType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldSettlDate2::RAW_TAG :
     case FieldOrderQty2::RAW_TAG :
     case FieldPrice2::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldCoveredOrUncovered::RAW_TAG :
     case FieldMaxShow::RAW_TAG :
     case FieldPegOffsetValue::RAW_TAG :
     case FieldPegMoveType::RAW_TAG :
     case FieldPegOffsetType::RAW_TAG :
     case FieldPegLimitType::RAW_TAG :
     case FieldPegRoundDirection::RAW_TAG :
     case FieldPegScope::RAW_TAG :
     case FieldDiscretionInst::RAW_TAG :
     case FieldDiscretionOffsetValue::RAW_TAG :
     case FieldDiscretionMoveType::RAW_TAG :
     case FieldDiscretionOffsetType::RAW_TAG :
     case FieldDiscretionLimitType::RAW_TAG :
     case FieldDiscretionRoundDirection::RAW_TAG :
     case FieldDiscretionScope::RAW_TAG :
     case FieldTargetStrategy::RAW_TAG :
     case FieldTargetStrategyParameters::RAW_TAG :
     case FieldParticipationRate::RAW_TAG :
     case FieldCancellationRights::RAW_TAG :
     case FieldMoneyLaunderingStatus::RAW_TAG :
     case FieldRegistID::RAW_TAG :
     case FieldDesignation::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNewOrderList::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW_TAG :
     case FieldBidID::RAW_TAG :
     case FieldClientBidID::RAW_TAG :
     case FieldProgRptReqs::RAW_TAG :
     case FieldBidType::RAW_TAG :
     case FieldProgPeriodInterval::RAW_TAG :
     case FieldCancellationRights::RAW_TAG :
     case FieldMoneyLaunderingStatus::RAW_TAG :
     case FieldRegistID::RAW_TAG :
     case FieldListExecInstType::RAW_TAG :
     case FieldListExecInst::RAW_TAG :
     case FieldEncodedListExecInstLen::RAW_TAG :
     case FieldEncodedListExecInst::RAW_TAG :
     case FieldAllowableOneSidednessPct::RAW_TAG :
     case FieldAllowableOneSidednessValue::RAW_TAG :
     case FieldAllowableOneSidednessCurr::RAW_TAG :
     case FieldTotNoOrders::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoOrders::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderCancelRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrigClOrdID::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldListID::RAW_TAG :
     case FieldOrigOrdModTime::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderCancelReplaceRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldOrigClOrdID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldListID::RAW_TAG :
     case FieldOrigOrdModTime::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldDayBookingInst::RAW_TAG :
     case FieldBookingUnit::RAW_TAG :
     case FieldPreallocMethod::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldCashMargin::RAW_TAG :
     case FieldClearingFeeIndicator::RAW_TAG :
     case FieldHandlInst::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldMaxFloor::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldStopPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldPegOffsetValue::RAW_TAG :
     case FieldPegMoveType::RAW_TAG :
     case FieldPegOffsetType::RAW_TAG :
     case FieldPegLimitType::RAW_TAG :
     case FieldPegRoundDirection::RAW_TAG :
     case FieldPegScope::RAW_TAG :
     case FieldDiscretionInst::RAW_TAG :
     case FieldDiscretionOffsetValue::RAW_TAG :
     case FieldDiscretionMoveType::RAW_TAG :
     case FieldDiscretionOffsetType::RAW_TAG :
     case FieldDiscretionLimitType::RAW_TAG :
     case FieldDiscretionRoundDirection::RAW_TAG :
     case FieldDiscretionScope::RAW_TAG :
     case FieldTargetStrategy::RAW_TAG :
     case FieldTargetStrategyParameters::RAW_TAG :
     case FieldParticipationRate::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldSolicitedFlag::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldGTBookingInst::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommCurrency::RAW_TAG :
     case FieldFundRenewWaiv::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldOrderRestrictions::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldForexReq::RAW_TAG :
     case FieldSettlCurrency::RAW_TAG :
     case FieldBookingType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldSettlDate2::RAW_TAG :
     case FieldOrderQty2::RAW_TAG :
     case FieldPrice2::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldCoveredOrUncovered::RAW_TAG :
     case FieldMaxShow::RAW_TAG :
     case FieldLocateReqd::RAW_TAG :
     case FieldCancellationRights::RAW_TAG :
     case FieldMoneyLaunderingStatus::RAW_TAG :
     case FieldRegistID::RAW_TAG :
     case FieldDesignation::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldOrdStatusReqID::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAllocationInstruction::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocID::RAW_TAG :
     case FieldAllocTransType::RAW_TAG :
     case FieldAllocType::RAW_TAG :
     case FieldSecondaryAllocID::RAW_TAG :
     case FieldRefAllocID::RAW_TAG :
     case FieldAllocCancReplaceReason::RAW_TAG :
     case FieldAllocIntermedReqType::RAW_TAG :
     case FieldAllocLinkID::RAW_TAG :
     case FieldAllocLinkType::RAW_TAG :
     case FieldBookingRefID::RAW_TAG :
     case FieldAllocNoOrdersType::RAW_TAG :
     case FieldNoOrders::RAW_TAG :
     case FieldNoExecs::RAW_TAG :
     case FieldPreviouslyReported::RAW_TAG :
     case FieldReversalIndicator::RAW_TAG :
     case FieldMatchType::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldLastMkt::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldAvgPx::RAW_TAG :
     case FieldAvgParPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldAvgPxPrecision::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldBookingType::RAW_TAG :
     case FieldGrossTradeAmt::RAW_TAG :
     case FieldConcession::RAW_TAG :
     case FieldTotalTakedown::RAW_TAG :
     case FieldNetMoney::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldAutoAcceptIndicator::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldNumDaysInterest::RAW_TAG :
     case FieldAccruedInterestRate::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldTotalAccruedInterestAmt::RAW_TAG :
     case FieldInterestAtMaturity::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldLegalConfirm::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldTotNoAllocs::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListCancelRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListExecute::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW_TAG :
     case FieldClientBidID::RAW_TAG :
     case FieldBidID::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListStatus::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW_TAG :
     case FieldListStatusType::RAW_TAG :
     case FieldNoRpts::RAW_TAG :
     case FieldListOrderStatus::RAW_TAG :
     case FieldRptSeq::RAW_TAG :
     case FieldListStatusText::RAW_TAG :
     case FieldEncodedListStatusTextLen::RAW_TAG :
     case FieldEncodedListStatusText::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldTotNoOrders::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoOrders::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAllocationInstructionAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldSecondaryAllocID::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldAllocStatus::RAW_TAG :
     case FieldAllocRejCode::RAW_TAG :
     case FieldAllocType::RAW_TAG :
     case FieldAllocIntermedReqType::RAW_TAG :
     case FieldMatchStatus::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageDontKnowTrade::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldExecID::RAW_TAG :
     case FieldDKReason::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldLastQty::RAW_TAG :
     case FieldLastPx::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW_TAG :
     case FieldRFQReqID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldNoRelatedSym::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuote::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldQuoteRespID::RAW_TAG :
     case FieldQuoteType::RAW_TAG :
     case FieldNoQuoteQualifiers::RAW_TAG :
     case FieldQuoteResponseLevel::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldSettlDate2::RAW_TAG :
     case FieldOrderQty2::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldBidPx::RAW_TAG :
     case FieldOfferPx::RAW_TAG :
     case FieldMktBidPx::RAW_TAG :
     case FieldMktOfferPx::RAW_TAG :
     case FieldMinBidSize::RAW_TAG :
     case FieldBidSize::RAW_TAG :
     case FieldMinOfferSize::RAW_TAG :
     case FieldOfferSize::RAW_TAG :
     case FieldValidUntilTime::RAW_TAG :
     case FieldBidSpotRate::RAW_TAG :
     case FieldOfferSpotRate::RAW_TAG :
     case FieldBidForwardPoints::RAW_TAG :
     case FieldOfferForwardPoints::RAW_TAG :
     case FieldMidPx::RAW_TAG :
     case FieldBidYield::RAW_TAG :
     case FieldMidYield::RAW_TAG :
     case FieldOfferYield::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldBidForwardPoints2::RAW_TAG :
     case FieldOfferForwardPoints2::RAW_TAG :
     case FieldSettlCurrBidFxRate::RAW_TAG :
     case FieldSettlCurrOfferFxRate::RAW_TAG :
     case FieldSettlCurrFxRateCalc::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSettlementInstructions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSettlInstMsgID::RAW_TAG :
     case FieldSettlInstReqID::RAW_TAG :
     case FieldSettlInstMode::RAW_TAG :
     case FieldSettlInstReqRejCode::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoSettlInst::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMarketDataRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDReqID::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldMarketDepth::RAW_TAG :
     case FieldMDUpdateType::RAW_TAG :
     case FieldAggregatedBook::RAW_TAG :
     case FieldOpenCloseSettlFlag::RAW_TAG :
     case FieldScope::RAW_TAG :
     case FieldMDImplicitDelete::RAW_TAG :
     case FieldNoMDEntryTypes::RAW_TAG :
     case FieldNoRelatedSym::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldApplQueueAction::RAW_TAG :
     case FieldApplQueueMax::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMarketDataSnapshotFullRefresh::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDReqID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldFinancialStatus::RAW_TAG :
     case FieldCorporateAction::RAW_TAG :
     case FieldNetChgPrevDay::RAW_TAG :
     case FieldNoMDEntries::RAW_TAG :
     case FieldApplQueueDepth::RAW_TAG :
     case FieldApplQueueResolution::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMarketDataIncrementalRefresh::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDReqID::RAW_TAG :
     case FieldNoMDEntries::RAW_TAG :
     case FieldApplQueueDepth::RAW_TAG :
     case FieldApplQueueResolution::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMarketDataRequestReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDReqID::RAW_TAG :
     case FieldMDReqRejReason::RAW_TAG :
     case FieldNoAltMDSource::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteCancel::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldQuoteCancelType::RAW_TAG :
     case FieldQuoteResponseLevel::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldNoQuoteEntries::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteStatusReqID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMassQuoteAcknowledgement::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldQuoteStatus::RAW_TAG :
     case FieldQuoteRejectReason::RAW_TAG :
     case FieldQuoteResponseLevel::RAW_TAG :
     case FieldQuoteType::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldNoQuoteSets::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityDefinitionRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW_TAG :
     case FieldSecurityRequestType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldExpirationCycle::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityDefinition::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW_TAG :
     case FieldSecurityResponseID::RAW_TAG :
     case FieldSecurityResponseType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldExpirationCycle::RAW_TAG :
     case FieldRoundLot::RAW_TAG :
     case FieldMinTradeVol::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityStatusReqID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityStatus::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityStatusReqID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldUnsolicitedIndicator::RAW_TAG :
     case FieldSecurityTradingStatus::RAW_TAG :
     case FieldFinancialStatus::RAW_TAG :
     case FieldCorporateAction::RAW_TAG :
     case FieldHaltReasonChar::RAW_TAG :
     case FieldInViewOfCommon::RAW_TAG :
     case FieldDueToRelated::RAW_TAG :
     case FieldBuyVolume::RAW_TAG :
     case FieldSellVolume::RAW_TAG :
     case FieldHighPx::RAW_TAG :
     case FieldLowPx::RAW_TAG :
     case FieldLastPx::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldAdjustment::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradingSessionStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradSesReqID::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldTradSesMethod::RAW_TAG :
     case FieldTradSesMode::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradingSessionStatus::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradSesReqID::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldTradSesMethod::RAW_TAG :
     case FieldTradSesMode::RAW_TAG :
     case FieldUnsolicitedIndicator::RAW_TAG :
     case FieldTradSesStatus::RAW_TAG :
     case FieldTradSesStatusRejReason::RAW_TAG :
     case FieldTradSesStartTime::RAW_TAG :
     case FieldTradSesOpenTime::RAW_TAG :
     case FieldTradSesPreCloseTime::RAW_TAG :
     case FieldTradSesCloseTime::RAW_TAG :
     case FieldTradSesEndTime::RAW_TAG :
     case FieldTotalVolumeTraded::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMassQuote::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldQuoteType::RAW_TAG :
     case FieldQuoteResponseLevel::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldDefBidSize::RAW_TAG :
     case FieldDefOfferSize::RAW_TAG :
     case FieldNoQuoteSets::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageBusinessMessageReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRefSeqNum::RAW_TAG :
     case FieldRefMsgType::RAW_TAG :
     case FieldBusinessRejectRefID::RAW_TAG :
     case FieldBusinessRejectReason::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageBidRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBidID::RAW_TAG :
     case FieldClientBidID::RAW_TAG :
     case FieldBidRequestTransType::RAW_TAG :
     case FieldListName::RAW_TAG :
     case FieldTotNoRelatedSym::RAW_TAG :
     case FieldBidType::RAW_TAG :
     case FieldNumTickets::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldSideValue1::RAW_TAG :
     case FieldSideValue2::RAW_TAG :
     case FieldNoBidDescriptors::RAW_TAG :
     case FieldNoBidComponents::RAW_TAG :
     case FieldLiquidityIndType::RAW_TAG :
     case FieldWtAverageLiquidity::RAW_TAG :
     case FieldExchangeForPhysical::RAW_TAG :
     case FieldOutMainCntryUIndex::RAW_TAG :
     case FieldCrossPercent::RAW_TAG :
     case FieldProgRptReqs::RAW_TAG :
     case FieldProgPeriodInterval::RAW_TAG :
     case FieldIncTaxInd::RAW_TAG :
     case FieldForexReq::RAW_TAG :
     case FieldNumBidders::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldBidTradeType::RAW_TAG :
     case FieldBasisPxType::RAW_TAG :
     case FieldStrikeTime::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageBidResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBidID::RAW_TAG :
     case FieldClientBidID::RAW_TAG :
     case FieldNoBidComponents::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListStrikePrice::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW_TAG :
     case FieldTotNoStrikes::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoStrikes::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageXMLnonFIX::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRegistrationInstructions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRegistID::RAW_TAG :
     case FieldRegistTransType::RAW_TAG :
     case FieldRegistRefID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldRegistAcctType::RAW_TAG :
     case FieldTaxAdvantageType::RAW_TAG :
     case FieldOwnershipType::RAW_TAG :
     case FieldNoRegistDtls::RAW_TAG :
     case FieldNoDistribInsts::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRegistrationInstructionsResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRegistID::RAW_TAG :
     case FieldRegistTransType::RAW_TAG :
     case FieldRegistRefID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldRegistStatus::RAW_TAG :
     case FieldRegistRejReasonCode::RAW_TAG :
     case FieldRegistRejReasonText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderMassCancelRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldMassCancelRequestType::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldUnderlyingSymbol::RAW_TAG :
     case FieldUnderlyingSymbolSfx::RAW_TAG :
     case FieldUnderlyingSecurityID::RAW_TAG :
     case FieldUnderlyingSecurityIDSource::RAW_TAG :
     case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     case FieldUnderlyingProduct::RAW_TAG :
     case FieldUnderlyingCFICode::RAW_TAG :
     case FieldUnderlyingSecurityType::RAW_TAG :
     case FieldUnderlyingSecuritySubType::RAW_TAG :
     case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     case FieldUnderlyingMaturityDate::RAW_TAG :
     case FieldUnderlyingPutOrCall::RAW_TAG :
     case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     case FieldUnderlyingIssueDate::RAW_TAG :
     case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     case FieldUnderlyingRepurchaseRate::RAW_TAG :
     case FieldUnderlyingFactor::RAW_TAG :
     case FieldUnderlyingCreditRating::RAW_TAG :
     case FieldUnderlyingInstrRegistry::RAW_TAG :
     case FieldUnderlyingCountryOfIssue::RAW_TAG :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     case FieldUnderlyingRedemptionDate::RAW_TAG :
     case FieldUnderlyingStrikePrice::RAW_TAG :
     case FieldUnderlyingStrikeCurrency::RAW_TAG :
     case FieldUnderlyingOptAttribute::RAW_TAG :
     case FieldUnderlyingContractMultiplier::RAW_TAG :
     case FieldUnderlyingCouponRate::RAW_TAG :
     case FieldUnderlyingSecurityExchange::RAW_TAG :
     case FieldUnderlyingIssuer::RAW_TAG :
     case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     case FieldEncodedUnderlyingIssuer::RAW_TAG :
     case FieldUnderlyingSecurityDesc::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     case FieldUnderlyingCPProgram::RAW_TAG :
     case FieldUnderlyingCPRegType::RAW_TAG :
     case FieldUnderlyingCurrency::RAW_TAG :
     case FieldUnderlyingQty::RAW_TAG :
     case FieldUnderlyingPx::RAW_TAG :
     case FieldUnderlyingDirtyPrice::RAW_TAG :
     case FieldUnderlyingEndPrice::RAW_TAG :
     case FieldUnderlyingStartValue::RAW_TAG :
     case FieldUnderlyingCurrentValue::RAW_TAG :
     case FieldUnderlyingEndValue::RAW_TAG :
     case FieldNoUnderlyingStips::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderMassCancelReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldMassCancelRequestType::RAW_TAG :
     case FieldMassCancelResponse::RAW_TAG :
     case FieldMassCancelRejectReason::RAW_TAG :
     case FieldTotalAffectedOrders::RAW_TAG :
     case FieldNoAffectedOrders::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldUnderlyingSymbol::RAW_TAG :
     case FieldUnderlyingSymbolSfx::RAW_TAG :
     case FieldUnderlyingSecurityID::RAW_TAG :
     case FieldUnderlyingSecurityIDSource::RAW_TAG :
     case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     case FieldUnderlyingProduct::RAW_TAG :
     case FieldUnderlyingCFICode::RAW_TAG :
     case FieldUnderlyingSecurityType::RAW_TAG :
     case FieldUnderlyingSecuritySubType::RAW_TAG :
     case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     case FieldUnderlyingMaturityDate::RAW_TAG :
     case FieldUnderlyingPutOrCall::RAW_TAG :
     case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     case FieldUnderlyingIssueDate::RAW_TAG :
     case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     case FieldUnderlyingRepurchaseRate::RAW_TAG :
     case FieldUnderlyingFactor::RAW_TAG :
     case FieldUnderlyingCreditRating::RAW_TAG :
     case FieldUnderlyingInstrRegistry::RAW_TAG :
     case FieldUnderlyingCountryOfIssue::RAW_TAG :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     case FieldUnderlyingRedemptionDate::RAW_TAG :
     case FieldUnderlyingStrikePrice::RAW_TAG :
     case FieldUnderlyingStrikeCurrency::RAW_TAG :
     case FieldUnderlyingOptAttribute::RAW_TAG :
     case FieldUnderlyingContractMultiplier::RAW_TAG :
     case FieldUnderlyingCouponRate::RAW_TAG :
     case FieldUnderlyingSecurityExchange::RAW_TAG :
     case FieldUnderlyingIssuer::RAW_TAG :
     case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     case FieldEncodedUnderlyingIssuer::RAW_TAG :
     case FieldUnderlyingSecurityDesc::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     case FieldUnderlyingCPProgram::RAW_TAG :
     case FieldUnderlyingCPRegType::RAW_TAG :
     case FieldUnderlyingCurrency::RAW_TAG :
     case FieldUnderlyingQty::RAW_TAG :
     case FieldUnderlyingPx::RAW_TAG :
     case FieldUnderlyingDirtyPrice::RAW_TAG :
     case FieldUnderlyingEndPrice::RAW_TAG :
     case FieldUnderlyingStartValue::RAW_TAG :
     case FieldUnderlyingCurrentValue::RAW_TAG :
     case FieldUnderlyingEndValue::RAW_TAG :
     case FieldNoUnderlyingStips::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNewOrderCross::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCrossID::RAW_TAG :
     case FieldCrossType::RAW_TAG :
     case FieldCrossPrioritization::RAW_TAG :
     case FieldNoSides::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldHandlInst::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldMaxFloor::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldProcessCode::RAW_TAG :
     case FieldPrevClosePx::RAW_TAG :
     case FieldLocateReqd::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldStopPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldIOIID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldGTBookingInst::RAW_TAG :
     case FieldMaxShow::RAW_TAG :
     case FieldPegOffsetValue::RAW_TAG :
     case FieldPegMoveType::RAW_TAG :
     case FieldPegOffsetType::RAW_TAG :
     case FieldPegLimitType::RAW_TAG :
     case FieldPegRoundDirection::RAW_TAG :
     case FieldPegScope::RAW_TAG :
     case FieldDiscretionInst::RAW_TAG :
     case FieldDiscretionOffsetValue::RAW_TAG :
     case FieldDiscretionMoveType::RAW_TAG :
     case FieldDiscretionOffsetType::RAW_TAG :
     case FieldDiscretionLimitType::RAW_TAG :
     case FieldDiscretionRoundDirection::RAW_TAG :
     case FieldDiscretionScope::RAW_TAG :
     case FieldTargetStrategy::RAW_TAG :
     case FieldTargetStrategyParameters::RAW_TAG :
     case FieldParticipationRate::RAW_TAG :
     case FieldCancellationRights::RAW_TAG :
     case FieldMoneyLaunderingStatus::RAW_TAG :
     case FieldRegistID::RAW_TAG :
     case FieldDesignation::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCrossOrderCancelReplaceRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW_TAG :
     case FieldCrossID::RAW_TAG :
     case FieldOrigCrossID::RAW_TAG :
     case FieldCrossType::RAW_TAG :
     case FieldCrossPrioritization::RAW_TAG :
     case FieldNoSides::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldHandlInst::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldMaxFloor::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldProcessCode::RAW_TAG :
     case FieldPrevClosePx::RAW_TAG :
     case FieldLocateReqd::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldStopPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldIOIID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldGTBookingInst::RAW_TAG :
     case FieldMaxShow::RAW_TAG :
     case FieldPegOffsetValue::RAW_TAG :
     case FieldPegMoveType::RAW_TAG :
     case FieldPegOffsetType::RAW_TAG :
     case FieldPegLimitType::RAW_TAG :
     case FieldPegRoundDirection::RAW_TAG :
     case FieldPegScope::RAW_TAG :
     case FieldDiscretionInst::RAW_TAG :
     case FieldDiscretionOffsetValue::RAW_TAG :
     case FieldDiscretionMoveType::RAW_TAG :
     case FieldDiscretionOffsetType::RAW_TAG :
     case FieldDiscretionLimitType::RAW_TAG :
     case FieldDiscretionRoundDirection::RAW_TAG :
     case FieldDiscretionScope::RAW_TAG :
     case FieldTargetStrategy::RAW_TAG :
     case FieldTargetStrategyParameters::RAW_TAG :
     case FieldParticipationRate::RAW_TAG :
     case FieldCancellationRights::RAW_TAG :
     case FieldMoneyLaunderingStatus::RAW_TAG :
     case FieldRegistID::RAW_TAG :
     case FieldDesignation::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCrossOrderCancelRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW_TAG :
     case FieldCrossID::RAW_TAG :
     case FieldOrigCrossID::RAW_TAG :
     case FieldCrossType::RAW_TAG :
     case FieldCrossPrioritization::RAW_TAG :
     case FieldNoSides::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityTypeRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityTypes::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW_TAG :
     case FieldSecurityResponseID::RAW_TAG :
     case FieldSecurityResponseType::RAW_TAG :
     case FieldTotNoSecurityTypes::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoSecurityTypes::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityListRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW_TAG :
     case FieldSecurityListRequestType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityList::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW_TAG :
     case FieldSecurityResponseID::RAW_TAG :
     case FieldSecurityRequestResult::RAW_TAG :
     case FieldTotNoRelatedSym::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoRelatedSym::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageDerivativeSecurityListRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW_TAG :
     case FieldSecurityListRequestType::RAW_TAG :
     case FieldUnderlyingSymbol::RAW_TAG :
     case FieldUnderlyingSymbolSfx::RAW_TAG :
     case FieldUnderlyingSecurityID::RAW_TAG :
     case FieldUnderlyingSecurityIDSource::RAW_TAG :
     case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     case FieldUnderlyingProduct::RAW_TAG :
     case FieldUnderlyingCFICode::RAW_TAG :
     case FieldUnderlyingSecurityType::RAW_TAG :
     case FieldUnderlyingSecuritySubType::RAW_TAG :
     case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     case FieldUnderlyingMaturityDate::RAW_TAG :
     case FieldUnderlyingPutOrCall::RAW_TAG :
     case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     case FieldUnderlyingIssueDate::RAW_TAG :
     case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     case FieldUnderlyingRepurchaseRate::RAW_TAG :
     case FieldUnderlyingFactor::RAW_TAG :
     case FieldUnderlyingCreditRating::RAW_TAG :
     case FieldUnderlyingInstrRegistry::RAW_TAG :
     case FieldUnderlyingCountryOfIssue::RAW_TAG :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     case FieldUnderlyingRedemptionDate::RAW_TAG :
     case FieldUnderlyingStrikePrice::RAW_TAG :
     case FieldUnderlyingStrikeCurrency::RAW_TAG :
     case FieldUnderlyingOptAttribute::RAW_TAG :
     case FieldUnderlyingContractMultiplier::RAW_TAG :
     case FieldUnderlyingCouponRate::RAW_TAG :
     case FieldUnderlyingSecurityExchange::RAW_TAG :
     case FieldUnderlyingIssuer::RAW_TAG :
     case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     case FieldEncodedUnderlyingIssuer::RAW_TAG :
     case FieldUnderlyingSecurityDesc::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     case FieldUnderlyingCPProgram::RAW_TAG :
     case FieldUnderlyingCPRegType::RAW_TAG :
     case FieldUnderlyingCurrency::RAW_TAG :
     case FieldUnderlyingQty::RAW_TAG :
     case FieldUnderlyingPx::RAW_TAG :
     case FieldUnderlyingDirtyPrice::RAW_TAG :
     case FieldUnderlyingEndPrice::RAW_TAG :
     case FieldUnderlyingStartValue::RAW_TAG :
     case FieldUnderlyingCurrentValue::RAW_TAG :
     case FieldUnderlyingEndValue::RAW_TAG :
     case FieldNoUnderlyingStips::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageDerivativeSecurityList::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW_TAG :
     case FieldSecurityResponseID::RAW_TAG :
     case FieldSecurityRequestResult::RAW_TAG :
     case FieldUnderlyingSymbol::RAW_TAG :
     case FieldUnderlyingSymbolSfx::RAW_TAG :
     case FieldUnderlyingSecurityID::RAW_TAG :
     case FieldUnderlyingSecurityIDSource::RAW_TAG :
     case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     case FieldUnderlyingProduct::RAW_TAG :
     case FieldUnderlyingCFICode::RAW_TAG :
     case FieldUnderlyingSecurityType::RAW_TAG :
     case FieldUnderlyingSecuritySubType::RAW_TAG :
     case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     case FieldUnderlyingMaturityDate::RAW_TAG :
     case FieldUnderlyingPutOrCall::RAW_TAG :
     case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     case FieldUnderlyingIssueDate::RAW_TAG :
     case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     case FieldUnderlyingRepurchaseRate::RAW_TAG :
     case FieldUnderlyingFactor::RAW_TAG :
     case FieldUnderlyingCreditRating::RAW_TAG :
     case FieldUnderlyingInstrRegistry::RAW_TAG :
     case FieldUnderlyingCountryOfIssue::RAW_TAG :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     case FieldUnderlyingRedemptionDate::RAW_TAG :
     case FieldUnderlyingStrikePrice::RAW_TAG :
     case FieldUnderlyingStrikeCurrency::RAW_TAG :
     case FieldUnderlyingOptAttribute::RAW_TAG :
     case FieldUnderlyingContractMultiplier::RAW_TAG :
     case FieldUnderlyingCouponRate::RAW_TAG :
     case FieldUnderlyingSecurityExchange::RAW_TAG :
     case FieldUnderlyingIssuer::RAW_TAG :
     case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     case FieldEncodedUnderlyingIssuer::RAW_TAG :
     case FieldUnderlyingSecurityDesc::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     case FieldUnderlyingCPProgram::RAW_TAG :
     case FieldUnderlyingCPRegType::RAW_TAG :
     case FieldUnderlyingCurrency::RAW_TAG :
     case FieldUnderlyingQty::RAW_TAG :
     case FieldUnderlyingPx::RAW_TAG :
     case FieldUnderlyingDirtyPrice::RAW_TAG :
     case FieldUnderlyingEndPrice::RAW_TAG :
     case FieldUnderlyingStartValue::RAW_TAG :
     case FieldUnderlyingCurrentValue::RAW_TAG :
     case FieldUnderlyingEndValue::RAW_TAG :
     case FieldNoUnderlyingStips::RAW_TAG :
     case FieldTotNoRelatedSym::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoRelatedSym::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNewOrderMultileg::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldDayBookingInst::RAW_TAG :
     case FieldBookingUnit::RAW_TAG :
     case FieldPreallocMethod::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldCashMargin::RAW_TAG :
     case FieldClearingFeeIndicator::RAW_TAG :
     case FieldHandlInst::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldMaxFloor::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldProcessCode::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldPrevClosePx::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldLocateReqd::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldStopPx::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldSolicitedFlag::RAW_TAG :
     case FieldIOIID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldGTBookingInst::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommCurrency::RAW_TAG :
     case FieldFundRenewWaiv::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldOrderRestrictions::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldForexReq::RAW_TAG :
     case FieldSettlCurrency::RAW_TAG :
     case FieldBookingType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldCoveredOrUncovered::RAW_TAG :
     case FieldMaxShow::RAW_TAG :
     case FieldPegOffsetValue::RAW_TAG :
     case FieldPegMoveType::RAW_TAG :
     case FieldPegOffsetType::RAW_TAG :
     case FieldPegLimitType::RAW_TAG :
     case FieldPegRoundDirection::RAW_TAG :
     case FieldPegScope::RAW_TAG :
     case FieldDiscretionInst::RAW_TAG :
     case FieldDiscretionOffsetValue::RAW_TAG :
     case FieldDiscretionMoveType::RAW_TAG :
     case FieldDiscretionOffsetType::RAW_TAG :
     case FieldDiscretionLimitType::RAW_TAG :
     case FieldDiscretionRoundDirection::RAW_TAG :
     case FieldDiscretionScope::RAW_TAG :
     case FieldTargetStrategy::RAW_TAG :
     case FieldTargetStrategyParameters::RAW_TAG :
     case FieldParticipationRate::RAW_TAG :
     case FieldCancellationRights::RAW_TAG :
     case FieldMoneyLaunderingStatus::RAW_TAG :
     case FieldRegistID::RAW_TAG :
     case FieldDesignation::RAW_TAG :
     case FieldMultiLegRptTypeReq::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMultilegOrderCancelReplace::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW_TAG :
     case FieldOrigClOrdID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldClOrdLinkID::RAW_TAG :
     case FieldOrigOrdModTime::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldDayBookingInst::RAW_TAG :
     case FieldBookingUnit::RAW_TAG :
     case FieldPreallocMethod::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldCashMargin::RAW_TAG :
     case FieldClearingFeeIndicator::RAW_TAG :
     case FieldHandlInst::RAW_TAG :
     case FieldExecInst::RAW_TAG :
     case FieldMinQty::RAW_TAG :
     case FieldMaxFloor::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldProcessCode::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldPrevClosePx::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldLocateReqd::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldStopPx::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldComplianceID::RAW_TAG :
     case FieldSolicitedFlag::RAW_TAG :
     case FieldIOIID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldTimeInForce::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldGTBookingInst::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommCurrency::RAW_TAG :
     case FieldFundRenewWaiv::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldOrderRestrictions::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldForexReq::RAW_TAG :
     case FieldSettlCurrency::RAW_TAG :
     case FieldBookingType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldCoveredOrUncovered::RAW_TAG :
     case FieldMaxShow::RAW_TAG :
     case FieldPegOffsetValue::RAW_TAG :
     case FieldPegMoveType::RAW_TAG :
     case FieldPegOffsetType::RAW_TAG :
     case FieldPegLimitType::RAW_TAG :
     case FieldPegRoundDirection::RAW_TAG :
     case FieldPegScope::RAW_TAG :
     case FieldDiscretionInst::RAW_TAG :
     case FieldDiscretionOffsetValue::RAW_TAG :
     case FieldDiscretionMoveType::RAW_TAG :
     case FieldDiscretionOffsetType::RAW_TAG :
     case FieldDiscretionLimitType::RAW_TAG :
     case FieldDiscretionRoundDirection::RAW_TAG :
     case FieldDiscretionScope::RAW_TAG :
     case FieldTargetStrategy::RAW_TAG :
     case FieldTargetStrategyParameters::RAW_TAG :
     case FieldParticipationRate::RAW_TAG :
     case FieldCancellationRights::RAW_TAG :
     case FieldMoneyLaunderingStatus::RAW_TAG :
     case FieldRegistID::RAW_TAG :
     case FieldDesignation::RAW_TAG :
     case FieldMultiLegRptTypeReq::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradeCaptureReportRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeRequestID::RAW_TAG :
     case FieldTradeRequestType::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldTradeReportID::RAW_TAG :
     case FieldSecondaryTradeReportID::RAW_TAG :
     case FieldExecID::RAW_TAG :
     case FieldExecType::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldMatchStatus::RAW_TAG :
     case FieldTrdType::RAW_TAG :
     case FieldTrdSubType::RAW_TAG :
     case FieldTransferReason::RAW_TAG :
     case FieldSecondaryTrdType::RAW_TAG :
     case FieldTradeLinkID::RAW_TAG :
     case FieldTrdMatchID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoDates::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldTimeBracket::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldMultiLegReportingType::RAW_TAG :
     case FieldTradeInputSource::RAW_TAG :
     case FieldTradeInputDevice::RAW_TAG :
     case FieldResponseTransportType::RAW_TAG :
     case FieldResponseDestination::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradeCaptureReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeReportID::RAW_TAG :
     case FieldTradeReportTransType::RAW_TAG :
     case FieldTradeReportType::RAW_TAG :
     case FieldTradeRequestID::RAW_TAG :
     case FieldTrdType::RAW_TAG :
     case FieldTrdSubType::RAW_TAG :
     case FieldSecondaryTrdType::RAW_TAG :
     case FieldTransferReason::RAW_TAG :
     case FieldExecType::RAW_TAG :
     case FieldTotNumTradeReports::RAW_TAG :
     case FieldLastRptRequested::RAW_TAG :
     case FieldUnsolicitedIndicator::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldTradeReportRefID::RAW_TAG :
     case FieldSecondaryTradeReportRefID::RAW_TAG :
     case FieldSecondaryTradeReportID::RAW_TAG :
     case FieldTradeLinkID::RAW_TAG :
     case FieldTrdMatchID::RAW_TAG :
     case FieldExecID::RAW_TAG :
     case FieldOrdStatus::RAW_TAG :
     case FieldSecondaryExecID::RAW_TAG :
     case FieldExecRestatementReason::RAW_TAG :
     case FieldPreviouslyReported::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldUnderlyingTradingSessionID::RAW_TAG :
     case FieldUnderlyingTradingSessionSubID::RAW_TAG :
     case FieldLastQty::RAW_TAG :
     case FieldLastPx::RAW_TAG :
     case FieldLastParPx::RAW_TAG :
     case FieldLastSpotRate::RAW_TAG :
     case FieldLastForwardPoints::RAW_TAG :
     case FieldLastMkt::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldAvgPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldAvgPxIndicator::RAW_TAG :
     case FieldNoPosAmt::RAW_TAG :
     case FieldMultiLegReportingType::RAW_TAG :
     case FieldTradeLegRefID::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoTrdRegTimestamps::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldMatchStatus::RAW_TAG :
     case FieldMatchType::RAW_TAG :
     case FieldNoSides::RAW_TAG :
     case FieldCopyMsgIndicator::RAW_TAG :
     case FieldPublishTrdIndicator::RAW_TAG :
     case FieldShortSaleReason::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderMassStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMassStatusReqID::RAW_TAG :
     case FieldMassStatusReqType::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldUnderlyingSymbol::RAW_TAG :
     case FieldUnderlyingSymbolSfx::RAW_TAG :
     case FieldUnderlyingSecurityID::RAW_TAG :
     case FieldUnderlyingSecurityIDSource::RAW_TAG :
     case FieldNoUnderlyingSecurityAltID::RAW_TAG :
     case FieldUnderlyingProduct::RAW_TAG :
     case FieldUnderlyingCFICode::RAW_TAG :
     case FieldUnderlyingSecurityType::RAW_TAG :
     case FieldUnderlyingSecuritySubType::RAW_TAG :
     case FieldUnderlyingMaturityMonthYear::RAW_TAG :
     case FieldUnderlyingMaturityDate::RAW_TAG :
     case FieldUnderlyingPutOrCall::RAW_TAG :
     case FieldUnderlyingCouponPaymentDate::RAW_TAG :
     case FieldUnderlyingIssueDate::RAW_TAG :
     case FieldUnderlyingRepoCollateralSecurityType::RAW_TAG :
     case FieldUnderlyingRepurchaseTerm::RAW_TAG :
     case FieldUnderlyingRepurchaseRate::RAW_TAG :
     case FieldUnderlyingFactor::RAW_TAG :
     case FieldUnderlyingCreditRating::RAW_TAG :
     case FieldUnderlyingInstrRegistry::RAW_TAG :
     case FieldUnderlyingCountryOfIssue::RAW_TAG :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW_TAG :
     case FieldUnderlyingLocaleOfIssue::RAW_TAG :
     case FieldUnderlyingRedemptionDate::RAW_TAG :
     case FieldUnderlyingStrikePrice::RAW_TAG :
     case FieldUnderlyingStrikeCurrency::RAW_TAG :
     case FieldUnderlyingOptAttribute::RAW_TAG :
     case FieldUnderlyingContractMultiplier::RAW_TAG :
     case FieldUnderlyingCouponRate::RAW_TAG :
     case FieldUnderlyingSecurityExchange::RAW_TAG :
     case FieldUnderlyingIssuer::RAW_TAG :
     case FieldEncodedUnderlyingIssuerLen::RAW_TAG :
     case FieldEncodedUnderlyingIssuer::RAW_TAG :
     case FieldUnderlyingSecurityDesc::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDescLen::RAW_TAG :
     case FieldEncodedUnderlyingSecurityDesc::RAW_TAG :
     case FieldUnderlyingCPProgram::RAW_TAG :
     case FieldUnderlyingCPRegType::RAW_TAG :
     case FieldUnderlyingCurrency::RAW_TAG :
     case FieldUnderlyingQty::RAW_TAG :
     case FieldUnderlyingPx::RAW_TAG :
     case FieldUnderlyingDirtyPrice::RAW_TAG :
     case FieldUnderlyingEndPrice::RAW_TAG :
     case FieldUnderlyingStartValue::RAW_TAG :
     case FieldUnderlyingCurrentValue::RAW_TAG :
     case FieldUnderlyingEndValue::RAW_TAG :
     case FieldNoUnderlyingStips::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteRequestReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW_TAG :
     case FieldRFQReqID::RAW_TAG :
     case FieldQuoteRequestRejectReason::RAW_TAG :
     case FieldNoRelatedSym::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRFQRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRFQReqID::RAW_TAG :
     case FieldNoRelatedSym::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteStatusReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteStatusReqID::RAW_TAG :
     case FieldQuoteReqID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldQuoteRespID::RAW_TAG :
     case FieldQuoteType::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldSettlDate2::RAW_TAG :
     case FieldOrderQty2::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoQuoteQualifiers::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldBidPx::RAW_TAG :
     case FieldOfferPx::RAW_TAG :
     case FieldMktBidPx::RAW_TAG :
     case FieldMktOfferPx::RAW_TAG :
     case FieldMinBidSize::RAW_TAG :
     case FieldBidSize::RAW_TAG :
     case FieldMinOfferSize::RAW_TAG :
     case FieldOfferSize::RAW_TAG :
     case FieldValidUntilTime::RAW_TAG :
     case FieldBidSpotRate::RAW_TAG :
     case FieldOfferSpotRate::RAW_TAG :
     case FieldBidForwardPoints::RAW_TAG :
     case FieldOfferForwardPoints::RAW_TAG :
     case FieldMidPx::RAW_TAG :
     case FieldBidYield::RAW_TAG :
     case FieldMidYield::RAW_TAG :
     case FieldOfferYield::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldBidForwardPoints2::RAW_TAG :
     case FieldOfferForwardPoints2::RAW_TAG :
     case FieldSettlCurrBidFxRate::RAW_TAG :
     case FieldSettlCurrOfferFxRate::RAW_TAG :
     case FieldSettlCurrFxRateCalc::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldQuoteStatus::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteRespID::RAW_TAG :
     case FieldQuoteID::RAW_TAG :
     case FieldQuoteRespType::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldIOIID::RAW_TAG :
     case FieldQuoteType::RAW_TAG :
     case FieldNoQuoteQualifiers::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldOrderQty::RAW_TAG :
     case FieldCashOrderQty::RAW_TAG :
     case FieldOrderPercent::RAW_TAG :
     case FieldRoundingDirection::RAW_TAG :
     case FieldRoundingModulus::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldSettlDate2::RAW_TAG :
     case FieldOrderQty2::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldBidPx::RAW_TAG :
     case FieldOfferPx::RAW_TAG :
     case FieldMktBidPx::RAW_TAG :
     case FieldMktOfferPx::RAW_TAG :
     case FieldMinBidSize::RAW_TAG :
     case FieldBidSize::RAW_TAG :
     case FieldMinOfferSize::RAW_TAG :
     case FieldOfferSize::RAW_TAG :
     case FieldValidUntilTime::RAW_TAG :
     case FieldBidSpotRate::RAW_TAG :
     case FieldOfferSpotRate::RAW_TAG :
     case FieldBidForwardPoints::RAW_TAG :
     case FieldOfferForwardPoints::RAW_TAG :
     case FieldMidPx::RAW_TAG :
     case FieldBidYield::RAW_TAG :
     case FieldMidYield::RAW_TAG :
     case FieldOfferYield::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldOrdType::RAW_TAG :
     case FieldBidForwardPoints2::RAW_TAG :
     case FieldOfferForwardPoints2::RAW_TAG :
     case FieldSettlCurrBidFxRate::RAW_TAG :
     case FieldSettlCurrOfferFxRate::RAW_TAG :
     case FieldSettlCurrFxRateCalc::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldExDestination::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageConfirmation::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldConfirmID::RAW_TAG :
     case FieldConfirmRefID::RAW_TAG :
     case FieldConfirmReqID::RAW_TAG :
     case FieldConfirmTransType::RAW_TAG :
     case FieldConfirmType::RAW_TAG :
     case FieldCopyMsgIndicator::RAW_TAG :
     case FieldLegalConfirm::RAW_TAG :
     case FieldConfirmStatus::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldNoOrders::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldSecondaryAllocID::RAW_TAG :
     case FieldIndividualAllocID::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldNoTrdRegTimestamps::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldAllocQty::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldLastMkt::RAW_TAG :
     case FieldNoCapacities::RAW_TAG :
     case FieldAllocAccount::RAW_TAG :
     case FieldAllocAcctIDSource::RAW_TAG :
     case FieldAllocAccountType::RAW_TAG :
     case FieldAvgPx::RAW_TAG :
     case FieldAvgPxPrecision::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldAvgParPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldReportedPx::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldProcessCode::RAW_TAG :
     case FieldGrossTradeAmt::RAW_TAG :
     case FieldNumDaysInterest::RAW_TAG :
     case FieldExDate::RAW_TAG :
     case FieldAccruedInterestRate::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldInterestAtMaturity::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldConcession::RAW_TAG :
     case FieldTotalTakedown::RAW_TAG :
     case FieldNetMoney::RAW_TAG :
     case FieldMaturityNetMoney::RAW_TAG :
     case FieldSettlCurrAmt::RAW_TAG :
     case FieldSettlCurrency::RAW_TAG :
     case FieldSettlCurrFxRate::RAW_TAG :
     case FieldSettlCurrFxRateCalc::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldSettlDeliveryType::RAW_TAG :
     case FieldStandInstDbType::RAW_TAG :
     case FieldStandInstDbName::RAW_TAG :
     case FieldStandInstDbID::RAW_TAG :
     case FieldNoDlvyInst::RAW_TAG :
     case FieldCommission::RAW_TAG :
     case FieldCommType::RAW_TAG :
     case FieldCommCurrency::RAW_TAG :
     case FieldFundRenewWaiv::RAW_TAG :
     case FieldSharedCommission::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldNoMiscFees::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessagePositionMaintenanceRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosReqID::RAW_TAG :
     case FieldPosTransType::RAW_TAG :
     case FieldPosMaintAction::RAW_TAG :
     case FieldOrigPosReqRefID::RAW_TAG :
     case FieldPosMaintRptRefID::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoPositions::RAW_TAG :
     case FieldAdjustmentType::RAW_TAG :
     case FieldContraryInstructionIndicator::RAW_TAG :
     case FieldPriorSpreadIndicator::RAW_TAG :
     case FieldThresholdAmount::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessagePositionMaintenanceReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosMaintRptID::RAW_TAG :
     case FieldPosTransType::RAW_TAG :
     case FieldPosReqID::RAW_TAG :
     case FieldPosMaintAction::RAW_TAG :
     case FieldOrigPosReqRefID::RAW_TAG :
     case FieldPosMaintStatus::RAW_TAG :
     case FieldPosMaintResult::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoPositions::RAW_TAG :
     case FieldNoPosAmt::RAW_TAG :
     case FieldAdjustmentType::RAW_TAG :
     case FieldThresholdAmount::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRequestForPositions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosReqID::RAW_TAG :
     case FieldPosReqType::RAW_TAG :
     case FieldMatchStatus::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldNoTradingSessions::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldResponseTransportType::RAW_TAG :
     case FieldResponseDestination::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRequestForPositionsAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosMaintRptID::RAW_TAG :
     case FieldPosReqID::RAW_TAG :
     case FieldTotalNumPosReports::RAW_TAG :
     case FieldUnsolicitedIndicator::RAW_TAG :
     case FieldPosReqResult::RAW_TAG :
     case FieldPosReqStatus::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldResponseTransportType::RAW_TAG :
     case FieldResponseDestination::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessagePositionReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosMaintRptID::RAW_TAG :
     case FieldPosReqID::RAW_TAG :
     case FieldPosReqType::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldTotalNumPosReports::RAW_TAG :
     case FieldUnsolicitedIndicator::RAW_TAG :
     case FieldPosReqResult::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldSettlPrice::RAW_TAG :
     case FieldSettlPriceType::RAW_TAG :
     case FieldPriorSettlPrice::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoPositions::RAW_TAG :
     case FieldNoPosAmt::RAW_TAG :
     case FieldRegistStatus::RAW_TAG :
     case FieldDeliveryDate::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradeCaptureReportRequestAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeRequestID::RAW_TAG :
     case FieldTradeRequestType::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldTotNumTradeReports::RAW_TAG :
     case FieldTradeRequestResult::RAW_TAG :
     case FieldTradeRequestStatus::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldMultiLegReportingType::RAW_TAG :
     case FieldResponseTransportType::RAW_TAG :
     case FieldResponseDestination::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradeCaptureReportAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeReportID::RAW_TAG :
     case FieldTradeReportTransType::RAW_TAG :
     case FieldTradeReportType::RAW_TAG :
     case FieldTrdType::RAW_TAG :
     case FieldTrdSubType::RAW_TAG :
     case FieldSecondaryTrdType::RAW_TAG :
     case FieldTransferReason::RAW_TAG :
     case FieldExecType::RAW_TAG :
     case FieldTradeReportRefID::RAW_TAG :
     case FieldSecondaryTradeReportRefID::RAW_TAG :
     case FieldTrdRptStatus::RAW_TAG :
     case FieldTradeReportRejectReason::RAW_TAG :
     case FieldSecondaryTradeReportID::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldTradeLinkID::RAW_TAG :
     case FieldTrdMatchID::RAW_TAG :
     case FieldExecID::RAW_TAG :
     case FieldSecondaryExecID::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoTrdRegTimestamps::RAW_TAG :
     case FieldResponseTransportType::RAW_TAG :
     case FieldResponseDestination::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldClearingFeeIndicator::RAW_TAG :
     case FieldOrderCapacity::RAW_TAG :
     case FieldOrderRestrictions::RAW_TAG :
     case FieldCustOrderCapacity::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAcctIDSource::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldPreallocMethod::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAllocationReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocReportID::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldAllocTransType::RAW_TAG :
     case FieldAllocReportRefID::RAW_TAG :
     case FieldAllocCancReplaceReason::RAW_TAG :
     case FieldSecondaryAllocID::RAW_TAG :
     case FieldAllocReportType::RAW_TAG :
     case FieldAllocStatus::RAW_TAG :
     case FieldAllocRejCode::RAW_TAG :
     case FieldRefAllocID::RAW_TAG :
     case FieldAllocIntermedReqType::RAW_TAG :
     case FieldAllocLinkID::RAW_TAG :
     case FieldAllocLinkType::RAW_TAG :
     case FieldBookingRefID::RAW_TAG :
     case FieldAllocNoOrdersType::RAW_TAG :
     case FieldNoOrders::RAW_TAG :
     case FieldNoExecs::RAW_TAG :
     case FieldPreviouslyReported::RAW_TAG :
     case FieldReversalIndicator::RAW_TAG :
     case FieldMatchType::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldDeliveryForm::RAW_TAG :
     case FieldPctAtRisk::RAW_TAG :
     case FieldNoInstrAttrib::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldLastMkt::RAW_TAG :
     case FieldTradeOriginationDate::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldAvgPx::RAW_TAG :
     case FieldAvgParPx::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldAvgPxPrecision::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldSettlType::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldBookingType::RAW_TAG :
     case FieldGrossTradeAmt::RAW_TAG :
     case FieldConcession::RAW_TAG :
     case FieldTotalTakedown::RAW_TAG :
     case FieldNetMoney::RAW_TAG :
     case FieldPositionEffect::RAW_TAG :
     case FieldAutoAcceptIndicator::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldNumDaysInterest::RAW_TAG :
     case FieldAccruedInterestRate::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldTotalAccruedInterestAmt::RAW_TAG :
     case FieldInterestAtMaturity::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldLegalConfirm::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldYieldType::RAW_TAG :
     case FieldYield::RAW_TAG :
     case FieldYieldCalcDate::RAW_TAG :
     case FieldYieldRedemptionDate::RAW_TAG :
     case FieldYieldRedemptionPrice::RAW_TAG :
     case FieldYieldRedemptionPriceType::RAW_TAG :
     case FieldTotNoAllocs::RAW_TAG :
     case FieldLastFragment::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAllocationReportAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocReportID::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldSecondaryAllocID::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldAllocStatus::RAW_TAG :
     case FieldAllocRejCode::RAW_TAG :
     case FieldAllocReportType::RAW_TAG :
     case FieldAllocIntermedReqType::RAW_TAG :
     case FieldMatchStatus::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldNoAllocs::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageConfirmationAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldConfirmID::RAW_TAG :
     case FieldTradeDate::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldAffirmStatus::RAW_TAG :
     case FieldConfirmRejReason::RAW_TAG :
     case FieldMatchStatus::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSettlementInstructionRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSettlInstReqID::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAllocAccount::RAW_TAG :
     case FieldAllocAcctIDSource::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldEffectiveTime::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldLastUpdateTime::RAW_TAG :
     case FieldStandInstDbType::RAW_TAG :
     case FieldStandInstDbName::RAW_TAG :
     case FieldStandInstDbID::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAssignmentReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAsgnRptID::RAW_TAG :
     case FieldTotNumAssignmentReports::RAW_TAG :
     case FieldLastRptRequested::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldNoPositions::RAW_TAG :
     case FieldNoPosAmt::RAW_TAG :
     case FieldThresholdAmount::RAW_TAG :
     case FieldSettlPrice::RAW_TAG :
     case FieldSettlPriceType::RAW_TAG :
     case FieldUnderlyingSettlPrice::RAW_TAG :
     case FieldExpireDate::RAW_TAG :
     case FieldAssignmentMethod::RAW_TAG :
     case FieldAssignmentUnit::RAW_TAG :
     case FieldOpenInterest::RAW_TAG :
     case FieldExerciseMethod::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollReqID::RAW_TAG :
     case FieldCollAsgnReason::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldNoExecs::RAW_TAG :
     case FieldNoTrades::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldMarginExcess::RAW_TAG :
     case FieldTotalNetValue::RAW_TAG :
     case FieldCashOutstanding::RAW_TAG :
     case FieldNoTrdRegTimestamps::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldNoMiscFees::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralAssignment::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollAsgnID::RAW_TAG :
     case FieldCollReqID::RAW_TAG :
     case FieldCollAsgnReason::RAW_TAG :
     case FieldCollAsgnTransType::RAW_TAG :
     case FieldCollAsgnRefID::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldExpireTime::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldNoExecs::RAW_TAG :
     case FieldNoTrades::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldMarginExcess::RAW_TAG :
     case FieldTotalNetValue::RAW_TAG :
     case FieldCashOutstanding::RAW_TAG :
     case FieldNoTrdRegTimestamps::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldNoMiscFees::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldSettlDeliveryType::RAW_TAG :
     case FieldStandInstDbType::RAW_TAG :
     case FieldStandInstDbName::RAW_TAG :
     case FieldStandInstDbID::RAW_TAG :
     case FieldNoDlvyInst::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollRespID::RAW_TAG :
     case FieldCollAsgnID::RAW_TAG :
     case FieldCollReqID::RAW_TAG :
     case FieldCollAsgnReason::RAW_TAG :
     case FieldCollAsgnTransType::RAW_TAG :
     case FieldCollAsgnRespType::RAW_TAG :
     case FieldCollAsgnRejectReason::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldNoExecs::RAW_TAG :
     case FieldNoTrades::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldMarginExcess::RAW_TAG :
     case FieldTotalNetValue::RAW_TAG :
     case FieldCashOutstanding::RAW_TAG :
     case FieldNoTrdRegTimestamps::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldNoMiscFees::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollRptID::RAW_TAG :
     case FieldCollInquiryID::RAW_TAG :
     case FieldCollStatus::RAW_TAG :
     case FieldTotNumReports::RAW_TAG :
     case FieldLastRptRequested::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldNoExecs::RAW_TAG :
     case FieldNoTrades::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldMarginExcess::RAW_TAG :
     case FieldTotalNetValue::RAW_TAG :
     case FieldCashOutstanding::RAW_TAG :
     case FieldNoTrdRegTimestamps::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldNoMiscFees::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldSettlDeliveryType::RAW_TAG :
     case FieldStandInstDbType::RAW_TAG :
     case FieldStandInstDbName::RAW_TAG :
     case FieldStandInstDbID::RAW_TAG :
     case FieldNoDlvyInst::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralInquiry::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollInquiryID::RAW_TAG :
     case FieldNoCollInquiryQualifier::RAW_TAG :
     case FieldSubscriptionRequestType::RAW_TAG :
     case FieldResponseTransportType::RAW_TAG :
     case FieldResponseDestination::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldNoExecs::RAW_TAG :
     case FieldNoTrades::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldMarginExcess::RAW_TAG :
     case FieldTotalNetValue::RAW_TAG :
     case FieldCashOutstanding::RAW_TAG :
     case FieldNoTrdRegTimestamps::RAW_TAG :
     case FieldSide::RAW_TAG :
     case FieldPrice::RAW_TAG :
     case FieldPriceType::RAW_TAG :
     case FieldAccruedInterestAmt::RAW_TAG :
     case FieldEndAccruedInterestAmt::RAW_TAG :
     case FieldStartCash::RAW_TAG :
     case FieldEndCash::RAW_TAG :
     case FieldSpread::RAW_TAG :
     case FieldBenchmarkCurveCurrency::RAW_TAG :
     case FieldBenchmarkCurveName::RAW_TAG :
     case FieldBenchmarkCurvePoint::RAW_TAG :
     case FieldBenchmarkPrice::RAW_TAG :
     case FieldBenchmarkPriceType::RAW_TAG :
     case FieldBenchmarkSecurityID::RAW_TAG :
     case FieldBenchmarkSecurityIDSource::RAW_TAG :
     case FieldNoStipulations::RAW_TAG :
     case FieldSettlDeliveryType::RAW_TAG :
     case FieldStandInstDbType::RAW_TAG :
     case FieldStandInstDbName::RAW_TAG :
     case FieldStandInstDbID::RAW_TAG :
     case FieldNoDlvyInst::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNetworkCounterpartySystemStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNetworkRequestType::RAW_TAG :
     case FieldNetworkRequestID::RAW_TAG :
     case FieldNoCompIDs::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNetworkCounterpartySystemStatusResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNetworkStatusResponseType::RAW_TAG :
     case FieldNetworkRequestID::RAW_TAG :
     case FieldNetworkResponseID::RAW_TAG :
     case FieldLastNetworkResponseID::RAW_TAG :
     case FieldNoCompIDs::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageUserRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldUserRequestID::RAW_TAG :
     case FieldUserRequestType::RAW_TAG :
     case FieldUsername::RAW_TAG :
     case FieldPassword::RAW_TAG :
     case FieldNewPassword::RAW_TAG :
     case FieldRawDataLength::RAW_TAG :
     case FieldRawData::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageUserResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldUserRequestID::RAW_TAG :
     case FieldUsername::RAW_TAG :
     case FieldUserStatus::RAW_TAG :
     case FieldUserStatusText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralInquiryAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollInquiryID::RAW_TAG :
     case FieldCollInquiryStatus::RAW_TAG :
     case FieldCollInquiryResult::RAW_TAG :
     case FieldNoCollInquiryQualifier::RAW_TAG :
     case FieldTotNumReports::RAW_TAG :
     case FieldNoPartyIDs::RAW_TAG :
     case FieldAccount::RAW_TAG :
     case FieldAccountType::RAW_TAG :
     case FieldClOrdID::RAW_TAG :
     case FieldOrderID::RAW_TAG :
     case FieldSecondaryOrderID::RAW_TAG :
     case FieldSecondaryClOrdID::RAW_TAG :
     case FieldNoExecs::RAW_TAG :
     case FieldNoTrades::RAW_TAG :
     case FieldSymbol::RAW_TAG :
     case FieldSymbolSfx::RAW_TAG :
     case FieldSecurityID::RAW_TAG :
     case FieldSecurityIDSource::RAW_TAG :
     case FieldNoSecurityAltID::RAW_TAG :
     case FieldProduct::RAW_TAG :
     case FieldCFICode::RAW_TAG :
     case FieldSecurityType::RAW_TAG :
     case FieldSecuritySubType::RAW_TAG :
     case FieldMaturityMonthYear::RAW_TAG :
     case FieldMaturityDate::RAW_TAG :
     case FieldPutOrCall::RAW_TAG :
     case FieldCouponPaymentDate::RAW_TAG :
     case FieldIssueDate::RAW_TAG :
     case FieldRepoCollateralSecurityType::RAW_TAG :
     case FieldRepurchaseTerm::RAW_TAG :
     case FieldRepurchaseRate::RAW_TAG :
     case FieldFactor::RAW_TAG :
     case FieldCreditRating::RAW_TAG :
     case FieldInstrRegistry::RAW_TAG :
     case FieldCountryOfIssue::RAW_TAG :
     case FieldStateOrProvinceOfIssue::RAW_TAG :
     case FieldLocaleOfIssue::RAW_TAG :
     case FieldRedemptionDate::RAW_TAG :
     case FieldStrikePrice::RAW_TAG :
     case FieldStrikeCurrency::RAW_TAG :
     case FieldOptAttribute::RAW_TAG :
     case FieldContractMultiplier::RAW_TAG :
     case FieldCouponRate::RAW_TAG :
     case FieldSecurityExchange::RAW_TAG :
     case FieldIssuer::RAW_TAG :
     case FieldEncodedIssuerLen::RAW_TAG :
     case FieldEncodedIssuer::RAW_TAG :
     case FieldSecurityDesc::RAW_TAG :
     case FieldEncodedSecurityDescLen::RAW_TAG :
     case FieldEncodedSecurityDesc::RAW_TAG :
     case FieldPool::RAW_TAG :
     case FieldContractSettlMonth::RAW_TAG :
     case FieldCPProgram::RAW_TAG :
     case FieldCPRegType::RAW_TAG :
     case FieldNoEvents::RAW_TAG :
     case FieldDatedDate::RAW_TAG :
     case FieldInterestAccrualDate::RAW_TAG :
     case FieldAgreementDesc::RAW_TAG :
     case FieldAgreementID::RAW_TAG :
     case FieldAgreementDate::RAW_TAG :
     case FieldAgreementCurrency::RAW_TAG :
     case FieldTerminationType::RAW_TAG :
     case FieldStartDate::RAW_TAG :
     case FieldEndDate::RAW_TAG :
     case FieldDeliveryType::RAW_TAG :
     case FieldMarginRatio::RAW_TAG :
     case FieldSettlDate::RAW_TAG :
     case FieldQuantity::RAW_TAG :
     case FieldQtyType::RAW_TAG :
     case FieldCurrency::RAW_TAG :
     case FieldNoLegs::RAW_TAG :
     case FieldNoUnderlyings::RAW_TAG :
     case FieldTradingSessionID::RAW_TAG :
     case FieldTradingSessionSubID::RAW_TAG :
     case FieldSettlSessID::RAW_TAG :
     case FieldSettlSessSubID::RAW_TAG :
     case FieldClearingBusinessDate::RAW_TAG :
     case FieldResponseTransportType::RAW_TAG :
     case FieldResponseDestination::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageConfirmationRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldConfirmReqID::RAW_TAG :
     case FieldConfirmType::RAW_TAG :
     case FieldNoOrders::RAW_TAG :
     case FieldAllocID::RAW_TAG :
     case FieldSecondaryAllocID::RAW_TAG :
     case FieldIndividualAllocID::RAW_TAG :
     case FieldTransactTime::RAW_TAG :
     case FieldAllocAccount::RAW_TAG :
     case FieldAllocAcctIDSource::RAW_TAG :
     case FieldAllocAccountType::RAW_TAG :
     case FieldText::RAW_TAG :
     case FieldEncodedTextLen::RAW_TAG :
     case FieldEncodedText::RAW_TAG :
     case FieldCheckSum::RAW_TAG :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}


const char * MessageHeader::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldBeginString::TAG : return fieldBeginString.offset >= 0 ? _fixPtr + fieldBeginString.offset : nullptr;
     case FieldBodyLength::TAG : return fieldBodyLength.offset >= 0 ? _fixPtr + fieldBodyLength.offset : nullptr;
     case FieldMsgType::TAG : return fieldMsgType.offset >= 0 ? _fixPtr + fieldMsgType.offset : nullptr;
     case FieldSenderCompID::TAG : return fieldSenderCompID.offset >= 0 ? _fixPtr + fieldSenderCompID.offset : nullptr;
     case FieldTargetCompID::TAG : return fieldTargetCompID.offset >= 0 ? _fixPtr + fieldTargetCompID.offset : nullptr;
     case FieldOnBehalfOfCompID::TAG : return fieldOnBehalfOfCompID.offset >= 0 ? _fixPtr + fieldOnBehalfOfCompID.offset : nullptr;
     case FieldDeliverToCompID::TAG : return fieldDeliverToCompID.offset >= 0 ? _fixPtr + fieldDeliverToCompID.offset : nullptr;
     case FieldSecureDataLen::TAG : return fieldSecureDataLen.offset >= 0 ? _fixPtr + fieldSecureDataLen.offset : nullptr;
     case FieldSecureData::TAG : return fieldSecureData.offset >= 0 ? _fixPtr + fieldSecureData.offset : nullptr;
     case FieldMsgSeqNum::TAG : return fieldMsgSeqNum.offset >= 0 ? _fixPtr + fieldMsgSeqNum.offset : nullptr;
     case FieldSenderSubID::TAG : return fieldSenderSubID.offset >= 0 ? _fixPtr + fieldSenderSubID.offset : nullptr;
     case FieldSenderLocationID::TAG : return fieldSenderLocationID.offset >= 0 ? _fixPtr + fieldSenderLocationID.offset : nullptr;
     case FieldTargetSubID::TAG : return fieldTargetSubID.offset >= 0 ? _fixPtr + fieldTargetSubID.offset : nullptr;
     case FieldTargetLocationID::TAG : return fieldTargetLocationID.offset >= 0 ? _fixPtr + fieldTargetLocationID.offset : nullptr;
     case FieldOnBehalfOfSubID::TAG : return fieldOnBehalfOfSubID.offset >= 0 ? _fixPtr + fieldOnBehalfOfSubID.offset : nullptr;
     case FieldOnBehalfOfLocationID::TAG : return fieldOnBehalfOfLocationID.offset >= 0 ? _fixPtr + fieldOnBehalfOfLocationID.offset : nullptr;
     case FieldDeliverToSubID::TAG : return fieldDeliverToSubID.offset >= 0 ? _fixPtr + fieldDeliverToSubID.offset : nullptr;
     case FieldDeliverToLocationID::TAG : return fieldDeliverToLocationID.offset >= 0 ? _fixPtr + fieldDeliverToLocationID.offset : nullptr;
     case FieldPossDupFlag::TAG : return fieldPossDupFlag.offset >= 0 ? _fixPtr + fieldPossDupFlag.offset : nullptr;
     case FieldPossResend::TAG : return fieldPossResend.offset >= 0 ? _fixPtr + fieldPossResend.offset : nullptr;
     case FieldSendingTime::TAG : return fieldSendingTime.offset >= 0 ? _fixPtr + fieldSendingTime.offset : nullptr;
     case FieldOrigSendingTime::TAG : return fieldOrigSendingTime.offset >= 0 ? _fixPtr + fieldOrigSendingTime.offset : nullptr;
     case FieldXmlDataLen::TAG : return fieldXmlDataLen.offset >= 0 ? _fixPtr + fieldXmlDataLen.offset : nullptr;
     case FieldXmlData::TAG : return fieldXmlData.offset >= 0 ? _fixPtr + fieldXmlData.offset : nullptr;
     case FieldMessageEncoding::TAG : return fieldMessageEncoding.offset >= 0 ? _fixPtr + fieldMessageEncoding.offset : nullptr;
     case FieldLastMsgSeqNumProcessed::TAG : return fieldLastMsgSeqNumProcessed.offset >= 0 ? _fixPtr + fieldLastMsgSeqNumProcessed.offset : nullptr;
     case FieldNoHops::TAG : return fieldNoHops.offset >= 0 ? _fixPtr + fieldNoHops.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageHeartbeat::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTestReqID::TAG : return fieldTestReqID.offset >= 0 ? _fixPtr + fieldTestReqID.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTestRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTestReqID::TAG : return fieldTestReqID.offset >= 0 ? _fixPtr + fieldTestReqID.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageResendRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldBeginSeqNo::TAG : return fieldBeginSeqNo.offset >= 0 ? _fixPtr + fieldBeginSeqNo.offset : nullptr;
     case FieldEndSeqNo::TAG : return fieldEndSeqNo.offset >= 0 ? _fixPtr + fieldEndSeqNo.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageReject::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRefSeqNum::TAG : return fieldRefSeqNum.offset >= 0 ? _fixPtr + fieldRefSeqNum.offset : nullptr;
     case FieldRefTagID::TAG : return fieldRefTagID.offset >= 0 ? _fixPtr + fieldRefTagID.offset : nullptr;
     case FieldRefMsgType::TAG : return fieldRefMsgType.offset >= 0 ? _fixPtr + fieldRefMsgType.offset : nullptr;
     case FieldSessionRejectReason::TAG : return fieldSessionRejectReason.offset >= 0 ? _fixPtr + fieldSessionRejectReason.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSequenceReset::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldGapFillFlag::TAG : return fieldGapFillFlag.offset >= 0 ? _fixPtr + fieldGapFillFlag.offset : nullptr;
     case FieldNewSeqNo::TAG : return fieldNewSeqNo.offset >= 0 ? _fixPtr + fieldNewSeqNo.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageLogout::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageIOI::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldIOIID::TAG : return fieldIOIID.offset >= 0 ? _fixPtr + fieldIOIID.offset : nullptr;
     case FieldIOITransType::TAG : return fieldIOITransType.offset >= 0 ? _fixPtr + fieldIOITransType.offset : nullptr;
     case FieldIOIRefID::TAG : return fieldIOIRefID.offset >= 0 ? _fixPtr + fieldIOIRefID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldIOIQty::TAG : return fieldIOIQty.offset >= 0 ? _fixPtr + fieldIOIQty.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldValidUntilTime::TAG : return fieldValidUntilTime.offset >= 0 ? _fixPtr + fieldValidUntilTime.offset : nullptr;
     case FieldIOIQltyInd::TAG : return fieldIOIQltyInd.offset >= 0 ? _fixPtr + fieldIOIQltyInd.offset : nullptr;
     case FieldIOINaturalFlag::TAG : return fieldIOINaturalFlag.offset >= 0 ? _fixPtr + fieldIOINaturalFlag.offset : nullptr;
     case FieldNoIOIQualifiers::TAG : return fieldNoIOIQualifiers.offset >= 0 ? _fixPtr + fieldNoIOIQualifiers.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldURLLink::TAG : return fieldURLLink.offset >= 0 ? _fixPtr + fieldURLLink.offset : nullptr;
     case FieldNoRoutingIDs::TAG : return fieldNoRoutingIDs.offset >= 0 ? _fixPtr + fieldNoRoutingIDs.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAdvertisement::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldAdvId::TAG : return fieldAdvId.offset >= 0 ? _fixPtr + fieldAdvId.offset : nullptr;
     case FieldAdvTransType::TAG : return fieldAdvTransType.offset >= 0 ? _fixPtr + fieldAdvTransType.offset : nullptr;
     case FieldAdvRefID::TAG : return fieldAdvRefID.offset >= 0 ? _fixPtr + fieldAdvRefID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldAdvSide::TAG : return fieldAdvSide.offset >= 0 ? _fixPtr + fieldAdvSide.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldURLLink::TAG : return fieldURLLink.offset >= 0 ? _fixPtr + fieldURLLink.offset : nullptr;
     case FieldLastMkt::TAG : return fieldLastMkt.offset >= 0 ? _fixPtr + fieldLastMkt.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageExecutionReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldSecondaryExecID::TAG : return fieldSecondaryExecID.offset >= 0 ? _fixPtr + fieldSecondaryExecID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset >= 0 ? _fixPtr + fieldOrigClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset >= 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldQuoteRespID::TAG : return fieldQuoteRespID.offset >= 0 ? _fixPtr + fieldQuoteRespID.offset : nullptr;
     case FieldOrdStatusReqID::TAG : return fieldOrdStatusReqID.offset >= 0 ? _fixPtr + fieldOrdStatusReqID.offset : nullptr;
     case FieldMassStatusReqID::TAG : return fieldMassStatusReqID.offset >= 0 ? _fixPtr + fieldMassStatusReqID.offset : nullptr;
     case FieldTotNumReports::TAG : return fieldTotNumReports.offset >= 0 ? _fixPtr + fieldTotNumReports.offset : nullptr;
     case FieldLastRptRequested::TAG : return fieldLastRptRequested.offset >= 0 ? _fixPtr + fieldLastRptRequested.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldNoContraBrokers::TAG : return fieldNoContraBrokers.offset >= 0 ? _fixPtr + fieldNoContraBrokers.offset : nullptr;
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldCrossID::TAG : return fieldCrossID.offset >= 0 ? _fixPtr + fieldCrossID.offset : nullptr;
     case FieldOrigCrossID::TAG : return fieldOrigCrossID.offset >= 0 ? _fixPtr + fieldOrigCrossID.offset : nullptr;
     case FieldCrossType::TAG : return fieldCrossType.offset >= 0 ? _fixPtr + fieldCrossType.offset : nullptr;
     case FieldExecID::TAG : return fieldExecID.offset >= 0 ? _fixPtr + fieldExecID.offset : nullptr;
     case FieldExecRefID::TAG : return fieldExecRefID.offset >= 0 ? _fixPtr + fieldExecRefID.offset : nullptr;
     case FieldExecType::TAG : return fieldExecType.offset >= 0 ? _fixPtr + fieldExecType.offset : nullptr;
     case FieldOrdStatus::TAG : return fieldOrdStatus.offset >= 0 ? _fixPtr + fieldOrdStatus.offset : nullptr;
     case FieldWorkingIndicator::TAG : return fieldWorkingIndicator.offset >= 0 ? _fixPtr + fieldWorkingIndicator.offset : nullptr;
     case FieldOrdRejReason::TAG : return fieldOrdRejReason.offset >= 0 ? _fixPtr + fieldOrdRejReason.offset : nullptr;
     case FieldExecRestatementReason::TAG : return fieldExecRestatementReason.offset >= 0 ? _fixPtr + fieldExecRestatementReason.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::TAG : return fieldDayBookingInst.offset >= 0 ? _fixPtr + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::TAG : return fieldBookingUnit.offset >= 0 ? _fixPtr + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::TAG : return fieldPreallocMethod.offset >= 0 ? _fixPtr + fieldPreallocMethod.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::TAG : return fieldCashMargin.offset >= 0 ? _fixPtr + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::TAG : return fieldClearingFeeIndicator.offset >= 0 ? _fixPtr + fieldClearingFeeIndicator.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldStopPx::TAG : return fieldStopPx.offset >= 0 ? _fixPtr + fieldStopPx.offset : nullptr;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset >= 0 ? _fixPtr + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset >= 0 ? _fixPtr + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset >= 0 ? _fixPtr + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset >= 0 ? _fixPtr + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset >= 0 ? _fixPtr + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::TAG : return fieldPegScope.offset >= 0 ? _fixPtr + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset >= 0 ? _fixPtr + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset >= 0 ? _fixPtr + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset >= 0 ? _fixPtr + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset >= 0 ? _fixPtr + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset >= 0 ? _fixPtr + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset >= 0 ? _fixPtr + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset >= 0 ? _fixPtr + fieldDiscretionScope.offset : nullptr;
     case FieldPeggedPrice::TAG : return fieldPeggedPrice.offset >= 0 ? _fixPtr + fieldPeggedPrice.offset : nullptr;
     case FieldDiscretionPrice::TAG : return fieldDiscretionPrice.offset >= 0 ? _fixPtr + fieldDiscretionPrice.offset : nullptr;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset >= 0 ? _fixPtr + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset >= 0 ? _fixPtr + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset >= 0 ? _fixPtr + fieldParticipationRate.offset : nullptr;
     case FieldTargetStrategyPerformance::TAG : return fieldTargetStrategyPerformance.offset >= 0 ? _fixPtr + fieldTargetStrategyPerformance.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset >= 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::TAG : return fieldSolicitedFlag.offset >= 0 ? _fixPtr + fieldSolicitedFlag.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset >= 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset >= 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset >= 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset >= 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset >= 0 ? _fixPtr + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldLastQty::TAG : return fieldLastQty.offset >= 0 ? _fixPtr + fieldLastQty.offset : nullptr;
     case FieldUnderlyingLastQty::TAG : return fieldUnderlyingLastQty.offset >= 0 ? _fixPtr + fieldUnderlyingLastQty.offset : nullptr;
     case FieldLastPx::TAG : return fieldLastPx.offset >= 0 ? _fixPtr + fieldLastPx.offset : nullptr;
     case FieldUnderlyingLastPx::TAG : return fieldUnderlyingLastPx.offset >= 0 ? _fixPtr + fieldUnderlyingLastPx.offset : nullptr;
     case FieldLastParPx::TAG : return fieldLastParPx.offset >= 0 ? _fixPtr + fieldLastParPx.offset : nullptr;
     case FieldLastSpotRate::TAG : return fieldLastSpotRate.offset >= 0 ? _fixPtr + fieldLastSpotRate.offset : nullptr;
     case FieldLastForwardPoints::TAG : return fieldLastForwardPoints.offset >= 0 ? _fixPtr + fieldLastForwardPoints.offset : nullptr;
     case FieldLastMkt::TAG : return fieldLastMkt.offset >= 0 ? _fixPtr + fieldLastMkt.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldTimeBracket::TAG : return fieldTimeBracket.offset >= 0 ? _fixPtr + fieldTimeBracket.offset : nullptr;
     case FieldLastCapacity::TAG : return fieldLastCapacity.offset >= 0 ? _fixPtr + fieldLastCapacity.offset : nullptr;
     case FieldLeavesQty::TAG : return fieldLeavesQty.offset >= 0 ? _fixPtr + fieldLeavesQty.offset : nullptr;
     case FieldCumQty::TAG : return fieldCumQty.offset >= 0 ? _fixPtr + fieldCumQty.offset : nullptr;
     case FieldAvgPx::TAG : return fieldAvgPx.offset >= 0 ? _fixPtr + fieldAvgPx.offset : nullptr;
     case FieldDayOrderQty::TAG : return fieldDayOrderQty.offset >= 0 ? _fixPtr + fieldDayOrderQty.offset : nullptr;
     case FieldDayCumQty::TAG : return fieldDayCumQty.offset >= 0 ? _fixPtr + fieldDayCumQty.offset : nullptr;
     case FieldDayAvgPx::TAG : return fieldDayAvgPx.offset >= 0 ? _fixPtr + fieldDayAvgPx.offset : nullptr;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset >= 0 ? _fixPtr + fieldGTBookingInst.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldReportToExch::TAG : return fieldReportToExch.offset >= 0 ? _fixPtr + fieldReportToExch.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommCurrency::TAG : return fieldCommCurrency.offset >= 0 ? _fixPtr + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::TAG : return fieldFundRenewWaiv.offset >= 0 ? _fixPtr + fieldFundRenewWaiv.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldGrossTradeAmt::TAG : return fieldGrossTradeAmt.offset >= 0 ? _fixPtr + fieldGrossTradeAmt.offset : nullptr;
     case FieldNumDaysInterest::TAG : return fieldNumDaysInterest.offset >= 0 ? _fixPtr + fieldNumDaysInterest.offset : nullptr;
     case FieldExDate::TAG : return fieldExDate.offset >= 0 ? _fixPtr + fieldExDate.offset : nullptr;
     case FieldAccruedInterestRate::TAG : return fieldAccruedInterestRate.offset >= 0 ? _fixPtr + fieldAccruedInterestRate.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldInterestAtMaturity::TAG : return fieldInterestAtMaturity.offset >= 0 ? _fixPtr + fieldInterestAtMaturity.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldTradedFlatSwitch::TAG : return fieldTradedFlatSwitch.offset >= 0 ? _fixPtr + fieldTradedFlatSwitch.offset : nullptr;
     case FieldBasisFeatureDate::TAG : return fieldBasisFeatureDate.offset >= 0 ? _fixPtr + fieldBasisFeatureDate.offset : nullptr;
     case FieldBasisFeaturePrice::TAG : return fieldBasisFeaturePrice.offset >= 0 ? _fixPtr + fieldBasisFeaturePrice.offset : nullptr;
     case FieldConcession::TAG : return fieldConcession.offset >= 0 ? _fixPtr + fieldConcession.offset : nullptr;
     case FieldTotalTakedown::TAG : return fieldTotalTakedown.offset >= 0 ? _fixPtr + fieldTotalTakedown.offset : nullptr;
     case FieldNetMoney::TAG : return fieldNetMoney.offset >= 0 ? _fixPtr + fieldNetMoney.offset : nullptr;
     case FieldSettlCurrAmt::TAG : return fieldSettlCurrAmt.offset >= 0 ? _fixPtr + fieldSettlCurrAmt.offset : nullptr;
     case FieldSettlCurrency::TAG : return fieldSettlCurrency.offset >= 0 ? _fixPtr + fieldSettlCurrency.offset : nullptr;
     case FieldSettlCurrFxRate::TAG : return fieldSettlCurrFxRate.offset >= 0 ? _fixPtr + fieldSettlCurrFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::TAG : return fieldSettlCurrFxRateCalc.offset >= 0 ? _fixPtr + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldHandlInst::TAG : return fieldHandlInst.offset >= 0 ? _fixPtr + fieldHandlInst.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset >= 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset >= 0 ? _fixPtr + fieldMaxFloor.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset >= 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldMaxShow::TAG : return fieldMaxShow.offset >= 0 ? _fixPtr + fieldMaxShow.offset : nullptr;
     case FieldBookingType::TAG : return fieldBookingType.offset >= 0 ? _fixPtr + fieldBookingType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldSettlDate2::TAG : return fieldSettlDate2.offset >= 0 ? _fixPtr + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::TAG : return fieldOrderQty2.offset >= 0 ? _fixPtr + fieldOrderQty2.offset : nullptr;
     case FieldLastForwardPoints2::TAG : return fieldLastForwardPoints2.offset >= 0 ? _fixPtr + fieldLastForwardPoints2.offset : nullptr;
     case FieldMultiLegReportingType::TAG : return fieldMultiLegReportingType.offset >= 0 ? _fixPtr + fieldMultiLegReportingType.offset : nullptr;
     case FieldCancellationRights::TAG : return fieldCancellationRights.offset >= 0 ? _fixPtr + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::TAG : return fieldMoneyLaunderingStatus.offset >= 0 ? _fixPtr + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldDesignation::TAG : return fieldDesignation.offset >= 0 ? _fixPtr + fieldDesignation.offset : nullptr;
     case FieldTransBkdTime::TAG : return fieldTransBkdTime.offset >= 0 ? _fixPtr + fieldTransBkdTime.offset : nullptr;
     case FieldExecValuationPoint::TAG : return fieldExecValuationPoint.offset >= 0 ? _fixPtr + fieldExecValuationPoint.offset : nullptr;
     case FieldExecPriceType::TAG : return fieldExecPriceType.offset >= 0 ? _fixPtr + fieldExecPriceType.offset : nullptr;
     case FieldExecPriceAdjustment::TAG : return fieldExecPriceAdjustment.offset >= 0 ? _fixPtr + fieldExecPriceAdjustment.offset : nullptr;
     case FieldPriorityIndicator::TAG : return fieldPriorityIndicator.offset >= 0 ? _fixPtr + fieldPriorityIndicator.offset : nullptr;
     case FieldPriceImprovement::TAG : return fieldPriceImprovement.offset >= 0 ? _fixPtr + fieldPriceImprovement.offset : nullptr;
     case FieldLastLiquidityInd::TAG : return fieldLastLiquidityInd.offset >= 0 ? _fixPtr + fieldLastLiquidityInd.offset : nullptr;
     case FieldNoContAmts::TAG : return fieldNoContAmts.offset >= 0 ? _fixPtr + fieldNoContAmts.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldCopyMsgIndicator::TAG : return fieldCopyMsgIndicator.offset >= 0 ? _fixPtr + fieldCopyMsgIndicator.offset : nullptr;
     case FieldNoMiscFees::TAG : return fieldNoMiscFees.offset >= 0 ? _fixPtr + fieldNoMiscFees.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderCancelReject::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset >= 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset >= 0 ? _fixPtr + fieldOrigClOrdID.offset : nullptr;
     case FieldOrdStatus::TAG : return fieldOrdStatus.offset >= 0 ? _fixPtr + fieldOrdStatus.offset : nullptr;
     case FieldWorkingIndicator::TAG : return fieldWorkingIndicator.offset >= 0 ? _fixPtr + fieldWorkingIndicator.offset : nullptr;
     case FieldOrigOrdModTime::TAG : return fieldOrigOrdModTime.offset >= 0 ? _fixPtr + fieldOrigOrdModTime.offset : nullptr;
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldCxlRejResponseTo::TAG : return fieldCxlRejResponseTo.offset >= 0 ? _fixPtr + fieldCxlRejResponseTo.offset : nullptr;
     case FieldCxlRejReason::TAG : return fieldCxlRejReason.offset >= 0 ? _fixPtr + fieldCxlRejReason.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageLogon::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldEncryptMethod::TAG : return fieldEncryptMethod.offset >= 0 ? _fixPtr + fieldEncryptMethod.offset : nullptr;
     case FieldHeartBtInt::TAG : return fieldHeartBtInt.offset >= 0 ? _fixPtr + fieldHeartBtInt.offset : nullptr;
     case FieldRawDataLength::TAG : return fieldRawDataLength.offset >= 0 ? _fixPtr + fieldRawDataLength.offset : nullptr;
     case FieldRawData::TAG : return fieldRawData.offset >= 0 ? _fixPtr + fieldRawData.offset : nullptr;
     case FieldResetSeqNumFlag::TAG : return fieldResetSeqNumFlag.offset >= 0 ? _fixPtr + fieldResetSeqNumFlag.offset : nullptr;
     case FieldNextExpectedMsgSeqNum::TAG : return fieldNextExpectedMsgSeqNum.offset >= 0 ? _fixPtr + fieldNextExpectedMsgSeqNum.offset : nullptr;
     case FieldMaxMessageSize::TAG : return fieldMaxMessageSize.offset >= 0 ? _fixPtr + fieldMaxMessageSize.offset : nullptr;
     case FieldNoMsgTypes::TAG : return fieldNoMsgTypes.offset >= 0 ? _fixPtr + fieldNoMsgTypes.offset : nullptr;
     case FieldTestMessageIndicator::TAG : return fieldTestMessageIndicator.offset >= 0 ? _fixPtr + fieldTestMessageIndicator.offset : nullptr;
     case FieldUsername::TAG : return fieldUsername.offset >= 0 ? _fixPtr + fieldUsername.offset : nullptr;
     case FieldPassword::TAG : return fieldPassword.offset >= 0 ? _fixPtr + fieldPassword.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNews::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrigTime::TAG : return fieldOrigTime.offset >= 0 ? _fixPtr + fieldOrigTime.offset : nullptr;
     case FieldUrgency::TAG : return fieldUrgency.offset >= 0 ? _fixPtr + fieldUrgency.offset : nullptr;
     case FieldHeadline::TAG : return fieldHeadline.offset >= 0 ? _fixPtr + fieldHeadline.offset : nullptr;
     case FieldEncodedHeadlineLen::TAG : return fieldEncodedHeadlineLen.offset >= 0 ? _fixPtr + fieldEncodedHeadlineLen.offset : nullptr;
     case FieldEncodedHeadline::TAG : return fieldEncodedHeadline.offset >= 0 ? _fixPtr + fieldEncodedHeadline.offset : nullptr;
     case FieldNoRoutingIDs::TAG : return fieldNoRoutingIDs.offset >= 0 ? _fixPtr + fieldNoRoutingIDs.offset : nullptr;
     case FieldNoRelatedSym::TAG : return fieldNoRelatedSym.offset >= 0 ? _fixPtr + fieldNoRelatedSym.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLinesOfText::TAG : return fieldNoLinesOfText.offset >= 0 ? _fixPtr + fieldNoLinesOfText.offset : nullptr;
     case FieldURLLink::TAG : return fieldURLLink.offset >= 0 ? _fixPtr + fieldURLLink.offset : nullptr;
     case FieldRawDataLength::TAG : return fieldRawDataLength.offset >= 0 ? _fixPtr + fieldRawDataLength.offset : nullptr;
     case FieldRawData::TAG : return fieldRawData.offset >= 0 ? _fixPtr + fieldRawData.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageEmail::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldEmailThreadID::TAG : return fieldEmailThreadID.offset >= 0 ? _fixPtr + fieldEmailThreadID.offset : nullptr;
     case FieldEmailType::TAG : return fieldEmailType.offset >= 0 ? _fixPtr + fieldEmailType.offset : nullptr;
     case FieldOrigTime::TAG : return fieldOrigTime.offset >= 0 ? _fixPtr + fieldOrigTime.offset : nullptr;
     case FieldSubject::TAG : return fieldSubject.offset >= 0 ? _fixPtr + fieldSubject.offset : nullptr;
     case FieldEncodedSubjectLen::TAG : return fieldEncodedSubjectLen.offset >= 0 ? _fixPtr + fieldEncodedSubjectLen.offset : nullptr;
     case FieldEncodedSubject::TAG : return fieldEncodedSubject.offset >= 0 ? _fixPtr + fieldEncodedSubject.offset : nullptr;
     case FieldNoRoutingIDs::TAG : return fieldNoRoutingIDs.offset >= 0 ? _fixPtr + fieldNoRoutingIDs.offset : nullptr;
     case FieldNoRelatedSym::TAG : return fieldNoRelatedSym.offset >= 0 ? _fixPtr + fieldNoRelatedSym.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldNoLinesOfText::TAG : return fieldNoLinesOfText.offset >= 0 ? _fixPtr + fieldNoLinesOfText.offset : nullptr;
     case FieldRawDataLength::TAG : return fieldRawDataLength.offset >= 0 ? _fixPtr + fieldRawDataLength.offset : nullptr;
     case FieldRawData::TAG : return fieldRawData.offset >= 0 ? _fixPtr + fieldRawData.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNewOrderSingle::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset >= 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::TAG : return fieldDayBookingInst.offset >= 0 ? _fixPtr + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::TAG : return fieldBookingUnit.offset >= 0 ? _fixPtr + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::TAG : return fieldPreallocMethod.offset >= 0 ? _fixPtr + fieldPreallocMethod.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::TAG : return fieldCashMargin.offset >= 0 ? _fixPtr + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::TAG : return fieldClearingFeeIndicator.offset >= 0 ? _fixPtr + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::TAG : return fieldHandlInst.offset >= 0 ? _fixPtr + fieldHandlInst.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset >= 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset >= 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset >= 0 ? _fixPtr + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::TAG : return fieldProcessCode.offset >= 0 ? _fixPtr + fieldProcessCode.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldPrevClosePx::TAG : return fieldPrevClosePx.offset >= 0 ? _fixPtr + fieldPrevClosePx.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldLocateReqd::TAG : return fieldLocateReqd.offset >= 0 ? _fixPtr + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldStopPx::TAG : return fieldStopPx.offset >= 0 ? _fixPtr + fieldStopPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset >= 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::TAG : return fieldSolicitedFlag.offset >= 0 ? _fixPtr + fieldSolicitedFlag.offset : nullptr;
     case FieldIOIID::TAG : return fieldIOIID.offset >= 0 ? _fixPtr + fieldIOIID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset >= 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset >= 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset >= 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset >= 0 ? _fixPtr + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommCurrency::TAG : return fieldCommCurrency.offset >= 0 ? _fixPtr + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::TAG : return fieldFundRenewWaiv.offset >= 0 ? _fixPtr + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset >= 0 ? _fixPtr + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::TAG : return fieldForexReq.offset >= 0 ? _fixPtr + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::TAG : return fieldSettlCurrency.offset >= 0 ? _fixPtr + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::TAG : return fieldBookingType.offset >= 0 ? _fixPtr + fieldBookingType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldSettlDate2::TAG : return fieldSettlDate2.offset >= 0 ? _fixPtr + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::TAG : return fieldOrderQty2.offset >= 0 ? _fixPtr + fieldOrderQty2.offset : nullptr;
     case FieldPrice2::TAG : return fieldPrice2.offset >= 0 ? _fixPtr + fieldPrice2.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset >= 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::TAG : return fieldCoveredOrUncovered.offset >= 0 ? _fixPtr + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::TAG : return fieldMaxShow.offset >= 0 ? _fixPtr + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset >= 0 ? _fixPtr + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset >= 0 ? _fixPtr + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset >= 0 ? _fixPtr + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset >= 0 ? _fixPtr + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset >= 0 ? _fixPtr + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::TAG : return fieldPegScope.offset >= 0 ? _fixPtr + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset >= 0 ? _fixPtr + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset >= 0 ? _fixPtr + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset >= 0 ? _fixPtr + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset >= 0 ? _fixPtr + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset >= 0 ? _fixPtr + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset >= 0 ? _fixPtr + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset >= 0 ? _fixPtr + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset >= 0 ? _fixPtr + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset >= 0 ? _fixPtr + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset >= 0 ? _fixPtr + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::TAG : return fieldCancellationRights.offset >= 0 ? _fixPtr + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::TAG : return fieldMoneyLaunderingStatus.offset >= 0 ? _fixPtr + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldDesignation::TAG : return fieldDesignation.offset >= 0 ? _fixPtr + fieldDesignation.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNewOrderList::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldBidID::TAG : return fieldBidID.offset >= 0 ? _fixPtr + fieldBidID.offset : nullptr;
     case FieldClientBidID::TAG : return fieldClientBidID.offset >= 0 ? _fixPtr + fieldClientBidID.offset : nullptr;
     case FieldProgRptReqs::TAG : return fieldProgRptReqs.offset >= 0 ? _fixPtr + fieldProgRptReqs.offset : nullptr;
     case FieldBidType::TAG : return fieldBidType.offset >= 0 ? _fixPtr + fieldBidType.offset : nullptr;
     case FieldProgPeriodInterval::TAG : return fieldProgPeriodInterval.offset >= 0 ? _fixPtr + fieldProgPeriodInterval.offset : nullptr;
     case FieldCancellationRights::TAG : return fieldCancellationRights.offset >= 0 ? _fixPtr + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::TAG : return fieldMoneyLaunderingStatus.offset >= 0 ? _fixPtr + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldListExecInstType::TAG : return fieldListExecInstType.offset >= 0 ? _fixPtr + fieldListExecInstType.offset : nullptr;
     case FieldListExecInst::TAG : return fieldListExecInst.offset >= 0 ? _fixPtr + fieldListExecInst.offset : nullptr;
     case FieldEncodedListExecInstLen::TAG : return fieldEncodedListExecInstLen.offset >= 0 ? _fixPtr + fieldEncodedListExecInstLen.offset : nullptr;
     case FieldEncodedListExecInst::TAG : return fieldEncodedListExecInst.offset >= 0 ? _fixPtr + fieldEncodedListExecInst.offset : nullptr;
     case FieldAllowableOneSidednessPct::TAG : return fieldAllowableOneSidednessPct.offset >= 0 ? _fixPtr + fieldAllowableOneSidednessPct.offset : nullptr;
     case FieldAllowableOneSidednessValue::TAG : return fieldAllowableOneSidednessValue.offset >= 0 ? _fixPtr + fieldAllowableOneSidednessValue.offset : nullptr;
     case FieldAllowableOneSidednessCurr::TAG : return fieldAllowableOneSidednessCurr.offset >= 0 ? _fixPtr + fieldAllowableOneSidednessCurr.offset : nullptr;
     case FieldTotNoOrders::TAG : return fieldTotNoOrders.offset >= 0 ? _fixPtr + fieldTotNoOrders.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset >= 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoOrders::TAG : return fieldNoOrders.offset >= 0 ? _fixPtr + fieldNoOrders.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderCancelRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset >= 0 ? _fixPtr + fieldOrigClOrdID.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset >= 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldOrigOrdModTime::TAG : return fieldOrigOrdModTime.offset >= 0 ? _fixPtr + fieldOrigOrdModTime.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset >= 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderCancelReplaceRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset >= 0 ? _fixPtr + fieldOrigClOrdID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset >= 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldOrigOrdModTime::TAG : return fieldOrigOrdModTime.offset >= 0 ? _fixPtr + fieldOrigOrdModTime.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::TAG : return fieldDayBookingInst.offset >= 0 ? _fixPtr + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::TAG : return fieldBookingUnit.offset >= 0 ? _fixPtr + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::TAG : return fieldPreallocMethod.offset >= 0 ? _fixPtr + fieldPreallocMethod.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::TAG : return fieldCashMargin.offset >= 0 ? _fixPtr + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::TAG : return fieldClearingFeeIndicator.offset >= 0 ? _fixPtr + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::TAG : return fieldHandlInst.offset >= 0 ? _fixPtr + fieldHandlInst.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset >= 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset >= 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset >= 0 ? _fixPtr + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldStopPx::TAG : return fieldStopPx.offset >= 0 ? _fixPtr + fieldStopPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset >= 0 ? _fixPtr + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset >= 0 ? _fixPtr + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset >= 0 ? _fixPtr + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset >= 0 ? _fixPtr + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset >= 0 ? _fixPtr + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::TAG : return fieldPegScope.offset >= 0 ? _fixPtr + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset >= 0 ? _fixPtr + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset >= 0 ? _fixPtr + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset >= 0 ? _fixPtr + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset >= 0 ? _fixPtr + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset >= 0 ? _fixPtr + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset >= 0 ? _fixPtr + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset >= 0 ? _fixPtr + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset >= 0 ? _fixPtr + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset >= 0 ? _fixPtr + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset >= 0 ? _fixPtr + fieldParticipationRate.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset >= 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::TAG : return fieldSolicitedFlag.offset >= 0 ? _fixPtr + fieldSolicitedFlag.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset >= 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset >= 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset >= 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset >= 0 ? _fixPtr + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommCurrency::TAG : return fieldCommCurrency.offset >= 0 ? _fixPtr + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::TAG : return fieldFundRenewWaiv.offset >= 0 ? _fixPtr + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset >= 0 ? _fixPtr + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::TAG : return fieldForexReq.offset >= 0 ? _fixPtr + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::TAG : return fieldSettlCurrency.offset >= 0 ? _fixPtr + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::TAG : return fieldBookingType.offset >= 0 ? _fixPtr + fieldBookingType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldSettlDate2::TAG : return fieldSettlDate2.offset >= 0 ? _fixPtr + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::TAG : return fieldOrderQty2.offset >= 0 ? _fixPtr + fieldOrderQty2.offset : nullptr;
     case FieldPrice2::TAG : return fieldPrice2.offset >= 0 ? _fixPtr + fieldPrice2.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset >= 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::TAG : return fieldCoveredOrUncovered.offset >= 0 ? _fixPtr + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::TAG : return fieldMaxShow.offset >= 0 ? _fixPtr + fieldMaxShow.offset : nullptr;
     case FieldLocateReqd::TAG : return fieldLocateReqd.offset >= 0 ? _fixPtr + fieldLocateReqd.offset : nullptr;
     case FieldCancellationRights::TAG : return fieldCancellationRights.offset >= 0 ? _fixPtr + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::TAG : return fieldMoneyLaunderingStatus.offset >= 0 ? _fixPtr + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldDesignation::TAG : return fieldDesignation.offset >= 0 ? _fixPtr + fieldDesignation.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderStatusRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset >= 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldOrdStatusReqID::TAG : return fieldOrdStatusReqID.offset >= 0 ? _fixPtr + fieldOrdStatusReqID.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAllocationInstruction::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldAllocTransType::TAG : return fieldAllocTransType.offset >= 0 ? _fixPtr + fieldAllocTransType.offset : nullptr;
     case FieldAllocType::TAG : return fieldAllocType.offset >= 0 ? _fixPtr + fieldAllocType.offset : nullptr;
     case FieldSecondaryAllocID::TAG : return fieldSecondaryAllocID.offset >= 0 ? _fixPtr + fieldSecondaryAllocID.offset : nullptr;
     case FieldRefAllocID::TAG : return fieldRefAllocID.offset >= 0 ? _fixPtr + fieldRefAllocID.offset : nullptr;
     case FieldAllocCancReplaceReason::TAG : return fieldAllocCancReplaceReason.offset >= 0 ? _fixPtr + fieldAllocCancReplaceReason.offset : nullptr;
     case FieldAllocIntermedReqType::TAG : return fieldAllocIntermedReqType.offset >= 0 ? _fixPtr + fieldAllocIntermedReqType.offset : nullptr;
     case FieldAllocLinkID::TAG : return fieldAllocLinkID.offset >= 0 ? _fixPtr + fieldAllocLinkID.offset : nullptr;
     case FieldAllocLinkType::TAG : return fieldAllocLinkType.offset >= 0 ? _fixPtr + fieldAllocLinkType.offset : nullptr;
     case FieldBookingRefID::TAG : return fieldBookingRefID.offset >= 0 ? _fixPtr + fieldBookingRefID.offset : nullptr;
     case FieldAllocNoOrdersType::TAG : return fieldAllocNoOrdersType.offset >= 0 ? _fixPtr + fieldAllocNoOrdersType.offset : nullptr;
     case FieldNoOrders::TAG : return fieldNoOrders.offset >= 0 ? _fixPtr + fieldNoOrders.offset : nullptr;
     case FieldNoExecs::TAG : return fieldNoExecs.offset >= 0 ? _fixPtr + fieldNoExecs.offset : nullptr;
     case FieldPreviouslyReported::TAG : return fieldPreviouslyReported.offset >= 0 ? _fixPtr + fieldPreviouslyReported.offset : nullptr;
     case FieldReversalIndicator::TAG : return fieldReversalIndicator.offset >= 0 ? _fixPtr + fieldReversalIndicator.offset : nullptr;
     case FieldMatchType::TAG : return fieldMatchType.offset >= 0 ? _fixPtr + fieldMatchType.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldLastMkt::TAG : return fieldLastMkt.offset >= 0 ? _fixPtr + fieldLastMkt.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldAvgPx::TAG : return fieldAvgPx.offset >= 0 ? _fixPtr + fieldAvgPx.offset : nullptr;
     case FieldAvgParPx::TAG : return fieldAvgParPx.offset >= 0 ? _fixPtr + fieldAvgParPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldAvgPxPrecision::TAG : return fieldAvgPxPrecision.offset >= 0 ? _fixPtr + fieldAvgPxPrecision.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldBookingType::TAG : return fieldBookingType.offset >= 0 ? _fixPtr + fieldBookingType.offset : nullptr;
     case FieldGrossTradeAmt::TAG : return fieldGrossTradeAmt.offset >= 0 ? _fixPtr + fieldGrossTradeAmt.offset : nullptr;
     case FieldConcession::TAG : return fieldConcession.offset >= 0 ? _fixPtr + fieldConcession.offset : nullptr;
     case FieldTotalTakedown::TAG : return fieldTotalTakedown.offset >= 0 ? _fixPtr + fieldTotalTakedown.offset : nullptr;
     case FieldNetMoney::TAG : return fieldNetMoney.offset >= 0 ? _fixPtr + fieldNetMoney.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset >= 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldAutoAcceptIndicator::TAG : return fieldAutoAcceptIndicator.offset >= 0 ? _fixPtr + fieldAutoAcceptIndicator.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldNumDaysInterest::TAG : return fieldNumDaysInterest.offset >= 0 ? _fixPtr + fieldNumDaysInterest.offset : nullptr;
     case FieldAccruedInterestRate::TAG : return fieldAccruedInterestRate.offset >= 0 ? _fixPtr + fieldAccruedInterestRate.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldTotalAccruedInterestAmt::TAG : return fieldTotalAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldTotalAccruedInterestAmt.offset : nullptr;
     case FieldInterestAtMaturity::TAG : return fieldInterestAtMaturity.offset >= 0 ? _fixPtr + fieldInterestAtMaturity.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldLegalConfirm::TAG : return fieldLegalConfirm.offset >= 0 ? _fixPtr + fieldLegalConfirm.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldTotNoAllocs::TAG : return fieldTotNoAllocs.offset >= 0 ? _fixPtr + fieldTotNoAllocs.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset >= 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListCancelRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListExecute::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldClientBidID::TAG : return fieldClientBidID.offset >= 0 ? _fixPtr + fieldClientBidID.offset : nullptr;
     case FieldBidID::TAG : return fieldBidID.offset >= 0 ? _fixPtr + fieldBidID.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListStatusRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListStatus::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldListStatusType::TAG : return fieldListStatusType.offset >= 0 ? _fixPtr + fieldListStatusType.offset : nullptr;
     case FieldNoRpts::TAG : return fieldNoRpts.offset >= 0 ? _fixPtr + fieldNoRpts.offset : nullptr;
     case FieldListOrderStatus::TAG : return fieldListOrderStatus.offset >= 0 ? _fixPtr + fieldListOrderStatus.offset : nullptr;
     case FieldRptSeq::TAG : return fieldRptSeq.offset >= 0 ? _fixPtr + fieldRptSeq.offset : nullptr;
     case FieldListStatusText::TAG : return fieldListStatusText.offset >= 0 ? _fixPtr + fieldListStatusText.offset : nullptr;
     case FieldEncodedListStatusTextLen::TAG : return fieldEncodedListStatusTextLen.offset >= 0 ? _fixPtr + fieldEncodedListStatusTextLen.offset : nullptr;
     case FieldEncodedListStatusText::TAG : return fieldEncodedListStatusText.offset >= 0 ? _fixPtr + fieldEncodedListStatusText.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldTotNoOrders::TAG : return fieldTotNoOrders.offset >= 0 ? _fixPtr + fieldTotNoOrders.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset >= 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoOrders::TAG : return fieldNoOrders.offset >= 0 ? _fixPtr + fieldNoOrders.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAllocationInstructionAck::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldSecondaryAllocID::TAG : return fieldSecondaryAllocID.offset >= 0 ? _fixPtr + fieldSecondaryAllocID.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldAllocStatus::TAG : return fieldAllocStatus.offset >= 0 ? _fixPtr + fieldAllocStatus.offset : nullptr;
     case FieldAllocRejCode::TAG : return fieldAllocRejCode.offset >= 0 ? _fixPtr + fieldAllocRejCode.offset : nullptr;
     case FieldAllocType::TAG : return fieldAllocType.offset >= 0 ? _fixPtr + fieldAllocType.offset : nullptr;
     case FieldAllocIntermedReqType::TAG : return fieldAllocIntermedReqType.offset >= 0 ? _fixPtr + fieldAllocIntermedReqType.offset : nullptr;
     case FieldMatchStatus::TAG : return fieldMatchStatus.offset >= 0 ? _fixPtr + fieldMatchStatus.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageDontKnowTrade::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldExecID::TAG : return fieldExecID.offset >= 0 ? _fixPtr + fieldExecID.offset : nullptr;
     case FieldDKReason::TAG : return fieldDKReason.offset >= 0 ? _fixPtr + fieldDKReason.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldLastQty::TAG : return fieldLastQty.offset >= 0 ? _fixPtr + fieldLastQty.offset : nullptr;
     case FieldLastPx::TAG : return fieldLastPx.offset >= 0 ? _fixPtr + fieldLastPx.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::TAG : return fieldQuoteReqID.offset >= 0 ? _fixPtr + fieldQuoteReqID.offset : nullptr;
     case FieldRFQReqID::TAG : return fieldRFQReqID.offset >= 0 ? _fixPtr + fieldRFQReqID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldNoRelatedSym::TAG : return fieldNoRelatedSym.offset >= 0 ? _fixPtr + fieldNoRelatedSym.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuote::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::TAG : return fieldQuoteReqID.offset >= 0 ? _fixPtr + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldQuoteRespID::TAG : return fieldQuoteRespID.offset >= 0 ? _fixPtr + fieldQuoteRespID.offset : nullptr;
     case FieldQuoteType::TAG : return fieldQuoteType.offset >= 0 ? _fixPtr + fieldQuoteType.offset : nullptr;
     case FieldNoQuoteQualifiers::TAG : return fieldNoQuoteQualifiers.offset >= 0 ? _fixPtr + fieldNoQuoteQualifiers.offset : nullptr;
     case FieldQuoteResponseLevel::TAG : return fieldQuoteResponseLevel.offset >= 0 ? _fixPtr + fieldQuoteResponseLevel.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldSettlDate2::TAG : return fieldSettlDate2.offset >= 0 ? _fixPtr + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::TAG : return fieldOrderQty2.offset >= 0 ? _fixPtr + fieldOrderQty2.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldBidPx::TAG : return fieldBidPx.offset >= 0 ? _fixPtr + fieldBidPx.offset : nullptr;
     case FieldOfferPx::TAG : return fieldOfferPx.offset >= 0 ? _fixPtr + fieldOfferPx.offset : nullptr;
     case FieldMktBidPx::TAG : return fieldMktBidPx.offset >= 0 ? _fixPtr + fieldMktBidPx.offset : nullptr;
     case FieldMktOfferPx::TAG : return fieldMktOfferPx.offset >= 0 ? _fixPtr + fieldMktOfferPx.offset : nullptr;
     case FieldMinBidSize::TAG : return fieldMinBidSize.offset >= 0 ? _fixPtr + fieldMinBidSize.offset : nullptr;
     case FieldBidSize::TAG : return fieldBidSize.offset >= 0 ? _fixPtr + fieldBidSize.offset : nullptr;
     case FieldMinOfferSize::TAG : return fieldMinOfferSize.offset >= 0 ? _fixPtr + fieldMinOfferSize.offset : nullptr;
     case FieldOfferSize::TAG : return fieldOfferSize.offset >= 0 ? _fixPtr + fieldOfferSize.offset : nullptr;
     case FieldValidUntilTime::TAG : return fieldValidUntilTime.offset >= 0 ? _fixPtr + fieldValidUntilTime.offset : nullptr;
     case FieldBidSpotRate::TAG : return fieldBidSpotRate.offset >= 0 ? _fixPtr + fieldBidSpotRate.offset : nullptr;
     case FieldOfferSpotRate::TAG : return fieldOfferSpotRate.offset >= 0 ? _fixPtr + fieldOfferSpotRate.offset : nullptr;
     case FieldBidForwardPoints::TAG : return fieldBidForwardPoints.offset >= 0 ? _fixPtr + fieldBidForwardPoints.offset : nullptr;
     case FieldOfferForwardPoints::TAG : return fieldOfferForwardPoints.offset >= 0 ? _fixPtr + fieldOfferForwardPoints.offset : nullptr;
     case FieldMidPx::TAG : return fieldMidPx.offset >= 0 ? _fixPtr + fieldMidPx.offset : nullptr;
     case FieldBidYield::TAG : return fieldBidYield.offset >= 0 ? _fixPtr + fieldBidYield.offset : nullptr;
     case FieldMidYield::TAG : return fieldMidYield.offset >= 0 ? _fixPtr + fieldMidYield.offset : nullptr;
     case FieldOfferYield::TAG : return fieldOfferYield.offset >= 0 ? _fixPtr + fieldOfferYield.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldBidForwardPoints2::TAG : return fieldBidForwardPoints2.offset >= 0 ? _fixPtr + fieldBidForwardPoints2.offset : nullptr;
     case FieldOfferForwardPoints2::TAG : return fieldOfferForwardPoints2.offset >= 0 ? _fixPtr + fieldOfferForwardPoints2.offset : nullptr;
     case FieldSettlCurrBidFxRate::TAG : return fieldSettlCurrBidFxRate.offset >= 0 ? _fixPtr + fieldSettlCurrBidFxRate.offset : nullptr;
     case FieldSettlCurrOfferFxRate::TAG : return fieldSettlCurrOfferFxRate.offset >= 0 ? _fixPtr + fieldSettlCurrOfferFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::TAG : return fieldSettlCurrFxRateCalc.offset >= 0 ? _fixPtr + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSettlementInstructions::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSettlInstMsgID::TAG : return fieldSettlInstMsgID.offset >= 0 ? _fixPtr + fieldSettlInstMsgID.offset : nullptr;
     case FieldSettlInstReqID::TAG : return fieldSettlInstReqID.offset >= 0 ? _fixPtr + fieldSettlInstReqID.offset : nullptr;
     case FieldSettlInstMode::TAG : return fieldSettlInstMode.offset >= 0 ? _fixPtr + fieldSettlInstMode.offset : nullptr;
     case FieldSettlInstReqRejCode::TAG : return fieldSettlInstReqRejCode.offset >= 0 ? _fixPtr + fieldSettlInstReqRejCode.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoSettlInst::TAG : return fieldNoSettlInst.offset >= 0 ? _fixPtr + fieldNoSettlInst.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMarketDataRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDReqID::TAG : return fieldMDReqID.offset >= 0 ? _fixPtr + fieldMDReqID.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldMarketDepth::TAG : return fieldMarketDepth.offset >= 0 ? _fixPtr + fieldMarketDepth.offset : nullptr;
     case FieldMDUpdateType::TAG : return fieldMDUpdateType.offset >= 0 ? _fixPtr + fieldMDUpdateType.offset : nullptr;
     case FieldAggregatedBook::TAG : return fieldAggregatedBook.offset >= 0 ? _fixPtr + fieldAggregatedBook.offset : nullptr;
     case FieldOpenCloseSettlFlag::TAG : return fieldOpenCloseSettlFlag.offset >= 0 ? _fixPtr + fieldOpenCloseSettlFlag.offset : nullptr;
     case FieldScope::TAG : return fieldScope.offset >= 0 ? _fixPtr + fieldScope.offset : nullptr;
     case FieldMDImplicitDelete::TAG : return fieldMDImplicitDelete.offset >= 0 ? _fixPtr + fieldMDImplicitDelete.offset : nullptr;
     case FieldNoMDEntryTypes::TAG : return fieldNoMDEntryTypes.offset >= 0 ? _fixPtr + fieldNoMDEntryTypes.offset : nullptr;
     case FieldNoRelatedSym::TAG : return fieldNoRelatedSym.offset >= 0 ? _fixPtr + fieldNoRelatedSym.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldApplQueueAction::TAG : return fieldApplQueueAction.offset >= 0 ? _fixPtr + fieldApplQueueAction.offset : nullptr;
     case FieldApplQueueMax::TAG : return fieldApplQueueMax.offset >= 0 ? _fixPtr + fieldApplQueueMax.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMarketDataSnapshotFullRefresh::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDReqID::TAG : return fieldMDReqID.offset >= 0 ? _fixPtr + fieldMDReqID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldFinancialStatus::TAG : return fieldFinancialStatus.offset >= 0 ? _fixPtr + fieldFinancialStatus.offset : nullptr;
     case FieldCorporateAction::TAG : return fieldCorporateAction.offset >= 0 ? _fixPtr + fieldCorporateAction.offset : nullptr;
     case FieldNetChgPrevDay::TAG : return fieldNetChgPrevDay.offset >= 0 ? _fixPtr + fieldNetChgPrevDay.offset : nullptr;
     case FieldNoMDEntries::TAG : return fieldNoMDEntries.offset >= 0 ? _fixPtr + fieldNoMDEntries.offset : nullptr;
     case FieldApplQueueDepth::TAG : return fieldApplQueueDepth.offset >= 0 ? _fixPtr + fieldApplQueueDepth.offset : nullptr;
     case FieldApplQueueResolution::TAG : return fieldApplQueueResolution.offset >= 0 ? _fixPtr + fieldApplQueueResolution.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMarketDataIncrementalRefresh::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDReqID::TAG : return fieldMDReqID.offset >= 0 ? _fixPtr + fieldMDReqID.offset : nullptr;
     case FieldNoMDEntries::TAG : return fieldNoMDEntries.offset >= 0 ? _fixPtr + fieldNoMDEntries.offset : nullptr;
     case FieldApplQueueDepth::TAG : return fieldApplQueueDepth.offset >= 0 ? _fixPtr + fieldApplQueueDepth.offset : nullptr;
     case FieldApplQueueResolution::TAG : return fieldApplQueueResolution.offset >= 0 ? _fixPtr + fieldApplQueueResolution.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMarketDataRequestReject::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDReqID::TAG : return fieldMDReqID.offset >= 0 ? _fixPtr + fieldMDReqID.offset : nullptr;
     case FieldMDReqRejReason::TAG : return fieldMDReqRejReason.offset >= 0 ? _fixPtr + fieldMDReqRejReason.offset : nullptr;
     case FieldNoAltMDSource::TAG : return fieldNoAltMDSource.offset >= 0 ? _fixPtr + fieldNoAltMDSource.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteCancel::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::TAG : return fieldQuoteReqID.offset >= 0 ? _fixPtr + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldQuoteCancelType::TAG : return fieldQuoteCancelType.offset >= 0 ? _fixPtr + fieldQuoteCancelType.offset : nullptr;
     case FieldQuoteResponseLevel::TAG : return fieldQuoteResponseLevel.offset >= 0 ? _fixPtr + fieldQuoteResponseLevel.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldNoQuoteEntries::TAG : return fieldNoQuoteEntries.offset >= 0 ? _fixPtr + fieldNoQuoteEntries.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteStatusRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteStatusReqID::TAG : return fieldQuoteStatusReqID.offset >= 0 ? _fixPtr + fieldQuoteStatusReqID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMassQuoteAcknowledgement::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::TAG : return fieldQuoteReqID.offset >= 0 ? _fixPtr + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldQuoteStatus::TAG : return fieldQuoteStatus.offset >= 0 ? _fixPtr + fieldQuoteStatus.offset : nullptr;
     case FieldQuoteRejectReason::TAG : return fieldQuoteRejectReason.offset >= 0 ? _fixPtr + fieldQuoteRejectReason.offset : nullptr;
     case FieldQuoteResponseLevel::TAG : return fieldQuoteResponseLevel.offset >= 0 ? _fixPtr + fieldQuoteResponseLevel.offset : nullptr;
     case FieldQuoteType::TAG : return fieldQuoteType.offset >= 0 ? _fixPtr + fieldQuoteType.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldNoQuoteSets::TAG : return fieldNoQuoteSets.offset >= 0 ? _fixPtr + fieldNoQuoteSets.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityDefinitionRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::TAG : return fieldSecurityReqID.offset >= 0 ? _fixPtr + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityRequestType::TAG : return fieldSecurityRequestType.offset >= 0 ? _fixPtr + fieldSecurityRequestType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldExpirationCycle::TAG : return fieldExpirationCycle.offset >= 0 ? _fixPtr + fieldExpirationCycle.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityDefinition::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::TAG : return fieldSecurityReqID.offset >= 0 ? _fixPtr + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityResponseID::TAG : return fieldSecurityResponseID.offset >= 0 ? _fixPtr + fieldSecurityResponseID.offset : nullptr;
     case FieldSecurityResponseType::TAG : return fieldSecurityResponseType.offset >= 0 ? _fixPtr + fieldSecurityResponseType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldExpirationCycle::TAG : return fieldExpirationCycle.offset >= 0 ? _fixPtr + fieldExpirationCycle.offset : nullptr;
     case FieldRoundLot::TAG : return fieldRoundLot.offset >= 0 ? _fixPtr + fieldRoundLot.offset : nullptr;
     case FieldMinTradeVol::TAG : return fieldMinTradeVol.offset >= 0 ? _fixPtr + fieldMinTradeVol.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityStatusRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityStatusReqID::TAG : return fieldSecurityStatusReqID.offset >= 0 ? _fixPtr + fieldSecurityStatusReqID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityStatus::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityStatusReqID::TAG : return fieldSecurityStatusReqID.offset >= 0 ? _fixPtr + fieldSecurityStatusReqID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldUnsolicitedIndicator::TAG : return fieldUnsolicitedIndicator.offset >= 0 ? _fixPtr + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldSecurityTradingStatus::TAG : return fieldSecurityTradingStatus.offset >= 0 ? _fixPtr + fieldSecurityTradingStatus.offset : nullptr;
     case FieldFinancialStatus::TAG : return fieldFinancialStatus.offset >= 0 ? _fixPtr + fieldFinancialStatus.offset : nullptr;
     case FieldCorporateAction::TAG : return fieldCorporateAction.offset >= 0 ? _fixPtr + fieldCorporateAction.offset : nullptr;
     case FieldHaltReasonChar::TAG : return fieldHaltReasonChar.offset >= 0 ? _fixPtr + fieldHaltReasonChar.offset : nullptr;
     case FieldInViewOfCommon::TAG : return fieldInViewOfCommon.offset >= 0 ? _fixPtr + fieldInViewOfCommon.offset : nullptr;
     case FieldDueToRelated::TAG : return fieldDueToRelated.offset >= 0 ? _fixPtr + fieldDueToRelated.offset : nullptr;
     case FieldBuyVolume::TAG : return fieldBuyVolume.offset >= 0 ? _fixPtr + fieldBuyVolume.offset : nullptr;
     case FieldSellVolume::TAG : return fieldSellVolume.offset >= 0 ? _fixPtr + fieldSellVolume.offset : nullptr;
     case FieldHighPx::TAG : return fieldHighPx.offset >= 0 ? _fixPtr + fieldHighPx.offset : nullptr;
     case FieldLowPx::TAG : return fieldLowPx.offset >= 0 ? _fixPtr + fieldLowPx.offset : nullptr;
     case FieldLastPx::TAG : return fieldLastPx.offset >= 0 ? _fixPtr + fieldLastPx.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldAdjustment::TAG : return fieldAdjustment.offset >= 0 ? _fixPtr + fieldAdjustment.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradingSessionStatusRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradSesReqID::TAG : return fieldTradSesReqID.offset >= 0 ? _fixPtr + fieldTradSesReqID.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldTradSesMethod::TAG : return fieldTradSesMethod.offset >= 0 ? _fixPtr + fieldTradSesMethod.offset : nullptr;
     case FieldTradSesMode::TAG : return fieldTradSesMode.offset >= 0 ? _fixPtr + fieldTradSesMode.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradingSessionStatus::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradSesReqID::TAG : return fieldTradSesReqID.offset >= 0 ? _fixPtr + fieldTradSesReqID.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldTradSesMethod::TAG : return fieldTradSesMethod.offset >= 0 ? _fixPtr + fieldTradSesMethod.offset : nullptr;
     case FieldTradSesMode::TAG : return fieldTradSesMode.offset >= 0 ? _fixPtr + fieldTradSesMode.offset : nullptr;
     case FieldUnsolicitedIndicator::TAG : return fieldUnsolicitedIndicator.offset >= 0 ? _fixPtr + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldTradSesStatus::TAG : return fieldTradSesStatus.offset >= 0 ? _fixPtr + fieldTradSesStatus.offset : nullptr;
     case FieldTradSesStatusRejReason::TAG : return fieldTradSesStatusRejReason.offset >= 0 ? _fixPtr + fieldTradSesStatusRejReason.offset : nullptr;
     case FieldTradSesStartTime::TAG : return fieldTradSesStartTime.offset >= 0 ? _fixPtr + fieldTradSesStartTime.offset : nullptr;
     case FieldTradSesOpenTime::TAG : return fieldTradSesOpenTime.offset >= 0 ? _fixPtr + fieldTradSesOpenTime.offset : nullptr;
     case FieldTradSesPreCloseTime::TAG : return fieldTradSesPreCloseTime.offset >= 0 ? _fixPtr + fieldTradSesPreCloseTime.offset : nullptr;
     case FieldTradSesCloseTime::TAG : return fieldTradSesCloseTime.offset >= 0 ? _fixPtr + fieldTradSesCloseTime.offset : nullptr;
     case FieldTradSesEndTime::TAG : return fieldTradSesEndTime.offset >= 0 ? _fixPtr + fieldTradSesEndTime.offset : nullptr;
     case FieldTotalVolumeTraded::TAG : return fieldTotalVolumeTraded.offset >= 0 ? _fixPtr + fieldTotalVolumeTraded.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMassQuote::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::TAG : return fieldQuoteReqID.offset >= 0 ? _fixPtr + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldQuoteType::TAG : return fieldQuoteType.offset >= 0 ? _fixPtr + fieldQuoteType.offset : nullptr;
     case FieldQuoteResponseLevel::TAG : return fieldQuoteResponseLevel.offset >= 0 ? _fixPtr + fieldQuoteResponseLevel.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldDefBidSize::TAG : return fieldDefBidSize.offset >= 0 ? _fixPtr + fieldDefBidSize.offset : nullptr;
     case FieldDefOfferSize::TAG : return fieldDefOfferSize.offset >= 0 ? _fixPtr + fieldDefOfferSize.offset : nullptr;
     case FieldNoQuoteSets::TAG : return fieldNoQuoteSets.offset >= 0 ? _fixPtr + fieldNoQuoteSets.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageBusinessMessageReject::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRefSeqNum::TAG : return fieldRefSeqNum.offset >= 0 ? _fixPtr + fieldRefSeqNum.offset : nullptr;
     case FieldRefMsgType::TAG : return fieldRefMsgType.offset >= 0 ? _fixPtr + fieldRefMsgType.offset : nullptr;
     case FieldBusinessRejectRefID::TAG : return fieldBusinessRejectRefID.offset >= 0 ? _fixPtr + fieldBusinessRejectRefID.offset : nullptr;
     case FieldBusinessRejectReason::TAG : return fieldBusinessRejectReason.offset >= 0 ? _fixPtr + fieldBusinessRejectReason.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageBidRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldBidID::TAG : return fieldBidID.offset >= 0 ? _fixPtr + fieldBidID.offset : nullptr;
     case FieldClientBidID::TAG : return fieldClientBidID.offset >= 0 ? _fixPtr + fieldClientBidID.offset : nullptr;
     case FieldBidRequestTransType::TAG : return fieldBidRequestTransType.offset >= 0 ? _fixPtr + fieldBidRequestTransType.offset : nullptr;
     case FieldListName::TAG : return fieldListName.offset >= 0 ? _fixPtr + fieldListName.offset : nullptr;
     case FieldTotNoRelatedSym::TAG : return fieldTotNoRelatedSym.offset >= 0 ? _fixPtr + fieldTotNoRelatedSym.offset : nullptr;
     case FieldBidType::TAG : return fieldBidType.offset >= 0 ? _fixPtr + fieldBidType.offset : nullptr;
     case FieldNumTickets::TAG : return fieldNumTickets.offset >= 0 ? _fixPtr + fieldNumTickets.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldSideValue1::TAG : return fieldSideValue1.offset >= 0 ? _fixPtr + fieldSideValue1.offset : nullptr;
     case FieldSideValue2::TAG : return fieldSideValue2.offset >= 0 ? _fixPtr + fieldSideValue2.offset : nullptr;
     case FieldNoBidDescriptors::TAG : return fieldNoBidDescriptors.offset >= 0 ? _fixPtr + fieldNoBidDescriptors.offset : nullptr;
     case FieldNoBidComponents::TAG : return fieldNoBidComponents.offset >= 0 ? _fixPtr + fieldNoBidComponents.offset : nullptr;
     case FieldLiquidityIndType::TAG : return fieldLiquidityIndType.offset >= 0 ? _fixPtr + fieldLiquidityIndType.offset : nullptr;
     case FieldWtAverageLiquidity::TAG : return fieldWtAverageLiquidity.offset >= 0 ? _fixPtr + fieldWtAverageLiquidity.offset : nullptr;
     case FieldExchangeForPhysical::TAG : return fieldExchangeForPhysical.offset >= 0 ? _fixPtr + fieldExchangeForPhysical.offset : nullptr;
     case FieldOutMainCntryUIndex::TAG : return fieldOutMainCntryUIndex.offset >= 0 ? _fixPtr + fieldOutMainCntryUIndex.offset : nullptr;
     case FieldCrossPercent::TAG : return fieldCrossPercent.offset >= 0 ? _fixPtr + fieldCrossPercent.offset : nullptr;
     case FieldProgRptReqs::TAG : return fieldProgRptReqs.offset >= 0 ? _fixPtr + fieldProgRptReqs.offset : nullptr;
     case FieldProgPeriodInterval::TAG : return fieldProgPeriodInterval.offset >= 0 ? _fixPtr + fieldProgPeriodInterval.offset : nullptr;
     case FieldIncTaxInd::TAG : return fieldIncTaxInd.offset >= 0 ? _fixPtr + fieldIncTaxInd.offset : nullptr;
     case FieldForexReq::TAG : return fieldForexReq.offset >= 0 ? _fixPtr + fieldForexReq.offset : nullptr;
     case FieldNumBidders::TAG : return fieldNumBidders.offset >= 0 ? _fixPtr + fieldNumBidders.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldBidTradeType::TAG : return fieldBidTradeType.offset >= 0 ? _fixPtr + fieldBidTradeType.offset : nullptr;
     case FieldBasisPxType::TAG : return fieldBasisPxType.offset >= 0 ? _fixPtr + fieldBasisPxType.offset : nullptr;
     case FieldStrikeTime::TAG : return fieldStrikeTime.offset >= 0 ? _fixPtr + fieldStrikeTime.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageBidResponse::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldBidID::TAG : return fieldBidID.offset >= 0 ? _fixPtr + fieldBidID.offset : nullptr;
     case FieldClientBidID::TAG : return fieldClientBidID.offset >= 0 ? _fixPtr + fieldClientBidID.offset : nullptr;
     case FieldNoBidComponents::TAG : return fieldNoBidComponents.offset >= 0 ? _fixPtr + fieldNoBidComponents.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListStrikePrice::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::TAG : return fieldListID.offset >= 0 ? _fixPtr + fieldListID.offset : nullptr;
     case FieldTotNoStrikes::TAG : return fieldTotNoStrikes.offset >= 0 ? _fixPtr + fieldTotNoStrikes.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset >= 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoStrikes::TAG : return fieldNoStrikes.offset >= 0 ? _fixPtr + fieldNoStrikes.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageXMLnonFIX::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRegistrationInstructions::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldRegistTransType::TAG : return fieldRegistTransType.offset >= 0 ? _fixPtr + fieldRegistTransType.offset : nullptr;
     case FieldRegistRefID::TAG : return fieldRegistRefID.offset >= 0 ? _fixPtr + fieldRegistRefID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldRegistAcctType::TAG : return fieldRegistAcctType.offset >= 0 ? _fixPtr + fieldRegistAcctType.offset : nullptr;
     case FieldTaxAdvantageType::TAG : return fieldTaxAdvantageType.offset >= 0 ? _fixPtr + fieldTaxAdvantageType.offset : nullptr;
     case FieldOwnershipType::TAG : return fieldOwnershipType.offset >= 0 ? _fixPtr + fieldOwnershipType.offset : nullptr;
     case FieldNoRegistDtls::TAG : return fieldNoRegistDtls.offset >= 0 ? _fixPtr + fieldNoRegistDtls.offset : nullptr;
     case FieldNoDistribInsts::TAG : return fieldNoDistribInsts.offset >= 0 ? _fixPtr + fieldNoDistribInsts.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRegistrationInstructionsResponse::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldRegistTransType::TAG : return fieldRegistTransType.offset >= 0 ? _fixPtr + fieldRegistTransType.offset : nullptr;
     case FieldRegistRefID::TAG : return fieldRegistRefID.offset >= 0 ? _fixPtr + fieldRegistRefID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldRegistStatus::TAG : return fieldRegistStatus.offset >= 0 ? _fixPtr + fieldRegistStatus.offset : nullptr;
     case FieldRegistRejReasonCode::TAG : return fieldRegistRejReasonCode.offset >= 0 ? _fixPtr + fieldRegistRejReasonCode.offset : nullptr;
     case FieldRegistRejReasonText::TAG : return fieldRegistRejReasonText.offset >= 0 ? _fixPtr + fieldRegistRejReasonText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderMassCancelRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldMassCancelRequestType::TAG : return fieldMassCancelRequestType.offset >= 0 ? _fixPtr + fieldMassCancelRequestType.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset >= 0 ? _fixPtr + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset >= 0 ? _fixPtr + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? _fixPtr + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset >= 0 ? _fixPtr + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset >= 0 ? _fixPtr + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset >= 0 ? _fixPtr + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset >= 0 ? _fixPtr + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset >= 0 ? _fixPtr + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset >= 0 ? _fixPtr + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset >= 0 ? _fixPtr + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset >= 0 ? _fixPtr + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset >= 0 ? _fixPtr + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset >= 0 ? _fixPtr + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset >= 0 ? _fixPtr + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset >= 0 ? _fixPtr + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset >= 0 ? _fixPtr + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset >= 0 ? _fixPtr + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset >= 0 ? _fixPtr + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset >= 0 ? _fixPtr + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset >= 0 ? _fixPtr + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset >= 0 ? _fixPtr + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset >= 0 ? _fixPtr + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset >= 0 ? _fixPtr + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset >= 0 ? _fixPtr + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset >= 0 ? _fixPtr + fieldNoUnderlyingStips.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderMassCancelReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldMassCancelRequestType::TAG : return fieldMassCancelRequestType.offset >= 0 ? _fixPtr + fieldMassCancelRequestType.offset : nullptr;
     case FieldMassCancelResponse::TAG : return fieldMassCancelResponse.offset >= 0 ? _fixPtr + fieldMassCancelResponse.offset : nullptr;
     case FieldMassCancelRejectReason::TAG : return fieldMassCancelRejectReason.offset >= 0 ? _fixPtr + fieldMassCancelRejectReason.offset : nullptr;
     case FieldTotalAffectedOrders::TAG : return fieldTotalAffectedOrders.offset >= 0 ? _fixPtr + fieldTotalAffectedOrders.offset : nullptr;
     case FieldNoAffectedOrders::TAG : return fieldNoAffectedOrders.offset >= 0 ? _fixPtr + fieldNoAffectedOrders.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset >= 0 ? _fixPtr + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset >= 0 ? _fixPtr + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? _fixPtr + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset >= 0 ? _fixPtr + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset >= 0 ? _fixPtr + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset >= 0 ? _fixPtr + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset >= 0 ? _fixPtr + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset >= 0 ? _fixPtr + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset >= 0 ? _fixPtr + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset >= 0 ? _fixPtr + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset >= 0 ? _fixPtr + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset >= 0 ? _fixPtr + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset >= 0 ? _fixPtr + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset >= 0 ? _fixPtr + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset >= 0 ? _fixPtr + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset >= 0 ? _fixPtr + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset >= 0 ? _fixPtr + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset >= 0 ? _fixPtr + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset >= 0 ? _fixPtr + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset >= 0 ? _fixPtr + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset >= 0 ? _fixPtr + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset >= 0 ? _fixPtr + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset >= 0 ? _fixPtr + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset >= 0 ? _fixPtr + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset >= 0 ? _fixPtr + fieldNoUnderlyingStips.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNewOrderCross::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCrossID::TAG : return fieldCrossID.offset >= 0 ? _fixPtr + fieldCrossID.offset : nullptr;
     case FieldCrossType::TAG : return fieldCrossType.offset >= 0 ? _fixPtr + fieldCrossType.offset : nullptr;
     case FieldCrossPrioritization::TAG : return fieldCrossPrioritization.offset >= 0 ? _fixPtr + fieldCrossPrioritization.offset : nullptr;
     case FieldNoSides::TAG : return fieldNoSides.offset >= 0 ? _fixPtr + fieldNoSides.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldHandlInst::TAG : return fieldHandlInst.offset >= 0 ? _fixPtr + fieldHandlInst.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset >= 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset >= 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset >= 0 ? _fixPtr + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::TAG : return fieldProcessCode.offset >= 0 ? _fixPtr + fieldProcessCode.offset : nullptr;
     case FieldPrevClosePx::TAG : return fieldPrevClosePx.offset >= 0 ? _fixPtr + fieldPrevClosePx.offset : nullptr;
     case FieldLocateReqd::TAG : return fieldLocateReqd.offset >= 0 ? _fixPtr + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldStopPx::TAG : return fieldStopPx.offset >= 0 ? _fixPtr + fieldStopPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset >= 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldIOIID::TAG : return fieldIOIID.offset >= 0 ? _fixPtr + fieldIOIID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset >= 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset >= 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset >= 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset >= 0 ? _fixPtr + fieldGTBookingInst.offset : nullptr;
     case FieldMaxShow::TAG : return fieldMaxShow.offset >= 0 ? _fixPtr + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset >= 0 ? _fixPtr + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset >= 0 ? _fixPtr + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset >= 0 ? _fixPtr + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset >= 0 ? _fixPtr + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset >= 0 ? _fixPtr + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::TAG : return fieldPegScope.offset >= 0 ? _fixPtr + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset >= 0 ? _fixPtr + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset >= 0 ? _fixPtr + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset >= 0 ? _fixPtr + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset >= 0 ? _fixPtr + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset >= 0 ? _fixPtr + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset >= 0 ? _fixPtr + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset >= 0 ? _fixPtr + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset >= 0 ? _fixPtr + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset >= 0 ? _fixPtr + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset >= 0 ? _fixPtr + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::TAG : return fieldCancellationRights.offset >= 0 ? _fixPtr + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::TAG : return fieldMoneyLaunderingStatus.offset >= 0 ? _fixPtr + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldDesignation::TAG : return fieldDesignation.offset >= 0 ? _fixPtr + fieldDesignation.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCrossOrderCancelReplaceRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldCrossID::TAG : return fieldCrossID.offset >= 0 ? _fixPtr + fieldCrossID.offset : nullptr;
     case FieldOrigCrossID::TAG : return fieldOrigCrossID.offset >= 0 ? _fixPtr + fieldOrigCrossID.offset : nullptr;
     case FieldCrossType::TAG : return fieldCrossType.offset >= 0 ? _fixPtr + fieldCrossType.offset : nullptr;
     case FieldCrossPrioritization::TAG : return fieldCrossPrioritization.offset >= 0 ? _fixPtr + fieldCrossPrioritization.offset : nullptr;
     case FieldNoSides::TAG : return fieldNoSides.offset >= 0 ? _fixPtr + fieldNoSides.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldHandlInst::TAG : return fieldHandlInst.offset >= 0 ? _fixPtr + fieldHandlInst.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset >= 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset >= 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset >= 0 ? _fixPtr + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::TAG : return fieldProcessCode.offset >= 0 ? _fixPtr + fieldProcessCode.offset : nullptr;
     case FieldPrevClosePx::TAG : return fieldPrevClosePx.offset >= 0 ? _fixPtr + fieldPrevClosePx.offset : nullptr;
     case FieldLocateReqd::TAG : return fieldLocateReqd.offset >= 0 ? _fixPtr + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldStopPx::TAG : return fieldStopPx.offset >= 0 ? _fixPtr + fieldStopPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset >= 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldIOIID::TAG : return fieldIOIID.offset >= 0 ? _fixPtr + fieldIOIID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset >= 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset >= 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset >= 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset >= 0 ? _fixPtr + fieldGTBookingInst.offset : nullptr;
     case FieldMaxShow::TAG : return fieldMaxShow.offset >= 0 ? _fixPtr + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset >= 0 ? _fixPtr + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset >= 0 ? _fixPtr + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset >= 0 ? _fixPtr + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset >= 0 ? _fixPtr + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset >= 0 ? _fixPtr + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::TAG : return fieldPegScope.offset >= 0 ? _fixPtr + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset >= 0 ? _fixPtr + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset >= 0 ? _fixPtr + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset >= 0 ? _fixPtr + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset >= 0 ? _fixPtr + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset >= 0 ? _fixPtr + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset >= 0 ? _fixPtr + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset >= 0 ? _fixPtr + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset >= 0 ? _fixPtr + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset >= 0 ? _fixPtr + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset >= 0 ? _fixPtr + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::TAG : return fieldCancellationRights.offset >= 0 ? _fixPtr + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::TAG : return fieldMoneyLaunderingStatus.offset >= 0 ? _fixPtr + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldDesignation::TAG : return fieldDesignation.offset >= 0 ? _fixPtr + fieldDesignation.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCrossOrderCancelRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldCrossID::TAG : return fieldCrossID.offset >= 0 ? _fixPtr + fieldCrossID.offset : nullptr;
     case FieldOrigCrossID::TAG : return fieldOrigCrossID.offset >= 0 ? _fixPtr + fieldOrigCrossID.offset : nullptr;
     case FieldCrossType::TAG : return fieldCrossType.offset >= 0 ? _fixPtr + fieldCrossType.offset : nullptr;
     case FieldCrossPrioritization::TAG : return fieldCrossPrioritization.offset >= 0 ? _fixPtr + fieldCrossPrioritization.offset : nullptr;
     case FieldNoSides::TAG : return fieldNoSides.offset >= 0 ? _fixPtr + fieldNoSides.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityTypeRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::TAG : return fieldSecurityReqID.offset >= 0 ? _fixPtr + fieldSecurityReqID.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityTypes::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::TAG : return fieldSecurityReqID.offset >= 0 ? _fixPtr + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityResponseID::TAG : return fieldSecurityResponseID.offset >= 0 ? _fixPtr + fieldSecurityResponseID.offset : nullptr;
     case FieldSecurityResponseType::TAG : return fieldSecurityResponseType.offset >= 0 ? _fixPtr + fieldSecurityResponseType.offset : nullptr;
     case FieldTotNoSecurityTypes::TAG : return fieldTotNoSecurityTypes.offset >= 0 ? _fixPtr + fieldTotNoSecurityTypes.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset >= 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoSecurityTypes::TAG : return fieldNoSecurityTypes.offset >= 0 ? _fixPtr + fieldNoSecurityTypes.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityListRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::TAG : return fieldSecurityReqID.offset >= 0 ? _fixPtr + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityListRequestType::TAG : return fieldSecurityListRequestType.offset >= 0 ? _fixPtr + fieldSecurityListRequestType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityList::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::TAG : return fieldSecurityReqID.offset >= 0 ? _fixPtr + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityResponseID::TAG : return fieldSecurityResponseID.offset >= 0 ? _fixPtr + fieldSecurityResponseID.offset : nullptr;
     case FieldSecurityRequestResult::TAG : return fieldSecurityRequestResult.offset >= 0 ? _fixPtr + fieldSecurityRequestResult.offset : nullptr;
     case FieldTotNoRelatedSym::TAG : return fieldTotNoRelatedSym.offset >= 0 ? _fixPtr + fieldTotNoRelatedSym.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset >= 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoRelatedSym::TAG : return fieldNoRelatedSym.offset >= 0 ? _fixPtr + fieldNoRelatedSym.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageDerivativeSecurityListRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::TAG : return fieldSecurityReqID.offset >= 0 ? _fixPtr + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityListRequestType::TAG : return fieldSecurityListRequestType.offset >= 0 ? _fixPtr + fieldSecurityListRequestType.offset : nullptr;
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset >= 0 ? _fixPtr + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset >= 0 ? _fixPtr + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? _fixPtr + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset >= 0 ? _fixPtr + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset >= 0 ? _fixPtr + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset >= 0 ? _fixPtr + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset >= 0 ? _fixPtr + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset >= 0 ? _fixPtr + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset >= 0 ? _fixPtr + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset >= 0 ? _fixPtr + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset >= 0 ? _fixPtr + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset >= 0 ? _fixPtr + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset >= 0 ? _fixPtr + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset >= 0 ? _fixPtr + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset >= 0 ? _fixPtr + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset >= 0 ? _fixPtr + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset >= 0 ? _fixPtr + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset >= 0 ? _fixPtr + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset >= 0 ? _fixPtr + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset >= 0 ? _fixPtr + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset >= 0 ? _fixPtr + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset >= 0 ? _fixPtr + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset >= 0 ? _fixPtr + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset >= 0 ? _fixPtr + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset >= 0 ? _fixPtr + fieldNoUnderlyingStips.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageDerivativeSecurityList::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::TAG : return fieldSecurityReqID.offset >= 0 ? _fixPtr + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityResponseID::TAG : return fieldSecurityResponseID.offset >= 0 ? _fixPtr + fieldSecurityResponseID.offset : nullptr;
     case FieldSecurityRequestResult::TAG : return fieldSecurityRequestResult.offset >= 0 ? _fixPtr + fieldSecurityRequestResult.offset : nullptr;
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset >= 0 ? _fixPtr + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset >= 0 ? _fixPtr + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? _fixPtr + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset >= 0 ? _fixPtr + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset >= 0 ? _fixPtr + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset >= 0 ? _fixPtr + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset >= 0 ? _fixPtr + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset >= 0 ? _fixPtr + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset >= 0 ? _fixPtr + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset >= 0 ? _fixPtr + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset >= 0 ? _fixPtr + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset >= 0 ? _fixPtr + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset >= 0 ? _fixPtr + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset >= 0 ? _fixPtr + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset >= 0 ? _fixPtr + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset >= 0 ? _fixPtr + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset >= 0 ? _fixPtr + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset >= 0 ? _fixPtr + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset >= 0 ? _fixPtr + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset >= 0 ? _fixPtr + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset >= 0 ? _fixPtr + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset >= 0 ? _fixPtr + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset >= 0 ? _fixPtr + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset >= 0 ? _fixPtr + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset >= 0 ? _fixPtr + fieldNoUnderlyingStips.offset : nullptr;
     case FieldTotNoRelatedSym::TAG : return fieldTotNoRelatedSym.offset >= 0 ? _fixPtr + fieldTotNoRelatedSym.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset >= 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoRelatedSym::TAG : return fieldNoRelatedSym.offset >= 0 ? _fixPtr + fieldNoRelatedSym.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNewOrderMultileg::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset >= 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::TAG : return fieldDayBookingInst.offset >= 0 ? _fixPtr + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::TAG : return fieldBookingUnit.offset >= 0 ? _fixPtr + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::TAG : return fieldPreallocMethod.offset >= 0 ? _fixPtr + fieldPreallocMethod.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::TAG : return fieldCashMargin.offset >= 0 ? _fixPtr + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::TAG : return fieldClearingFeeIndicator.offset >= 0 ? _fixPtr + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::TAG : return fieldHandlInst.offset >= 0 ? _fixPtr + fieldHandlInst.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset >= 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset >= 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset >= 0 ? _fixPtr + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::TAG : return fieldProcessCode.offset >= 0 ? _fixPtr + fieldProcessCode.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldPrevClosePx::TAG : return fieldPrevClosePx.offset >= 0 ? _fixPtr + fieldPrevClosePx.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldLocateReqd::TAG : return fieldLocateReqd.offset >= 0 ? _fixPtr + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldStopPx::TAG : return fieldStopPx.offset >= 0 ? _fixPtr + fieldStopPx.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset >= 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::TAG : return fieldSolicitedFlag.offset >= 0 ? _fixPtr + fieldSolicitedFlag.offset : nullptr;
     case FieldIOIID::TAG : return fieldIOIID.offset >= 0 ? _fixPtr + fieldIOIID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset >= 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset >= 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset >= 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset >= 0 ? _fixPtr + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommCurrency::TAG : return fieldCommCurrency.offset >= 0 ? _fixPtr + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::TAG : return fieldFundRenewWaiv.offset >= 0 ? _fixPtr + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset >= 0 ? _fixPtr + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::TAG : return fieldForexReq.offset >= 0 ? _fixPtr + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::TAG : return fieldSettlCurrency.offset >= 0 ? _fixPtr + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::TAG : return fieldBookingType.offset >= 0 ? _fixPtr + fieldBookingType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset >= 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::TAG : return fieldCoveredOrUncovered.offset >= 0 ? _fixPtr + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::TAG : return fieldMaxShow.offset >= 0 ? _fixPtr + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset >= 0 ? _fixPtr + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset >= 0 ? _fixPtr + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset >= 0 ? _fixPtr + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset >= 0 ? _fixPtr + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset >= 0 ? _fixPtr + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::TAG : return fieldPegScope.offset >= 0 ? _fixPtr + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset >= 0 ? _fixPtr + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset >= 0 ? _fixPtr + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset >= 0 ? _fixPtr + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset >= 0 ? _fixPtr + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset >= 0 ? _fixPtr + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset >= 0 ? _fixPtr + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset >= 0 ? _fixPtr + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset >= 0 ? _fixPtr + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset >= 0 ? _fixPtr + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset >= 0 ? _fixPtr + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::TAG : return fieldCancellationRights.offset >= 0 ? _fixPtr + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::TAG : return fieldMoneyLaunderingStatus.offset >= 0 ? _fixPtr + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldDesignation::TAG : return fieldDesignation.offset >= 0 ? _fixPtr + fieldDesignation.offset : nullptr;
     case FieldMultiLegRptTypeReq::TAG : return fieldMultiLegRptTypeReq.offset >= 0 ? _fixPtr + fieldMultiLegRptTypeReq.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMultilegOrderCancelReplace::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldOrigClOrdID::TAG : return fieldOrigClOrdID.offset >= 0 ? _fixPtr + fieldOrigClOrdID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::TAG : return fieldClOrdLinkID.offset >= 0 ? _fixPtr + fieldClOrdLinkID.offset : nullptr;
     case FieldOrigOrdModTime::TAG : return fieldOrigOrdModTime.offset >= 0 ? _fixPtr + fieldOrigOrdModTime.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::TAG : return fieldDayBookingInst.offset >= 0 ? _fixPtr + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::TAG : return fieldBookingUnit.offset >= 0 ? _fixPtr + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::TAG : return fieldPreallocMethod.offset >= 0 ? _fixPtr + fieldPreallocMethod.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::TAG : return fieldCashMargin.offset >= 0 ? _fixPtr + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::TAG : return fieldClearingFeeIndicator.offset >= 0 ? _fixPtr + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::TAG : return fieldHandlInst.offset >= 0 ? _fixPtr + fieldHandlInst.offset : nullptr;
     case FieldExecInst::TAG : return fieldExecInst.offset >= 0 ? _fixPtr + fieldExecInst.offset : nullptr;
     case FieldMinQty::TAG : return fieldMinQty.offset >= 0 ? _fixPtr + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::TAG : return fieldMaxFloor.offset >= 0 ? _fixPtr + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::TAG : return fieldProcessCode.offset >= 0 ? _fixPtr + fieldProcessCode.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldPrevClosePx::TAG : return fieldPrevClosePx.offset >= 0 ? _fixPtr + fieldPrevClosePx.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldLocateReqd::TAG : return fieldLocateReqd.offset >= 0 ? _fixPtr + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldStopPx::TAG : return fieldStopPx.offset >= 0 ? _fixPtr + fieldStopPx.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldComplianceID::TAG : return fieldComplianceID.offset >= 0 ? _fixPtr + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::TAG : return fieldSolicitedFlag.offset >= 0 ? _fixPtr + fieldSolicitedFlag.offset : nullptr;
     case FieldIOIID::TAG : return fieldIOIID.offset >= 0 ? _fixPtr + fieldIOIID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::TAG : return fieldTimeInForce.offset >= 0 ? _fixPtr + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset >= 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset >= 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::TAG : return fieldGTBookingInst.offset >= 0 ? _fixPtr + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommCurrency::TAG : return fieldCommCurrency.offset >= 0 ? _fixPtr + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::TAG : return fieldFundRenewWaiv.offset >= 0 ? _fixPtr + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset >= 0 ? _fixPtr + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::TAG : return fieldForexReq.offset >= 0 ? _fixPtr + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::TAG : return fieldSettlCurrency.offset >= 0 ? _fixPtr + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::TAG : return fieldBookingType.offset >= 0 ? _fixPtr + fieldBookingType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset >= 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::TAG : return fieldCoveredOrUncovered.offset >= 0 ? _fixPtr + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::TAG : return fieldMaxShow.offset >= 0 ? _fixPtr + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::TAG : return fieldPegOffsetValue.offset >= 0 ? _fixPtr + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::TAG : return fieldPegMoveType.offset >= 0 ? _fixPtr + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::TAG : return fieldPegOffsetType.offset >= 0 ? _fixPtr + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::TAG : return fieldPegLimitType.offset >= 0 ? _fixPtr + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::TAG : return fieldPegRoundDirection.offset >= 0 ? _fixPtr + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::TAG : return fieldPegScope.offset >= 0 ? _fixPtr + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::TAG : return fieldDiscretionInst.offset >= 0 ? _fixPtr + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::TAG : return fieldDiscretionOffsetValue.offset >= 0 ? _fixPtr + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::TAG : return fieldDiscretionMoveType.offset >= 0 ? _fixPtr + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::TAG : return fieldDiscretionOffsetType.offset >= 0 ? _fixPtr + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::TAG : return fieldDiscretionLimitType.offset >= 0 ? _fixPtr + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::TAG : return fieldDiscretionRoundDirection.offset >= 0 ? _fixPtr + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::TAG : return fieldDiscretionScope.offset >= 0 ? _fixPtr + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::TAG : return fieldTargetStrategy.offset >= 0 ? _fixPtr + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::TAG : return fieldTargetStrategyParameters.offset >= 0 ? _fixPtr + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::TAG : return fieldParticipationRate.offset >= 0 ? _fixPtr + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::TAG : return fieldCancellationRights.offset >= 0 ? _fixPtr + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::TAG : return fieldMoneyLaunderingStatus.offset >= 0 ? _fixPtr + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::TAG : return fieldRegistID.offset >= 0 ? _fixPtr + fieldRegistID.offset : nullptr;
     case FieldDesignation::TAG : return fieldDesignation.offset >= 0 ? _fixPtr + fieldDesignation.offset : nullptr;
     case FieldMultiLegRptTypeReq::TAG : return fieldMultiLegRptTypeReq.offset >= 0 ? _fixPtr + fieldMultiLegRptTypeReq.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeRequestID::TAG : return fieldTradeRequestID.offset >= 0 ? _fixPtr + fieldTradeRequestID.offset : nullptr;
     case FieldTradeRequestType::TAG : return fieldTradeRequestType.offset >= 0 ? _fixPtr + fieldTradeRequestType.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTradeReportID::TAG : return fieldTradeReportID.offset >= 0 ? _fixPtr + fieldTradeReportID.offset : nullptr;
     case FieldSecondaryTradeReportID::TAG : return fieldSecondaryTradeReportID.offset >= 0 ? _fixPtr + fieldSecondaryTradeReportID.offset : nullptr;
     case FieldExecID::TAG : return fieldExecID.offset >= 0 ? _fixPtr + fieldExecID.offset : nullptr;
     case FieldExecType::TAG : return fieldExecType.offset >= 0 ? _fixPtr + fieldExecType.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldMatchStatus::TAG : return fieldMatchStatus.offset >= 0 ? _fixPtr + fieldMatchStatus.offset : nullptr;
     case FieldTrdType::TAG : return fieldTrdType.offset >= 0 ? _fixPtr + fieldTrdType.offset : nullptr;
     case FieldTrdSubType::TAG : return fieldTrdSubType.offset >= 0 ? _fixPtr + fieldTrdSubType.offset : nullptr;
     case FieldTransferReason::TAG : return fieldTransferReason.offset >= 0 ? _fixPtr + fieldTransferReason.offset : nullptr;
     case FieldSecondaryTrdType::TAG : return fieldSecondaryTrdType.offset >= 0 ? _fixPtr + fieldSecondaryTrdType.offset : nullptr;
     case FieldTradeLinkID::TAG : return fieldTradeLinkID.offset >= 0 ? _fixPtr + fieldTradeLinkID.offset : nullptr;
     case FieldTrdMatchID::TAG : return fieldTrdMatchID.offset >= 0 ? _fixPtr + fieldTrdMatchID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoDates::TAG : return fieldNoDates.offset >= 0 ? _fixPtr + fieldNoDates.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldTimeBracket::TAG : return fieldTimeBracket.offset >= 0 ? _fixPtr + fieldTimeBracket.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldMultiLegReportingType::TAG : return fieldMultiLegReportingType.offset >= 0 ? _fixPtr + fieldMultiLegReportingType.offset : nullptr;
     case FieldTradeInputSource::TAG : return fieldTradeInputSource.offset >= 0 ? _fixPtr + fieldTradeInputSource.offset : nullptr;
     case FieldTradeInputDevice::TAG : return fieldTradeInputDevice.offset >= 0 ? _fixPtr + fieldTradeInputDevice.offset : nullptr;
     case FieldResponseTransportType::TAG : return fieldResponseTransportType.offset >= 0 ? _fixPtr + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::TAG : return fieldResponseDestination.offset >= 0 ? _fixPtr + fieldResponseDestination.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradeCaptureReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeReportID::TAG : return fieldTradeReportID.offset >= 0 ? _fixPtr + fieldTradeReportID.offset : nullptr;
     case FieldTradeReportTransType::TAG : return fieldTradeReportTransType.offset >= 0 ? _fixPtr + fieldTradeReportTransType.offset : nullptr;
     case FieldTradeReportType::TAG : return fieldTradeReportType.offset >= 0 ? _fixPtr + fieldTradeReportType.offset : nullptr;
     case FieldTradeRequestID::TAG : return fieldTradeRequestID.offset >= 0 ? _fixPtr + fieldTradeRequestID.offset : nullptr;
     case FieldTrdType::TAG : return fieldTrdType.offset >= 0 ? _fixPtr + fieldTrdType.offset : nullptr;
     case FieldTrdSubType::TAG : return fieldTrdSubType.offset >= 0 ? _fixPtr + fieldTrdSubType.offset : nullptr;
     case FieldSecondaryTrdType::TAG : return fieldSecondaryTrdType.offset >= 0 ? _fixPtr + fieldSecondaryTrdType.offset : nullptr;
     case FieldTransferReason::TAG : return fieldTransferReason.offset >= 0 ? _fixPtr + fieldTransferReason.offset : nullptr;
     case FieldExecType::TAG : return fieldExecType.offset >= 0 ? _fixPtr + fieldExecType.offset : nullptr;
     case FieldTotNumTradeReports::TAG : return fieldTotNumTradeReports.offset >= 0 ? _fixPtr + fieldTotNumTradeReports.offset : nullptr;
     case FieldLastRptRequested::TAG : return fieldLastRptRequested.offset >= 0 ? _fixPtr + fieldLastRptRequested.offset : nullptr;
     case FieldUnsolicitedIndicator::TAG : return fieldUnsolicitedIndicator.offset >= 0 ? _fixPtr + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTradeReportRefID::TAG : return fieldTradeReportRefID.offset >= 0 ? _fixPtr + fieldTradeReportRefID.offset : nullptr;
     case FieldSecondaryTradeReportRefID::TAG : return fieldSecondaryTradeReportRefID.offset >= 0 ? _fixPtr + fieldSecondaryTradeReportRefID.offset : nullptr;
     case FieldSecondaryTradeReportID::TAG : return fieldSecondaryTradeReportID.offset >= 0 ? _fixPtr + fieldSecondaryTradeReportID.offset : nullptr;
     case FieldTradeLinkID::TAG : return fieldTradeLinkID.offset >= 0 ? _fixPtr + fieldTradeLinkID.offset : nullptr;
     case FieldTrdMatchID::TAG : return fieldTrdMatchID.offset >= 0 ? _fixPtr + fieldTrdMatchID.offset : nullptr;
     case FieldExecID::TAG : return fieldExecID.offset >= 0 ? _fixPtr + fieldExecID.offset : nullptr;
     case FieldOrdStatus::TAG : return fieldOrdStatus.offset >= 0 ? _fixPtr + fieldOrdStatus.offset : nullptr;
     case FieldSecondaryExecID::TAG : return fieldSecondaryExecID.offset >= 0 ? _fixPtr + fieldSecondaryExecID.offset : nullptr;
     case FieldExecRestatementReason::TAG : return fieldExecRestatementReason.offset >= 0 ? _fixPtr + fieldExecRestatementReason.offset : nullptr;
     case FieldPreviouslyReported::TAG : return fieldPreviouslyReported.offset >= 0 ? _fixPtr + fieldPreviouslyReported.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldUnderlyingTradingSessionID::TAG : return fieldUnderlyingTradingSessionID.offset >= 0 ? _fixPtr + fieldUnderlyingTradingSessionID.offset : nullptr;
     case FieldUnderlyingTradingSessionSubID::TAG : return fieldUnderlyingTradingSessionSubID.offset >= 0 ? _fixPtr + fieldUnderlyingTradingSessionSubID.offset : nullptr;
     case FieldLastQty::TAG : return fieldLastQty.offset >= 0 ? _fixPtr + fieldLastQty.offset : nullptr;
     case FieldLastPx::TAG : return fieldLastPx.offset >= 0 ? _fixPtr + fieldLastPx.offset : nullptr;
     case FieldLastParPx::TAG : return fieldLastParPx.offset >= 0 ? _fixPtr + fieldLastParPx.offset : nullptr;
     case FieldLastSpotRate::TAG : return fieldLastSpotRate.offset >= 0 ? _fixPtr + fieldLastSpotRate.offset : nullptr;
     case FieldLastForwardPoints::TAG : return fieldLastForwardPoints.offset >= 0 ? _fixPtr + fieldLastForwardPoints.offset : nullptr;
     case FieldLastMkt::TAG : return fieldLastMkt.offset >= 0 ? _fixPtr + fieldLastMkt.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldAvgPx::TAG : return fieldAvgPx.offset >= 0 ? _fixPtr + fieldAvgPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldAvgPxIndicator::TAG : return fieldAvgPxIndicator.offset >= 0 ? _fixPtr + fieldAvgPxIndicator.offset : nullptr;
     case FieldNoPosAmt::TAG : return fieldNoPosAmt.offset >= 0 ? _fixPtr + fieldNoPosAmt.offset : nullptr;
     case FieldMultiLegReportingType::TAG : return fieldMultiLegReportingType.offset >= 0 ? _fixPtr + fieldMultiLegReportingType.offset : nullptr;
     case FieldTradeLegRefID::TAG : return fieldTradeLegRefID.offset >= 0 ? _fixPtr + fieldTradeLegRefID.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoTrdRegTimestamps::TAG : return fieldNoTrdRegTimestamps.offset >= 0 ? _fixPtr + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldMatchStatus::TAG : return fieldMatchStatus.offset >= 0 ? _fixPtr + fieldMatchStatus.offset : nullptr;
     case FieldMatchType::TAG : return fieldMatchType.offset >= 0 ? _fixPtr + fieldMatchType.offset : nullptr;
     case FieldNoSides::TAG : return fieldNoSides.offset >= 0 ? _fixPtr + fieldNoSides.offset : nullptr;
     case FieldCopyMsgIndicator::TAG : return fieldCopyMsgIndicator.offset >= 0 ? _fixPtr + fieldCopyMsgIndicator.offset : nullptr;
     case FieldPublishTrdIndicator::TAG : return fieldPublishTrdIndicator.offset >= 0 ? _fixPtr + fieldPublishTrdIndicator.offset : nullptr;
     case FieldShortSaleReason::TAG : return fieldShortSaleReason.offset >= 0 ? _fixPtr + fieldShortSaleReason.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderMassStatusRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldMassStatusReqID::TAG : return fieldMassStatusReqID.offset >= 0 ? _fixPtr + fieldMassStatusReqID.offset : nullptr;
     case FieldMassStatusReqType::TAG : return fieldMassStatusReqType.offset >= 0 ? _fixPtr + fieldMassStatusReqType.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldUnderlyingSymbol::TAG : return fieldUnderlyingSymbol.offset >= 0 ? _fixPtr + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::TAG : return fieldUnderlyingSymbolSfx.offset >= 0 ? _fixPtr + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::TAG : return fieldUnderlyingSecurityID.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::TAG : return fieldUnderlyingSecurityIDSource.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::TAG : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? _fixPtr + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::TAG : return fieldUnderlyingProduct.offset >= 0 ? _fixPtr + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::TAG : return fieldUnderlyingCFICode.offset >= 0 ? _fixPtr + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::TAG : return fieldUnderlyingSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::TAG : return fieldUnderlyingSecuritySubType.offset >= 0 ? _fixPtr + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::TAG : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::TAG : return fieldUnderlyingMaturityDate.offset >= 0 ? _fixPtr + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::TAG : return fieldUnderlyingPutOrCall.offset >= 0 ? _fixPtr + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::TAG : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::TAG : return fieldUnderlyingIssueDate.offset >= 0 ? _fixPtr + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::TAG : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::TAG : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::TAG : return fieldUnderlyingRepurchaseRate.offset >= 0 ? _fixPtr + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::TAG : return fieldUnderlyingFactor.offset >= 0 ? _fixPtr + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::TAG : return fieldUnderlyingCreditRating.offset >= 0 ? _fixPtr + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::TAG : return fieldUnderlyingInstrRegistry.offset >= 0 ? _fixPtr + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::TAG : return fieldUnderlyingCountryOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::TAG : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::TAG : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? _fixPtr + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::TAG : return fieldUnderlyingRedemptionDate.offset >= 0 ? _fixPtr + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::TAG : return fieldUnderlyingStrikePrice.offset >= 0 ? _fixPtr + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::TAG : return fieldUnderlyingStrikeCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::TAG : return fieldUnderlyingOptAttribute.offset >= 0 ? _fixPtr + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::TAG : return fieldUnderlyingContractMultiplier.offset >= 0 ? _fixPtr + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::TAG : return fieldUnderlyingCouponRate.offset >= 0 ? _fixPtr + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::TAG : return fieldUnderlyingSecurityExchange.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::TAG : return fieldUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::TAG : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::TAG : return fieldEncodedUnderlyingIssuer.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::TAG : return fieldUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::TAG : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::TAG : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::TAG : return fieldUnderlyingCPProgram.offset >= 0 ? _fixPtr + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::TAG : return fieldUnderlyingCPRegType.offset >= 0 ? _fixPtr + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::TAG : return fieldUnderlyingCurrency.offset >= 0 ? _fixPtr + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::TAG : return fieldUnderlyingQty.offset >= 0 ? _fixPtr + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::TAG : return fieldUnderlyingPx.offset >= 0 ? _fixPtr + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::TAG : return fieldUnderlyingDirtyPrice.offset >= 0 ? _fixPtr + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::TAG : return fieldUnderlyingEndPrice.offset >= 0 ? _fixPtr + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::TAG : return fieldUnderlyingStartValue.offset >= 0 ? _fixPtr + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::TAG : return fieldUnderlyingCurrentValue.offset >= 0 ? _fixPtr + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::TAG : return fieldUnderlyingEndValue.offset >= 0 ? _fixPtr + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::TAG : return fieldNoUnderlyingStips.offset >= 0 ? _fixPtr + fieldNoUnderlyingStips.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteRequestReject::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::TAG : return fieldQuoteReqID.offset >= 0 ? _fixPtr + fieldQuoteReqID.offset : nullptr;
     case FieldRFQReqID::TAG : return fieldRFQReqID.offset >= 0 ? _fixPtr + fieldRFQReqID.offset : nullptr;
     case FieldQuoteRequestRejectReason::TAG : return fieldQuoteRequestRejectReason.offset >= 0 ? _fixPtr + fieldQuoteRequestRejectReason.offset : nullptr;
     case FieldNoRelatedSym::TAG : return fieldNoRelatedSym.offset >= 0 ? _fixPtr + fieldNoRelatedSym.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRFQRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldRFQReqID::TAG : return fieldRFQReqID.offset >= 0 ? _fixPtr + fieldRFQReqID.offset : nullptr;
     case FieldNoRelatedSym::TAG : return fieldNoRelatedSym.offset >= 0 ? _fixPtr + fieldNoRelatedSym.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteStatusReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteStatusReqID::TAG : return fieldQuoteStatusReqID.offset >= 0 ? _fixPtr + fieldQuoteStatusReqID.offset : nullptr;
     case FieldQuoteReqID::TAG : return fieldQuoteReqID.offset >= 0 ? _fixPtr + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldQuoteRespID::TAG : return fieldQuoteRespID.offset >= 0 ? _fixPtr + fieldQuoteRespID.offset : nullptr;
     case FieldQuoteType::TAG : return fieldQuoteType.offset >= 0 ? _fixPtr + fieldQuoteType.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldSettlDate2::TAG : return fieldSettlDate2.offset >= 0 ? _fixPtr + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::TAG : return fieldOrderQty2.offset >= 0 ? _fixPtr + fieldOrderQty2.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoQuoteQualifiers::TAG : return fieldNoQuoteQualifiers.offset >= 0 ? _fixPtr + fieldNoQuoteQualifiers.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldBidPx::TAG : return fieldBidPx.offset >= 0 ? _fixPtr + fieldBidPx.offset : nullptr;
     case FieldOfferPx::TAG : return fieldOfferPx.offset >= 0 ? _fixPtr + fieldOfferPx.offset : nullptr;
     case FieldMktBidPx::TAG : return fieldMktBidPx.offset >= 0 ? _fixPtr + fieldMktBidPx.offset : nullptr;
     case FieldMktOfferPx::TAG : return fieldMktOfferPx.offset >= 0 ? _fixPtr + fieldMktOfferPx.offset : nullptr;
     case FieldMinBidSize::TAG : return fieldMinBidSize.offset >= 0 ? _fixPtr + fieldMinBidSize.offset : nullptr;
     case FieldBidSize::TAG : return fieldBidSize.offset >= 0 ? _fixPtr + fieldBidSize.offset : nullptr;
     case FieldMinOfferSize::TAG : return fieldMinOfferSize.offset >= 0 ? _fixPtr + fieldMinOfferSize.offset : nullptr;
     case FieldOfferSize::TAG : return fieldOfferSize.offset >= 0 ? _fixPtr + fieldOfferSize.offset : nullptr;
     case FieldValidUntilTime::TAG : return fieldValidUntilTime.offset >= 0 ? _fixPtr + fieldValidUntilTime.offset : nullptr;
     case FieldBidSpotRate::TAG : return fieldBidSpotRate.offset >= 0 ? _fixPtr + fieldBidSpotRate.offset : nullptr;
     case FieldOfferSpotRate::TAG : return fieldOfferSpotRate.offset >= 0 ? _fixPtr + fieldOfferSpotRate.offset : nullptr;
     case FieldBidForwardPoints::TAG : return fieldBidForwardPoints.offset >= 0 ? _fixPtr + fieldBidForwardPoints.offset : nullptr;
     case FieldOfferForwardPoints::TAG : return fieldOfferForwardPoints.offset >= 0 ? _fixPtr + fieldOfferForwardPoints.offset : nullptr;
     case FieldMidPx::TAG : return fieldMidPx.offset >= 0 ? _fixPtr + fieldMidPx.offset : nullptr;
     case FieldBidYield::TAG : return fieldBidYield.offset >= 0 ? _fixPtr + fieldBidYield.offset : nullptr;
     case FieldMidYield::TAG : return fieldMidYield.offset >= 0 ? _fixPtr + fieldMidYield.offset : nullptr;
     case FieldOfferYield::TAG : return fieldOfferYield.offset >= 0 ? _fixPtr + fieldOfferYield.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldBidForwardPoints2::TAG : return fieldBidForwardPoints2.offset >= 0 ? _fixPtr + fieldBidForwardPoints2.offset : nullptr;
     case FieldOfferForwardPoints2::TAG : return fieldOfferForwardPoints2.offset >= 0 ? _fixPtr + fieldOfferForwardPoints2.offset : nullptr;
     case FieldSettlCurrBidFxRate::TAG : return fieldSettlCurrBidFxRate.offset >= 0 ? _fixPtr + fieldSettlCurrBidFxRate.offset : nullptr;
     case FieldSettlCurrOfferFxRate::TAG : return fieldSettlCurrOfferFxRate.offset >= 0 ? _fixPtr + fieldSettlCurrOfferFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::TAG : return fieldSettlCurrFxRateCalc.offset >= 0 ? _fixPtr + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldQuoteStatus::TAG : return fieldQuoteStatus.offset >= 0 ? _fixPtr + fieldQuoteStatus.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteResponse::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteRespID::TAG : return fieldQuoteRespID.offset >= 0 ? _fixPtr + fieldQuoteRespID.offset : nullptr;
     case FieldQuoteID::TAG : return fieldQuoteID.offset >= 0 ? _fixPtr + fieldQuoteID.offset : nullptr;
     case FieldQuoteRespType::TAG : return fieldQuoteRespType.offset >= 0 ? _fixPtr + fieldQuoteRespType.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldIOIID::TAG : return fieldIOIID.offset >= 0 ? _fixPtr + fieldIOIID.offset : nullptr;
     case FieldQuoteType::TAG : return fieldQuoteType.offset >= 0 ? _fixPtr + fieldQuoteType.offset : nullptr;
     case FieldNoQuoteQualifiers::TAG : return fieldNoQuoteQualifiers.offset >= 0 ? _fixPtr + fieldNoQuoteQualifiers.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldOrderQty::TAG : return fieldOrderQty.offset >= 0 ? _fixPtr + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::TAG : return fieldCashOrderQty.offset >= 0 ? _fixPtr + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::TAG : return fieldOrderPercent.offset >= 0 ? _fixPtr + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::TAG : return fieldRoundingDirection.offset >= 0 ? _fixPtr + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::TAG : return fieldRoundingModulus.offset >= 0 ? _fixPtr + fieldRoundingModulus.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldSettlDate2::TAG : return fieldSettlDate2.offset >= 0 ? _fixPtr + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::TAG : return fieldOrderQty2.offset >= 0 ? _fixPtr + fieldOrderQty2.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldBidPx::TAG : return fieldBidPx.offset >= 0 ? _fixPtr + fieldBidPx.offset : nullptr;
     case FieldOfferPx::TAG : return fieldOfferPx.offset >= 0 ? _fixPtr + fieldOfferPx.offset : nullptr;
     case FieldMktBidPx::TAG : return fieldMktBidPx.offset >= 0 ? _fixPtr + fieldMktBidPx.offset : nullptr;
     case FieldMktOfferPx::TAG : return fieldMktOfferPx.offset >= 0 ? _fixPtr + fieldMktOfferPx.offset : nullptr;
     case FieldMinBidSize::TAG : return fieldMinBidSize.offset >= 0 ? _fixPtr + fieldMinBidSize.offset : nullptr;
     case FieldBidSize::TAG : return fieldBidSize.offset >= 0 ? _fixPtr + fieldBidSize.offset : nullptr;
     case FieldMinOfferSize::TAG : return fieldMinOfferSize.offset >= 0 ? _fixPtr + fieldMinOfferSize.offset : nullptr;
     case FieldOfferSize::TAG : return fieldOfferSize.offset >= 0 ? _fixPtr + fieldOfferSize.offset : nullptr;
     case FieldValidUntilTime::TAG : return fieldValidUntilTime.offset >= 0 ? _fixPtr + fieldValidUntilTime.offset : nullptr;
     case FieldBidSpotRate::TAG : return fieldBidSpotRate.offset >= 0 ? _fixPtr + fieldBidSpotRate.offset : nullptr;
     case FieldOfferSpotRate::TAG : return fieldOfferSpotRate.offset >= 0 ? _fixPtr + fieldOfferSpotRate.offset : nullptr;
     case FieldBidForwardPoints::TAG : return fieldBidForwardPoints.offset >= 0 ? _fixPtr + fieldBidForwardPoints.offset : nullptr;
     case FieldOfferForwardPoints::TAG : return fieldOfferForwardPoints.offset >= 0 ? _fixPtr + fieldOfferForwardPoints.offset : nullptr;
     case FieldMidPx::TAG : return fieldMidPx.offset >= 0 ? _fixPtr + fieldMidPx.offset : nullptr;
     case FieldBidYield::TAG : return fieldBidYield.offset >= 0 ? _fixPtr + fieldBidYield.offset : nullptr;
     case FieldMidYield::TAG : return fieldMidYield.offset >= 0 ? _fixPtr + fieldMidYield.offset : nullptr;
     case FieldOfferYield::TAG : return fieldOfferYield.offset >= 0 ? _fixPtr + fieldOfferYield.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldOrdType::TAG : return fieldOrdType.offset >= 0 ? _fixPtr + fieldOrdType.offset : nullptr;
     case FieldBidForwardPoints2::TAG : return fieldBidForwardPoints2.offset >= 0 ? _fixPtr + fieldBidForwardPoints2.offset : nullptr;
     case FieldOfferForwardPoints2::TAG : return fieldOfferForwardPoints2.offset >= 0 ? _fixPtr + fieldOfferForwardPoints2.offset : nullptr;
     case FieldSettlCurrBidFxRate::TAG : return fieldSettlCurrBidFxRate.offset >= 0 ? _fixPtr + fieldSettlCurrBidFxRate.offset : nullptr;
     case FieldSettlCurrOfferFxRate::TAG : return fieldSettlCurrOfferFxRate.offset >= 0 ? _fixPtr + fieldSettlCurrOfferFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::TAG : return fieldSettlCurrFxRateCalc.offset >= 0 ? _fixPtr + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldExDestination::TAG : return fieldExDestination.offset >= 0 ? _fixPtr + fieldExDestination.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageConfirmation::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldConfirmID::TAG : return fieldConfirmID.offset >= 0 ? _fixPtr + fieldConfirmID.offset : nullptr;
     case FieldConfirmRefID::TAG : return fieldConfirmRefID.offset >= 0 ? _fixPtr + fieldConfirmRefID.offset : nullptr;
     case FieldConfirmReqID::TAG : return fieldConfirmReqID.offset >= 0 ? _fixPtr + fieldConfirmReqID.offset : nullptr;
     case FieldConfirmTransType::TAG : return fieldConfirmTransType.offset >= 0 ? _fixPtr + fieldConfirmTransType.offset : nullptr;
     case FieldConfirmType::TAG : return fieldConfirmType.offset >= 0 ? _fixPtr + fieldConfirmType.offset : nullptr;
     case FieldCopyMsgIndicator::TAG : return fieldCopyMsgIndicator.offset >= 0 ? _fixPtr + fieldCopyMsgIndicator.offset : nullptr;
     case FieldLegalConfirm::TAG : return fieldLegalConfirm.offset >= 0 ? _fixPtr + fieldLegalConfirm.offset : nullptr;
     case FieldConfirmStatus::TAG : return fieldConfirmStatus.offset >= 0 ? _fixPtr + fieldConfirmStatus.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldNoOrders::TAG : return fieldNoOrders.offset >= 0 ? _fixPtr + fieldNoOrders.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldSecondaryAllocID::TAG : return fieldSecondaryAllocID.offset >= 0 ? _fixPtr + fieldSecondaryAllocID.offset : nullptr;
     case FieldIndividualAllocID::TAG : return fieldIndividualAllocID.offset >= 0 ? _fixPtr + fieldIndividualAllocID.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldNoTrdRegTimestamps::TAG : return fieldNoTrdRegTimestamps.offset >= 0 ? _fixPtr + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldAllocQty::TAG : return fieldAllocQty.offset >= 0 ? _fixPtr + fieldAllocQty.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldLastMkt::TAG : return fieldLastMkt.offset >= 0 ? _fixPtr + fieldLastMkt.offset : nullptr;
     case FieldNoCapacities::TAG : return fieldNoCapacities.offset >= 0 ? _fixPtr + fieldNoCapacities.offset : nullptr;
     case FieldAllocAccount::TAG : return fieldAllocAccount.offset >= 0 ? _fixPtr + fieldAllocAccount.offset : nullptr;
     case FieldAllocAcctIDSource::TAG : return fieldAllocAcctIDSource.offset >= 0 ? _fixPtr + fieldAllocAcctIDSource.offset : nullptr;
     case FieldAllocAccountType::TAG : return fieldAllocAccountType.offset >= 0 ? _fixPtr + fieldAllocAccountType.offset : nullptr;
     case FieldAvgPx::TAG : return fieldAvgPx.offset >= 0 ? _fixPtr + fieldAvgPx.offset : nullptr;
     case FieldAvgPxPrecision::TAG : return fieldAvgPxPrecision.offset >= 0 ? _fixPtr + fieldAvgPxPrecision.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldAvgParPx::TAG : return fieldAvgParPx.offset >= 0 ? _fixPtr + fieldAvgParPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldReportedPx::TAG : return fieldReportedPx.offset >= 0 ? _fixPtr + fieldReportedPx.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldProcessCode::TAG : return fieldProcessCode.offset >= 0 ? _fixPtr + fieldProcessCode.offset : nullptr;
     case FieldGrossTradeAmt::TAG : return fieldGrossTradeAmt.offset >= 0 ? _fixPtr + fieldGrossTradeAmt.offset : nullptr;
     case FieldNumDaysInterest::TAG : return fieldNumDaysInterest.offset >= 0 ? _fixPtr + fieldNumDaysInterest.offset : nullptr;
     case FieldExDate::TAG : return fieldExDate.offset >= 0 ? _fixPtr + fieldExDate.offset : nullptr;
     case FieldAccruedInterestRate::TAG : return fieldAccruedInterestRate.offset >= 0 ? _fixPtr + fieldAccruedInterestRate.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldInterestAtMaturity::TAG : return fieldInterestAtMaturity.offset >= 0 ? _fixPtr + fieldInterestAtMaturity.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldConcession::TAG : return fieldConcession.offset >= 0 ? _fixPtr + fieldConcession.offset : nullptr;
     case FieldTotalTakedown::TAG : return fieldTotalTakedown.offset >= 0 ? _fixPtr + fieldTotalTakedown.offset : nullptr;
     case FieldNetMoney::TAG : return fieldNetMoney.offset >= 0 ? _fixPtr + fieldNetMoney.offset : nullptr;
     case FieldMaturityNetMoney::TAG : return fieldMaturityNetMoney.offset >= 0 ? _fixPtr + fieldMaturityNetMoney.offset : nullptr;
     case FieldSettlCurrAmt::TAG : return fieldSettlCurrAmt.offset >= 0 ? _fixPtr + fieldSettlCurrAmt.offset : nullptr;
     case FieldSettlCurrency::TAG : return fieldSettlCurrency.offset >= 0 ? _fixPtr + fieldSettlCurrency.offset : nullptr;
     case FieldSettlCurrFxRate::TAG : return fieldSettlCurrFxRate.offset >= 0 ? _fixPtr + fieldSettlCurrFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::TAG : return fieldSettlCurrFxRateCalc.offset >= 0 ? _fixPtr + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldSettlDeliveryType::TAG : return fieldSettlDeliveryType.offset >= 0 ? _fixPtr + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::TAG : return fieldStandInstDbType.offset >= 0 ? _fixPtr + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::TAG : return fieldStandInstDbName.offset >= 0 ? _fixPtr + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::TAG : return fieldStandInstDbID.offset >= 0 ? _fixPtr + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::TAG : return fieldNoDlvyInst.offset >= 0 ? _fixPtr + fieldNoDlvyInst.offset : nullptr;
     case FieldCommission::TAG : return fieldCommission.offset >= 0 ? _fixPtr + fieldCommission.offset : nullptr;
     case FieldCommType::TAG : return fieldCommType.offset >= 0 ? _fixPtr + fieldCommType.offset : nullptr;
     case FieldCommCurrency::TAG : return fieldCommCurrency.offset >= 0 ? _fixPtr + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::TAG : return fieldFundRenewWaiv.offset >= 0 ? _fixPtr + fieldFundRenewWaiv.offset : nullptr;
     case FieldSharedCommission::TAG : return fieldSharedCommission.offset >= 0 ? _fixPtr + fieldSharedCommission.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldNoMiscFees::TAG : return fieldNoMiscFees.offset >= 0 ? _fixPtr + fieldNoMiscFees.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessagePositionMaintenanceRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosReqID::TAG : return fieldPosReqID.offset >= 0 ? _fixPtr + fieldPosReqID.offset : nullptr;
     case FieldPosTransType::TAG : return fieldPosTransType.offset >= 0 ? _fixPtr + fieldPosTransType.offset : nullptr;
     case FieldPosMaintAction::TAG : return fieldPosMaintAction.offset >= 0 ? _fixPtr + fieldPosMaintAction.offset : nullptr;
     case FieldOrigPosReqRefID::TAG : return fieldOrigPosReqRefID.offset >= 0 ? _fixPtr + fieldOrigPosReqRefID.offset : nullptr;
     case FieldPosMaintRptRefID::TAG : return fieldPosMaintRptRefID.offset >= 0 ? _fixPtr + fieldPosMaintRptRefID.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoPositions::TAG : return fieldNoPositions.offset >= 0 ? _fixPtr + fieldNoPositions.offset : nullptr;
     case FieldAdjustmentType::TAG : return fieldAdjustmentType.offset >= 0 ? _fixPtr + fieldAdjustmentType.offset : nullptr;
     case FieldContraryInstructionIndicator::TAG : return fieldContraryInstructionIndicator.offset >= 0 ? _fixPtr + fieldContraryInstructionIndicator.offset : nullptr;
     case FieldPriorSpreadIndicator::TAG : return fieldPriorSpreadIndicator.offset >= 0 ? _fixPtr + fieldPriorSpreadIndicator.offset : nullptr;
     case FieldThresholdAmount::TAG : return fieldThresholdAmount.offset >= 0 ? _fixPtr + fieldThresholdAmount.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessagePositionMaintenanceReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosMaintRptID::TAG : return fieldPosMaintRptID.offset >= 0 ? _fixPtr + fieldPosMaintRptID.offset : nullptr;
     case FieldPosTransType::TAG : return fieldPosTransType.offset >= 0 ? _fixPtr + fieldPosTransType.offset : nullptr;
     case FieldPosReqID::TAG : return fieldPosReqID.offset >= 0 ? _fixPtr + fieldPosReqID.offset : nullptr;
     case FieldPosMaintAction::TAG : return fieldPosMaintAction.offset >= 0 ? _fixPtr + fieldPosMaintAction.offset : nullptr;
     case FieldOrigPosReqRefID::TAG : return fieldOrigPosReqRefID.offset >= 0 ? _fixPtr + fieldOrigPosReqRefID.offset : nullptr;
     case FieldPosMaintStatus::TAG : return fieldPosMaintStatus.offset >= 0 ? _fixPtr + fieldPosMaintStatus.offset : nullptr;
     case FieldPosMaintResult::TAG : return fieldPosMaintResult.offset >= 0 ? _fixPtr + fieldPosMaintResult.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoPositions::TAG : return fieldNoPositions.offset >= 0 ? _fixPtr + fieldNoPositions.offset : nullptr;
     case FieldNoPosAmt::TAG : return fieldNoPosAmt.offset >= 0 ? _fixPtr + fieldNoPosAmt.offset : nullptr;
     case FieldAdjustmentType::TAG : return fieldAdjustmentType.offset >= 0 ? _fixPtr + fieldAdjustmentType.offset : nullptr;
     case FieldThresholdAmount::TAG : return fieldThresholdAmount.offset >= 0 ? _fixPtr + fieldThresholdAmount.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRequestForPositions::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosReqID::TAG : return fieldPosReqID.offset >= 0 ? _fixPtr + fieldPosReqID.offset : nullptr;
     case FieldPosReqType::TAG : return fieldPosReqType.offset >= 0 ? _fixPtr + fieldPosReqType.offset : nullptr;
     case FieldMatchStatus::TAG : return fieldMatchStatus.offset >= 0 ? _fixPtr + fieldMatchStatus.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldNoTradingSessions::TAG : return fieldNoTradingSessions.offset >= 0 ? _fixPtr + fieldNoTradingSessions.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldResponseTransportType::TAG : return fieldResponseTransportType.offset >= 0 ? _fixPtr + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::TAG : return fieldResponseDestination.offset >= 0 ? _fixPtr + fieldResponseDestination.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRequestForPositionsAck::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosMaintRptID::TAG : return fieldPosMaintRptID.offset >= 0 ? _fixPtr + fieldPosMaintRptID.offset : nullptr;
     case FieldPosReqID::TAG : return fieldPosReqID.offset >= 0 ? _fixPtr + fieldPosReqID.offset : nullptr;
     case FieldTotalNumPosReports::TAG : return fieldTotalNumPosReports.offset >= 0 ? _fixPtr + fieldTotalNumPosReports.offset : nullptr;
     case FieldUnsolicitedIndicator::TAG : return fieldUnsolicitedIndicator.offset >= 0 ? _fixPtr + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldPosReqResult::TAG : return fieldPosReqResult.offset >= 0 ? _fixPtr + fieldPosReqResult.offset : nullptr;
     case FieldPosReqStatus::TAG : return fieldPosReqStatus.offset >= 0 ? _fixPtr + fieldPosReqStatus.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldResponseTransportType::TAG : return fieldResponseTransportType.offset >= 0 ? _fixPtr + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::TAG : return fieldResponseDestination.offset >= 0 ? _fixPtr + fieldResponseDestination.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessagePositionReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosMaintRptID::TAG : return fieldPosMaintRptID.offset >= 0 ? _fixPtr + fieldPosMaintRptID.offset : nullptr;
     case FieldPosReqID::TAG : return fieldPosReqID.offset >= 0 ? _fixPtr + fieldPosReqID.offset : nullptr;
     case FieldPosReqType::TAG : return fieldPosReqType.offset >= 0 ? _fixPtr + fieldPosReqType.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTotalNumPosReports::TAG : return fieldTotalNumPosReports.offset >= 0 ? _fixPtr + fieldTotalNumPosReports.offset : nullptr;
     case FieldUnsolicitedIndicator::TAG : return fieldUnsolicitedIndicator.offset >= 0 ? _fixPtr + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldPosReqResult::TAG : return fieldPosReqResult.offset >= 0 ? _fixPtr + fieldPosReqResult.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldSettlPrice::TAG : return fieldSettlPrice.offset >= 0 ? _fixPtr + fieldSettlPrice.offset : nullptr;
     case FieldSettlPriceType::TAG : return fieldSettlPriceType.offset >= 0 ? _fixPtr + fieldSettlPriceType.offset : nullptr;
     case FieldPriorSettlPrice::TAG : return fieldPriorSettlPrice.offset >= 0 ? _fixPtr + fieldPriorSettlPrice.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoPositions::TAG : return fieldNoPositions.offset >= 0 ? _fixPtr + fieldNoPositions.offset : nullptr;
     case FieldNoPosAmt::TAG : return fieldNoPosAmt.offset >= 0 ? _fixPtr + fieldNoPosAmt.offset : nullptr;
     case FieldRegistStatus::TAG : return fieldRegistStatus.offset >= 0 ? _fixPtr + fieldRegistStatus.offset : nullptr;
     case FieldDeliveryDate::TAG : return fieldDeliveryDate.offset >= 0 ? _fixPtr + fieldDeliveryDate.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequestAck::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeRequestID::TAG : return fieldTradeRequestID.offset >= 0 ? _fixPtr + fieldTradeRequestID.offset : nullptr;
     case FieldTradeRequestType::TAG : return fieldTradeRequestType.offset >= 0 ? _fixPtr + fieldTradeRequestType.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTotNumTradeReports::TAG : return fieldTotNumTradeReports.offset >= 0 ? _fixPtr + fieldTotNumTradeReports.offset : nullptr;
     case FieldTradeRequestResult::TAG : return fieldTradeRequestResult.offset >= 0 ? _fixPtr + fieldTradeRequestResult.offset : nullptr;
     case FieldTradeRequestStatus::TAG : return fieldTradeRequestStatus.offset >= 0 ? _fixPtr + fieldTradeRequestStatus.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldMultiLegReportingType::TAG : return fieldMultiLegReportingType.offset >= 0 ? _fixPtr + fieldMultiLegReportingType.offset : nullptr;
     case FieldResponseTransportType::TAG : return fieldResponseTransportType.offset >= 0 ? _fixPtr + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::TAG : return fieldResponseDestination.offset >= 0 ? _fixPtr + fieldResponseDestination.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradeCaptureReportAck::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeReportID::TAG : return fieldTradeReportID.offset >= 0 ? _fixPtr + fieldTradeReportID.offset : nullptr;
     case FieldTradeReportTransType::TAG : return fieldTradeReportTransType.offset >= 0 ? _fixPtr + fieldTradeReportTransType.offset : nullptr;
     case FieldTradeReportType::TAG : return fieldTradeReportType.offset >= 0 ? _fixPtr + fieldTradeReportType.offset : nullptr;
     case FieldTrdType::TAG : return fieldTrdType.offset >= 0 ? _fixPtr + fieldTrdType.offset : nullptr;
     case FieldTrdSubType::TAG : return fieldTrdSubType.offset >= 0 ? _fixPtr + fieldTrdSubType.offset : nullptr;
     case FieldSecondaryTrdType::TAG : return fieldSecondaryTrdType.offset >= 0 ? _fixPtr + fieldSecondaryTrdType.offset : nullptr;
     case FieldTransferReason::TAG : return fieldTransferReason.offset >= 0 ? _fixPtr + fieldTransferReason.offset : nullptr;
     case FieldExecType::TAG : return fieldExecType.offset >= 0 ? _fixPtr + fieldExecType.offset : nullptr;
     case FieldTradeReportRefID::TAG : return fieldTradeReportRefID.offset >= 0 ? _fixPtr + fieldTradeReportRefID.offset : nullptr;
     case FieldSecondaryTradeReportRefID::TAG : return fieldSecondaryTradeReportRefID.offset >= 0 ? _fixPtr + fieldSecondaryTradeReportRefID.offset : nullptr;
     case FieldTrdRptStatus::TAG : return fieldTrdRptStatus.offset >= 0 ? _fixPtr + fieldTrdRptStatus.offset : nullptr;
     case FieldTradeReportRejectReason::TAG : return fieldTradeReportRejectReason.offset >= 0 ? _fixPtr + fieldTradeReportRejectReason.offset : nullptr;
     case FieldSecondaryTradeReportID::TAG : return fieldSecondaryTradeReportID.offset >= 0 ? _fixPtr + fieldSecondaryTradeReportID.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTradeLinkID::TAG : return fieldTradeLinkID.offset >= 0 ? _fixPtr + fieldTradeLinkID.offset : nullptr;
     case FieldTrdMatchID::TAG : return fieldTrdMatchID.offset >= 0 ? _fixPtr + fieldTrdMatchID.offset : nullptr;
     case FieldExecID::TAG : return fieldExecID.offset >= 0 ? _fixPtr + fieldExecID.offset : nullptr;
     case FieldSecondaryExecID::TAG : return fieldSecondaryExecID.offset >= 0 ? _fixPtr + fieldSecondaryExecID.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoTrdRegTimestamps::TAG : return fieldNoTrdRegTimestamps.offset >= 0 ? _fixPtr + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldResponseTransportType::TAG : return fieldResponseTransportType.offset >= 0 ? _fixPtr + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::TAG : return fieldResponseDestination.offset >= 0 ? _fixPtr + fieldResponseDestination.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldClearingFeeIndicator::TAG : return fieldClearingFeeIndicator.offset >= 0 ? _fixPtr + fieldClearingFeeIndicator.offset : nullptr;
     case FieldOrderCapacity::TAG : return fieldOrderCapacity.offset >= 0 ? _fixPtr + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::TAG : return fieldOrderRestrictions.offset >= 0 ? _fixPtr + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::TAG : return fieldCustOrderCapacity.offset >= 0 ? _fixPtr + fieldCustOrderCapacity.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::TAG : return fieldAcctIDSource.offset >= 0 ? _fixPtr + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset >= 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldPreallocMethod::TAG : return fieldPreallocMethod.offset >= 0 ? _fixPtr + fieldPreallocMethod.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAllocationReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocReportID::TAG : return fieldAllocReportID.offset >= 0 ? _fixPtr + fieldAllocReportID.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldAllocTransType::TAG : return fieldAllocTransType.offset >= 0 ? _fixPtr + fieldAllocTransType.offset : nullptr;
     case FieldAllocReportRefID::TAG : return fieldAllocReportRefID.offset >= 0 ? _fixPtr + fieldAllocReportRefID.offset : nullptr;
     case FieldAllocCancReplaceReason::TAG : return fieldAllocCancReplaceReason.offset >= 0 ? _fixPtr + fieldAllocCancReplaceReason.offset : nullptr;
     case FieldSecondaryAllocID::TAG : return fieldSecondaryAllocID.offset >= 0 ? _fixPtr + fieldSecondaryAllocID.offset : nullptr;
     case FieldAllocReportType::TAG : return fieldAllocReportType.offset >= 0 ? _fixPtr + fieldAllocReportType.offset : nullptr;
     case FieldAllocStatus::TAG : return fieldAllocStatus.offset >= 0 ? _fixPtr + fieldAllocStatus.offset : nullptr;
     case FieldAllocRejCode::TAG : return fieldAllocRejCode.offset >= 0 ? _fixPtr + fieldAllocRejCode.offset : nullptr;
     case FieldRefAllocID::TAG : return fieldRefAllocID.offset >= 0 ? _fixPtr + fieldRefAllocID.offset : nullptr;
     case FieldAllocIntermedReqType::TAG : return fieldAllocIntermedReqType.offset >= 0 ? _fixPtr + fieldAllocIntermedReqType.offset : nullptr;
     case FieldAllocLinkID::TAG : return fieldAllocLinkID.offset >= 0 ? _fixPtr + fieldAllocLinkID.offset : nullptr;
     case FieldAllocLinkType::TAG : return fieldAllocLinkType.offset >= 0 ? _fixPtr + fieldAllocLinkType.offset : nullptr;
     case FieldBookingRefID::TAG : return fieldBookingRefID.offset >= 0 ? _fixPtr + fieldBookingRefID.offset : nullptr;
     case FieldAllocNoOrdersType::TAG : return fieldAllocNoOrdersType.offset >= 0 ? _fixPtr + fieldAllocNoOrdersType.offset : nullptr;
     case FieldNoOrders::TAG : return fieldNoOrders.offset >= 0 ? _fixPtr + fieldNoOrders.offset : nullptr;
     case FieldNoExecs::TAG : return fieldNoExecs.offset >= 0 ? _fixPtr + fieldNoExecs.offset : nullptr;
     case FieldPreviouslyReported::TAG : return fieldPreviouslyReported.offset >= 0 ? _fixPtr + fieldPreviouslyReported.offset : nullptr;
     case FieldReversalIndicator::TAG : return fieldReversalIndicator.offset >= 0 ? _fixPtr + fieldReversalIndicator.offset : nullptr;
     case FieldMatchType::TAG : return fieldMatchType.offset >= 0 ? _fixPtr + fieldMatchType.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::TAG : return fieldDeliveryForm.offset >= 0 ? _fixPtr + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::TAG : return fieldPctAtRisk.offset >= 0 ? _fixPtr + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::TAG : return fieldNoInstrAttrib.offset >= 0 ? _fixPtr + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldLastMkt::TAG : return fieldLastMkt.offset >= 0 ? _fixPtr + fieldLastMkt.offset : nullptr;
     case FieldTradeOriginationDate::TAG : return fieldTradeOriginationDate.offset >= 0 ? _fixPtr + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldAvgPx::TAG : return fieldAvgPx.offset >= 0 ? _fixPtr + fieldAvgPx.offset : nullptr;
     case FieldAvgParPx::TAG : return fieldAvgParPx.offset >= 0 ? _fixPtr + fieldAvgParPx.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldAvgPxPrecision::TAG : return fieldAvgPxPrecision.offset >= 0 ? _fixPtr + fieldAvgPxPrecision.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldSettlType::TAG : return fieldSettlType.offset >= 0 ? _fixPtr + fieldSettlType.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldBookingType::TAG : return fieldBookingType.offset >= 0 ? _fixPtr + fieldBookingType.offset : nullptr;
     case FieldGrossTradeAmt::TAG : return fieldGrossTradeAmt.offset >= 0 ? _fixPtr + fieldGrossTradeAmt.offset : nullptr;
     case FieldConcession::TAG : return fieldConcession.offset >= 0 ? _fixPtr + fieldConcession.offset : nullptr;
     case FieldTotalTakedown::TAG : return fieldTotalTakedown.offset >= 0 ? _fixPtr + fieldTotalTakedown.offset : nullptr;
     case FieldNetMoney::TAG : return fieldNetMoney.offset >= 0 ? _fixPtr + fieldNetMoney.offset : nullptr;
     case FieldPositionEffect::TAG : return fieldPositionEffect.offset >= 0 ? _fixPtr + fieldPositionEffect.offset : nullptr;
     case FieldAutoAcceptIndicator::TAG : return fieldAutoAcceptIndicator.offset >= 0 ? _fixPtr + fieldAutoAcceptIndicator.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldNumDaysInterest::TAG : return fieldNumDaysInterest.offset >= 0 ? _fixPtr + fieldNumDaysInterest.offset : nullptr;
     case FieldAccruedInterestRate::TAG : return fieldAccruedInterestRate.offset >= 0 ? _fixPtr + fieldAccruedInterestRate.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldTotalAccruedInterestAmt::TAG : return fieldTotalAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldTotalAccruedInterestAmt.offset : nullptr;
     case FieldInterestAtMaturity::TAG : return fieldInterestAtMaturity.offset >= 0 ? _fixPtr + fieldInterestAtMaturity.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldLegalConfirm::TAG : return fieldLegalConfirm.offset >= 0 ? _fixPtr + fieldLegalConfirm.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldYieldType::TAG : return fieldYieldType.offset >= 0 ? _fixPtr + fieldYieldType.offset : nullptr;
     case FieldYield::TAG : return fieldYield.offset >= 0 ? _fixPtr + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::TAG : return fieldYieldCalcDate.offset >= 0 ? _fixPtr + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::TAG : return fieldYieldRedemptionDate.offset >= 0 ? _fixPtr + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::TAG : return fieldYieldRedemptionPrice.offset >= 0 ? _fixPtr + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::TAG : return fieldYieldRedemptionPriceType.offset >= 0 ? _fixPtr + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldTotNoAllocs::TAG : return fieldTotNoAllocs.offset >= 0 ? _fixPtr + fieldTotNoAllocs.offset : nullptr;
     case FieldLastFragment::TAG : return fieldLastFragment.offset >= 0 ? _fixPtr + fieldLastFragment.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAllocationReportAck::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocReportID::TAG : return fieldAllocReportID.offset >= 0 ? _fixPtr + fieldAllocReportID.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldSecondaryAllocID::TAG : return fieldSecondaryAllocID.offset >= 0 ? _fixPtr + fieldSecondaryAllocID.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldAllocStatus::TAG : return fieldAllocStatus.offset >= 0 ? _fixPtr + fieldAllocStatus.offset : nullptr;
     case FieldAllocRejCode::TAG : return fieldAllocRejCode.offset >= 0 ? _fixPtr + fieldAllocRejCode.offset : nullptr;
     case FieldAllocReportType::TAG : return fieldAllocReportType.offset >= 0 ? _fixPtr + fieldAllocReportType.offset : nullptr;
     case FieldAllocIntermedReqType::TAG : return fieldAllocIntermedReqType.offset >= 0 ? _fixPtr + fieldAllocIntermedReqType.offset : nullptr;
     case FieldMatchStatus::TAG : return fieldMatchStatus.offset >= 0 ? _fixPtr + fieldMatchStatus.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldNoAllocs::TAG : return fieldNoAllocs.offset >= 0 ? _fixPtr + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageConfirmationAck::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldConfirmID::TAG : return fieldConfirmID.offset >= 0 ? _fixPtr + fieldConfirmID.offset : nullptr;
     case FieldTradeDate::TAG : return fieldTradeDate.offset >= 0 ? _fixPtr + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldAffirmStatus::TAG : return fieldAffirmStatus.offset >= 0 ? _fixPtr + fieldAffirmStatus.offset : nullptr;
     case FieldConfirmRejReason::TAG : return fieldConfirmRejReason.offset >= 0 ? _fixPtr + fieldConfirmRejReason.offset : nullptr;
     case FieldMatchStatus::TAG : return fieldMatchStatus.offset >= 0 ? _fixPtr + fieldMatchStatus.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSettlementInstructionRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldSettlInstReqID::TAG : return fieldSettlInstReqID.offset >= 0 ? _fixPtr + fieldSettlInstReqID.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAllocAccount::TAG : return fieldAllocAccount.offset >= 0 ? _fixPtr + fieldAllocAccount.offset : nullptr;
     case FieldAllocAcctIDSource::TAG : return fieldAllocAcctIDSource.offset >= 0 ? _fixPtr + fieldAllocAcctIDSource.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldEffectiveTime::TAG : return fieldEffectiveTime.offset >= 0 ? _fixPtr + fieldEffectiveTime.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldLastUpdateTime::TAG : return fieldLastUpdateTime.offset >= 0 ? _fixPtr + fieldLastUpdateTime.offset : nullptr;
     case FieldStandInstDbType::TAG : return fieldStandInstDbType.offset >= 0 ? _fixPtr + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::TAG : return fieldStandInstDbName.offset >= 0 ? _fixPtr + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::TAG : return fieldStandInstDbID.offset >= 0 ? _fixPtr + fieldStandInstDbID.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAssignmentReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldAsgnRptID::TAG : return fieldAsgnRptID.offset >= 0 ? _fixPtr + fieldAsgnRptID.offset : nullptr;
     case FieldTotNumAssignmentReports::TAG : return fieldTotNumAssignmentReports.offset >= 0 ? _fixPtr + fieldTotNumAssignmentReports.offset : nullptr;
     case FieldLastRptRequested::TAG : return fieldLastRptRequested.offset >= 0 ? _fixPtr + fieldLastRptRequested.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldNoPositions::TAG : return fieldNoPositions.offset >= 0 ? _fixPtr + fieldNoPositions.offset : nullptr;
     case FieldNoPosAmt::TAG : return fieldNoPosAmt.offset >= 0 ? _fixPtr + fieldNoPosAmt.offset : nullptr;
     case FieldThresholdAmount::TAG : return fieldThresholdAmount.offset >= 0 ? _fixPtr + fieldThresholdAmount.offset : nullptr;
     case FieldSettlPrice::TAG : return fieldSettlPrice.offset >= 0 ? _fixPtr + fieldSettlPrice.offset : nullptr;
     case FieldSettlPriceType::TAG : return fieldSettlPriceType.offset >= 0 ? _fixPtr + fieldSettlPriceType.offset : nullptr;
     case FieldUnderlyingSettlPrice::TAG : return fieldUnderlyingSettlPrice.offset >= 0 ? _fixPtr + fieldUnderlyingSettlPrice.offset : nullptr;
     case FieldExpireDate::TAG : return fieldExpireDate.offset >= 0 ? _fixPtr + fieldExpireDate.offset : nullptr;
     case FieldAssignmentMethod::TAG : return fieldAssignmentMethod.offset >= 0 ? _fixPtr + fieldAssignmentMethod.offset : nullptr;
     case FieldAssignmentUnit::TAG : return fieldAssignmentUnit.offset >= 0 ? _fixPtr + fieldAssignmentUnit.offset : nullptr;
     case FieldOpenInterest::TAG : return fieldOpenInterest.offset >= 0 ? _fixPtr + fieldOpenInterest.offset : nullptr;
     case FieldExerciseMethod::TAG : return fieldExerciseMethod.offset >= 0 ? _fixPtr + fieldExerciseMethod.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollReqID::TAG : return fieldCollReqID.offset >= 0 ? _fixPtr + fieldCollReqID.offset : nullptr;
     case FieldCollAsgnReason::TAG : return fieldCollAsgnReason.offset >= 0 ? _fixPtr + fieldCollAsgnReason.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::TAG : return fieldNoExecs.offset >= 0 ? _fixPtr + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::TAG : return fieldNoTrades.offset >= 0 ? _fixPtr + fieldNoTrades.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::TAG : return fieldMarginExcess.offset >= 0 ? _fixPtr + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::TAG : return fieldTotalNetValue.offset >= 0 ? _fixPtr + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::TAG : return fieldCashOutstanding.offset >= 0 ? _fixPtr + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::TAG : return fieldNoTrdRegTimestamps.offset >= 0 ? _fixPtr + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldNoMiscFees::TAG : return fieldNoMiscFees.offset >= 0 ? _fixPtr + fieldNoMiscFees.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralAssignment::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollAsgnID::TAG : return fieldCollAsgnID.offset >= 0 ? _fixPtr + fieldCollAsgnID.offset : nullptr;
     case FieldCollReqID::TAG : return fieldCollReqID.offset >= 0 ? _fixPtr + fieldCollReqID.offset : nullptr;
     case FieldCollAsgnReason::TAG : return fieldCollAsgnReason.offset >= 0 ? _fixPtr + fieldCollAsgnReason.offset : nullptr;
     case FieldCollAsgnTransType::TAG : return fieldCollAsgnTransType.offset >= 0 ? _fixPtr + fieldCollAsgnTransType.offset : nullptr;
     case FieldCollAsgnRefID::TAG : return fieldCollAsgnRefID.offset >= 0 ? _fixPtr + fieldCollAsgnRefID.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldExpireTime::TAG : return fieldExpireTime.offset >= 0 ? _fixPtr + fieldExpireTime.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::TAG : return fieldNoExecs.offset >= 0 ? _fixPtr + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::TAG : return fieldNoTrades.offset >= 0 ? _fixPtr + fieldNoTrades.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::TAG : return fieldMarginExcess.offset >= 0 ? _fixPtr + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::TAG : return fieldTotalNetValue.offset >= 0 ? _fixPtr + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::TAG : return fieldCashOutstanding.offset >= 0 ? _fixPtr + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::TAG : return fieldNoTrdRegTimestamps.offset >= 0 ? _fixPtr + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldNoMiscFees::TAG : return fieldNoMiscFees.offset >= 0 ? _fixPtr + fieldNoMiscFees.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldSettlDeliveryType::TAG : return fieldSettlDeliveryType.offset >= 0 ? _fixPtr + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::TAG : return fieldStandInstDbType.offset >= 0 ? _fixPtr + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::TAG : return fieldStandInstDbName.offset >= 0 ? _fixPtr + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::TAG : return fieldStandInstDbID.offset >= 0 ? _fixPtr + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::TAG : return fieldNoDlvyInst.offset >= 0 ? _fixPtr + fieldNoDlvyInst.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralResponse::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollRespID::TAG : return fieldCollRespID.offset >= 0 ? _fixPtr + fieldCollRespID.offset : nullptr;
     case FieldCollAsgnID::TAG : return fieldCollAsgnID.offset >= 0 ? _fixPtr + fieldCollAsgnID.offset : nullptr;
     case FieldCollReqID::TAG : return fieldCollReqID.offset >= 0 ? _fixPtr + fieldCollReqID.offset : nullptr;
     case FieldCollAsgnReason::TAG : return fieldCollAsgnReason.offset >= 0 ? _fixPtr + fieldCollAsgnReason.offset : nullptr;
     case FieldCollAsgnTransType::TAG : return fieldCollAsgnTransType.offset >= 0 ? _fixPtr + fieldCollAsgnTransType.offset : nullptr;
     case FieldCollAsgnRespType::TAG : return fieldCollAsgnRespType.offset >= 0 ? _fixPtr + fieldCollAsgnRespType.offset : nullptr;
     case FieldCollAsgnRejectReason::TAG : return fieldCollAsgnRejectReason.offset >= 0 ? _fixPtr + fieldCollAsgnRejectReason.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::TAG : return fieldNoExecs.offset >= 0 ? _fixPtr + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::TAG : return fieldNoTrades.offset >= 0 ? _fixPtr + fieldNoTrades.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::TAG : return fieldMarginExcess.offset >= 0 ? _fixPtr + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::TAG : return fieldTotalNetValue.offset >= 0 ? _fixPtr + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::TAG : return fieldCashOutstanding.offset >= 0 ? _fixPtr + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::TAG : return fieldNoTrdRegTimestamps.offset >= 0 ? _fixPtr + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldNoMiscFees::TAG : return fieldNoMiscFees.offset >= 0 ? _fixPtr + fieldNoMiscFees.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralReport::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollRptID::TAG : return fieldCollRptID.offset >= 0 ? _fixPtr + fieldCollRptID.offset : nullptr;
     case FieldCollInquiryID::TAG : return fieldCollInquiryID.offset >= 0 ? _fixPtr + fieldCollInquiryID.offset : nullptr;
     case FieldCollStatus::TAG : return fieldCollStatus.offset >= 0 ? _fixPtr + fieldCollStatus.offset : nullptr;
     case FieldTotNumReports::TAG : return fieldTotNumReports.offset >= 0 ? _fixPtr + fieldTotNumReports.offset : nullptr;
     case FieldLastRptRequested::TAG : return fieldLastRptRequested.offset >= 0 ? _fixPtr + fieldLastRptRequested.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::TAG : return fieldNoExecs.offset >= 0 ? _fixPtr + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::TAG : return fieldNoTrades.offset >= 0 ? _fixPtr + fieldNoTrades.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::TAG : return fieldMarginExcess.offset >= 0 ? _fixPtr + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::TAG : return fieldTotalNetValue.offset >= 0 ? _fixPtr + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::TAG : return fieldCashOutstanding.offset >= 0 ? _fixPtr + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::TAG : return fieldNoTrdRegTimestamps.offset >= 0 ? _fixPtr + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldNoMiscFees::TAG : return fieldNoMiscFees.offset >= 0 ? _fixPtr + fieldNoMiscFees.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldSettlDeliveryType::TAG : return fieldSettlDeliveryType.offset >= 0 ? _fixPtr + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::TAG : return fieldStandInstDbType.offset >= 0 ? _fixPtr + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::TAG : return fieldStandInstDbName.offset >= 0 ? _fixPtr + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::TAG : return fieldStandInstDbID.offset >= 0 ? _fixPtr + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::TAG : return fieldNoDlvyInst.offset >= 0 ? _fixPtr + fieldNoDlvyInst.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralInquiry::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollInquiryID::TAG : return fieldCollInquiryID.offset >= 0 ? _fixPtr + fieldCollInquiryID.offset : nullptr;
     case FieldNoCollInquiryQualifier::TAG : return fieldNoCollInquiryQualifier.offset >= 0 ? _fixPtr + fieldNoCollInquiryQualifier.offset : nullptr;
     case FieldSubscriptionRequestType::TAG : return fieldSubscriptionRequestType.offset >= 0 ? _fixPtr + fieldSubscriptionRequestType.offset : nullptr;
     case FieldResponseTransportType::TAG : return fieldResponseTransportType.offset >= 0 ? _fixPtr + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::TAG : return fieldResponseDestination.offset >= 0 ? _fixPtr + fieldResponseDestination.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::TAG : return fieldNoExecs.offset >= 0 ? _fixPtr + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::TAG : return fieldNoTrades.offset >= 0 ? _fixPtr + fieldNoTrades.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::TAG : return fieldMarginExcess.offset >= 0 ? _fixPtr + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::TAG : return fieldTotalNetValue.offset >= 0 ? _fixPtr + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::TAG : return fieldCashOutstanding.offset >= 0 ? _fixPtr + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::TAG : return fieldNoTrdRegTimestamps.offset >= 0 ? _fixPtr + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::TAG : return fieldSide.offset >= 0 ? _fixPtr + fieldSide.offset : nullptr;
     case FieldPrice::TAG : return fieldPrice.offset >= 0 ? _fixPtr + fieldPrice.offset : nullptr;
     case FieldPriceType::TAG : return fieldPriceType.offset >= 0 ? _fixPtr + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::TAG : return fieldAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::TAG : return fieldEndAccruedInterestAmt.offset >= 0 ? _fixPtr + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::TAG : return fieldStartCash.offset >= 0 ? _fixPtr + fieldStartCash.offset : nullptr;
     case FieldEndCash::TAG : return fieldEndCash.offset >= 0 ? _fixPtr + fieldEndCash.offset : nullptr;
     case FieldSpread::TAG : return fieldSpread.offset >= 0 ? _fixPtr + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::TAG : return fieldBenchmarkCurveCurrency.offset >= 0 ? _fixPtr + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::TAG : return fieldBenchmarkCurveName.offset >= 0 ? _fixPtr + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::TAG : return fieldBenchmarkCurvePoint.offset >= 0 ? _fixPtr + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::TAG : return fieldBenchmarkPrice.offset >= 0 ? _fixPtr + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::TAG : return fieldBenchmarkPriceType.offset >= 0 ? _fixPtr + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::TAG : return fieldBenchmarkSecurityID.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::TAG : return fieldBenchmarkSecurityIDSource.offset >= 0 ? _fixPtr + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::TAG : return fieldNoStipulations.offset >= 0 ? _fixPtr + fieldNoStipulations.offset : nullptr;
     case FieldSettlDeliveryType::TAG : return fieldSettlDeliveryType.offset >= 0 ? _fixPtr + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::TAG : return fieldStandInstDbType.offset >= 0 ? _fixPtr + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::TAG : return fieldStandInstDbName.offset >= 0 ? _fixPtr + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::TAG : return fieldStandInstDbID.offset >= 0 ? _fixPtr + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::TAG : return fieldNoDlvyInst.offset >= 0 ? _fixPtr + fieldNoDlvyInst.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldNetworkRequestType::TAG : return fieldNetworkRequestType.offset >= 0 ? _fixPtr + fieldNetworkRequestType.offset : nullptr;
     case FieldNetworkRequestID::TAG : return fieldNetworkRequestID.offset >= 0 ? _fixPtr + fieldNetworkRequestID.offset : nullptr;
     case FieldNoCompIDs::TAG : return fieldNoCompIDs.offset >= 0 ? _fixPtr + fieldNoCompIDs.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusResponse::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldNetworkStatusResponseType::TAG : return fieldNetworkStatusResponseType.offset >= 0 ? _fixPtr + fieldNetworkStatusResponseType.offset : nullptr;
     case FieldNetworkRequestID::TAG : return fieldNetworkRequestID.offset >= 0 ? _fixPtr + fieldNetworkRequestID.offset : nullptr;
     case FieldNetworkResponseID::TAG : return fieldNetworkResponseID.offset >= 0 ? _fixPtr + fieldNetworkResponseID.offset : nullptr;
     case FieldLastNetworkResponseID::TAG : return fieldLastNetworkResponseID.offset >= 0 ? _fixPtr + fieldLastNetworkResponseID.offset : nullptr;
     case FieldNoCompIDs::TAG : return fieldNoCompIDs.offset >= 0 ? _fixPtr + fieldNoCompIDs.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageUserRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldUserRequestID::TAG : return fieldUserRequestID.offset >= 0 ? _fixPtr + fieldUserRequestID.offset : nullptr;
     case FieldUserRequestType::TAG : return fieldUserRequestType.offset >= 0 ? _fixPtr + fieldUserRequestType.offset : nullptr;
     case FieldUsername::TAG : return fieldUsername.offset >= 0 ? _fixPtr + fieldUsername.offset : nullptr;
     case FieldPassword::TAG : return fieldPassword.offset >= 0 ? _fixPtr + fieldPassword.offset : nullptr;
     case FieldNewPassword::TAG : return fieldNewPassword.offset >= 0 ? _fixPtr + fieldNewPassword.offset : nullptr;
     case FieldRawDataLength::TAG : return fieldRawDataLength.offset >= 0 ? _fixPtr + fieldRawDataLength.offset : nullptr;
     case FieldRawData::TAG : return fieldRawData.offset >= 0 ? _fixPtr + fieldRawData.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageUserResponse::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldUserRequestID::TAG : return fieldUserRequestID.offset >= 0 ? _fixPtr + fieldUserRequestID.offset : nullptr;
     case FieldUsername::TAG : return fieldUsername.offset >= 0 ? _fixPtr + fieldUsername.offset : nullptr;
     case FieldUserStatus::TAG : return fieldUserStatus.offset >= 0 ? _fixPtr + fieldUserStatus.offset : nullptr;
     case FieldUserStatusText::TAG : return fieldUserStatusText.offset >= 0 ? _fixPtr + fieldUserStatusText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralInquiryAck::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollInquiryID::TAG : return fieldCollInquiryID.offset >= 0 ? _fixPtr + fieldCollInquiryID.offset : nullptr;
     case FieldCollInquiryStatus::TAG : return fieldCollInquiryStatus.offset >= 0 ? _fixPtr + fieldCollInquiryStatus.offset : nullptr;
     case FieldCollInquiryResult::TAG : return fieldCollInquiryResult.offset >= 0 ? _fixPtr + fieldCollInquiryResult.offset : nullptr;
     case FieldNoCollInquiryQualifier::TAG : return fieldNoCollInquiryQualifier.offset >= 0 ? _fixPtr + fieldNoCollInquiryQualifier.offset : nullptr;
     case FieldTotNumReports::TAG : return fieldTotNumReports.offset >= 0 ? _fixPtr + fieldTotNumReports.offset : nullptr;
     case FieldNoPartyIDs::TAG : return fieldNoPartyIDs.offset >= 0 ? _fixPtr + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::TAG : return fieldAccount.offset >= 0 ? _fixPtr + fieldAccount.offset : nullptr;
     case FieldAccountType::TAG : return fieldAccountType.offset >= 0 ? _fixPtr + fieldAccountType.offset : nullptr;
     case FieldClOrdID::TAG : return fieldClOrdID.offset >= 0 ? _fixPtr + fieldClOrdID.offset : nullptr;
     case FieldOrderID::TAG : return fieldOrderID.offset >= 0 ? _fixPtr + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::TAG : return fieldSecondaryOrderID.offset >= 0 ? _fixPtr + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::TAG : return fieldSecondaryClOrdID.offset >= 0 ? _fixPtr + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::TAG : return fieldNoExecs.offset >= 0 ? _fixPtr + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::TAG : return fieldNoTrades.offset >= 0 ? _fixPtr + fieldNoTrades.offset : nullptr;
     case FieldSymbol::TAG : return fieldSymbol.offset >= 0 ? _fixPtr + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::TAG : return fieldSymbolSfx.offset >= 0 ? _fixPtr + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::TAG : return fieldSecurityID.offset >= 0 ? _fixPtr + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::TAG : return fieldSecurityIDSource.offset >= 0 ? _fixPtr + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::TAG : return fieldNoSecurityAltID.offset >= 0 ? _fixPtr + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::TAG : return fieldProduct.offset >= 0 ? _fixPtr + fieldProduct.offset : nullptr;
     case FieldCFICode::TAG : return fieldCFICode.offset >= 0 ? _fixPtr + fieldCFICode.offset : nullptr;
     case FieldSecurityType::TAG : return fieldSecurityType.offset >= 0 ? _fixPtr + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::TAG : return fieldSecuritySubType.offset >= 0 ? _fixPtr + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::TAG : return fieldMaturityMonthYear.offset >= 0 ? _fixPtr + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::TAG : return fieldMaturityDate.offset >= 0 ? _fixPtr + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::TAG : return fieldPutOrCall.offset >= 0 ? _fixPtr + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::TAG : return fieldCouponPaymentDate.offset >= 0 ? _fixPtr + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::TAG : return fieldIssueDate.offset >= 0 ? _fixPtr + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::TAG : return fieldRepoCollateralSecurityType.offset >= 0 ? _fixPtr + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::TAG : return fieldRepurchaseTerm.offset >= 0 ? _fixPtr + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::TAG : return fieldRepurchaseRate.offset >= 0 ? _fixPtr + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::TAG : return fieldFactor.offset >= 0 ? _fixPtr + fieldFactor.offset : nullptr;
     case FieldCreditRating::TAG : return fieldCreditRating.offset >= 0 ? _fixPtr + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::TAG : return fieldInstrRegistry.offset >= 0 ? _fixPtr + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::TAG : return fieldCountryOfIssue.offset >= 0 ? _fixPtr + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::TAG : return fieldStateOrProvinceOfIssue.offset >= 0 ? _fixPtr + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::TAG : return fieldLocaleOfIssue.offset >= 0 ? _fixPtr + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::TAG : return fieldRedemptionDate.offset >= 0 ? _fixPtr + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::TAG : return fieldStrikePrice.offset >= 0 ? _fixPtr + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::TAG : return fieldStrikeCurrency.offset >= 0 ? _fixPtr + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::TAG : return fieldOptAttribute.offset >= 0 ? _fixPtr + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::TAG : return fieldContractMultiplier.offset >= 0 ? _fixPtr + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::TAG : return fieldCouponRate.offset >= 0 ? _fixPtr + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::TAG : return fieldSecurityExchange.offset >= 0 ? _fixPtr + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::TAG : return fieldIssuer.offset >= 0 ? _fixPtr + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::TAG : return fieldEncodedIssuerLen.offset >= 0 ? _fixPtr + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::TAG : return fieldEncodedIssuer.offset >= 0 ? _fixPtr + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::TAG : return fieldSecurityDesc.offset >= 0 ? _fixPtr + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::TAG : return fieldEncodedSecurityDescLen.offset >= 0 ? _fixPtr + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::TAG : return fieldEncodedSecurityDesc.offset >= 0 ? _fixPtr + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::TAG : return fieldPool.offset >= 0 ? _fixPtr + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::TAG : return fieldContractSettlMonth.offset >= 0 ? _fixPtr + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::TAG : return fieldCPProgram.offset >= 0 ? _fixPtr + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::TAG : return fieldCPRegType.offset >= 0 ? _fixPtr + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::TAG : return fieldNoEvents.offset >= 0 ? _fixPtr + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::TAG : return fieldDatedDate.offset >= 0 ? _fixPtr + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::TAG : return fieldInterestAccrualDate.offset >= 0 ? _fixPtr + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::TAG : return fieldAgreementDesc.offset >= 0 ? _fixPtr + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::TAG : return fieldAgreementID.offset >= 0 ? _fixPtr + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::TAG : return fieldAgreementDate.offset >= 0 ? _fixPtr + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::TAG : return fieldAgreementCurrency.offset >= 0 ? _fixPtr + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::TAG : return fieldTerminationType.offset >= 0 ? _fixPtr + fieldTerminationType.offset : nullptr;
     case FieldStartDate::TAG : return fieldStartDate.offset >= 0 ? _fixPtr + fieldStartDate.offset : nullptr;
     case FieldEndDate::TAG : return fieldEndDate.offset >= 0 ? _fixPtr + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::TAG : return fieldDeliveryType.offset >= 0 ? _fixPtr + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::TAG : return fieldMarginRatio.offset >= 0 ? _fixPtr + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::TAG : return fieldSettlDate.offset >= 0 ? _fixPtr + fieldSettlDate.offset : nullptr;
     case FieldQuantity::TAG : return fieldQuantity.offset >= 0 ? _fixPtr + fieldQuantity.offset : nullptr;
     case FieldQtyType::TAG : return fieldQtyType.offset >= 0 ? _fixPtr + fieldQtyType.offset : nullptr;
     case FieldCurrency::TAG : return fieldCurrency.offset >= 0 ? _fixPtr + fieldCurrency.offset : nullptr;
     case FieldNoLegs::TAG : return fieldNoLegs.offset >= 0 ? _fixPtr + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::TAG : return fieldNoUnderlyings.offset >= 0 ? _fixPtr + fieldNoUnderlyings.offset : nullptr;
     case FieldTradingSessionID::TAG : return fieldTradingSessionID.offset >= 0 ? _fixPtr + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::TAG : return fieldTradingSessionSubID.offset >= 0 ? _fixPtr + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::TAG : return fieldSettlSessID.offset >= 0 ? _fixPtr + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::TAG : return fieldSettlSessSubID.offset >= 0 ? _fixPtr + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::TAG : return fieldClearingBusinessDate.offset >= 0 ? _fixPtr + fieldClearingBusinessDate.offset : nullptr;
     case FieldResponseTransportType::TAG : return fieldResponseTransportType.offset >= 0 ? _fixPtr + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::TAG : return fieldResponseDestination.offset >= 0 ? _fixPtr + fieldResponseDestination.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageConfirmationRequest::getFieldValue( unsigned tag ) const {
   if( _fixPtr == nullptr ) return nullptr;
   switch( tag ){
     case FieldConfirmReqID::TAG : return fieldConfirmReqID.offset >= 0 ? _fixPtr + fieldConfirmReqID.offset : nullptr;
     case FieldConfirmType::TAG : return fieldConfirmType.offset >= 0 ? _fixPtr + fieldConfirmType.offset : nullptr;
     case FieldNoOrders::TAG : return fieldNoOrders.offset >= 0 ? _fixPtr + fieldNoOrders.offset : nullptr;
     case FieldAllocID::TAG : return fieldAllocID.offset >= 0 ? _fixPtr + fieldAllocID.offset : nullptr;
     case FieldSecondaryAllocID::TAG : return fieldSecondaryAllocID.offset >= 0 ? _fixPtr + fieldSecondaryAllocID.offset : nullptr;
     case FieldIndividualAllocID::TAG : return fieldIndividualAllocID.offset >= 0 ? _fixPtr + fieldIndividualAllocID.offset : nullptr;
     case FieldTransactTime::TAG : return fieldTransactTime.offset >= 0 ? _fixPtr + fieldTransactTime.offset : nullptr;
     case FieldAllocAccount::TAG : return fieldAllocAccount.offset >= 0 ? _fixPtr + fieldAllocAccount.offset : nullptr;
     case FieldAllocAcctIDSource::TAG : return fieldAllocAcctIDSource.offset >= 0 ? _fixPtr + fieldAllocAcctIDSource.offset : nullptr;
     case FieldAllocAccountType::TAG : return fieldAllocAccountType.offset >= 0 ? _fixPtr + fieldAllocAccountType.offset : nullptr;
     case FieldText::TAG : return fieldText.offset >= 0 ? _fixPtr + fieldText.offset : nullptr;
     case FieldEncodedTextLen::TAG : return fieldEncodedTextLen.offset >= 0 ? _fixPtr + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::TAG : return fieldEncodedText.offset >= 0 ? _fixPtr + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::TAG : return fieldCheckSum.offset >= 0 ? _fixPtr + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}


namespace {

const std::vector<tag_t> Header_knownFields = {
FieldBeginString::TAG,
FieldBodyLength::TAG,
FieldMsgType::TAG,
FieldSenderCompID::TAG,
FieldTargetCompID::TAG,
FieldOnBehalfOfCompID::TAG,
FieldDeliverToCompID::TAG,
FieldSecureDataLen::TAG,
FieldSecureData::TAG,
FieldMsgSeqNum::TAG,
FieldSenderSubID::TAG,
FieldSenderLocationID::TAG,
FieldTargetSubID::TAG,
FieldTargetLocationID::TAG,
FieldOnBehalfOfSubID::TAG,
FieldOnBehalfOfLocationID::TAG,
FieldDeliverToSubID::TAG,
FieldDeliverToLocationID::TAG,
FieldPossDupFlag::TAG,
FieldPossResend::TAG,
FieldSendingTime::TAG,
FieldOrigSendingTime::TAG,
FieldXmlDataLen::TAG,
FieldXmlData::TAG,
FieldMessageEncoding::TAG,
FieldLastMsgSeqNumProcessed::TAG,
FieldNoHops::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> Heartbeat_knownFields = {
FieldTestReqID::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> TestRequest_knownFields = {
FieldTestReqID::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ResendRequest_knownFields = {
FieldBeginSeqNo::TAG,
FieldEndSeqNo::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> Reject_knownFields = {
FieldRefSeqNum::TAG,
FieldRefTagID::TAG,
FieldRefMsgType::TAG,
FieldSessionRejectReason::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SequenceReset_knownFields = {
FieldGapFillFlag::TAG,
FieldNewSeqNo::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> Logout_knownFields = {
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> IOI_knownFields = {
FieldIOIID::TAG,
FieldIOITransType::TAG,
FieldIOIRefID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldSide::TAG,
FieldQtyType::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldIOIQty::TAG,
FieldCurrency::TAG,
FieldNoStipulations::TAG,
FieldNoLegs::TAG,
FieldPriceType::TAG,
FieldPrice::TAG,
FieldValidUntilTime::TAG,
FieldIOIQltyInd::TAG,
FieldIOINaturalFlag::TAG,
FieldNoIOIQualifiers::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldTransactTime::TAG,
FieldURLLink::TAG,
FieldNoRoutingIDs::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> Advertisement_knownFields = {
FieldAdvId::TAG,
FieldAdvTransType::TAG,
FieldAdvRefID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldAdvSide::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldPrice::TAG,
FieldCurrency::TAG,
FieldTradeDate::TAG,
FieldTransactTime::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldURLLink::TAG,
FieldLastMkt::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ExecutionReport_knownFields = {
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldSecondaryClOrdID::TAG,
FieldSecondaryExecID::TAG,
FieldClOrdID::TAG,
FieldOrigClOrdID::TAG,
FieldClOrdLinkID::TAG,
FieldQuoteRespID::TAG,
FieldOrdStatusReqID::TAG,
FieldMassStatusReqID::TAG,
FieldTotNumReports::TAG,
FieldLastRptRequested::TAG,
FieldNoPartyIDs::TAG,
FieldTradeOriginationDate::TAG,
FieldNoContraBrokers::TAG,
FieldListID::TAG,
FieldCrossID::TAG,
FieldOrigCrossID::TAG,
FieldCrossType::TAG,
FieldExecID::TAG,
FieldExecRefID::TAG,
FieldExecType::TAG,
FieldOrdStatus::TAG,
FieldWorkingIndicator::TAG,
FieldOrdRejReason::TAG,
FieldExecRestatementReason::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldDayBookingInst::TAG,
FieldBookingUnit::TAG,
FieldPreallocMethod::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldCashMargin::TAG,
FieldClearingFeeIndicator::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldSide::TAG,
FieldNoStipulations::TAG,
FieldQtyType::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldOrdType::TAG,
FieldPriceType::TAG,
FieldPrice::TAG,
FieldStopPx::TAG,
FieldPegOffsetValue::TAG,
FieldPegMoveType::TAG,
FieldPegOffsetType::TAG,
FieldPegLimitType::TAG,
FieldPegRoundDirection::TAG,
FieldPegScope::TAG,
FieldDiscretionInst::TAG,
FieldDiscretionOffsetValue::TAG,
FieldDiscretionMoveType::TAG,
FieldDiscretionOffsetType::TAG,
FieldDiscretionLimitType::TAG,
FieldDiscretionRoundDirection::TAG,
FieldDiscretionScope::TAG,
FieldPeggedPrice::TAG,
FieldDiscretionPrice::TAG,
FieldTargetStrategy::TAG,
FieldTargetStrategyParameters::TAG,
FieldParticipationRate::TAG,
FieldTargetStrategyPerformance::TAG,
FieldCurrency::TAG,
FieldComplianceID::TAG,
FieldSolicitedFlag::TAG,
FieldTimeInForce::TAG,
FieldEffectiveTime::TAG,
FieldExpireDate::TAG,
FieldExpireTime::TAG,
FieldExecInst::TAG,
FieldOrderCapacity::TAG,
FieldOrderRestrictions::TAG,
FieldCustOrderCapacity::TAG,
FieldLastQty::TAG,
FieldUnderlyingLastQty::TAG,
FieldLastPx::TAG,
FieldUnderlyingLastPx::TAG,
FieldLastParPx::TAG,
FieldLastSpotRate::TAG,
FieldLastForwardPoints::TAG,
FieldLastMkt::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldTimeBracket::TAG,
FieldLastCapacity::TAG,
FieldLeavesQty::TAG,
FieldCumQty::TAG,
FieldAvgPx::TAG,
FieldDayOrderQty::TAG,
FieldDayCumQty::TAG,
FieldDayAvgPx::TAG,
FieldGTBookingInst::TAG,
FieldTradeDate::TAG,
FieldTransactTime::TAG,
FieldReportToExch::TAG,
FieldCommission::TAG,
FieldCommType::TAG,
FieldCommCurrency::TAG,
FieldFundRenewWaiv::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldGrossTradeAmt::TAG,
FieldNumDaysInterest::TAG,
FieldExDate::TAG,
FieldAccruedInterestRate::TAG,
FieldAccruedInterestAmt::TAG,
FieldInterestAtMaturity::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldTradedFlatSwitch::TAG,
FieldBasisFeatureDate::TAG,
FieldBasisFeaturePrice::TAG,
FieldConcession::TAG,
FieldTotalTakedown::TAG,
FieldNetMoney::TAG,
FieldSettlCurrAmt::TAG,
FieldSettlCurrency::TAG,
FieldSettlCurrFxRate::TAG,
FieldSettlCurrFxRateCalc::TAG,
FieldHandlInst::TAG,
FieldMinQty::TAG,
FieldMaxFloor::TAG,
FieldPositionEffect::TAG,
FieldMaxShow::TAG,
FieldBookingType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldSettlDate2::TAG,
FieldOrderQty2::TAG,
FieldLastForwardPoints2::TAG,
FieldMultiLegReportingType::TAG,
FieldCancellationRights::TAG,
FieldMoneyLaunderingStatus::TAG,
FieldRegistID::TAG,
FieldDesignation::TAG,
FieldTransBkdTime::TAG,
FieldExecValuationPoint::TAG,
FieldExecPriceType::TAG,
FieldExecPriceAdjustment::TAG,
FieldPriorityIndicator::TAG,
FieldPriceImprovement::TAG,
FieldLastLiquidityInd::TAG,
FieldNoContAmts::TAG,
FieldNoLegs::TAG,
FieldCopyMsgIndicator::TAG,
FieldNoMiscFees::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> OrderCancelReject_knownFields = {
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldSecondaryClOrdID::TAG,
FieldClOrdID::TAG,
FieldClOrdLinkID::TAG,
FieldOrigClOrdID::TAG,
FieldOrdStatus::TAG,
FieldWorkingIndicator::TAG,
FieldOrigOrdModTime::TAG,
FieldListID::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldTradeOriginationDate::TAG,
FieldTradeDate::TAG,
FieldTransactTime::TAG,
FieldCxlRejResponseTo::TAG,
FieldCxlRejReason::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> Logon_knownFields = {
FieldEncryptMethod::TAG,
FieldHeartBtInt::TAG,
FieldRawDataLength::TAG,
FieldRawData::TAG,
FieldResetSeqNumFlag::TAG,
FieldNextExpectedMsgSeqNum::TAG,
FieldMaxMessageSize::TAG,
FieldNoMsgTypes::TAG,
FieldTestMessageIndicator::TAG,
FieldUsername::TAG,
FieldPassword::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> News_knownFields = {
FieldOrigTime::TAG,
FieldUrgency::TAG,
FieldHeadline::TAG,
FieldEncodedHeadlineLen::TAG,
FieldEncodedHeadline::TAG,
FieldNoRoutingIDs::TAG,
FieldNoRelatedSym::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldNoLinesOfText::TAG,
FieldURLLink::TAG,
FieldRawDataLength::TAG,
FieldRawData::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> Email_knownFields = {
FieldEmailThreadID::TAG,
FieldEmailType::TAG,
FieldOrigTime::TAG,
FieldSubject::TAG,
FieldEncodedSubjectLen::TAG,
FieldEncodedSubject::TAG,
FieldNoRoutingIDs::TAG,
FieldNoRelatedSym::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldOrderID::TAG,
FieldClOrdID::TAG,
FieldNoLinesOfText::TAG,
FieldRawDataLength::TAG,
FieldRawData::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> NewOrderSingle_knownFields = {
FieldClOrdID::TAG,
FieldSecondaryClOrdID::TAG,
FieldClOrdLinkID::TAG,
FieldNoPartyIDs::TAG,
FieldTradeOriginationDate::TAG,
FieldTradeDate::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldDayBookingInst::TAG,
FieldBookingUnit::TAG,
FieldPreallocMethod::TAG,
FieldAllocID::TAG,
FieldNoAllocs::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldCashMargin::TAG,
FieldClearingFeeIndicator::TAG,
FieldHandlInst::TAG,
FieldExecInst::TAG,
FieldMinQty::TAG,
FieldMaxFloor::TAG,
FieldExDestination::TAG,
FieldNoTradingSessions::TAG,
FieldProcessCode::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldPrevClosePx::TAG,
FieldSide::TAG,
FieldLocateReqd::TAG,
FieldTransactTime::TAG,
FieldNoStipulations::TAG,
FieldQtyType::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldOrdType::TAG,
FieldPriceType::TAG,
FieldPrice::TAG,
FieldStopPx::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldCurrency::TAG,
FieldComplianceID::TAG,
FieldSolicitedFlag::TAG,
FieldIOIID::TAG,
FieldQuoteID::TAG,
FieldTimeInForce::TAG,
FieldEffectiveTime::TAG,
FieldExpireDate::TAG,
FieldExpireTime::TAG,
FieldGTBookingInst::TAG,
FieldCommission::TAG,
FieldCommType::TAG,
FieldCommCurrency::TAG,
FieldFundRenewWaiv::TAG,
FieldOrderCapacity::TAG,
FieldOrderRestrictions::TAG,
FieldCustOrderCapacity::TAG,
FieldForexReq::TAG,
FieldSettlCurrency::TAG,
FieldBookingType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldSettlDate2::TAG,
FieldOrderQty2::TAG,
FieldPrice2::TAG,
FieldPositionEffect::TAG,
FieldCoveredOrUncovered::TAG,
FieldMaxShow::TAG,
FieldPegOffsetValue::TAG,
FieldPegMoveType::TAG,
FieldPegOffsetType::TAG,
FieldPegLimitType::TAG,
FieldPegRoundDirection::TAG,
FieldPegScope::TAG,
FieldDiscretionInst::TAG,
FieldDiscretionOffsetValue::TAG,
FieldDiscretionMoveType::TAG,
FieldDiscretionOffsetType::TAG,
FieldDiscretionLimitType::TAG,
FieldDiscretionRoundDirection::TAG,
FieldDiscretionScope::TAG,
FieldTargetStrategy::TAG,
FieldTargetStrategyParameters::TAG,
FieldParticipationRate::TAG,
FieldCancellationRights::TAG,
FieldMoneyLaunderingStatus::TAG,
FieldRegistID::TAG,
FieldDesignation::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> NewOrderList_knownFields = {
FieldListID::TAG,
FieldBidID::TAG,
FieldClientBidID::TAG,
FieldProgRptReqs::TAG,
FieldBidType::TAG,
FieldProgPeriodInterval::TAG,
FieldCancellationRights::TAG,
FieldMoneyLaunderingStatus::TAG,
FieldRegistID::TAG,
FieldListExecInstType::TAG,
FieldListExecInst::TAG,
FieldEncodedListExecInstLen::TAG,
FieldEncodedListExecInst::TAG,
FieldAllowableOneSidednessPct::TAG,
FieldAllowableOneSidednessValue::TAG,
FieldAllowableOneSidednessCurr::TAG,
FieldTotNoOrders::TAG,
FieldLastFragment::TAG,
FieldNoOrders::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> OrderCancelRequest_knownFields = {
FieldOrigClOrdID::TAG,
FieldOrderID::TAG,
FieldClOrdID::TAG,
FieldSecondaryClOrdID::TAG,
FieldClOrdLinkID::TAG,
FieldListID::TAG,
FieldOrigOrdModTime::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldNoPartyIDs::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldSide::TAG,
FieldTransactTime::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldComplianceID::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> OrderCancelReplaceRequest_knownFields = {
FieldOrderID::TAG,
FieldNoPartyIDs::TAG,
FieldTradeOriginationDate::TAG,
FieldTradeDate::TAG,
FieldOrigClOrdID::TAG,
FieldClOrdID::TAG,
FieldSecondaryClOrdID::TAG,
FieldClOrdLinkID::TAG,
FieldListID::TAG,
FieldOrigOrdModTime::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldDayBookingInst::TAG,
FieldBookingUnit::TAG,
FieldPreallocMethod::TAG,
FieldAllocID::TAG,
FieldNoAllocs::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldCashMargin::TAG,
FieldClearingFeeIndicator::TAG,
FieldHandlInst::TAG,
FieldExecInst::TAG,
FieldMinQty::TAG,
FieldMaxFloor::TAG,
FieldExDestination::TAG,
FieldNoTradingSessions::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldSide::TAG,
FieldTransactTime::TAG,
FieldQtyType::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldOrdType::TAG,
FieldPriceType::TAG,
FieldPrice::TAG,
FieldStopPx::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldPegOffsetValue::TAG,
FieldPegMoveType::TAG,
FieldPegOffsetType::TAG,
FieldPegLimitType::TAG,
FieldPegRoundDirection::TAG,
FieldPegScope::TAG,
FieldDiscretionInst::TAG,
FieldDiscretionOffsetValue::TAG,
FieldDiscretionMoveType::TAG,
FieldDiscretionOffsetType::TAG,
FieldDiscretionLimitType::TAG,
FieldDiscretionRoundDirection::TAG,
FieldDiscretionScope::TAG,
FieldTargetStrategy::TAG,
FieldTargetStrategyParameters::TAG,
FieldParticipationRate::TAG,
FieldComplianceID::TAG,
FieldSolicitedFlag::TAG,
FieldCurrency::TAG,
FieldTimeInForce::TAG,
FieldEffectiveTime::TAG,
FieldExpireDate::TAG,
FieldExpireTime::TAG,
FieldGTBookingInst::TAG,
FieldCommission::TAG,
FieldCommType::TAG,
FieldCommCurrency::TAG,
FieldFundRenewWaiv::TAG,
FieldOrderCapacity::TAG,
FieldOrderRestrictions::TAG,
FieldCustOrderCapacity::TAG,
FieldForexReq::TAG,
FieldSettlCurrency::TAG,
FieldBookingType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldSettlDate2::TAG,
FieldOrderQty2::TAG,
FieldPrice2::TAG,
FieldPositionEffect::TAG,
FieldCoveredOrUncovered::TAG,
FieldMaxShow::TAG,
FieldLocateReqd::TAG,
FieldCancellationRights::TAG,
FieldMoneyLaunderingStatus::TAG,
FieldRegistID::TAG,
FieldDesignation::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> OrderStatusRequest_knownFields = {
FieldOrderID::TAG,
FieldClOrdID::TAG,
FieldSecondaryClOrdID::TAG,
FieldClOrdLinkID::TAG,
FieldNoPartyIDs::TAG,
FieldOrdStatusReqID::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldSide::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> AllocationInstruction_knownFields = {
FieldAllocID::TAG,
FieldAllocTransType::TAG,
FieldAllocType::TAG,
FieldSecondaryAllocID::TAG,
FieldRefAllocID::TAG,
FieldAllocCancReplaceReason::TAG,
FieldAllocIntermedReqType::TAG,
FieldAllocLinkID::TAG,
FieldAllocLinkType::TAG,
FieldBookingRefID::TAG,
FieldAllocNoOrdersType::TAG,
FieldNoOrders::TAG,
FieldNoExecs::TAG,
FieldPreviouslyReported::TAG,
FieldReversalIndicator::TAG,
FieldMatchType::TAG,
FieldSide::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldLastMkt::TAG,
FieldTradeOriginationDate::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldPriceType::TAG,
FieldAvgPx::TAG,
FieldAvgParPx::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldCurrency::TAG,
FieldAvgPxPrecision::TAG,
FieldNoPartyIDs::TAG,
FieldTradeDate::TAG,
FieldTransactTime::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldBookingType::TAG,
FieldGrossTradeAmt::TAG,
FieldConcession::TAG,
FieldTotalTakedown::TAG,
FieldNetMoney::TAG,
FieldPositionEffect::TAG,
FieldAutoAcceptIndicator::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldNumDaysInterest::TAG,
FieldAccruedInterestRate::TAG,
FieldAccruedInterestAmt::TAG,
FieldTotalAccruedInterestAmt::TAG,
FieldInterestAtMaturity::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldLegalConfirm::TAG,
FieldNoStipulations::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldTotNoAllocs::TAG,
FieldLastFragment::TAG,
FieldNoAllocs::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ListCancelRequest_knownFields = {
FieldListID::TAG,
FieldTransactTime::TAG,
FieldTradeOriginationDate::TAG,
FieldTradeDate::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ListExecute_knownFields = {
FieldListID::TAG,
FieldClientBidID::TAG,
FieldBidID::TAG,
FieldTransactTime::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ListStatusRequest_knownFields = {
FieldListID::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ListStatus_knownFields = {
FieldListID::TAG,
FieldListStatusType::TAG,
FieldNoRpts::TAG,
FieldListOrderStatus::TAG,
FieldRptSeq::TAG,
FieldListStatusText::TAG,
FieldEncodedListStatusTextLen::TAG,
FieldEncodedListStatusText::TAG,
FieldTransactTime::TAG,
FieldTotNoOrders::TAG,
FieldLastFragment::TAG,
FieldNoOrders::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> AllocationInstructionAck_knownFields = {
FieldAllocID::TAG,
FieldNoPartyIDs::TAG,
FieldSecondaryAllocID::TAG,
FieldTradeDate::TAG,
FieldTransactTime::TAG,
FieldAllocStatus::TAG,
FieldAllocRejCode::TAG,
FieldAllocType::TAG,
FieldAllocIntermedReqType::TAG,
FieldMatchStatus::TAG,
FieldProduct::TAG,
FieldSecurityType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldNoAllocs::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> DontKnowTrade_knownFields = {
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldExecID::TAG,
FieldDKReason::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldSide::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldLastQty::TAG,
FieldLastPx::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> QuoteRequest_knownFields = {
FieldQuoteReqID::TAG,
FieldRFQReqID::TAG,
FieldClOrdID::TAG,
FieldOrderCapacity::TAG,
FieldNoRelatedSym::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> Quote_knownFields = {
FieldQuoteReqID::TAG,
FieldQuoteID::TAG,
FieldQuoteRespID::TAG,
FieldQuoteType::TAG,
FieldNoQuoteQualifiers::TAG,
FieldQuoteResponseLevel::TAG,
FieldNoPartyIDs::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldSide::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldSettlDate2::TAG,
FieldOrderQty2::TAG,
FieldCurrency::TAG,
FieldNoStipulations::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldNoLegs::TAG,
FieldBidPx::TAG,
FieldOfferPx::TAG,
FieldMktBidPx::TAG,
FieldMktOfferPx::TAG,
FieldMinBidSize::TAG,
FieldBidSize::TAG,
FieldMinOfferSize::TAG,
FieldOfferSize::TAG,
FieldValidUntilTime::TAG,
FieldBidSpotRate::TAG,
FieldOfferSpotRate::TAG,
FieldBidForwardPoints::TAG,
FieldOfferForwardPoints::TAG,
FieldMidPx::TAG,
FieldBidYield::TAG,
FieldMidYield::TAG,
FieldOfferYield::TAG,
FieldTransactTime::TAG,
FieldOrdType::TAG,
FieldBidForwardPoints2::TAG,
FieldOfferForwardPoints2::TAG,
FieldSettlCurrBidFxRate::TAG,
FieldSettlCurrOfferFxRate::TAG,
FieldSettlCurrFxRateCalc::TAG,
FieldCommType::TAG,
FieldCommission::TAG,
FieldCustOrderCapacity::TAG,
FieldExDestination::TAG,
FieldOrderCapacity::TAG,
FieldPriceType::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SettlementInstructions_knownFields = {
FieldSettlInstMsgID::TAG,
FieldSettlInstReqID::TAG,
FieldSettlInstMode::TAG,
FieldSettlInstReqRejCode::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldClOrdID::TAG,
FieldTransactTime::TAG,
FieldNoSettlInst::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> MarketDataRequest_knownFields = {
FieldMDReqID::TAG,
FieldSubscriptionRequestType::TAG,
FieldMarketDepth::TAG,
FieldMDUpdateType::TAG,
FieldAggregatedBook::TAG,
FieldOpenCloseSettlFlag::TAG,
FieldScope::TAG,
FieldMDImplicitDelete::TAG,
FieldNoMDEntryTypes::TAG,
FieldNoRelatedSym::TAG,
FieldNoTradingSessions::TAG,
FieldApplQueueAction::TAG,
FieldApplQueueMax::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> MarketDataSnapshotFullRefresh_knownFields = {
FieldMDReqID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldFinancialStatus::TAG,
FieldCorporateAction::TAG,
FieldNetChgPrevDay::TAG,
FieldNoMDEntries::TAG,
FieldApplQueueDepth::TAG,
FieldApplQueueResolution::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> MarketDataIncrementalRefresh_knownFields = {
FieldMDReqID::TAG,
FieldNoMDEntries::TAG,
FieldApplQueueDepth::TAG,
FieldApplQueueResolution::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> MarketDataRequestReject_knownFields = {
FieldMDReqID::TAG,
FieldMDReqRejReason::TAG,
FieldNoAltMDSource::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> QuoteCancel_knownFields = {
FieldQuoteReqID::TAG,
FieldQuoteID::TAG,
FieldQuoteCancelType::TAG,
FieldQuoteResponseLevel::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldNoQuoteEntries::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> QuoteStatusRequest_knownFields = {
FieldQuoteStatusReqID::TAG,
FieldQuoteID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSubscriptionRequestType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> MassQuoteAcknowledgement_knownFields = {
FieldQuoteReqID::TAG,
FieldQuoteID::TAG,
FieldQuoteStatus::TAG,
FieldQuoteRejectReason::TAG,
FieldQuoteResponseLevel::TAG,
FieldQuoteType::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldNoQuoteSets::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SecurityDefinitionRequest_knownFields = {
FieldSecurityReqID::TAG,
FieldSecurityRequestType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldNoUnderlyings::TAG,
FieldCurrency::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldNoLegs::TAG,
FieldExpirationCycle::TAG,
FieldSubscriptionRequestType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SecurityDefinition_knownFields = {
FieldSecurityReqID::TAG,
FieldSecurityResponseID::TAG,
FieldSecurityResponseType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldNoUnderlyings::TAG,
FieldCurrency::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldNoLegs::TAG,
FieldExpirationCycle::TAG,
FieldRoundLot::TAG,
FieldMinTradeVol::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SecurityStatusRequest_knownFields = {
FieldSecurityStatusReqID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldCurrency::TAG,
FieldSubscriptionRequestType::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SecurityStatus_knownFields = {
FieldSecurityStatusReqID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldCurrency::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldUnsolicitedIndicator::TAG,
FieldSecurityTradingStatus::TAG,
FieldFinancialStatus::TAG,
FieldCorporateAction::TAG,
FieldHaltReasonChar::TAG,
FieldInViewOfCommon::TAG,
FieldDueToRelated::TAG,
FieldBuyVolume::TAG,
FieldSellVolume::TAG,
FieldHighPx::TAG,
FieldLowPx::TAG,
FieldLastPx::TAG,
FieldTransactTime::TAG,
FieldAdjustment::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> TradingSessionStatusRequest_knownFields = {
FieldTradSesReqID::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldTradSesMethod::TAG,
FieldTradSesMode::TAG,
FieldSubscriptionRequestType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> TradingSessionStatus_knownFields = {
FieldTradSesReqID::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldTradSesMethod::TAG,
FieldTradSesMode::TAG,
FieldUnsolicitedIndicator::TAG,
FieldTradSesStatus::TAG,
FieldTradSesStatusRejReason::TAG,
FieldTradSesStartTime::TAG,
FieldTradSesOpenTime::TAG,
FieldTradSesPreCloseTime::TAG,
FieldTradSesCloseTime::TAG,
FieldTradSesEndTime::TAG,
FieldTotalVolumeTraded::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> MassQuote_knownFields = {
FieldQuoteReqID::TAG,
FieldQuoteID::TAG,
FieldQuoteType::TAG,
FieldQuoteResponseLevel::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldDefBidSize::TAG,
FieldDefOfferSize::TAG,
FieldNoQuoteSets::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> BusinessMessageReject_knownFields = {
FieldRefSeqNum::TAG,
FieldRefMsgType::TAG,
FieldBusinessRejectRefID::TAG,
FieldBusinessRejectReason::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> BidRequest_knownFields = {
FieldBidID::TAG,
FieldClientBidID::TAG,
FieldBidRequestTransType::TAG,
FieldListName::TAG,
FieldTotNoRelatedSym::TAG,
FieldBidType::TAG,
FieldNumTickets::TAG,
FieldCurrency::TAG,
FieldSideValue1::TAG,
FieldSideValue2::TAG,
FieldNoBidDescriptors::TAG,
FieldNoBidComponents::TAG,
FieldLiquidityIndType::TAG,
FieldWtAverageLiquidity::TAG,
FieldExchangeForPhysical::TAG,
FieldOutMainCntryUIndex::TAG,
FieldCrossPercent::TAG,
FieldProgRptReqs::TAG,
FieldProgPeriodInterval::TAG,
FieldIncTaxInd::TAG,
FieldForexReq::TAG,
FieldNumBidders::TAG,
FieldTradeDate::TAG,
FieldBidTradeType::TAG,
FieldBasisPxType::TAG,
FieldStrikeTime::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> BidResponse_knownFields = {
FieldBidID::TAG,
FieldClientBidID::TAG,
FieldNoBidComponents::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ListStrikePrice_knownFields = {
FieldListID::TAG,
FieldTotNoStrikes::TAG,
FieldLastFragment::TAG,
FieldNoStrikes::TAG,
FieldNoUnderlyings::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> XMLnonFIX_knownFields = {
FieldCheckSum::TAG };

const std::vector<tag_t> RegistrationInstructions_knownFields = {
FieldRegistID::TAG,
FieldRegistTransType::TAG,
FieldRegistRefID::TAG,
FieldClOrdID::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldRegistAcctType::TAG,
FieldTaxAdvantageType::TAG,
FieldOwnershipType::TAG,
FieldNoRegistDtls::TAG,
FieldNoDistribInsts::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> RegistrationInstructionsResponse_knownFields = {
FieldRegistID::TAG,
FieldRegistTransType::TAG,
FieldRegistRefID::TAG,
FieldClOrdID::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldRegistStatus::TAG,
FieldRegistRejReasonCode::TAG,
FieldRegistRejReasonText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> OrderMassCancelRequest_knownFields = {
FieldClOrdID::TAG,
FieldSecondaryClOrdID::TAG,
FieldMassCancelRequestType::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldUnderlyingSymbol::TAG,
FieldUnderlyingSymbolSfx::TAG,
FieldUnderlyingSecurityID::TAG,
FieldUnderlyingSecurityIDSource::TAG,
FieldNoUnderlyingSecurityAltID::TAG,
FieldUnderlyingProduct::TAG,
FieldUnderlyingCFICode::TAG,
FieldUnderlyingSecurityType::TAG,
FieldUnderlyingSecuritySubType::TAG,
FieldUnderlyingMaturityMonthYear::TAG,
FieldUnderlyingMaturityDate::TAG,
FieldUnderlyingPutOrCall::TAG,
FieldUnderlyingCouponPaymentDate::TAG,
FieldUnderlyingIssueDate::TAG,
FieldUnderlyingRepoCollateralSecurityType::TAG,
FieldUnderlyingRepurchaseTerm::TAG,
FieldUnderlyingRepurchaseRate::TAG,
FieldUnderlyingFactor::TAG,
FieldUnderlyingCreditRating::TAG,
FieldUnderlyingInstrRegistry::TAG,
FieldUnderlyingCountryOfIssue::TAG,
FieldUnderlyingStateOrProvinceOfIssue::TAG,
FieldUnderlyingLocaleOfIssue::TAG,
FieldUnderlyingRedemptionDate::TAG,
FieldUnderlyingStrikePrice::TAG,
FieldUnderlyingStrikeCurrency::TAG,
FieldUnderlyingOptAttribute::TAG,
FieldUnderlyingContractMultiplier::TAG,
FieldUnderlyingCouponRate::TAG,
FieldUnderlyingSecurityExchange::TAG,
FieldUnderlyingIssuer::TAG,
FieldEncodedUnderlyingIssuerLen::TAG,
FieldEncodedUnderlyingIssuer::TAG,
FieldUnderlyingSecurityDesc::TAG,
FieldEncodedUnderlyingSecurityDescLen::TAG,
FieldEncodedUnderlyingSecurityDesc::TAG,
FieldUnderlyingCPProgram::TAG,
FieldUnderlyingCPRegType::TAG,
FieldUnderlyingCurrency::TAG,
FieldUnderlyingQty::TAG,
FieldUnderlyingPx::TAG,
FieldUnderlyingDirtyPrice::TAG,
FieldUnderlyingEndPrice::TAG,
FieldUnderlyingStartValue::TAG,
FieldUnderlyingCurrentValue::TAG,
FieldUnderlyingEndValue::TAG,
FieldNoUnderlyingStips::TAG,
FieldSide::TAG,
FieldTransactTime::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> OrderMassCancelReport_knownFields = {
FieldClOrdID::TAG,
FieldSecondaryClOrdID::TAG,
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldMassCancelRequestType::TAG,
FieldMassCancelResponse::TAG,
FieldMassCancelRejectReason::TAG,
FieldTotalAffectedOrders::TAG,
FieldNoAffectedOrders::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldUnderlyingSymbol::TAG,
FieldUnderlyingSymbolSfx::TAG,
FieldUnderlyingSecurityID::TAG,
FieldUnderlyingSecurityIDSource::TAG,
FieldNoUnderlyingSecurityAltID::TAG,
FieldUnderlyingProduct::TAG,
FieldUnderlyingCFICode::TAG,
FieldUnderlyingSecurityType::TAG,
FieldUnderlyingSecuritySubType::TAG,
FieldUnderlyingMaturityMonthYear::TAG,
FieldUnderlyingMaturityDate::TAG,
FieldUnderlyingPutOrCall::TAG,
FieldUnderlyingCouponPaymentDate::TAG,
FieldUnderlyingIssueDate::TAG,
FieldUnderlyingRepoCollateralSecurityType::TAG,
FieldUnderlyingRepurchaseTerm::TAG,
FieldUnderlyingRepurchaseRate::TAG,
FieldUnderlyingFactor::TAG,
FieldUnderlyingCreditRating::TAG,
FieldUnderlyingInstrRegistry::TAG,
FieldUnderlyingCountryOfIssue::TAG,
FieldUnderlyingStateOrProvinceOfIssue::TAG,
FieldUnderlyingLocaleOfIssue::TAG,
FieldUnderlyingRedemptionDate::TAG,
FieldUnderlyingStrikePrice::TAG,
FieldUnderlyingStrikeCurrency::TAG,
FieldUnderlyingOptAttribute::TAG,
FieldUnderlyingContractMultiplier::TAG,
FieldUnderlyingCouponRate::TAG,
FieldUnderlyingSecurityExchange::TAG,
FieldUnderlyingIssuer::TAG,
FieldEncodedUnderlyingIssuerLen::TAG,
FieldEncodedUnderlyingIssuer::TAG,
FieldUnderlyingSecurityDesc::TAG,
FieldEncodedUnderlyingSecurityDescLen::TAG,
FieldEncodedUnderlyingSecurityDesc::TAG,
FieldUnderlyingCPProgram::TAG,
FieldUnderlyingCPRegType::TAG,
FieldUnderlyingCurrency::TAG,
FieldUnderlyingQty::TAG,
FieldUnderlyingPx::TAG,
FieldUnderlyingDirtyPrice::TAG,
FieldUnderlyingEndPrice::TAG,
FieldUnderlyingStartValue::TAG,
FieldUnderlyingCurrentValue::TAG,
FieldUnderlyingEndValue::TAG,
FieldNoUnderlyingStips::TAG,
FieldSide::TAG,
FieldTransactTime::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> NewOrderCross_knownFields = {
FieldCrossID::TAG,
FieldCrossType::TAG,
FieldCrossPrioritization::TAG,
FieldNoSides::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldHandlInst::TAG,
FieldExecInst::TAG,
FieldMinQty::TAG,
FieldMaxFloor::TAG,
FieldExDestination::TAG,
FieldNoTradingSessions::TAG,
FieldProcessCode::TAG,
FieldPrevClosePx::TAG,
FieldLocateReqd::TAG,
FieldTransactTime::TAG,
FieldNoStipulations::TAG,
FieldOrdType::TAG,
FieldPriceType::TAG,
FieldPrice::TAG,
FieldStopPx::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldCurrency::TAG,
FieldComplianceID::TAG,
FieldIOIID::TAG,
FieldQuoteID::TAG,
FieldTimeInForce::TAG,
FieldEffectiveTime::TAG,
FieldExpireDate::TAG,
FieldExpireTime::TAG,
FieldGTBookingInst::TAG,
FieldMaxShow::TAG,
FieldPegOffsetValue::TAG,
FieldPegMoveType::TAG,
FieldPegOffsetType::TAG,
FieldPegLimitType::TAG,
FieldPegRoundDirection::TAG,
FieldPegScope::TAG,
FieldDiscretionInst::TAG,
FieldDiscretionOffsetValue::TAG,
FieldDiscretionMoveType::TAG,
FieldDiscretionOffsetType::TAG,
FieldDiscretionLimitType::TAG,
FieldDiscretionRoundDirection::TAG,
FieldDiscretionScope::TAG,
FieldTargetStrategy::TAG,
FieldTargetStrategyParameters::TAG,
FieldParticipationRate::TAG,
FieldCancellationRights::TAG,
FieldMoneyLaunderingStatus::TAG,
FieldRegistID::TAG,
FieldDesignation::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> CrossOrderCancelReplaceRequest_knownFields = {
FieldOrderID::TAG,
FieldCrossID::TAG,
FieldOrigCrossID::TAG,
FieldCrossType::TAG,
FieldCrossPrioritization::TAG,
FieldNoSides::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldHandlInst::TAG,
FieldExecInst::TAG,
FieldMinQty::TAG,
FieldMaxFloor::TAG,
FieldExDestination::TAG,
FieldNoTradingSessions::TAG,
FieldProcessCode::TAG,
FieldPrevClosePx::TAG,
FieldLocateReqd::TAG,
FieldTransactTime::TAG,
FieldNoStipulations::TAG,
FieldOrdType::TAG,
FieldPriceType::TAG,
FieldPrice::TAG,
FieldStopPx::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldCurrency::TAG,
FieldComplianceID::TAG,
FieldIOIID::TAG,
FieldQuoteID::TAG,
FieldTimeInForce::TAG,
FieldEffectiveTime::TAG,
FieldExpireDate::TAG,
FieldExpireTime::TAG,
FieldGTBookingInst::TAG,
FieldMaxShow::TAG,
FieldPegOffsetValue::TAG,
FieldPegMoveType::TAG,
FieldPegOffsetType::TAG,
FieldPegLimitType::TAG,
FieldPegRoundDirection::TAG,
FieldPegScope::TAG,
FieldDiscretionInst::TAG,
FieldDiscretionOffsetValue::TAG,
FieldDiscretionMoveType::TAG,
FieldDiscretionOffsetType::TAG,
FieldDiscretionLimitType::TAG,
FieldDiscretionRoundDirection::TAG,
FieldDiscretionScope::TAG,
FieldTargetStrategy::TAG,
FieldTargetStrategyParameters::TAG,
FieldParticipationRate::TAG,
FieldCancellationRights::TAG,
FieldMoneyLaunderingStatus::TAG,
FieldRegistID::TAG,
FieldDesignation::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> CrossOrderCancelRequest_knownFields = {
FieldOrderID::TAG,
FieldCrossID::TAG,
FieldOrigCrossID::TAG,
FieldCrossType::TAG,
FieldCrossPrioritization::TAG,
FieldNoSides::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldTransactTime::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SecurityTypeRequest_knownFields = {
FieldSecurityReqID::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldProduct::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SecurityTypes_knownFields = {
FieldSecurityReqID::TAG,
FieldSecurityResponseID::TAG,
FieldSecurityResponseType::TAG,
FieldTotNoSecurityTypes::TAG,
FieldLastFragment::TAG,
FieldNoSecurityTypes::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSubscriptionRequestType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SecurityListRequest_knownFields = {
FieldSecurityReqID::TAG,
FieldSecurityListRequestType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldCurrency::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSubscriptionRequestType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SecurityList_knownFields = {
FieldSecurityReqID::TAG,
FieldSecurityResponseID::TAG,
FieldSecurityRequestResult::TAG,
FieldTotNoRelatedSym::TAG,
FieldLastFragment::TAG,
FieldNoRelatedSym::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> DerivativeSecurityListRequest_knownFields = {
FieldSecurityReqID::TAG,
FieldSecurityListRequestType::TAG,
FieldUnderlyingSymbol::TAG,
FieldUnderlyingSymbolSfx::TAG,
FieldUnderlyingSecurityID::TAG,
FieldUnderlyingSecurityIDSource::TAG,
FieldNoUnderlyingSecurityAltID::TAG,
FieldUnderlyingProduct::TAG,
FieldUnderlyingCFICode::TAG,
FieldUnderlyingSecurityType::TAG,
FieldUnderlyingSecuritySubType::TAG,
FieldUnderlyingMaturityMonthYear::TAG,
FieldUnderlyingMaturityDate::TAG,
FieldUnderlyingPutOrCall::TAG,
FieldUnderlyingCouponPaymentDate::TAG,
FieldUnderlyingIssueDate::TAG,
FieldUnderlyingRepoCollateralSecurityType::TAG,
FieldUnderlyingRepurchaseTerm::TAG,
FieldUnderlyingRepurchaseRate::TAG,
FieldUnderlyingFactor::TAG,
FieldUnderlyingCreditRating::TAG,
FieldUnderlyingInstrRegistry::TAG,
FieldUnderlyingCountryOfIssue::TAG,
FieldUnderlyingStateOrProvinceOfIssue::TAG,
FieldUnderlyingLocaleOfIssue::TAG,
FieldUnderlyingRedemptionDate::TAG,
FieldUnderlyingStrikePrice::TAG,
FieldUnderlyingStrikeCurrency::TAG,
FieldUnderlyingOptAttribute::TAG,
FieldUnderlyingContractMultiplier::TAG,
FieldUnderlyingCouponRate::TAG,
FieldUnderlyingSecurityExchange::TAG,
FieldUnderlyingIssuer::TAG,
FieldEncodedUnderlyingIssuerLen::TAG,
FieldEncodedUnderlyingIssuer::TAG,
FieldUnderlyingSecurityDesc::TAG,
FieldEncodedUnderlyingSecurityDescLen::TAG,
FieldEncodedUnderlyingSecurityDesc::TAG,
FieldUnderlyingCPProgram::TAG,
FieldUnderlyingCPRegType::TAG,
FieldUnderlyingCurrency::TAG,
FieldUnderlyingQty::TAG,
FieldUnderlyingPx::TAG,
FieldUnderlyingDirtyPrice::TAG,
FieldUnderlyingEndPrice::TAG,
FieldUnderlyingStartValue::TAG,
FieldUnderlyingCurrentValue::TAG,
FieldUnderlyingEndValue::TAG,
FieldNoUnderlyingStips::TAG,
FieldSecuritySubType::TAG,
FieldCurrency::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSubscriptionRequestType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> DerivativeSecurityList_knownFields = {
FieldSecurityReqID::TAG,
FieldSecurityResponseID::TAG,
FieldSecurityRequestResult::TAG,
FieldUnderlyingSymbol::TAG,
FieldUnderlyingSymbolSfx::TAG,
FieldUnderlyingSecurityID::TAG,
FieldUnderlyingSecurityIDSource::TAG,
FieldNoUnderlyingSecurityAltID::TAG,
FieldUnderlyingProduct::TAG,
FieldUnderlyingCFICode::TAG,
FieldUnderlyingSecurityType::TAG,
FieldUnderlyingSecuritySubType::TAG,
FieldUnderlyingMaturityMonthYear::TAG,
FieldUnderlyingMaturityDate::TAG,
FieldUnderlyingPutOrCall::TAG,
FieldUnderlyingCouponPaymentDate::TAG,
FieldUnderlyingIssueDate::TAG,
FieldUnderlyingRepoCollateralSecurityType::TAG,
FieldUnderlyingRepurchaseTerm::TAG,
FieldUnderlyingRepurchaseRate::TAG,
FieldUnderlyingFactor::TAG,
FieldUnderlyingCreditRating::TAG,
FieldUnderlyingInstrRegistry::TAG,
FieldUnderlyingCountryOfIssue::TAG,
FieldUnderlyingStateOrProvinceOfIssue::TAG,
FieldUnderlyingLocaleOfIssue::TAG,
FieldUnderlyingRedemptionDate::TAG,
FieldUnderlyingStrikePrice::TAG,
FieldUnderlyingStrikeCurrency::TAG,
FieldUnderlyingOptAttribute::TAG,
FieldUnderlyingContractMultiplier::TAG,
FieldUnderlyingCouponRate::TAG,
FieldUnderlyingSecurityExchange::TAG,
FieldUnderlyingIssuer::TAG,
FieldEncodedUnderlyingIssuerLen::TAG,
FieldEncodedUnderlyingIssuer::TAG,
FieldUnderlyingSecurityDesc::TAG,
FieldEncodedUnderlyingSecurityDescLen::TAG,
FieldEncodedUnderlyingSecurityDesc::TAG,
FieldUnderlyingCPProgram::TAG,
FieldUnderlyingCPRegType::TAG,
FieldUnderlyingCurrency::TAG,
FieldUnderlyingQty::TAG,
FieldUnderlyingPx::TAG,
FieldUnderlyingDirtyPrice::TAG,
FieldUnderlyingEndPrice::TAG,
FieldUnderlyingStartValue::TAG,
FieldUnderlyingCurrentValue::TAG,
FieldUnderlyingEndValue::TAG,
FieldNoUnderlyingStips::TAG,
FieldTotNoRelatedSym::TAG,
FieldLastFragment::TAG,
FieldNoRelatedSym::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> NewOrderMultileg_knownFields = {
FieldClOrdID::TAG,
FieldSecondaryClOrdID::TAG,
FieldClOrdLinkID::TAG,
FieldNoPartyIDs::TAG,
FieldTradeOriginationDate::TAG,
FieldTradeDate::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldDayBookingInst::TAG,
FieldBookingUnit::TAG,
FieldPreallocMethod::TAG,
FieldAllocID::TAG,
FieldNoAllocs::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldCashMargin::TAG,
FieldClearingFeeIndicator::TAG,
FieldHandlInst::TAG,
FieldExecInst::TAG,
FieldMinQty::TAG,
FieldMaxFloor::TAG,
FieldExDestination::TAG,
FieldNoTradingSessions::TAG,
FieldProcessCode::TAG,
FieldSide::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoUnderlyings::TAG,
FieldPrevClosePx::TAG,
FieldNoLegs::TAG,
FieldLocateReqd::TAG,
FieldTransactTime::TAG,
FieldQtyType::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldOrdType::TAG,
FieldPriceType::TAG,
FieldPrice::TAG,
FieldStopPx::TAG,
FieldCurrency::TAG,
FieldComplianceID::TAG,
FieldSolicitedFlag::TAG,
FieldIOIID::TAG,
FieldQuoteID::TAG,
FieldTimeInForce::TAG,
FieldEffectiveTime::TAG,
FieldExpireDate::TAG,
FieldExpireTime::TAG,
FieldGTBookingInst::TAG,
FieldCommission::TAG,
FieldCommType::TAG,
FieldCommCurrency::TAG,
FieldFundRenewWaiv::TAG,
FieldOrderCapacity::TAG,
FieldOrderRestrictions::TAG,
FieldCustOrderCapacity::TAG,
FieldForexReq::TAG,
FieldSettlCurrency::TAG,
FieldBookingType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldPositionEffect::TAG,
FieldCoveredOrUncovered::TAG,
FieldMaxShow::TAG,
FieldPegOffsetValue::TAG,
FieldPegMoveType::TAG,
FieldPegOffsetType::TAG,
FieldPegLimitType::TAG,
FieldPegRoundDirection::TAG,
FieldPegScope::TAG,
FieldDiscretionInst::TAG,
FieldDiscretionOffsetValue::TAG,
FieldDiscretionMoveType::TAG,
FieldDiscretionOffsetType::TAG,
FieldDiscretionLimitType::TAG,
FieldDiscretionRoundDirection::TAG,
FieldDiscretionScope::TAG,
FieldTargetStrategy::TAG,
FieldTargetStrategyParameters::TAG,
FieldParticipationRate::TAG,
FieldCancellationRights::TAG,
FieldMoneyLaunderingStatus::TAG,
FieldRegistID::TAG,
FieldDesignation::TAG,
FieldMultiLegRptTypeReq::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> MultilegOrderCancelReplace_knownFields = {
FieldOrderID::TAG,
FieldOrigClOrdID::TAG,
FieldClOrdID::TAG,
FieldSecondaryClOrdID::TAG,
FieldClOrdLinkID::TAG,
FieldOrigOrdModTime::TAG,
FieldNoPartyIDs::TAG,
FieldTradeOriginationDate::TAG,
FieldTradeDate::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldDayBookingInst::TAG,
FieldBookingUnit::TAG,
FieldPreallocMethod::TAG,
FieldAllocID::TAG,
FieldNoAllocs::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldCashMargin::TAG,
FieldClearingFeeIndicator::TAG,
FieldHandlInst::TAG,
FieldExecInst::TAG,
FieldMinQty::TAG,
FieldMaxFloor::TAG,
FieldExDestination::TAG,
FieldNoTradingSessions::TAG,
FieldProcessCode::TAG,
FieldSide::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoUnderlyings::TAG,
FieldPrevClosePx::TAG,
FieldNoLegs::TAG,
FieldLocateReqd::TAG,
FieldTransactTime::TAG,
FieldQtyType::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldOrdType::TAG,
FieldPriceType::TAG,
FieldPrice::TAG,
FieldStopPx::TAG,
FieldCurrency::TAG,
FieldComplianceID::TAG,
FieldSolicitedFlag::TAG,
FieldIOIID::TAG,
FieldQuoteID::TAG,
FieldTimeInForce::TAG,
FieldEffectiveTime::TAG,
FieldExpireDate::TAG,
FieldExpireTime::TAG,
FieldGTBookingInst::TAG,
FieldCommission::TAG,
FieldCommType::TAG,
FieldCommCurrency::TAG,
FieldFundRenewWaiv::TAG,
FieldOrderCapacity::TAG,
FieldOrderRestrictions::TAG,
FieldCustOrderCapacity::TAG,
FieldForexReq::TAG,
FieldSettlCurrency::TAG,
FieldBookingType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldPositionEffect::TAG,
FieldCoveredOrUncovered::TAG,
FieldMaxShow::TAG,
FieldPegOffsetValue::TAG,
FieldPegMoveType::TAG,
FieldPegOffsetType::TAG,
FieldPegLimitType::TAG,
FieldPegRoundDirection::TAG,
FieldPegScope::TAG,
FieldDiscretionInst::TAG,
FieldDiscretionOffsetValue::TAG,
FieldDiscretionMoveType::TAG,
FieldDiscretionOffsetType::TAG,
FieldDiscretionLimitType::TAG,
FieldDiscretionRoundDirection::TAG,
FieldDiscretionScope::TAG,
FieldTargetStrategy::TAG,
FieldTargetStrategyParameters::TAG,
FieldParticipationRate::TAG,
FieldCancellationRights::TAG,
FieldMoneyLaunderingStatus::TAG,
FieldRegistID::TAG,
FieldDesignation::TAG,
FieldMultiLegRptTypeReq::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> TradeCaptureReportRequest_knownFields = {
FieldTradeRequestID::TAG,
FieldTradeRequestType::TAG,
FieldSubscriptionRequestType::TAG,
FieldTradeReportID::TAG,
FieldSecondaryTradeReportID::TAG,
FieldExecID::TAG,
FieldExecType::TAG,
FieldOrderID::TAG,
FieldClOrdID::TAG,
FieldMatchStatus::TAG,
FieldTrdType::TAG,
FieldTrdSubType::TAG,
FieldTransferReason::TAG,
FieldSecondaryTrdType::TAG,
FieldTradeLinkID::TAG,
FieldTrdMatchID::TAG,
FieldNoPartyIDs::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldNoDates::TAG,
FieldClearingBusinessDate::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldTimeBracket::TAG,
FieldSide::TAG,
FieldMultiLegReportingType::TAG,
FieldTradeInputSource::TAG,
FieldTradeInputDevice::TAG,
FieldResponseTransportType::TAG,
FieldResponseDestination::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> TradeCaptureReport_knownFields = {
FieldTradeReportID::TAG,
FieldTradeReportTransType::TAG,
FieldTradeReportType::TAG,
FieldTradeRequestID::TAG,
FieldTrdType::TAG,
FieldTrdSubType::TAG,
FieldSecondaryTrdType::TAG,
FieldTransferReason::TAG,
FieldExecType::TAG,
FieldTotNumTradeReports::TAG,
FieldLastRptRequested::TAG,
FieldUnsolicitedIndicator::TAG,
FieldSubscriptionRequestType::TAG,
FieldTradeReportRefID::TAG,
FieldSecondaryTradeReportRefID::TAG,
FieldSecondaryTradeReportID::TAG,
FieldTradeLinkID::TAG,
FieldTrdMatchID::TAG,
FieldExecID::TAG,
FieldOrdStatus::TAG,
FieldSecondaryExecID::TAG,
FieldExecRestatementReason::TAG,
FieldPreviouslyReported::TAG,
FieldPriceType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldQtyType::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldNoUnderlyings::TAG,
FieldUnderlyingTradingSessionID::TAG,
FieldUnderlyingTradingSessionSubID::TAG,
FieldLastQty::TAG,
FieldLastPx::TAG,
FieldLastParPx::TAG,
FieldLastSpotRate::TAG,
FieldLastForwardPoints::TAG,
FieldLastMkt::TAG,
FieldTradeDate::TAG,
FieldClearingBusinessDate::TAG,
FieldAvgPx::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldAvgPxIndicator::TAG,
FieldNoPosAmt::TAG,
FieldMultiLegReportingType::TAG,
FieldTradeLegRefID::TAG,
FieldNoLegs::TAG,
FieldTransactTime::TAG,
FieldNoTrdRegTimestamps::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldMatchStatus::TAG,
FieldMatchType::TAG,
FieldNoSides::TAG,
FieldCopyMsgIndicator::TAG,
FieldPublishTrdIndicator::TAG,
FieldShortSaleReason::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> OrderMassStatusRequest_knownFields = {
FieldMassStatusReqID::TAG,
FieldMassStatusReqType::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldUnderlyingSymbol::TAG,
FieldUnderlyingSymbolSfx::TAG,
FieldUnderlyingSecurityID::TAG,
FieldUnderlyingSecurityIDSource::TAG,
FieldNoUnderlyingSecurityAltID::TAG,
FieldUnderlyingProduct::TAG,
FieldUnderlyingCFICode::TAG,
FieldUnderlyingSecurityType::TAG,
FieldUnderlyingSecuritySubType::TAG,
FieldUnderlyingMaturityMonthYear::TAG,
FieldUnderlyingMaturityDate::TAG,
FieldUnderlyingPutOrCall::TAG,
FieldUnderlyingCouponPaymentDate::TAG,
FieldUnderlyingIssueDate::TAG,
FieldUnderlyingRepoCollateralSecurityType::TAG,
FieldUnderlyingRepurchaseTerm::TAG,
FieldUnderlyingRepurchaseRate::TAG,
FieldUnderlyingFactor::TAG,
FieldUnderlyingCreditRating::TAG,
FieldUnderlyingInstrRegistry::TAG,
FieldUnderlyingCountryOfIssue::TAG,
FieldUnderlyingStateOrProvinceOfIssue::TAG,
FieldUnderlyingLocaleOfIssue::TAG,
FieldUnderlyingRedemptionDate::TAG,
FieldUnderlyingStrikePrice::TAG,
FieldUnderlyingStrikeCurrency::TAG,
FieldUnderlyingOptAttribute::TAG,
FieldUnderlyingContractMultiplier::TAG,
FieldUnderlyingCouponRate::TAG,
FieldUnderlyingSecurityExchange::TAG,
FieldUnderlyingIssuer::TAG,
FieldEncodedUnderlyingIssuerLen::TAG,
FieldEncodedUnderlyingIssuer::TAG,
FieldUnderlyingSecurityDesc::TAG,
FieldEncodedUnderlyingSecurityDescLen::TAG,
FieldEncodedUnderlyingSecurityDesc::TAG,
FieldUnderlyingCPProgram::TAG,
FieldUnderlyingCPRegType::TAG,
FieldUnderlyingCurrency::TAG,
FieldUnderlyingQty::TAG,
FieldUnderlyingPx::TAG,
FieldUnderlyingDirtyPrice::TAG,
FieldUnderlyingEndPrice::TAG,
FieldUnderlyingStartValue::TAG,
FieldUnderlyingCurrentValue::TAG,
FieldUnderlyingEndValue::TAG,
FieldNoUnderlyingStips::TAG,
FieldSide::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> QuoteRequestReject_knownFields = {
FieldQuoteReqID::TAG,
FieldRFQReqID::TAG,
FieldQuoteRequestRejectReason::TAG,
FieldNoRelatedSym::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> RFQRequest_knownFields = {
FieldRFQReqID::TAG,
FieldNoRelatedSym::TAG,
FieldSubscriptionRequestType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> QuoteStatusReport_knownFields = {
FieldQuoteStatusReqID::TAG,
FieldQuoteReqID::TAG,
FieldQuoteID::TAG,
FieldQuoteRespID::TAG,
FieldQuoteType::TAG,
FieldNoPartyIDs::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldSide::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldSettlDate2::TAG,
FieldOrderQty2::TAG,
FieldCurrency::TAG,
FieldNoStipulations::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldNoLegs::TAG,
FieldNoQuoteQualifiers::TAG,
FieldExpireTime::TAG,
FieldPrice::TAG,
FieldPriceType::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldBidPx::TAG,
FieldOfferPx::TAG,
FieldMktBidPx::TAG,
FieldMktOfferPx::TAG,
FieldMinBidSize::TAG,
FieldBidSize::TAG,
FieldMinOfferSize::TAG,
FieldOfferSize::TAG,
FieldValidUntilTime::TAG,
FieldBidSpotRate::TAG,
FieldOfferSpotRate::TAG,
FieldBidForwardPoints::TAG,
FieldOfferForwardPoints::TAG,
FieldMidPx::TAG,
FieldBidYield::TAG,
FieldMidYield::TAG,
FieldOfferYield::TAG,
FieldTransactTime::TAG,
FieldOrdType::TAG,
FieldBidForwardPoints2::TAG,
FieldOfferForwardPoints2::TAG,
FieldSettlCurrBidFxRate::TAG,
FieldSettlCurrOfferFxRate::TAG,
FieldSettlCurrFxRateCalc::TAG,
FieldCommType::TAG,
FieldCommission::TAG,
FieldCustOrderCapacity::TAG,
FieldExDestination::TAG,
FieldQuoteStatus::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> QuoteResponse_knownFields = {
FieldQuoteRespID::TAG,
FieldQuoteID::TAG,
FieldQuoteRespType::TAG,
FieldClOrdID::TAG,
FieldOrderCapacity::TAG,
FieldIOIID::TAG,
FieldQuoteType::TAG,
FieldNoQuoteQualifiers::TAG,
FieldNoPartyIDs::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldSide::TAG,
FieldOrderQty::TAG,
FieldCashOrderQty::TAG,
FieldOrderPercent::TAG,
FieldRoundingDirection::TAG,
FieldRoundingModulus::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldSettlDate2::TAG,
FieldOrderQty2::TAG,
FieldCurrency::TAG,
FieldNoStipulations::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldNoLegs::TAG,
FieldBidPx::TAG,
FieldOfferPx::TAG,
FieldMktBidPx::TAG,
FieldMktOfferPx::TAG,
FieldMinBidSize::TAG,
FieldBidSize::TAG,
FieldMinOfferSize::TAG,
FieldOfferSize::TAG,
FieldValidUntilTime::TAG,
FieldBidSpotRate::TAG,
FieldOfferSpotRate::TAG,
FieldBidForwardPoints::TAG,
FieldOfferForwardPoints::TAG,
FieldMidPx::TAG,
FieldBidYield::TAG,
FieldMidYield::TAG,
FieldOfferYield::TAG,
FieldTransactTime::TAG,
FieldOrdType::TAG,
FieldBidForwardPoints2::TAG,
FieldOfferForwardPoints2::TAG,
FieldSettlCurrBidFxRate::TAG,
FieldSettlCurrOfferFxRate::TAG,
FieldSettlCurrFxRateCalc::TAG,
FieldCommission::TAG,
FieldCommType::TAG,
FieldCustOrderCapacity::TAG,
FieldExDestination::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldPrice::TAG,
FieldPriceType::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> Confirmation_knownFields = {
FieldConfirmID::TAG,
FieldConfirmRefID::TAG,
FieldConfirmReqID::TAG,
FieldConfirmTransType::TAG,
FieldConfirmType::TAG,
FieldCopyMsgIndicator::TAG,
FieldLegalConfirm::TAG,
FieldConfirmStatus::TAG,
FieldNoPartyIDs::TAG,
FieldNoOrders::TAG,
FieldAllocID::TAG,
FieldSecondaryAllocID::TAG,
FieldIndividualAllocID::TAG,
FieldTransactTime::TAG,
FieldTradeDate::TAG,
FieldNoTrdRegTimestamps::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldAllocQty::TAG,
FieldQtyType::TAG,
FieldSide::TAG,
FieldCurrency::TAG,
FieldLastMkt::TAG,
FieldNoCapacities::TAG,
FieldAllocAccount::TAG,
FieldAllocAcctIDSource::TAG,
FieldAllocAccountType::TAG,
FieldAvgPx::TAG,
FieldAvgPxPrecision::TAG,
FieldPriceType::TAG,
FieldAvgParPx::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldReportedPx::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldProcessCode::TAG,
FieldGrossTradeAmt::TAG,
FieldNumDaysInterest::TAG,
FieldExDate::TAG,
FieldAccruedInterestRate::TAG,
FieldAccruedInterestAmt::TAG,
FieldInterestAtMaturity::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldConcession::TAG,
FieldTotalTakedown::TAG,
FieldNetMoney::TAG,
FieldMaturityNetMoney::TAG,
FieldSettlCurrAmt::TAG,
FieldSettlCurrency::TAG,
FieldSettlCurrFxRate::TAG,
FieldSettlCurrFxRateCalc::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldSettlDeliveryType::TAG,
FieldStandInstDbType::TAG,
FieldStandInstDbName::TAG,
FieldStandInstDbID::TAG,
FieldNoDlvyInst::TAG,
FieldCommission::TAG,
FieldCommType::TAG,
FieldCommCurrency::TAG,
FieldFundRenewWaiv::TAG,
FieldSharedCommission::TAG,
FieldNoStipulations::TAG,
FieldNoMiscFees::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> PositionMaintenanceRequest_knownFields = {
FieldPosReqID::TAG,
FieldPosTransType::TAG,
FieldPosMaintAction::TAG,
FieldOrigPosReqRefID::TAG,
FieldPosMaintRptRefID::TAG,
FieldClearingBusinessDate::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldNoTradingSessions::TAG,
FieldTransactTime::TAG,
FieldNoPositions::TAG,
FieldAdjustmentType::TAG,
FieldContraryInstructionIndicator::TAG,
FieldPriorSpreadIndicator::TAG,
FieldThresholdAmount::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> PositionMaintenanceReport_knownFields = {
FieldPosMaintRptID::TAG,
FieldPosTransType::TAG,
FieldPosReqID::TAG,
FieldPosMaintAction::TAG,
FieldOrigPosReqRefID::TAG,
FieldPosMaintStatus::TAG,
FieldPosMaintResult::TAG,
FieldClearingBusinessDate::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldNoTradingSessions::TAG,
FieldTransactTime::TAG,
FieldNoPositions::TAG,
FieldNoPosAmt::TAG,
FieldAdjustmentType::TAG,
FieldThresholdAmount::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> RequestForPositions_knownFields = {
FieldPosReqID::TAG,
FieldPosReqType::TAG,
FieldMatchStatus::TAG,
FieldSubscriptionRequestType::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldClearingBusinessDate::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldNoTradingSessions::TAG,
FieldTransactTime::TAG,
FieldResponseTransportType::TAG,
FieldResponseDestination::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> RequestForPositionsAck_knownFields = {
FieldPosMaintRptID::TAG,
FieldPosReqID::TAG,
FieldTotalNumPosReports::TAG,
FieldUnsolicitedIndicator::TAG,
FieldPosReqResult::TAG,
FieldPosReqStatus::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldResponseTransportType::TAG,
FieldResponseDestination::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> PositionReport_knownFields = {
FieldPosMaintRptID::TAG,
FieldPosReqID::TAG,
FieldPosReqType::TAG,
FieldSubscriptionRequestType::TAG,
FieldTotalNumPosReports::TAG,
FieldUnsolicitedIndicator::TAG,
FieldPosReqResult::TAG,
FieldClearingBusinessDate::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldCurrency::TAG,
FieldSettlPrice::TAG,
FieldSettlPriceType::TAG,
FieldPriorSettlPrice::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldNoPositions::TAG,
FieldNoPosAmt::TAG,
FieldRegistStatus::TAG,
FieldDeliveryDate::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> TradeCaptureReportRequestAck_knownFields = {
FieldTradeRequestID::TAG,
FieldTradeRequestType::TAG,
FieldSubscriptionRequestType::TAG,
FieldTotNumTradeReports::TAG,
FieldTradeRequestResult::TAG,
FieldTradeRequestStatus::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldMultiLegReportingType::TAG,
FieldResponseTransportType::TAG,
FieldResponseDestination::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> TradeCaptureReportAck_knownFields = {
FieldTradeReportID::TAG,
FieldTradeReportTransType::TAG,
FieldTradeReportType::TAG,
FieldTrdType::TAG,
FieldTrdSubType::TAG,
FieldSecondaryTrdType::TAG,
FieldTransferReason::TAG,
FieldExecType::TAG,
FieldTradeReportRefID::TAG,
FieldSecondaryTradeReportRefID::TAG,
FieldTrdRptStatus::TAG,
FieldTradeReportRejectReason::TAG,
FieldSecondaryTradeReportID::TAG,
FieldSubscriptionRequestType::TAG,
FieldTradeLinkID::TAG,
FieldTrdMatchID::TAG,
FieldExecID::TAG,
FieldSecondaryExecID::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldTransactTime::TAG,
FieldNoTrdRegTimestamps::TAG,
FieldResponseTransportType::TAG,
FieldResponseDestination::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldNoLegs::TAG,
FieldClearingFeeIndicator::TAG,
FieldOrderCapacity::TAG,
FieldOrderRestrictions::TAG,
FieldCustOrderCapacity::TAG,
FieldAccount::TAG,
FieldAcctIDSource::TAG,
FieldAccountType::TAG,
FieldPositionEffect::TAG,
FieldPreallocMethod::TAG,
FieldNoAllocs::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> AllocationReport_knownFields = {
FieldAllocReportID::TAG,
FieldAllocID::TAG,
FieldAllocTransType::TAG,
FieldAllocReportRefID::TAG,
FieldAllocCancReplaceReason::TAG,
FieldSecondaryAllocID::TAG,
FieldAllocReportType::TAG,
FieldAllocStatus::TAG,
FieldAllocRejCode::TAG,
FieldRefAllocID::TAG,
FieldAllocIntermedReqType::TAG,
FieldAllocLinkID::TAG,
FieldAllocLinkType::TAG,
FieldBookingRefID::TAG,
FieldAllocNoOrdersType::TAG,
FieldNoOrders::TAG,
FieldNoExecs::TAG,
FieldPreviouslyReported::TAG,
FieldReversalIndicator::TAG,
FieldMatchType::TAG,
FieldSide::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldDeliveryForm::TAG,
FieldPctAtRisk::TAG,
FieldNoInstrAttrib::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldNoUnderlyings::TAG,
FieldNoLegs::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldLastMkt::TAG,
FieldTradeOriginationDate::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldPriceType::TAG,
FieldAvgPx::TAG,
FieldAvgParPx::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldCurrency::TAG,
FieldAvgPxPrecision::TAG,
FieldNoPartyIDs::TAG,
FieldTradeDate::TAG,
FieldTransactTime::TAG,
FieldSettlType::TAG,
FieldSettlDate::TAG,
FieldBookingType::TAG,
FieldGrossTradeAmt::TAG,
FieldConcession::TAG,
FieldTotalTakedown::TAG,
FieldNetMoney::TAG,
FieldPositionEffect::TAG,
FieldAutoAcceptIndicator::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldNumDaysInterest::TAG,
FieldAccruedInterestRate::TAG,
FieldAccruedInterestAmt::TAG,
FieldTotalAccruedInterestAmt::TAG,
FieldInterestAtMaturity::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldLegalConfirm::TAG,
FieldNoStipulations::TAG,
FieldYieldType::TAG,
FieldYield::TAG,
FieldYieldCalcDate::TAG,
FieldYieldRedemptionDate::TAG,
FieldYieldRedemptionPrice::TAG,
FieldYieldRedemptionPriceType::TAG,
FieldTotNoAllocs::TAG,
FieldLastFragment::TAG,
FieldNoAllocs::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> AllocationReportAck_knownFields = {
FieldAllocReportID::TAG,
FieldAllocID::TAG,
FieldNoPartyIDs::TAG,
FieldSecondaryAllocID::TAG,
FieldTradeDate::TAG,
FieldTransactTime::TAG,
FieldAllocStatus::TAG,
FieldAllocRejCode::TAG,
FieldAllocReportType::TAG,
FieldAllocIntermedReqType::TAG,
FieldMatchStatus::TAG,
FieldProduct::TAG,
FieldSecurityType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldNoAllocs::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ConfirmationAck_knownFields = {
FieldConfirmID::TAG,
FieldTradeDate::TAG,
FieldTransactTime::TAG,
FieldAffirmStatus::TAG,
FieldConfirmRejReason::TAG,
FieldMatchStatus::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> SettlementInstructionRequest_knownFields = {
FieldSettlInstReqID::TAG,
FieldTransactTime::TAG,
FieldNoPartyIDs::TAG,
FieldAllocAccount::TAG,
FieldAllocAcctIDSource::TAG,
FieldSide::TAG,
FieldProduct::TAG,
FieldSecurityType::TAG,
FieldCFICode::TAG,
FieldEffectiveTime::TAG,
FieldExpireTime::TAG,
FieldLastUpdateTime::TAG,
FieldStandInstDbType::TAG,
FieldStandInstDbName::TAG,
FieldStandInstDbID::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> AssignmentReport_knownFields = {
FieldAsgnRptID::TAG,
FieldTotNumAssignmentReports::TAG,
FieldLastRptRequested::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAccountType::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldNoPositions::TAG,
FieldNoPosAmt::TAG,
FieldThresholdAmount::TAG,
FieldSettlPrice::TAG,
FieldSettlPriceType::TAG,
FieldUnderlyingSettlPrice::TAG,
FieldExpireDate::TAG,
FieldAssignmentMethod::TAG,
FieldAssignmentUnit::TAG,
FieldOpenInterest::TAG,
FieldExerciseMethod::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldClearingBusinessDate::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> CollateralRequest_knownFields = {
FieldCollReqID::TAG,
FieldCollAsgnReason::TAG,
FieldTransactTime::TAG,
FieldExpireTime::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAccountType::TAG,
FieldClOrdID::TAG,
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldSecondaryClOrdID::TAG,
FieldNoExecs::TAG,
FieldNoTrades::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldSettlDate::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldMarginExcess::TAG,
FieldTotalNetValue::TAG,
FieldCashOutstanding::TAG,
FieldNoTrdRegTimestamps::TAG,
FieldSide::TAG,
FieldNoMiscFees::TAG,
FieldPrice::TAG,
FieldPriceType::TAG,
FieldAccruedInterestAmt::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldNoStipulations::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldClearingBusinessDate::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> CollateralAssignment_knownFields = {
FieldCollAsgnID::TAG,
FieldCollReqID::TAG,
FieldCollAsgnReason::TAG,
FieldCollAsgnTransType::TAG,
FieldCollAsgnRefID::TAG,
FieldTransactTime::TAG,
FieldExpireTime::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAccountType::TAG,
FieldClOrdID::TAG,
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldSecondaryClOrdID::TAG,
FieldNoExecs::TAG,
FieldNoTrades::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldSettlDate::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldMarginExcess::TAG,
FieldTotalNetValue::TAG,
FieldCashOutstanding::TAG,
FieldNoTrdRegTimestamps::TAG,
FieldSide::TAG,
FieldNoMiscFees::TAG,
FieldPrice::TAG,
FieldPriceType::TAG,
FieldAccruedInterestAmt::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldNoStipulations::TAG,
FieldSettlDeliveryType::TAG,
FieldStandInstDbType::TAG,
FieldStandInstDbName::TAG,
FieldStandInstDbID::TAG,
FieldNoDlvyInst::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldClearingBusinessDate::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> CollateralResponse_knownFields = {
FieldCollRespID::TAG,
FieldCollAsgnID::TAG,
FieldCollReqID::TAG,
FieldCollAsgnReason::TAG,
FieldCollAsgnTransType::TAG,
FieldCollAsgnRespType::TAG,
FieldCollAsgnRejectReason::TAG,
FieldTransactTime::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAccountType::TAG,
FieldClOrdID::TAG,
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldSecondaryClOrdID::TAG,
FieldNoExecs::TAG,
FieldNoTrades::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldSettlDate::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldMarginExcess::TAG,
FieldTotalNetValue::TAG,
FieldCashOutstanding::TAG,
FieldNoTrdRegTimestamps::TAG,
FieldSide::TAG,
FieldNoMiscFees::TAG,
FieldPrice::TAG,
FieldPriceType::TAG,
FieldAccruedInterestAmt::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldNoStipulations::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> CollateralReport_knownFields = {
FieldCollRptID::TAG,
FieldCollInquiryID::TAG,
FieldCollStatus::TAG,
FieldTotNumReports::TAG,
FieldLastRptRequested::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAccountType::TAG,
FieldClOrdID::TAG,
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldSecondaryClOrdID::TAG,
FieldNoExecs::TAG,
FieldNoTrades::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldSettlDate::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldMarginExcess::TAG,
FieldTotalNetValue::TAG,
FieldCashOutstanding::TAG,
FieldNoTrdRegTimestamps::TAG,
FieldSide::TAG,
FieldNoMiscFees::TAG,
FieldPrice::TAG,
FieldPriceType::TAG,
FieldAccruedInterestAmt::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldNoStipulations::TAG,
FieldSettlDeliveryType::TAG,
FieldStandInstDbType::TAG,
FieldStandInstDbName::TAG,
FieldStandInstDbID::TAG,
FieldNoDlvyInst::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldClearingBusinessDate::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> CollateralInquiry_knownFields = {
FieldCollInquiryID::TAG,
FieldNoCollInquiryQualifier::TAG,
FieldSubscriptionRequestType::TAG,
FieldResponseTransportType::TAG,
FieldResponseDestination::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAccountType::TAG,
FieldClOrdID::TAG,
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldSecondaryClOrdID::TAG,
FieldNoExecs::TAG,
FieldNoTrades::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldSettlDate::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldMarginExcess::TAG,
FieldTotalNetValue::TAG,
FieldCashOutstanding::TAG,
FieldNoTrdRegTimestamps::TAG,
FieldSide::TAG,
FieldPrice::TAG,
FieldPriceType::TAG,
FieldAccruedInterestAmt::TAG,
FieldEndAccruedInterestAmt::TAG,
FieldStartCash::TAG,
FieldEndCash::TAG,
FieldSpread::TAG,
FieldBenchmarkCurveCurrency::TAG,
FieldBenchmarkCurveName::TAG,
FieldBenchmarkCurvePoint::TAG,
FieldBenchmarkPrice::TAG,
FieldBenchmarkPriceType::TAG,
FieldBenchmarkSecurityID::TAG,
FieldBenchmarkSecurityIDSource::TAG,
FieldNoStipulations::TAG,
FieldSettlDeliveryType::TAG,
FieldStandInstDbType::TAG,
FieldStandInstDbName::TAG,
FieldStandInstDbID::TAG,
FieldNoDlvyInst::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldClearingBusinessDate::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> NetworkCounterpartySystemStatusRequest_knownFields = {
FieldNetworkRequestType::TAG,
FieldNetworkRequestID::TAG,
FieldNoCompIDs::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> NetworkCounterpartySystemStatusResponse_knownFields = {
FieldNetworkStatusResponseType::TAG,
FieldNetworkRequestID::TAG,
FieldNetworkResponseID::TAG,
FieldLastNetworkResponseID::TAG,
FieldNoCompIDs::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> UserRequest_knownFields = {
FieldUserRequestID::TAG,
FieldUserRequestType::TAG,
FieldUsername::TAG,
FieldPassword::TAG,
FieldNewPassword::TAG,
FieldRawDataLength::TAG,
FieldRawData::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> UserResponse_knownFields = {
FieldUserRequestID::TAG,
FieldUsername::TAG,
FieldUserStatus::TAG,
FieldUserStatusText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> CollateralInquiryAck_knownFields = {
FieldCollInquiryID::TAG,
FieldCollInquiryStatus::TAG,
FieldCollInquiryResult::TAG,
FieldNoCollInquiryQualifier::TAG,
FieldTotNumReports::TAG,
FieldNoPartyIDs::TAG,
FieldAccount::TAG,
FieldAccountType::TAG,
FieldClOrdID::TAG,
FieldOrderID::TAG,
FieldSecondaryOrderID::TAG,
FieldSecondaryClOrdID::TAG,
FieldNoExecs::TAG,
FieldNoTrades::TAG,
FieldSymbol::TAG,
FieldSymbolSfx::TAG,
FieldSecurityID::TAG,
FieldSecurityIDSource::TAG,
FieldNoSecurityAltID::TAG,
FieldProduct::TAG,
FieldCFICode::TAG,
FieldSecurityType::TAG,
FieldSecuritySubType::TAG,
FieldMaturityMonthYear::TAG,
FieldMaturityDate::TAG,
FieldPutOrCall::TAG,
FieldCouponPaymentDate::TAG,
FieldIssueDate::TAG,
FieldRepoCollateralSecurityType::TAG,
FieldRepurchaseTerm::TAG,
FieldRepurchaseRate::TAG,
FieldFactor::TAG,
FieldCreditRating::TAG,
FieldInstrRegistry::TAG,
FieldCountryOfIssue::TAG,
FieldStateOrProvinceOfIssue::TAG,
FieldLocaleOfIssue::TAG,
FieldRedemptionDate::TAG,
FieldStrikePrice::TAG,
FieldStrikeCurrency::TAG,
FieldOptAttribute::TAG,
FieldContractMultiplier::TAG,
FieldCouponRate::TAG,
FieldSecurityExchange::TAG,
FieldIssuer::TAG,
FieldEncodedIssuerLen::TAG,
FieldEncodedIssuer::TAG,
FieldSecurityDesc::TAG,
FieldEncodedSecurityDescLen::TAG,
FieldEncodedSecurityDesc::TAG,
FieldPool::TAG,
FieldContractSettlMonth::TAG,
FieldCPProgram::TAG,
FieldCPRegType::TAG,
FieldNoEvents::TAG,
FieldDatedDate::TAG,
FieldInterestAccrualDate::TAG,
FieldAgreementDesc::TAG,
FieldAgreementID::TAG,
FieldAgreementDate::TAG,
FieldAgreementCurrency::TAG,
FieldTerminationType::TAG,
FieldStartDate::TAG,
FieldEndDate::TAG,
FieldDeliveryType::TAG,
FieldMarginRatio::TAG,
FieldSettlDate::TAG,
FieldQuantity::TAG,
FieldQtyType::TAG,
FieldCurrency::TAG,
FieldNoLegs::TAG,
FieldNoUnderlyings::TAG,
FieldTradingSessionID::TAG,
FieldTradingSessionSubID::TAG,
FieldSettlSessID::TAG,
FieldSettlSessSubID::TAG,
FieldClearingBusinessDate::TAG,
FieldResponseTransportType::TAG,
FieldResponseDestination::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

const std::vector<tag_t> ConfirmationRequest_knownFields = {
FieldConfirmReqID::TAG,
FieldConfirmType::TAG,
FieldNoOrders::TAG,
FieldAllocID::TAG,
FieldSecondaryAllocID::TAG,
FieldIndividualAllocID::TAG,
FieldTransactTime::TAG,
FieldAllocAccount::TAG,
FieldAllocAcctIDSource::TAG,
FieldAllocAccountType::TAG,
FieldText::TAG,
FieldEncodedTextLen::TAG,
FieldEncodedText::TAG,
FieldCheckSum::TAG };

}


const std::vector<tag_t> & MessageHeader::getKnownFields(){ return Header_knownFields; }

const std::vector<tag_t> & MessageHeartbeat::getKnownFields(){ return Heartbeat_knownFields; }

const std::vector<tag_t> & MessageTestRequest::getKnownFields(){ return TestRequest_knownFields; }

const std::vector<tag_t> & MessageResendRequest::getKnownFields(){ return ResendRequest_knownFields; }

const std::vector<tag_t> & MessageReject::getKnownFields(){ return Reject_knownFields; }

const std::vector<tag_t> & MessageSequenceReset::getKnownFields(){ return SequenceReset_knownFields; }

const std::vector<tag_t> & MessageLogout::getKnownFields(){ return Logout_knownFields; }

const std::vector<tag_t> & MessageIOI::getKnownFields(){ return IOI_knownFields; }

const std::vector<tag_t> & MessageAdvertisement::getKnownFields(){ return Advertisement_knownFields; }

const std::vector<tag_t> & MessageExecutionReport::getKnownFields(){ return ExecutionReport_knownFields; }

const std::vector<tag_t> & MessageOrderCancelReject::getKnownFields(){ return OrderCancelReject_knownFields; }

const std::vector<tag_t> & MessageLogon::getKnownFields(){ return Logon_knownFields; }

const std::vector<tag_t> & MessageNews::getKnownFields(){ return News_knownFields; }

const std::vector<tag_t> & MessageEmail::getKnownFields(){ return Email_knownFields; }

const std::vector<tag_t> & MessageNewOrderSingle::getKnownFields(){ return NewOrderSingle_knownFields; }

const std::vector<tag_t> & MessageNewOrderList::getKnownFields(){ return NewOrderList_knownFields; }

const std::vector<tag_t> & MessageOrderCancelRequest::getKnownFields(){ return OrderCancelRequest_knownFields; }

const std::vector<tag_t> & MessageOrderCancelReplaceRequest::getKnownFields(){ return OrderCancelReplaceRequest_knownFields; }

const std::vector<tag_t> & MessageOrderStatusRequest::getKnownFields(){ return OrderStatusRequest_knownFields; }

const std::vector<tag_t> & MessageAllocationInstruction::getKnownFields(){ return AllocationInstruction_knownFields; }

const std::vector<tag_t> & MessageListCancelRequest::getKnownFields(){ return ListCancelRequest_knownFields; }

const std::vector<tag_t> & MessageListExecute::getKnownFields(){ return ListExecute_knownFields; }

const std::vector<tag_t> & MessageListStatusRequest::getKnownFields(){ return ListStatusRequest_knownFields; }

const std::vector<tag_t> & MessageListStatus::getKnownFields(){ return ListStatus_knownFields; }

const std::vector<tag_t> & MessageAllocationInstructionAck::getKnownFields(){ return AllocationInstructionAck_knownFields; }

const std::vector<tag_t> & MessageDontKnowTrade::getKnownFields(){ return DontKnowTrade_knownFields; }

const std::vector<tag_t> & MessageQuoteRequest::getKnownFields(){ return QuoteRequest_knownFields; }

const std::vector<tag_t> & MessageQuote::getKnownFields(){ return Quote_knownFields; }

const std::vector<tag_t> & MessageSettlementInstructions::getKnownFields(){ return SettlementInstructions_knownFields; }

const std::vector<tag_t> & MessageMarketDataRequest::getKnownFields(){ return MarketDataRequest_knownFields; }

const std::vector<tag_t> & MessageMarketDataSnapshotFullRefresh::getKnownFields(){ return MarketDataSnapshotFullRefresh_knownFields; }

const std::vector<tag_t> & MessageMarketDataIncrementalRefresh::getKnownFields(){ return MarketDataIncrementalRefresh_knownFields; }

const std::vector<tag_t> & MessageMarketDataRequestReject::getKnownFields(){ return MarketDataRequestReject_knownFields; }

const std::vector<tag_t> & MessageQuoteCancel::getKnownFields(){ return QuoteCancel_knownFields; }

const std::vector<tag_t> & MessageQuoteStatusRequest::getKnownFields(){ return QuoteStatusRequest_knownFields; }

const std::vector<tag_t> & MessageMassQuoteAcknowledgement::getKnownFields(){ return MassQuoteAcknowledgement_knownFields; }

const std::vector<tag_t> & MessageSecurityDefinitionRequest::getKnownFields(){ return SecurityDefinitionRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityDefinition::getKnownFields(){ return SecurityDefinition_knownFields; }

const std::vector<tag_t> & MessageSecurityStatusRequest::getKnownFields(){ return SecurityStatusRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityStatus::getKnownFields(){ return SecurityStatus_knownFields; }

const std::vector<tag_t> & MessageTradingSessionStatusRequest::getKnownFields(){ return TradingSessionStatusRequest_knownFields; }

const std::vector<tag_t> & MessageTradingSessionStatus::getKnownFields(){ return TradingSessionStatus_knownFields; }

const std::vector<tag_t> & MessageMassQuote::getKnownFields(){ return MassQuote_knownFields; }

const std::vector<tag_t> & MessageBusinessMessageReject::getKnownFields(){ return BusinessMessageReject_knownFields; }

const std::vector<tag_t> & MessageBidRequest::getKnownFields(){ return BidRequest_knownFields; }

const std::vector<tag_t> & MessageBidResponse::getKnownFields(){ return BidResponse_knownFields; }

const std::vector<tag_t> & MessageListStrikePrice::getKnownFields(){ return ListStrikePrice_knownFields; }

const std::vector<tag_t> & MessageXMLnonFIX::getKnownFields(){ return XMLnonFIX_knownFields; }

const std::vector<tag_t> & MessageRegistrationInstructions::getKnownFields(){ return RegistrationInstructions_knownFields; }

const std::vector<tag_t> & MessageRegistrationInstructionsResponse::getKnownFields(){ return RegistrationInstructionsResponse_knownFields; }

const std::vector<tag_t> & MessageOrderMassCancelRequest::getKnownFields(){ return OrderMassCancelRequest_knownFields; }

const std::vector<tag_t> & MessageOrderMassCancelReport::getKnownFields(){ return OrderMassCancelReport_knownFields; }

const std::vector<tag_t> & MessageNewOrderCross::getKnownFields(){ return NewOrderCross_knownFields; }

const std::vector<tag_t> & MessageCrossOrderCancelReplaceRequest::getKnownFields(){ return CrossOrderCancelReplaceRequest_knownFields; }

const std::vector<tag_t> & MessageCrossOrderCancelRequest::getKnownFields(){ return CrossOrderCancelRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityTypeRequest::getKnownFields(){ return SecurityTypeRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityTypes::getKnownFields(){ return SecurityTypes_knownFields; }

const std::vector<tag_t> & MessageSecurityListRequest::getKnownFields(){ return SecurityListRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityList::getKnownFields(){ return SecurityList_knownFields; }

const std::vector<tag_t> & MessageDerivativeSecurityListRequest::getKnownFields(){ return DerivativeSecurityListRequest_knownFields; }

const std::vector<tag_t> & MessageDerivativeSecurityList::getKnownFields(){ return DerivativeSecurityList_knownFields; }

const std::vector<tag_t> & MessageNewOrderMultileg::getKnownFields(){ return NewOrderMultileg_knownFields; }

const std::vector<tag_t> & MessageMultilegOrderCancelReplace::getKnownFields(){ return MultilegOrderCancelReplace_knownFields; }

const std::vector<tag_t> & MessageTradeCaptureReportRequest::getKnownFields(){ return TradeCaptureReportRequest_knownFields; }

const std::vector<tag_t> & MessageTradeCaptureReport::getKnownFields(){ return TradeCaptureReport_knownFields; }

const std::vector<tag_t> & MessageOrderMassStatusRequest::getKnownFields(){ return OrderMassStatusRequest_knownFields; }

const std::vector<tag_t> & MessageQuoteRequestReject::getKnownFields(){ return QuoteRequestReject_knownFields; }

const std::vector<tag_t> & MessageRFQRequest::getKnownFields(){ return RFQRequest_knownFields; }

const std::vector<tag_t> & MessageQuoteStatusReport::getKnownFields(){ return QuoteStatusReport_knownFields; }

const std::vector<tag_t> & MessageQuoteResponse::getKnownFields(){ return QuoteResponse_knownFields; }

const std::vector<tag_t> & MessageConfirmation::getKnownFields(){ return Confirmation_knownFields; }

const std::vector<tag_t> & MessagePositionMaintenanceRequest::getKnownFields(){ return PositionMaintenanceRequest_knownFields; }

const std::vector<tag_t> & MessagePositionMaintenanceReport::getKnownFields(){ return PositionMaintenanceReport_knownFields; }

const std::vector<tag_t> & MessageRequestForPositions::getKnownFields(){ return RequestForPositions_knownFields; }

const std::vector<tag_t> & MessageRequestForPositionsAck::getKnownFields(){ return RequestForPositionsAck_knownFields; }

const std::vector<tag_t> & MessagePositionReport::getKnownFields(){ return PositionReport_knownFields; }

const std::vector<tag_t> & MessageTradeCaptureReportRequestAck::getKnownFields(){ return TradeCaptureReportRequestAck_knownFields; }

const std::vector<tag_t> & MessageTradeCaptureReportAck::getKnownFields(){ return TradeCaptureReportAck_knownFields; }

const std::vector<tag_t> & MessageAllocationReport::getKnownFields(){ return AllocationReport_knownFields; }

const std::vector<tag_t> & MessageAllocationReportAck::getKnownFields(){ return AllocationReportAck_knownFields; }

const std::vector<tag_t> & MessageConfirmationAck::getKnownFields(){ return ConfirmationAck_knownFields; }

const std::vector<tag_t> & MessageSettlementInstructionRequest::getKnownFields(){ return SettlementInstructionRequest_knownFields; }

const std::vector<tag_t> & MessageAssignmentReport::getKnownFields(){ return AssignmentReport_knownFields; }

const std::vector<tag_t> & MessageCollateralRequest::getKnownFields(){ return CollateralRequest_knownFields; }

const std::vector<tag_t> & MessageCollateralAssignment::getKnownFields(){ return CollateralAssignment_knownFields; }

const std::vector<tag_t> & MessageCollateralResponse::getKnownFields(){ return CollateralResponse_knownFields; }

const std::vector<tag_t> & MessageCollateralReport::getKnownFields(){ return CollateralReport_knownFields; }

const std::vector<tag_t> & MessageCollateralInquiry::getKnownFields(){ return CollateralInquiry_knownFields; }

const std::vector<tag_t> & MessageNetworkCounterpartySystemStatusRequest::getKnownFields(){ return NetworkCounterpartySystemStatusRequest_knownFields; }

const std::vector<tag_t> & MessageNetworkCounterpartySystemStatusResponse::getKnownFields(){ return NetworkCounterpartySystemStatusResponse_knownFields; }

const std::vector<tag_t> & MessageUserRequest::getKnownFields(){ return UserRequest_knownFields; }

const std::vector<tag_t> & MessageUserResponse::getKnownFields(){ return UserResponse_knownFields; }

const std::vector<tag_t> & MessageCollateralInquiryAck::getKnownFields(){ return CollateralInquiryAck_knownFields; }

const std::vector<tag_t> & MessageConfirmationRequest::getKnownFields(){ return ConfirmationRequest_knownFields; }


GetDepthMethod getTagDepthMethodByRawMsgType( raw_enum_t rawMsgType ){
  switch( rawMsgType ){

   case MsgTypeRaw__ :
     return MessageHeader::getFieldDepth;

   case MsgTypeRaw_HEARTBEAT :
     return MessageHeartbeat::getFieldDepth;

   case MsgTypeRaw_TEST_REQUEST :
     return MessageTestRequest::getFieldDepth;

   case MsgTypeRaw_RESEND_REQUEST :
     return MessageResendRequest::getFieldDepth;

   case MsgTypeRaw_REJECT :
     return MessageReject::getFieldDepth;

   case MsgTypeRaw_SEQUENCE_RESET :
     return MessageSequenceReset::getFieldDepth;

   case MsgTypeRaw_LOGOUT :
     return MessageLogout::getFieldDepth;

   case MsgTypeRaw_INDICATION_OF_INTEREST :
     return MessageIOI::getFieldDepth;

   case MsgTypeRaw_ADVERTISEMENT :
     return MessageAdvertisement::getFieldDepth;

   case MsgTypeRaw_EXECUTION_REPORT :
     return MessageExecutionReport::getFieldDepth;

   case MsgTypeRaw_ORDER_CANCEL_REJECT :
     return MessageOrderCancelReject::getFieldDepth;

   case MsgTypeRaw_LOGON :
     return MessageLogon::getFieldDepth;

   case MsgTypeRaw_NEWS :
     return MessageNews::getFieldDepth;

   case MsgTypeRaw_EMAIL :
     return MessageEmail::getFieldDepth;

   case MsgTypeRaw_ORDER_SINGLE :
     return MessageNewOrderSingle::getFieldDepth;

   case MsgTypeRaw_ORDER_LIST :
     return MessageNewOrderList::getFieldDepth;

   case MsgTypeRaw_ORDER_CANCEL_REQUEST :
     return MessageOrderCancelRequest::getFieldDepth;

   case MsgTypeRaw_ORDER_CANCEL_REPLACE_REQUEST :
     return MessageOrderCancelReplaceRequest::getFieldDepth;

   case MsgTypeRaw_ORDER_STATUS_REQUEST :
     return MessageOrderStatusRequest::getFieldDepth;

   case MsgTypeRaw_ALLOCATION_INSTRUCTION :
     return MessageAllocationInstruction::getFieldDepth;

   case MsgTypeRaw_LIST_CANCEL_REQUEST :
     return MessageListCancelRequest::getFieldDepth;

   case MsgTypeRaw_LIST_EXECUTE :
     return MessageListExecute::getFieldDepth;

   case MsgTypeRaw_LIST_STATUS_REQUEST :
     return MessageListStatusRequest::getFieldDepth;

   case MsgTypeRaw_LIST_STATUS :
     return MessageListStatus::getFieldDepth;

   case MsgTypeRaw_ALLOCATION_INSTRUCTION_ACK :
     return MessageAllocationInstructionAck::getFieldDepth;

   case MsgTypeRaw_DONT_KNOW_TRADE :
     return MessageDontKnowTrade::getFieldDepth;

   case MsgTypeRaw_QUOTE_REQUEST :
     return MessageQuoteRequest::getFieldDepth;

   case MsgTypeRaw_QUOTE :
     return MessageQuote::getFieldDepth;

   case MsgTypeRaw_SETTLEMENT_INSTRUCTIONS :
     return MessageSettlementInstructions::getFieldDepth;

   case MsgTypeRaw_MARKET_DATA_REQUEST :
     return MessageMarketDataRequest::getFieldDepth;

   case MsgTypeRaw_MARKET_DATA_SNAPSHOT_FULL_REFRESH :
     return MessageMarketDataSnapshotFullRefresh::getFieldDepth;

   case MsgTypeRaw_MARKET_DATA_INCREMENTAL_REFRESH :
     return MessageMarketDataIncrementalRefresh::getFieldDepth;

   case MsgTypeRaw_MARKET_DATA_REQUEST_REJECT :
     return MessageMarketDataRequestReject::getFieldDepth;

   case MsgTypeRaw_QUOTE_CANCEL :
     return MessageQuoteCancel::getFieldDepth;

   case MsgTypeRaw_QUOTE_STATUS_REQUEST :
     return MessageQuoteStatusRequest::getFieldDepth;

   case MsgTypeRaw_MASS_QUOTE_ACKNOWLEDGEMENT :
     return MessageMassQuoteAcknowledgement::getFieldDepth;

   case MsgTypeRaw_SECURITY_DEFINITION_REQUEST :
     return MessageSecurityDefinitionRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_DEFINITION :
     return MessageSecurityDefinition::getFieldDepth;

   case MsgTypeRaw_SECURITY_STATUS_REQUEST :
     return MessageSecurityStatusRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_STATUS :
     return MessageSecurityStatus::getFieldDepth;

   case MsgTypeRaw_TRADING_SESSION_STATUS_REQUEST :
     return MessageTradingSessionStatusRequest::getFieldDepth;

   case MsgTypeRaw_TRADING_SESSION_STATUS :
     return MessageTradingSessionStatus::getFieldDepth;

   case MsgTypeRaw_MASS_QUOTE :
     return MessageMassQuote::getFieldDepth;

   case MsgTypeRaw_BUSINESS_MESSAGE_REJECT :
     return MessageBusinessMessageReject::getFieldDepth;

   case MsgTypeRaw_BID_REQUEST :
     return MessageBidRequest::getFieldDepth;

   case MsgTypeRaw_BID_RESPONSE :
     return MessageBidResponse::getFieldDepth;

   case MsgTypeRaw_LIST_STRIKE_PRICE :
     return MessageListStrikePrice::getFieldDepth;

   case MsgTypeRaw_XML_MESSAGE :
     return MessageXMLnonFIX::getFieldDepth;

   case MsgTypeRaw_REGISTRATION_INSTRUCTIONS :
     return MessageRegistrationInstructions::getFieldDepth;

   case MsgTypeRaw_REGISTRATION_INSTRUCTIONS_RESPONSE :
     return MessageRegistrationInstructionsResponse::getFieldDepth;

   case MsgTypeRaw_ORDER_MASS_CANCEL_REQUEST :
     return MessageOrderMassCancelRequest::getFieldDepth;

   case MsgTypeRaw_ORDER_MASS_CANCEL_REPORT :
     return MessageOrderMassCancelReport::getFieldDepth;

   case MsgTypeRaw_NEW_ORDER_s :
     return MessageNewOrderCross::getFieldDepth;

   case MsgTypeRaw_CROSS_ORDER_CANCEL_REPLACE_REQUEST :
     return MessageCrossOrderCancelReplaceRequest::getFieldDepth;

   case MsgTypeRaw_CROSS_ORDER_CANCEL_REQUEST :
     return MessageCrossOrderCancelRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_TYPE_REQUEST :
     return MessageSecurityTypeRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_TYPES :
     return MessageSecurityTypes::getFieldDepth;

   case MsgTypeRaw_SECURITY_LIST_REQUEST :
     return MessageSecurityListRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_LIST :
     return MessageSecurityList::getFieldDepth;

   case MsgTypeRaw_DERIVATIVE_SECURITY_LIST_REQUEST :
     return MessageDerivativeSecurityListRequest::getFieldDepth;

   case MsgTypeRaw_DERIVATIVE_SECURITY_LIST :
     return MessageDerivativeSecurityList::getFieldDepth;

   case MsgTypeRaw_NEW_ORDER_AB :
     return MessageNewOrderMultileg::getFieldDepth;

   case MsgTypeRaw_MULTILEG_ORDER_CANCEL_REPLACE :
     return MessageMultilegOrderCancelReplace::getFieldDepth;

   case MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST :
     return MessageTradeCaptureReportRequest::getFieldDepth;

   case MsgTypeRaw_TRADE_CAPTURE_REPORT :
     return MessageTradeCaptureReport::getFieldDepth;

   case MsgTypeRaw_ORDER_MASS_STATUS_REQUEST :
     return MessageOrderMassStatusRequest::getFieldDepth;

   case MsgTypeRaw_QUOTE_REQUEST_REJECT :
     return MessageQuoteRequestReject::getFieldDepth;

   case MsgTypeRaw_RFQ_REQUEST :
     return MessageRFQRequest::getFieldDepth;

   case MsgTypeRaw_QUOTE_STATUS_REPORT :
     return MessageQuoteStatusReport::getFieldDepth;

   case MsgTypeRaw_QUOTE_RESPONSE :
     return MessageQuoteResponse::getFieldDepth;

   case MsgTypeRaw_CONFIRMATION :
     return MessageConfirmation::getFieldDepth;

   case MsgTypeRaw_POSITION_MAINTENANCE_REQUEST :
     return MessagePositionMaintenanceRequest::getFieldDepth;

   case MsgTypeRaw_POSITION_MAINTENANCE_REPORT :
     return MessagePositionMaintenanceReport::getFieldDepth;

   case MsgTypeRaw_REQUEST_FOR_POSITIONS :
     return MessageRequestForPositions::getFieldDepth;

   case MsgTypeRaw_REQUEST_FOR_POSITIONS_ACK :
     return MessageRequestForPositionsAck::getFieldDepth;

   case MsgTypeRaw_POSITION_REPORT :
     return MessagePositionReport::getFieldDepth;

   case MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST_ACK :
     return MessageTradeCaptureReportRequestAck::getFieldDepth;

   case MsgTypeRaw_TRADE_CAPTURE_REPORT_ACK :
     return MessageTradeCaptureReportAck::getFieldDepth;

   case MsgTypeRaw_ALLOCATION_REPORT :
     return MessageAllocationReport::getFieldDepth;

   case MsgTypeRaw_ALLOCATION_REPORT_ACK :
     return MessageAllocationReportAck::getFieldDepth;

   case MsgTypeRaw_CONFIRMATION_ACK :
     return MessageConfirmationAck::getFieldDepth;

   case MsgTypeRaw_SETTLEMENT_INSTRUCTION_REQUEST :
     return MessageSettlementInstructionRequest::getFieldDepth;

   case MsgTypeRaw_ASSIGNMENT_REPORT :
     return MessageAssignmentReport::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_REQUEST :
     return MessageCollateralRequest::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_ASSIGNMENT :
     return MessageCollateralAssignment::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_RESPONSE :
     return MessageCollateralResponse::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_REPORT :
     return MessageCollateralReport::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_INQUIRY :
     return MessageCollateralInquiry::getFieldDepth;

   case MsgTypeRaw_NETWORK_BC :
     return MessageNetworkCounterpartySystemStatusRequest::getFieldDepth;

   case MsgTypeRaw_NETWORK_BD :
     return MessageNetworkCounterpartySystemStatusResponse::getFieldDepth;

   case MsgTypeRaw_USER_REQUEST :
     return MessageUserRequest::getFieldDepth;

   case MsgTypeRaw_USER_RESPONSE :
     return MessageUserResponse::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_INQUIRY_ACK :
     return MessageCollateralInquiryAck::getFieldDepth;

   case MsgTypeRaw_CONFIRMATION_REQUEST :
     return MessageConfirmationRequest::getFieldDepth;
  }
  return nullptr;
}


// -------------------------------------- reset ----------------------------------------

void MessageHeader::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBeginString.offset = -1;
     fieldBodyLength.offset = -1;
     fieldMsgType.offset = -1;
     fieldSenderCompID.offset = -1;
     fieldTargetCompID.offset = -1;
     fieldOnBehalfOfCompID.offset = -1;
     fieldDeliverToCompID.offset = -1;
     fieldSecureDataLen.offset = -1;
     fieldSecureData.offset = -1;
     fieldMsgSeqNum.offset = -1;
     fieldSenderSubID.offset = -1;
     fieldSenderLocationID.offset = -1;
     fieldTargetSubID.offset = -1;
     fieldTargetLocationID.offset = -1;
     fieldOnBehalfOfSubID.offset = -1;
     fieldOnBehalfOfLocationID.offset = -1;
     fieldDeliverToSubID.offset = -1;
     fieldDeliverToLocationID.offset = -1;
     fieldPossDupFlag.offset = -1;
     fieldPossResend.offset = -1;
     fieldSendingTime.offset = -1;
     fieldOrigSendingTime.offset = -1;
     fieldXmlDataLen.offset = -1;
     fieldXmlData.offset = -1;
     fieldMessageEncoding.offset = -1;
     fieldLastMsgSeqNumProcessed.offset = -1;
     for( auto g = groupsHops.begin(); g != groupsHops.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageHeartbeat::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTestReqID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTestRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTestReqID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageResendRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBeginSeqNo.offset = -1;
     fieldEndSeqNo.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRefSeqNum.offset = -1;
     fieldRefTagID.offset = -1;
     fieldRefMsgType.offset = -1;
     fieldSessionRejectReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSequenceReset::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldGapFillFlag.offset = -1;
     fieldNewSeqNo.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageLogout::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageIOI::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldIOIID.offset = -1;
     fieldIOITransType.offset = -1;
     fieldIOIRefID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldIOIQty.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldIOIQltyInd.offset = -1;
     fieldIOINaturalFlag.offset = -1;
     for( auto g = groupsIOIQualifiers.begin(); g != groupsIOIQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTransactTime.offset = -1;
     fieldURLLink.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAdvertisement::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAdvId.offset = -1;
     fieldAdvTransType.offset = -1;
     fieldAdvRefID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdvSide.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldPrice.offset = -1;
     fieldCurrency.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldURLLink.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageExecutionReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldOrdStatusReqID.offset = -1;
     fieldMassStatusReqID.offset = -1;
     fieldTotNumReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     for( auto g = groupsContraBrokers.begin(); g != groupsContraBrokers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldListID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldExecID.offset = -1;
     fieldExecRefID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldWorkingIndicator.offset = -1;
     fieldOrdRejReason.offset = -1;
     fieldExecRestatementReason.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldPeggedPrice.offset = -1;
     fieldDiscretionPrice.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldTargetStrategyPerformance.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldExecInst.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldLastQty.offset = -1;
     fieldUnderlyingLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldUnderlyingLastPx.offset = -1;
     fieldLastParPx.offset = -1;
     fieldLastSpotRate.offset = -1;
     fieldLastForwardPoints.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTimeBracket.offset = -1;
     fieldLastCapacity.offset = -1;
     fieldLeavesQty.offset = -1;
     fieldCumQty.offset = -1;
     fieldAvgPx.offset = -1;
     fieldDayOrderQty.offset = -1;
     fieldDayCumQty.offset = -1;
     fieldDayAvgPx.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldReportToExch.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldExDate.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldTradedFlatSwitch.offset = -1;
     fieldBasisFeatureDate.offset = -1;
     fieldBasisFeaturePrice.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldSettlCurrAmt.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldSettlCurrFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldHandlInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldMaxShow.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldLastForwardPoints2.offset = -1;
     fieldMultiLegReportingType.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldTransBkdTime.offset = -1;
     fieldExecValuationPoint.offset = -1;
     fieldExecPriceType.offset = -1;
     fieldExecPriceAdjustment.offset = -1;
     fieldPriorityIndicator.offset = -1;
     fieldPriceImprovement.offset = -1;
     fieldLastLiquidityInd.offset = -1;
     for( auto g = groupsContAmts.begin(); g != groupsContAmts.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCopyMsgIndicator.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldWorkingIndicator.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldListID.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldCxlRejResponseTo.offset = -1;
     fieldCxlRejReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageLogon::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldEncryptMethod.offset = -1;
     fieldHeartBtInt.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldResetSeqNumFlag.offset = -1;
     fieldNextExpectedMsgSeqNum.offset = -1;
     fieldMaxMessageSize.offset = -1;
     for( auto g = groupsMsgTypes.begin(); g != groupsMsgTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTestMessageIndicator.offset = -1;
     fieldUsername.offset = -1;
     fieldPassword.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNews::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrigTime.offset = -1;
     fieldUrgency.offset = -1;
     fieldHeadline.offset = -1;
     fieldEncodedHeadlineLen.offset = -1;
     fieldEncodedHeadline.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLinesOfText.begin(); g != groupsLinesOfText.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldURLLink.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageEmail::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldEmailThreadID.offset = -1;
     fieldEmailType.offset = -1;
     fieldOrigTime.offset = -1;
     fieldSubject.offset = -1;
     fieldEncodedSubjectLen.offset = -1;
     fieldEncodedSubject.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsLinesOfText.begin(); g != groupsLinesOfText.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderSingle::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     fieldSide.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldPrice2.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldProgRptReqs.offset = -1;
     fieldBidType.offset = -1;
     fieldProgPeriodInterval.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldListExecInstType.offset = -1;
     fieldListExecInst.offset = -1;
     fieldEncodedListExecInstLen.offset = -1;
     fieldEncodedListExecInst.offset = -1;
     fieldAllowableOneSidednessPct.offset = -1;
     fieldAllowableOneSidednessValue.offset = -1;
     fieldAllowableOneSidednessCurr.offset = -1;
     fieldTotNoOrders.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrigClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldListID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldComplianceID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelReplaceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldListID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldCurrency.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldPrice2.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdStatusReqID.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAllocationInstruction::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocID.offset = -1;
     fieldAllocTransType.offset = -1;
     fieldAllocType.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldRefAllocID.offset = -1;
     fieldAllocCancReplaceReason.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldAllocLinkID.offset = -1;
     fieldAllocLinkType.offset = -1;
     fieldBookingRefID.offset = -1;
     fieldAllocNoOrdersType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPreviouslyReported.offset = -1;
     fieldReversalIndicator.offset = -1;
     fieldMatchType.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldCurrency.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldBookingType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldAutoAcceptIndicator.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldTotalAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldLegalConfirm.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldTotNoAllocs.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageListCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListExecute::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldBidID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldListStatusType.offset = -1;
     fieldNoRpts.offset = -1;
     fieldListOrderStatus.offset = -1;
     fieldRptSeq.offset = -1;
     fieldListStatusText.offset = -1;
     fieldEncodedListStatusTextLen.offset = -1;
     fieldEncodedListStatusText.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTotNoOrders.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationInstructionAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecondaryAllocID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldAllocType.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageDontKnowTrade::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldExecID.offset = -1;
     fieldDKReason.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldRFQReqID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderCapacity.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuote::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommType.offset = -1;
     fieldCommission.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSettlementInstructions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSettlInstMsgID.offset = -1;
     fieldSettlInstReqID.offset = -1;
     fieldSettlInstMode.offset = -1;
     fieldSettlInstReqRejCode.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldClOrdID.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsSettlInst.begin(); g != groupsSettlInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageMarketDataRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldMarketDepth.offset = -1;
     fieldMDUpdateType.offset = -1;
     fieldAggregatedBook.offset = -1;
     fieldOpenCloseSettlFlag.offset = -1;
     fieldScope.offset = -1;
     fieldMDImplicitDelete.offset = -1;
     for( auto g = groupsMDEntryTypes.begin(); g != groupsMDEntryTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueAction.offset = -1;
     fieldApplQueueMax.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataSnapshotFullRefresh::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldFinancialStatus.offset = -1;
     fieldCorporateAction.offset = -1;
     fieldNetChgPrevDay.offset = -1;
     for( auto g = groupsMDEntries.begin(); g != groupsMDEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueDepth.offset = -1;
     fieldApplQueueResolution.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataIncrementalRefresh::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     for( auto g = groupsMDEntries.begin(); g != groupsMDEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueDepth.offset = -1;
     fieldApplQueueResolution.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataRequestReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMDReqID.offset = -1;
     fieldMDReqRejReason.offset = -1;
     for( auto g = groupsAltMDSource.begin(); g != groupsAltMDSource.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteCancel::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteCancelType.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     for( auto g = groupsQuoteEntries.begin(); g != groupsQuoteEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageQuoteStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteStatusReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMassQuoteAcknowledgement::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteStatus.offset = -1;
     fieldQuoteRejectReason.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsQuoteSets.begin(); g != groupsQuoteSets.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageSecurityDefinitionRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityRequestType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpirationCycle.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityDefinition::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityResponseType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpirationCycle.offset = -1;
     fieldRoundLot.offset = -1;
     fieldMinTradeVol.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityStatusReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityStatusReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldSecurityTradingStatus.offset = -1;
     fieldFinancialStatus.offset = -1;
     fieldCorporateAction.offset = -1;
     fieldHaltReasonChar.offset = -1;
     fieldInViewOfCommon.offset = -1;
     fieldDueToRelated.offset = -1;
     fieldBuyVolume.offset = -1;
     fieldSellVolume.offset = -1;
     fieldHighPx.offset = -1;
     fieldLowPx.offset = -1;
     fieldLastPx.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAdjustment.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradingSessionStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradSesReqID.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTradSesMethod.offset = -1;
     fieldTradSesMode.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradingSessionStatus::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradSesReqID.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTradSesMethod.offset = -1;
     fieldTradSesMode.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldTradSesStatus.offset = -1;
     fieldTradSesStatusRejReason.offset = -1;
     fieldTradSesStartTime.offset = -1;
     fieldTradSesOpenTime.offset = -1;
     fieldTradSesPreCloseTime.offset = -1;
     fieldTradSesCloseTime.offset = -1;
     fieldTradSesEndTime.offset = -1;
     fieldTotalVolumeTraded.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMassQuote::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteType.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDefBidSize.offset = -1;
     fieldDefOfferSize.offset = -1;
     for( auto g = groupsQuoteSets.begin(); g != groupsQuoteSets.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageBusinessMessageReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRefSeqNum.offset = -1;
     fieldRefMsgType.offset = -1;
     fieldBusinessRejectRefID.offset = -1;
     fieldBusinessRejectReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageBidRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldBidRequestTransType.offset = -1;
     fieldListName.offset = -1;
     fieldTotNoRelatedSym.offset = -1;
     fieldBidType.offset = -1;
     fieldNumTickets.offset = -1;
     fieldCurrency.offset = -1;
     fieldSideValue1.offset = -1;
     fieldSideValue2.offset = -1;
     for( auto g = groupsBidDescriptors.begin(); g != groupsBidDescriptors.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsBidComponents.begin(); g != groupsBidComponents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLiquidityIndType.offset = -1;
     fieldWtAverageLiquidity.offset = -1;
     fieldExchangeForPhysical.offset = -1;
     fieldOutMainCntryUIndex.offset = -1;
     fieldCrossPercent.offset = -1;
     fieldProgRptReqs.offset = -1;
     fieldProgPeriodInterval.offset = -1;
     fieldIncTaxInd.offset = -1;
     fieldForexReq.offset = -1;
     fieldNumBidders.offset = -1;
     fieldTradeDate.offset = -1;
     fieldBidTradeType.offset = -1;
     fieldBasisPxType.offset = -1;
     fieldStrikeTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageBidResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     for( auto g = groupsBidComponents.begin(); g != groupsBidComponents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageListStrikePrice::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldListID.offset = -1;
     fieldTotNoStrikes.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsStrikes.begin(); g != groupsStrikes.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageXMLnonFIX::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCheckSum.offset = -1;
}

void MessageRegistrationInstructions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRegistID.offset = -1;
     fieldRegistTransType.offset = -1;
     fieldRegistRefID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldRegistAcctType.offset = -1;
     fieldTaxAdvantageType.offset = -1;
     fieldOwnershipType.offset = -1;
     for( auto g = groupsRegistDtls.begin(); g != groupsRegistDtls.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsDistribInsts.begin(); g != groupsDistribInsts.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageRegistrationInstructionsResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRegistID.offset = -1;
     fieldRegistTransType.offset = -1;
     fieldRegistRefID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldRegistStatus.offset = -1;
     fieldRegistRejReasonCode.offset = -1;
     fieldRegistRejReasonText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldMassCancelRequestType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassCancelReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldMassCancelRequestType.offset = -1;
     fieldMassCancelResponse.offset = -1;
     fieldMassCancelRejectReason.offset = -1;
     fieldTotalAffectedOrders.offset = -1;
     for( auto g = groupsAffectedOrders.begin(); g != groupsAffectedOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderCross::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldPrevClosePx.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCrossOrderCancelReplaceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldPrevClosePx.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCrossOrderCancelRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityTypeRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityTypes::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityResponseType.offset = -1;
     fieldTotNoSecurityTypes.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsSecurityTypes.begin(); g != groupsSecurityTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityListRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityListRequestType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityRequestResult.offset = -1;
     fieldTotNoRelatedSym.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageDerivativeSecurityListRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityListRequestType.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecuritySubType.offset = -1;
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageDerivativeSecurityList::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityRequestResult.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTotNoRelatedSym.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageNewOrderMultileg::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldMultiLegRptTypeReq.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMultilegOrderCancelReplace::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldOrderID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldMultiLegRptTypeReq.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeRequestID.offset = -1;
     fieldTradeRequestType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeReportID.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldExecID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsDates.begin(); g != groupsDates.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingBusinessDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTimeBracket.offset = -1;
     fieldSide.offset = -1;
     fieldMultiLegReportingType.offset = -1;
     fieldTradeInputSource.offset = -1;
     fieldTradeInputDevice.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeReportID.offset = -1;
     fieldTradeReportTransType.offset = -1;
     fieldTradeReportType.offset = -1;
     fieldTradeRequestID.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldExecType.offset = -1;
     fieldTotNumTradeReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldExecID.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldExecRestatementReason.offset = -1;
     fieldPreviouslyReported.offset = -1;
     fieldPriceType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldQtyType.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingTradingSessionID.offset = -1;
     fieldUnderlyingTradingSessionSubID.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldLastParPx.offset = -1;
     fieldLastSpotRate.offset = -1;
     fieldLastForwardPoints.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeDate.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldAvgPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldAvgPxIndicator.offset = -1;
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMultiLegReportingType.offset = -1;
     fieldTradeLegRefID.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldMatchType.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCopyMsgIndicator.offset = -1;
     fieldPublishTrdIndicator.offset = -1;
     fieldShortSaleReason.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldMassStatusReqID.offset = -1;
     fieldMassStatusReqType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteRequestReject::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteReqID.offset = -1;
     fieldRFQReqID.offset = -1;
     fieldQuoteRequestRejectReason.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRFQRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldRFQReqID.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteStatusReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteStatusReqID.offset = -1;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpireTime.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommType.offset = -1;
     fieldCommission.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldQuoteStatus.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldQuoteRespID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageConfirmation::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmID.offset = -1;
     fieldConfirmRefID.offset = -1;
     fieldConfirmReqID.offset = -1;
     fieldConfirmTransType.offset = -1;
     fieldConfirmType.offset = -1;
     fieldCopyMsgIndicator.offset = -1;
     fieldLegalConfirm.offset = -1;
     fieldConfirmStatus.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocID.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldIndividualAllocID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTradeDate.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldAllocQty.offset = -1;
     fieldQtyType.offset = -1;
     fieldSide.offset = -1;
     fieldCurrency.offset = -1;
     fieldLastMkt.offset = -1;
     for( auto g = groupsCapacities.begin(); g != groupsCapacities.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldAllocAccountType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldReportedPx.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldProcessCode.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldExDate.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldMaturityNetMoney.offset = -1;
     fieldSettlCurrAmt.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldSettlCurrFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldSharedCommission.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessagePositionMaintenanceRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosReqID.offset = -1;
     fieldPosTransType.offset = -1;
     fieldPosMaintAction.offset = -1;
     fieldOrigPosReqRefID.offset = -1;
     fieldPosMaintRptRefID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdjustmentType.offset = -1;
     fieldContraryInstructionIndicator.offset = -1;
     fieldPriorSpreadIndicator.offset = -1;
     fieldThresholdAmount.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessagePositionMaintenanceReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosTransType.offset = -1;
     fieldPosReqID.offset = -1;
     fieldPosMaintAction.offset = -1;
     fieldOrigPosReqRefID.offset = -1;
     fieldPosMaintStatus.offset = -1;
     fieldPosMaintResult.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdjustmentType.offset = -1;
     fieldThresholdAmount.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRequestForPositions::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosReqID.offset = -1;
     fieldPosReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRequestForPositionsAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosReqID.offset = -1;
     fieldTotalNumPosReports.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldPosReqResult.offset = -1;
     fieldPosReqStatus.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessagePositionReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldPosMaintRptID.offset = -1;
     fieldPosReqID.offset = -1;
     fieldPosReqType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTotalNumPosReports.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldPosReqResult.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldSettlPrice.offset = -1;
     fieldSettlPriceType.offset = -1;
     fieldPriorSettlPrice.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldRegistStatus.offset = -1;
     fieldDeliveryDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportRequestAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeRequestID.offset = -1;
     fieldTradeRequestType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTotNumTradeReports.offset = -1;
     fieldTradeRequestResult.offset = -1;
     fieldTradeRequestStatus.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMultiLegReportingType.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldTradeReportID.offset = -1;
     fieldTradeReportTransType.offset = -1;
     fieldTradeReportType.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldExecType.offset = -1;
     fieldTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportRefID.offset = -1;
     fieldTrdRptStatus.offset = -1;
     fieldTradeReportRejectReason.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldExecID.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingFeeIndicator.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldPreallocMethod.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocReportID.offset = -1;
     fieldAllocID.offset = -1;
     fieldAllocTransType.offset = -1;
     fieldAllocReportRefID.offset = -1;
     fieldAllocCancReplaceReason.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldAllocReportType.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldRefAllocID.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldAllocLinkID.offset = -1;
     fieldAllocLinkType.offset = -1;
     fieldBookingRefID.offset = -1;
     fieldAllocNoOrdersType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPreviouslyReported.offset = -1;
     fieldReversalIndicator.offset = -1;
     fieldMatchType.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldCurrency.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldBookingType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldAutoAcceptIndicator.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldTotalAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldLegalConfirm.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldTotNoAllocs.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationReportAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAllocReportID.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecondaryAllocID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldAllocReportType.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageConfirmationAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAffirmStatus.offset = -1;
     fieldConfirmRejReason.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSettlementInstructionRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldSettlInstReqID.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldSide.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldCFICode.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireTime.offset = -1;
     fieldLastUpdateTime.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAssignmentReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldAsgnRptID.offset = -1;
     fieldTotNumAssignmentReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldThresholdAmount.offset = -1;
     fieldSettlPrice.offset = -1;
     fieldSettlPriceType.offset = -1;
     fieldUnderlyingSettlPrice.offset = -1;
     fieldExpireDate.offset = -1;
     fieldAssignmentMethod.offset = -1;
     fieldAssignmentUnit.offset = -1;
     fieldOpenInterest.offset = -1;
     fieldExerciseMethod.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldTransactTime.offset = -1;
     fieldExpireTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralAssignment::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollAsgnID.offset = -1;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldCollAsgnTransType.offset = -1;
     fieldCollAsgnRefID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldExpireTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollRespID.offset = -1;
     fieldCollAsgnID.offset = -1;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldCollAsgnTransType.offset = -1;
     fieldCollAsgnRespType.offset = -1;
     fieldCollAsgnRejectReason.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralReport::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollRptID.offset = -1;
     fieldCollInquiryID.offset = -1;
     fieldCollStatus.offset = -1;
     fieldTotNumReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralInquiry::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollInquiryID.offset = -1;
     for( auto g = groupsCollInquiryQualifier.begin(); g != groupsCollInquiryQualifier.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSubscriptionRequestType.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNetworkCounterpartySystemStatusRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldNetworkRequestType.offset = -1;
     fieldNetworkRequestID.offset = -1;
     for( auto g = groupsCompIDs.begin(); g != groupsCompIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageNetworkCounterpartySystemStatusResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldNetworkStatusResponseType.offset = -1;
     fieldNetworkRequestID.offset = -1;
     fieldNetworkResponseID.offset = -1;
     fieldLastNetworkResponseID.offset = -1;
     for( auto g = groupsCompIDs.begin(); g != groupsCompIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageUserRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldUserRequestID.offset = -1;
     fieldUserRequestType.offset = -1;
     fieldUsername.offset = -1;
     fieldPassword.offset = -1;
     fieldNewPassword.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageUserResponse::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldUserRequestID.offset = -1;
     fieldUsername.offset = -1;
     fieldUserStatus.offset = -1;
     fieldUserStatusText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralInquiryAck::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldCollInquiryID.offset = -1;
     fieldCollInquiryStatus.offset = -1;
     fieldCollInquiryResult.offset = -1;
     for( auto g = groupsCollInquiryQualifier.begin(); g != groupsCollInquiryQualifier.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTotNumReports.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageConfirmationRequest::reset(){
     _fixPtr = nullptr;
     _fixLength = 0;
     fieldConfirmReqID.offset = -1;
     fieldConfirmType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocID.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldIndividualAllocID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldAllocAccountType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}


// -------------------------------------- ParserDispatcher ----------------------------------------


const char * ParserDispatcher::parseAndDipatch( const char * buf, unsigned len, bool resetMessage )
{
    if( resetMessage )
    {
        _msgHeader.reset();
    }
    offset_t pos = _msgHeader.scan( buf, len );

    unsigned bodyLength = _msgHeader.getBodyLength();
    const char * endOfMessage = _msgHeader.ptrToMsgType() + bodyLength + 4; // 7 for checkSum - 3 for msg type tag
    if( endOfMessage - buf > len )
    {
        return nullptr;
    }

    const raw_enum_t msgType = toRawEnum( _msgHeader.ptrToMsgType() );
    if( ignoreMessage( msgType ) )
    {
      return endOfMessage;
    }

    buf += pos;
    switch( msgType )
    {


// case-begin-_
// After generation one can sed this out if _ is not incoming message
      case MsgTypeRaw__ : {
       if( resetMessage ) _msgHeader.reset();
       pos = _msgHeader.scan( buf, len - pos );
       onMessage( _msgHeader );
       break;
      }
// case-end-_


// case-begin-HEARTBEAT
// After generation one can sed this out if HEARTBEAT is not incoming message
      case MsgTypeRaw_HEARTBEAT : {
       if( resetMessage ) _msgHeartbeat.reset();
       pos = _msgHeartbeat.scan( buf, len - pos );
       onMessage( _msgHeartbeat );
       break;
      }
// case-end-HEARTBEAT


// case-begin-TEST_REQUEST
// After generation one can sed this out if TEST_REQUEST is not incoming message
      case MsgTypeRaw_TEST_REQUEST : {
       if( resetMessage ) _msgTestRequest.reset();
       pos = _msgTestRequest.scan( buf, len - pos );
       onMessage( _msgTestRequest );
       break;
      }
// case-end-TEST_REQUEST


// case-begin-RESEND_REQUEST
// After generation one can sed this out if RESEND_REQUEST is not incoming message
      case MsgTypeRaw_RESEND_REQUEST : {
       if( resetMessage ) _msgResendRequest.reset();
       pos = _msgResendRequest.scan( buf, len - pos );
       onMessage( _msgResendRequest );
       break;
      }
// case-end-RESEND_REQUEST


// case-begin-REJECT
// After generation one can sed this out if REJECT is not incoming message
      case MsgTypeRaw_REJECT : {
       if( resetMessage ) _msgReject.reset();
       pos = _msgReject.scan( buf, len - pos );
       onMessage( _msgReject );
       break;
      }
// case-end-REJECT


// case-begin-SEQUENCE_RESET
// After generation one can sed this out if SEQUENCE_RESET is not incoming message
      case MsgTypeRaw_SEQUENCE_RESET : {
       if( resetMessage ) _msgSequenceReset.reset();
       pos = _msgSequenceReset.scan( buf, len - pos );
       onMessage( _msgSequenceReset );
       break;
      }
// case-end-SEQUENCE_RESET


// case-begin-LOGOUT
// After generation one can sed this out if LOGOUT is not incoming message
      case MsgTypeRaw_LOGOUT : {
       if( resetMessage ) _msgLogout.reset();
       pos = _msgLogout.scan( buf, len - pos );
       onMessage( _msgLogout );
       break;
      }
// case-end-LOGOUT


// case-begin-INDICATION_OF_INTEREST
// After generation one can sed this out if INDICATION_OF_INTEREST is not incoming message
      case MsgTypeRaw_INDICATION_OF_INTEREST : {
       if( resetMessage ) _msgIOI.reset();
       pos = _msgIOI.scan( buf, len - pos );
       onMessage( _msgIOI );
       break;
      }
// case-end-INDICATION_OF_INTEREST


// case-begin-ADVERTISEMENT
// After generation one can sed this out if ADVERTISEMENT is not incoming message
      case MsgTypeRaw_ADVERTISEMENT : {
       if( resetMessage ) _msgAdvertisement.reset();
       pos = _msgAdvertisement.scan( buf, len - pos );
       onMessage( _msgAdvertisement );
       break;
      }
// case-end-ADVERTISEMENT


// case-begin-EXECUTION_REPORT
// After generation one can sed this out if EXECUTION_REPORT is not incoming message
      case MsgTypeRaw_EXECUTION_REPORT : {
       if( resetMessage ) _msgExecutionReport.reset();
       pos = _msgExecutionReport.scan( buf, len - pos );
       onMessage( _msgExecutionReport );
       break;
      }
// case-end-EXECUTION_REPORT


// case-begin-ORDER_CANCEL_REJECT
// After generation one can sed this out if ORDER_CANCEL_REJECT is not incoming message
      case MsgTypeRaw_ORDER_CANCEL_REJECT : {
       if( resetMessage ) _msgOrderCancelReject.reset();
       pos = _msgOrderCancelReject.scan( buf, len - pos );
       onMessage( _msgOrderCancelReject );
       break;
      }
// case-end-ORDER_CANCEL_REJECT


// case-begin-LOGON
// After generation one can sed this out if LOGON is not incoming message
      case MsgTypeRaw_LOGON : {
       if( resetMessage ) _msgLogon.reset();
       pos = _msgLogon.scan( buf, len - pos );
       onMessage( _msgLogon );
       break;
      }
// case-end-LOGON


// case-begin-NEWS
// After generation one can sed this out if NEWS is not incoming message
      case MsgTypeRaw_NEWS : {
       if( resetMessage ) _msgNews.reset();
       pos = _msgNews.scan( buf, len - pos );
       onMessage( _msgNews );
       break;
      }
// case-end-NEWS


// case-begin-EMAIL
// After generation one can sed this out if EMAIL is not incoming message
      case MsgTypeRaw_EMAIL : {
       if( resetMessage ) _msgEmail.reset();
       pos = _msgEmail.scan( buf, len - pos );
       onMessage( _msgEmail );
       break;
      }
// case-end-EMAIL


// case-begin-ORDER_SINGLE
// After generation one can sed this out if ORDER_SINGLE is not incoming message
      case MsgTypeRaw_ORDER_SINGLE : {
       if( resetMessage ) _msgNewOrderSingle.reset();
       pos = _msgNewOrderSingle.scan( buf, len - pos );
       onMessage( _msgNewOrderSingle );
       break;
      }
// case-end-ORDER_SINGLE


// case-begin-ORDER_LIST
// After generation one can sed this out if ORDER_LIST is not incoming message
      case MsgTypeRaw_ORDER_LIST : {
       if( resetMessage ) _msgNewOrderList.reset();
       pos = _msgNewOrderList.scan( buf, len - pos );
       onMessage( _msgNewOrderList );
       break;
      }
// case-end-ORDER_LIST


// case-begin-ORDER_CANCEL_REQUEST
// After generation one can sed this out if ORDER_CANCEL_REQUEST is not incoming message
      case MsgTypeRaw_ORDER_CANCEL_REQUEST : {
       if( resetMessage ) _msgOrderCancelRequest.reset();
       pos = _msgOrderCancelRequest.scan( buf, len - pos );
       onMessage( _msgOrderCancelRequest );
       break;
      }
// case-end-ORDER_CANCEL_REQUEST


// case-begin-ORDER_CANCEL_REPLACE_REQUEST
// After generation one can sed this out if ORDER_CANCEL_REPLACE_REQUEST is not incoming message
      case MsgTypeRaw_ORDER_CANCEL_REPLACE_REQUEST : {
       if( resetMessage ) _msgOrderCancelReplaceRequest.reset();
       pos = _msgOrderCancelReplaceRequest.scan( buf, len - pos );
       onMessage( _msgOrderCancelReplaceRequest );
       break;
      }
// case-end-ORDER_CANCEL_REPLACE_REQUEST


// case-begin-ORDER_STATUS_REQUEST
// After generation one can sed this out if ORDER_STATUS_REQUEST is not incoming message
      case MsgTypeRaw_ORDER_STATUS_REQUEST : {
       if( resetMessage ) _msgOrderStatusRequest.reset();
       pos = _msgOrderStatusRequest.scan( buf, len - pos );
       onMessage( _msgOrderStatusRequest );
       break;
      }
// case-end-ORDER_STATUS_REQUEST


// case-begin-ALLOCATION_INSTRUCTION
// After generation one can sed this out if ALLOCATION_INSTRUCTION is not incoming message
      case MsgTypeRaw_ALLOCATION_INSTRUCTION : {
       if( resetMessage ) _msgAllocationInstruction.reset();
       pos = _msgAllocationInstruction.scan( buf, len - pos );
       onMessage( _msgAllocationInstruction );
       break;
      }
// case-end-ALLOCATION_INSTRUCTION


// case-begin-LIST_CANCEL_REQUEST
// After generation one can sed this out if LIST_CANCEL_REQUEST is not incoming message
      case MsgTypeRaw_LIST_CANCEL_REQUEST : {
       if( resetMessage ) _msgListCancelRequest.reset();
       pos = _msgListCancelRequest.scan( buf, len - pos );
       onMessage( _msgListCancelRequest );
       break;
      }
// case-end-LIST_CANCEL_REQUEST


// case-begin-LIST_EXECUTE
// After generation one can sed this out if LIST_EXECUTE is not incoming message
      case MsgTypeRaw_LIST_EXECUTE : {
       if( resetMessage ) _msgListExecute.reset();
       pos = _msgListExecute.scan( buf, len - pos );
       onMessage( _msgListExecute );
       break;
      }
// case-end-LIST_EXECUTE


// case-begin-LIST_STATUS_REQUEST
// After generation one can sed this out if LIST_STATUS_REQUEST is not incoming message
      case MsgTypeRaw_LIST_STATUS_REQUEST : {
       if( resetMessage ) _msgListStatusRequest.reset();
       pos = _msgListStatusRequest.scan( buf, len - pos );
       onMessage( _msgListStatusRequest );
       break;
      }
// case-end-LIST_STATUS_REQUEST


// case-begin-LIST_STATUS
// After generation one can sed this out if LIST_STATUS is not incoming message
      case MsgTypeRaw_LIST_STATUS : {
       if( resetMessage ) _msgListStatus.reset();
       pos = _msgListStatus.scan( buf, len - pos );
       onMessage( _msgListStatus );
       break;
      }
// case-end-LIST_STATUS


// case-begin-ALLOCATION_INSTRUCTION_ACK
// After generation one can sed this out if ALLOCATION_INSTRUCTION_ACK is not incoming message
      case MsgTypeRaw_ALLOCATION_INSTRUCTION_ACK : {
       if( resetMessage ) _msgAllocationInstructionAck.reset();
       pos = _msgAllocationInstructionAck.scan( buf, len - pos );
       onMessage( _msgAllocationInstructionAck );
       break;
      }
// case-end-ALLOCATION_INSTRUCTION_ACK


// case-begin-DONT_KNOW_TRADE
// After generation one can sed this out if DONT_KNOW_TRADE is not incoming message
      case MsgTypeRaw_DONT_KNOW_TRADE : {
       if( resetMessage ) _msgDontKnowTrade.reset();
       pos = _msgDontKnowTrade.scan( buf, len - pos );
       onMessage( _msgDontKnowTrade );
       break;
      }
// case-end-DONT_KNOW_TRADE


// case-begin-QUOTE_REQUEST
// After generation one can sed this out if QUOTE_REQUEST is not incoming message
      case MsgTypeRaw_QUOTE_REQUEST : {
       if( resetMessage ) _msgQuoteRequest.reset();
       pos = _msgQuoteRequest.scan( buf, len - pos );
       onMessage( _msgQuoteRequest );
       break;
      }
// case-end-QUOTE_REQUEST


// case-begin-QUOTE
// After generation one can sed this out if QUOTE is not incoming message
      case MsgTypeRaw_QUOTE : {
       if( resetMessage ) _msgQuote.reset();
       pos = _msgQuote.scan( buf, len - pos );
       onMessage( _msgQuote );
       break;
      }
// case-end-QUOTE


// case-begin-SETTLEMENT_INSTRUCTIONS
// After generation one can sed this out if SETTLEMENT_INSTRUCTIONS is not incoming message
      case MsgTypeRaw_SETTLEMENT_INSTRUCTIONS : {
       if( resetMessage ) _msgSettlementInstructions.reset();
       pos = _msgSettlementInstructions.scan( buf, len - pos );
       onMessage( _msgSettlementInstructions );
       break;
      }
// case-end-SETTLEMENT_INSTRUCTIONS


// case-begin-MARKET_DATA_REQUEST
// After generation one can sed this out if MARKET_DATA_REQUEST is not incoming message
      case MsgTypeRaw_MARKET_DATA_REQUEST : {
       if( resetMessage ) _msgMarketDataRequest.reset();
       pos = _msgMarketDataRequest.scan( buf, len - pos );
       onMessage( _msgMarketDataRequest );
       break;
      }
// case-end-MARKET_DATA_REQUEST


// case-begin-MARKET_DATA_SNAPSHOT_FULL_REFRESH
// After generation one can sed this out if MARKET_DATA_SNAPSHOT_FULL_REFRESH is not incoming message
      case MsgTypeRaw_MARKET_DATA_SNAPSHOT_FULL_REFRESH : {
       if( resetMessage ) _msgMarketDataSnapshotFullRefresh.reset();
       pos = _msgMarketDataSnapshotFullRefresh.scan( buf, len - pos );
       onMessage( _msgMarketDataSnapshotFullRefresh );
       break;
      }
// case-end-MARKET_DATA_SNAPSHOT_FULL_REFRESH


// case-begin-MARKET_DATA_INCREMENTAL_REFRESH
// After generation one can sed this out if MARKET_DATA_INCREMENTAL_REFRESH is not incoming message
      case MsgTypeRaw_MARKET_DATA_INCREMENTAL_REFRESH : {
       if( resetMessage ) _msgMarketDataIncrementalRefresh.reset();
       pos = _msgMarketDataIncrementalRefresh.scan( buf, len - pos );
       onMessage( _msgMarketDataIncrementalRefresh );
       break;
      }
// case-end-MARKET_DATA_INCREMENTAL_REFRESH


// case-begin-MARKET_DATA_REQUEST_REJECT
// After generation one can sed this out if MARKET_DATA_REQUEST_REJECT is not incoming message
      case MsgTypeRaw_MARKET_DATA_REQUEST_REJECT : {
       if( resetMessage ) _msgMarketDataRequestReject.reset();
       pos = _msgMarketDataRequestReject.scan( buf, len - pos );
       onMessage( _msgMarketDataRequestReject );
       break;
      }
// case-end-MARKET_DATA_REQUEST_REJECT


// case-begin-QUOTE_CANCEL
// After generation one can sed this out if QUOTE_CANCEL is not incoming message
      case MsgTypeRaw_QUOTE_CANCEL : {
       if( resetMessage ) _msgQuoteCancel.reset();
       pos = _msgQuoteCancel.scan( buf, len - pos );
       onMessage( _msgQuoteCancel );
       break;
      }
// case-end-QUOTE_CANCEL


// case-begin-QUOTE_STATUS_REQUEST
// After generation one can sed this out if QUOTE_STATUS_REQUEST is not incoming message
      case MsgTypeRaw_QUOTE_STATUS_REQUEST : {
       if( resetMessage ) _msgQuoteStatusRequest.reset();
       pos = _msgQuoteStatusRequest.scan( buf, len - pos );
       onMessage( _msgQuoteStatusRequest );
       break;
      }
// case-end-QUOTE_STATUS_REQUEST


// case-begin-MASS_QUOTE_ACKNOWLEDGEMENT
// After generation one can sed this out if MASS_QUOTE_ACKNOWLEDGEMENT is not incoming message
      case MsgTypeRaw_MASS_QUOTE_ACKNOWLEDGEMENT : {
       if( resetMessage ) _msgMassQuoteAcknowledgement.reset();
       pos = _msgMassQuoteAcknowledgement.scan( buf, len - pos );
       onMessage( _msgMassQuoteAcknowledgement );
       break;
      }
// case-end-MASS_QUOTE_ACKNOWLEDGEMENT


// case-begin-SECURITY_DEFINITION_REQUEST
// After generation one can sed this out if SECURITY_DEFINITION_REQUEST is not incoming message
      case MsgTypeRaw_SECURITY_DEFINITION_REQUEST : {
       if( resetMessage ) _msgSecurityDefinitionRequest.reset();
       pos = _msgSecurityDefinitionRequest.scan( buf, len - pos );
       onMessage( _msgSecurityDefinitionRequest );
       break;
      }
// case-end-SECURITY_DEFINITION_REQUEST


// case-begin-SECURITY_DEFINITION
// After generation one can sed this out if SECURITY_DEFINITION is not incoming message
      case MsgTypeRaw_SECURITY_DEFINITION : {
       if( resetMessage ) _msgSecurityDefinition.reset();
       pos = _msgSecurityDefinition.scan( buf, len - pos );
       onMessage( _msgSecurityDefinition );
       break;
      }
// case-end-SECURITY_DEFINITION


// case-begin-SECURITY_STATUS_REQUEST
// After generation one can sed this out if SECURITY_STATUS_REQUEST is not incoming message
      case MsgTypeRaw_SECURITY_STATUS_REQUEST : {
       if( resetMessage ) _msgSecurityStatusRequest.reset();
       pos = _msgSecurityStatusRequest.scan( buf, len - pos );
       onMessage( _msgSecurityStatusRequest );
       break;
      }
// case-end-SECURITY_STATUS_REQUEST


// case-begin-SECURITY_STATUS
// After generation one can sed this out if SECURITY_STATUS is not incoming message
      case MsgTypeRaw_SECURITY_STATUS : {
       if( resetMessage ) _msgSecurityStatus.reset();
       pos = _msgSecurityStatus.scan( buf, len - pos );
       onMessage( _msgSecurityStatus );
       break;
      }
// case-end-SECURITY_STATUS


// case-begin-TRADING_SESSION_STATUS_REQUEST
// After generation one can sed this out if TRADING_SESSION_STATUS_REQUEST is not incoming message
      case MsgTypeRaw_TRADING_SESSION_STATUS_REQUEST : {
       if( resetMessage ) _msgTradingSessionStatusRequest.reset();
       pos = _msgTradingSessionStatusRequest.scan( buf, len - pos );
       onMessage( _msgTradingSessionStatusRequest );
       break;
      }
// case-end-TRADING_SESSION_STATUS_REQUEST


// case-begin-TRADING_SESSION_STATUS
// After generation one can sed this out if TRADING_SESSION_STATUS is not incoming message
      case MsgTypeRaw_TRADING_SESSION_STATUS : {
       if( resetMessage ) _msgTradingSessionStatus.reset();
       pos = _msgTradingSessionStatus.scan( buf, len - pos );
       onMessage( _msgTradingSessionStatus );
       break;
      }
// case-end-TRADING_SESSION_STATUS


// case-begin-MASS_QUOTE
// After generation one can sed this out if MASS_QUOTE is not incoming message
      case MsgTypeRaw_MASS_QUOTE : {
       if( resetMessage ) _msgMassQuote.reset();
       pos = _msgMassQuote.scan( buf, len - pos );
       onMessage( _msgMassQuote );
       break;
      }
// case-end-MASS_QUOTE


// case-begin-BUSINESS_MESSAGE_REJECT
// After generation one can sed this out if BUSINESS_MESSAGE_REJECT is not incoming message
      case MsgTypeRaw_BUSINESS_MESSAGE_REJECT : {
       if( resetMessage ) _msgBusinessMessageReject.reset();
       pos = _msgBusinessMessageReject.scan( buf, len - pos );
       onMessage( _msgBusinessMessageReject );
       break;
      }
// case-end-BUSINESS_MESSAGE_REJECT


// case-begin-BID_REQUEST
// After generation one can sed this out if BID_REQUEST is not incoming message
      case MsgTypeRaw_BID_REQUEST : {
       if( resetMessage ) _msgBidRequest.reset();
       pos = _msgBidRequest.scan( buf, len - pos );
       onMessage( _msgBidRequest );
       break;
      }
// case-end-BID_REQUEST


// case-begin-BID_RESPONSE
// After generation one can sed this out if BID_RESPONSE is not incoming message
      case MsgTypeRaw_BID_RESPONSE : {
       if( resetMessage ) _msgBidResponse.reset();
       pos = _msgBidResponse.scan( buf, len - pos );
       onMessage( _msgBidResponse );
       break;
      }
// case-end-BID_RESPONSE


// case-begin-LIST_STRIKE_PRICE
// After generation one can sed this out if LIST_STRIKE_PRICE is not incoming message
      case MsgTypeRaw_LIST_STRIKE_PRICE : {
       if( resetMessage ) _msgListStrikePrice.reset();
       pos = _msgListStrikePrice.scan( buf, len - pos );
       onMessage( _msgListStrikePrice );
       break;
      }
// case-end-LIST_STRIKE_PRICE


// case-begin-XML_MESSAGE
// After generation one can sed this out if XML_MESSAGE is not incoming message
      case MsgTypeRaw_XML_MESSAGE : {
       if( resetMessage ) _msgXMLnonFIX.reset();
       pos = _msgXMLnonFIX.scan( buf, len - pos );
       onMessage( _msgXMLnonFIX );
       break;
      }
// case-end-XML_MESSAGE


// case-begin-REGISTRATION_INSTRUCTIONS
// After generation one can sed this out if REGISTRATION_INSTRUCTIONS is not incoming message
      case MsgTypeRaw_REGISTRATION_INSTRUCTIONS : {
       if( resetMessage ) _msgRegistrationInstructions.reset();
       pos = _msgRegistrationInstructions.scan( buf, len - pos );
       onMessage( _msgRegistrationInstructions );
       break;
      }
// case-end-REGISTRATION_INSTRUCTIONS


// case-begin-REGISTRATION_INSTRUCTIONS_RESPONSE
// After generation one can sed this out if REGISTRATION_INSTRUCTIONS_RESPONSE is not incoming message
      case MsgTypeRaw_REGISTRATION_INSTRUCTIONS_RESPONSE : {
       if( resetMessage ) _msgRegistrationInstructionsResponse.reset();
       pos = _msgRegistrationInstructionsResponse.scan( buf, len - pos );
       onMessage( _msgRegistrationInstructionsResponse );
       break;
      }
// case-end-REGISTRATION_INSTRUCTIONS_RESPONSE


// case-begin-ORDER_MASS_CANCEL_REQUEST
// After generation one can sed this out if ORDER_MASS_CANCEL_REQUEST is not incoming message
      case MsgTypeRaw_ORDER_MASS_CANCEL_REQUEST : {
       if( resetMessage ) _msgOrderMassCancelRequest.reset();
       pos = _msgOrderMassCancelRequest.scan( buf, len - pos );
       onMessage( _msgOrderMassCancelRequest );
       break;
      }
// case-end-ORDER_MASS_CANCEL_REQUEST


// case-begin-ORDER_MASS_CANCEL_REPORT
// After generation one can sed this out if ORDER_MASS_CANCEL_REPORT is not incoming message
      case MsgTypeRaw_ORDER_MASS_CANCEL_REPORT : {
       if( resetMessage ) _msgOrderMassCancelReport.reset();
       pos = _msgOrderMassCancelReport.scan( buf, len - pos );
       onMessage( _msgOrderMassCancelReport );
       break;
      }
// case-end-ORDER_MASS_CANCEL_REPORT


// case-begin-NEW_ORDER_s
// After generation one can sed this out if NEW_ORDER_s is not incoming message
      case MsgTypeRaw_NEW_ORDER_s : {
       if( resetMessage ) _msgNewOrderCross.reset();
       pos = _msgNewOrderCross.scan( buf, len - pos );
       onMessage( _msgNewOrderCross );
       break;
      }
// case-end-NEW_ORDER_s


// case-begin-CROSS_ORDER_CANCEL_REPLACE_REQUEST
// After generation one can sed this out if CROSS_ORDER_CANCEL_REPLACE_REQUEST is not incoming message
      case MsgTypeRaw_CROSS_ORDER_CANCEL_REPLACE_REQUEST : {
       if( resetMessage ) _msgCrossOrderCancelReplaceRequest.reset();
       pos = _msgCrossOrderCancelReplaceRequest.scan( buf, len - pos );
       onMessage( _msgCrossOrderCancelReplaceRequest );
       break;
      }
// case-end-CROSS_ORDER_CANCEL_REPLACE_REQUEST


// case-begin-CROSS_ORDER_CANCEL_REQUEST
// After generation one can sed this out if CROSS_ORDER_CANCEL_REQUEST is not incoming message
      case MsgTypeRaw_CROSS_ORDER_CANCEL_REQUEST : {
       if( resetMessage ) _msgCrossOrderCancelRequest.reset();
       pos = _msgCrossOrderCancelRequest.scan( buf, len - pos );
       onMessage( _msgCrossOrderCancelRequest );
       break;
      }
// case-end-CROSS_ORDER_CANCEL_REQUEST


// case-begin-SECURITY_TYPE_REQUEST
// After generation one can sed this out if SECURITY_TYPE_REQUEST is not incoming message
      case MsgTypeRaw_SECURITY_TYPE_REQUEST : {
       if( resetMessage ) _msgSecurityTypeRequest.reset();
       pos = _msgSecurityTypeRequest.scan( buf, len - pos );
       onMessage( _msgSecurityTypeRequest );
       break;
      }
// case-end-SECURITY_TYPE_REQUEST


// case-begin-SECURITY_TYPES
// After generation one can sed this out if SECURITY_TYPES is not incoming message
      case MsgTypeRaw_SECURITY_TYPES : {
       if( resetMessage ) _msgSecurityTypes.reset();
       pos = _msgSecurityTypes.scan( buf, len - pos );
       onMessage( _msgSecurityTypes );
       break;
      }
// case-end-SECURITY_TYPES


// case-begin-SECURITY_LIST_REQUEST
// After generation one can sed this out if SECURITY_LIST_REQUEST is not incoming message
      case MsgTypeRaw_SECURITY_LIST_REQUEST : {
       if( resetMessage ) _msgSecurityListRequest.reset();
       pos = _msgSecurityListRequest.scan( buf, len - pos );
       onMessage( _msgSecurityListRequest );
       break;
      }
// case-end-SECURITY_LIST_REQUEST


// case-begin-SECURITY_LIST
// After generation one can sed this out if SECURITY_LIST is not incoming message
      case MsgTypeRaw_SECURITY_LIST : {
       if( resetMessage ) _msgSecurityList.reset();
       pos = _msgSecurityList.scan( buf, len - pos );
       onMessage( _msgSecurityList );
       break;
      }
// case-end-SECURITY_LIST


// case-begin-DERIVATIVE_SECURITY_LIST_REQUEST
// After generation one can sed this out if DERIVATIVE_SECURITY_LIST_REQUEST is not incoming message
      case MsgTypeRaw_DERIVATIVE_SECURITY_LIST_REQUEST : {
       if( resetMessage ) _msgDerivativeSecurityListRequest.reset();
       pos = _msgDerivativeSecurityListRequest.scan( buf, len - pos );
       onMessage( _msgDerivativeSecurityListRequest );
       break;
      }
// case-end-DERIVATIVE_SECURITY_LIST_REQUEST


// case-begin-DERIVATIVE_SECURITY_LIST
// After generation one can sed this out if DERIVATIVE_SECURITY_LIST is not incoming message
      case MsgTypeRaw_DERIVATIVE_SECURITY_LIST : {
       if( resetMessage ) _msgDerivativeSecurityList.reset();
       pos = _msgDerivativeSecurityList.scan( buf, len - pos );
       onMessage( _msgDerivativeSecurityList );
       break;
      }
// case-end-DERIVATIVE_SECURITY_LIST


// case-begin-NEW_ORDER_AB
// After generation one can sed this out if NEW_ORDER_AB is not incoming message
      case MsgTypeRaw_NEW_ORDER_AB : {
       if( resetMessage ) _msgNewOrderMultileg.reset();
       pos = _msgNewOrderMultileg.scan( buf, len - pos );
       onMessage( _msgNewOrderMultileg );
       break;
      }
// case-end-NEW_ORDER_AB


// case-begin-MULTILEG_ORDER_CANCEL_REPLACE
// After generation one can sed this out if MULTILEG_ORDER_CANCEL_REPLACE is not incoming message
      case MsgTypeRaw_MULTILEG_ORDER_CANCEL_REPLACE : {
       if( resetMessage ) _msgMultilegOrderCancelReplace.reset();
       pos = _msgMultilegOrderCancelReplace.scan( buf, len - pos );
       onMessage( _msgMultilegOrderCancelReplace );
       break;
      }
// case-end-MULTILEG_ORDER_CANCEL_REPLACE


// case-begin-TRADE_CAPTURE_REPORT_REQUEST
// After generation one can sed this out if TRADE_CAPTURE_REPORT_REQUEST is not incoming message
      case MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST : {
       if( resetMessage ) _msgTradeCaptureReportRequest.reset();
       pos = _msgTradeCaptureReportRequest.scan( buf, len - pos );
       onMessage( _msgTradeCaptureReportRequest );
       break;
      }
// case-end-TRADE_CAPTURE_REPORT_REQUEST


// case-begin-TRADE_CAPTURE_REPORT
// After generation one can sed this out if TRADE_CAPTURE_REPORT is not incoming message
      case MsgTypeRaw_TRADE_CAPTURE_REPORT : {
       if( resetMessage ) _msgTradeCaptureReport.reset();
       pos = _msgTradeCaptureReport.scan( buf, len - pos );
       onMessage( _msgTradeCaptureReport );
       break;
      }
// case-end-TRADE_CAPTURE_REPORT


// case-begin-ORDER_MASS_STATUS_REQUEST
// After generation one can sed this out if ORDER_MASS_STATUS_REQUEST is not incoming message
      case MsgTypeRaw_ORDER_MASS_STATUS_REQUEST : {
       if( resetMessage ) _msgOrderMassStatusRequest.reset();
       pos = _msgOrderMassStatusRequest.scan( buf, len - pos );
       onMessage( _msgOrderMassStatusRequest );
       break;
      }
// case-end-ORDER_MASS_STATUS_REQUEST


// case-begin-QUOTE_REQUEST_REJECT
// After generation one can sed this out if QUOTE_REQUEST_REJECT is not incoming message
      case MsgTypeRaw_QUOTE_REQUEST_REJECT : {
       if( resetMessage ) _msgQuoteRequestReject.reset();
       pos = _msgQuoteRequestReject.scan( buf, len - pos );
       onMessage( _msgQuoteRequestReject );
       break;
      }
// case-end-QUOTE_REQUEST_REJECT


// case-begin-RFQ_REQUEST
// After generation one can sed this out if RFQ_REQUEST is not incoming message
      case MsgTypeRaw_RFQ_REQUEST : {
       if( resetMessage ) _msgRFQRequest.reset();
       pos = _msgRFQRequest.scan( buf, len - pos );
       onMessage( _msgRFQRequest );
       break;
      }
// case-end-RFQ_REQUEST


// case-begin-QUOTE_STATUS_REPORT
// After generation one can sed this out if QUOTE_STATUS_REPORT is not incoming message
      case MsgTypeRaw_QUOTE_STATUS_REPORT : {
       if( resetMessage ) _msgQuoteStatusReport.reset();
       pos = _msgQuoteStatusReport.scan( buf, len - pos );
       onMessage( _msgQuoteStatusReport );
       break;
      }
// case-end-QUOTE_STATUS_REPORT


// case-begin-QUOTE_RESPONSE
// After generation one can sed this out if QUOTE_RESPONSE is not incoming message
      case MsgTypeRaw_QUOTE_RESPONSE : {
       if( resetMessage ) _msgQuoteResponse.reset();
       pos = _msgQuoteResponse.scan( buf, len - pos );
       onMessage( _msgQuoteResponse );
       break;
      }
// case-end-QUOTE_RESPONSE


// case-begin-CONFIRMATION
// After generation one can sed this out if CONFIRMATION is not incoming message
      case MsgTypeRaw_CONFIRMATION : {
       if( resetMessage ) _msgConfirmation.reset();
       pos = _msgConfirmation.scan( buf, len - pos );
       onMessage( _msgConfirmation );
       break;
      }
// case-end-CONFIRMATION


// case-begin-POSITION_MAINTENANCE_REQUEST
// After generation one can sed this out if POSITION_MAINTENANCE_REQUEST is not incoming message
      case MsgTypeRaw_POSITION_MAINTENANCE_REQUEST : {
       if( resetMessage ) _msgPositionMaintenanceRequest.reset();
       pos = _msgPositionMaintenanceRequest.scan( buf, len - pos );
       onMessage( _msgPositionMaintenanceRequest );
       break;
      }
// case-end-POSITION_MAINTENANCE_REQUEST


// case-begin-POSITION_MAINTENANCE_REPORT
// After generation one can sed this out if POSITION_MAINTENANCE_REPORT is not incoming message
      case MsgTypeRaw_POSITION_MAINTENANCE_REPORT : {
       if( resetMessage ) _msgPositionMaintenanceReport.reset();
       pos = _msgPositionMaintenanceReport.scan( buf, len - pos );
       onMessage( _msgPositionMaintenanceReport );
       break;
      }
// case-end-POSITION_MAINTENANCE_REPORT


// case-begin-REQUEST_FOR_POSITIONS
// After generation one can sed this out if REQUEST_FOR_POSITIONS is not incoming message
      case MsgTypeRaw_REQUEST_FOR_POSITIONS : {
       if( resetMessage ) _msgRequestForPositions.reset();
       pos = _msgRequestForPositions.scan( buf, len - pos );
       onMessage( _msgRequestForPositions );
       break;
      }
// case-end-REQUEST_FOR_POSITIONS


// case-begin-REQUEST_FOR_POSITIONS_ACK
// After generation one can sed this out if REQUEST_FOR_POSITIONS_ACK is not incoming message
      case MsgTypeRaw_REQUEST_FOR_POSITIONS_ACK : {
       if( resetMessage ) _msgRequestForPositionsAck.reset();
       pos = _msgRequestForPositionsAck.scan( buf, len - pos );
       onMessage( _msgRequestForPositionsAck );
       break;
      }
// case-end-REQUEST_FOR_POSITIONS_ACK


// case-begin-POSITION_REPORT
// After generation one can sed this out if POSITION_REPORT is not incoming message
      case MsgTypeRaw_POSITION_REPORT : {
       if( resetMessage ) _msgPositionReport.reset();
       pos = _msgPositionReport.scan( buf, len - pos );
       onMessage( _msgPositionReport );
       break;
      }
// case-end-POSITION_REPORT


// case-begin-TRADE_CAPTURE_REPORT_REQUEST_ACK
// After generation one can sed this out if TRADE_CAPTURE_REPORT_REQUEST_ACK is not incoming message
      case MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST_ACK : {
       if( resetMessage ) _msgTradeCaptureReportRequestAck.reset();
       pos = _msgTradeCaptureReportRequestAck.scan( buf, len - pos );
       onMessage( _msgTradeCaptureReportRequestAck );
       break;
      }
// case-end-TRADE_CAPTURE_REPORT_REQUEST_ACK


// case-begin-TRADE_CAPTURE_REPORT_ACK
// After generation one can sed this out if TRADE_CAPTURE_REPORT_ACK is not incoming message
      case MsgTypeRaw_TRADE_CAPTURE_REPORT_ACK : {
       if( resetMessage ) _msgTradeCaptureReportAck.reset();
       pos = _msgTradeCaptureReportAck.scan( buf, len - pos );
       onMessage( _msgTradeCaptureReportAck );
       break;
      }
// case-end-TRADE_CAPTURE_REPORT_ACK


// case-begin-ALLOCATION_REPORT
// After generation one can sed this out if ALLOCATION_REPORT is not incoming message
      case MsgTypeRaw_ALLOCATION_REPORT : {
       if( resetMessage ) _msgAllocationReport.reset();
       pos = _msgAllocationReport.scan( buf, len - pos );
       onMessage( _msgAllocationReport );
       break;
      }
// case-end-ALLOCATION_REPORT


// case-begin-ALLOCATION_REPORT_ACK
// After generation one can sed this out if ALLOCATION_REPORT_ACK is not incoming message
      case MsgTypeRaw_ALLOCATION_REPORT_ACK : {
       if( resetMessage ) _msgAllocationReportAck.reset();
       pos = _msgAllocationReportAck.scan( buf, len - pos );
       onMessage( _msgAllocationReportAck );
       break;
      }
// case-end-ALLOCATION_REPORT_ACK


// case-begin-CONFIRMATION_ACK
// After generation one can sed this out if CONFIRMATION_ACK is not incoming message
      case MsgTypeRaw_CONFIRMATION_ACK : {
       if( resetMessage ) _msgConfirmationAck.reset();
       pos = _msgConfirmationAck.scan( buf, len - pos );
       onMessage( _msgConfirmationAck );
       break;
      }
// case-end-CONFIRMATION_ACK


// case-begin-SETTLEMENT_INSTRUCTION_REQUEST
// After generation one can sed this out if SETTLEMENT_INSTRUCTION_REQUEST is not incoming message
      case MsgTypeRaw_SETTLEMENT_INSTRUCTION_REQUEST : {
       if( resetMessage ) _msgSettlementInstructionRequest.reset();
       pos = _msgSettlementInstructionRequest.scan( buf, len - pos );
       onMessage( _msgSettlementInstructionRequest );
       break;
      }
// case-end-SETTLEMENT_INSTRUCTION_REQUEST


// case-begin-ASSIGNMENT_REPORT
// After generation one can sed this out if ASSIGNMENT_REPORT is not incoming message
      case MsgTypeRaw_ASSIGNMENT_REPORT : {
       if( resetMessage ) _msgAssignmentReport.reset();
       pos = _msgAssignmentReport.scan( buf, len - pos );
       onMessage( _msgAssignmentReport );
       break;
      }
// case-end-ASSIGNMENT_REPORT


// case-begin-COLLATERAL_REQUEST
// After generation one can sed this out if COLLATERAL_REQUEST is not incoming message
      case MsgTypeRaw_COLLATERAL_REQUEST : {
       if( resetMessage ) _msgCollateralRequest.reset();
       pos = _msgCollateralRequest.scan( buf, len - pos );
       onMessage( _msgCollateralRequest );
       break;
      }
// case-end-COLLATERAL_REQUEST


// case-begin-COLLATERAL_ASSIGNMENT
// After generation one can sed this out if COLLATERAL_ASSIGNMENT is not incoming message
      case MsgTypeRaw_COLLATERAL_ASSIGNMENT : {
       if( resetMessage ) _msgCollateralAssignment.reset();
       pos = _msgCollateralAssignment.scan( buf, len - pos );
       onMessage( _msgCollateralAssignment );
       break;
      }
// case-end-COLLATERAL_ASSIGNMENT


// case-begin-COLLATERAL_RESPONSE
// After generation one can sed this out if COLLATERAL_RESPONSE is not incoming message
      case MsgTypeRaw_COLLATERAL_RESPONSE : {
       if( resetMessage ) _msgCollateralResponse.reset();
       pos = _msgCollateralResponse.scan( buf, len - pos );
       onMessage( _msgCollateralResponse );
       break;
      }
// case-end-COLLATERAL_RESPONSE


// case-begin-COLLATERAL_REPORT
// After generation one can sed this out if COLLATERAL_REPORT is not incoming message
      case MsgTypeRaw_COLLATERAL_REPORT : {
       if( resetMessage ) _msgCollateralReport.reset();
       pos = _msgCollateralReport.scan( buf, len - pos );
       onMessage( _msgCollateralReport );
       break;
      }
// case-end-COLLATERAL_REPORT


// case-begin-COLLATERAL_INQUIRY
// After generation one can sed this out if COLLATERAL_INQUIRY is not incoming message
      case MsgTypeRaw_COLLATERAL_INQUIRY : {
       if( resetMessage ) _msgCollateralInquiry.reset();
       pos = _msgCollateralInquiry.scan( buf, len - pos );
       onMessage( _msgCollateralInquiry );
       break;
      }
// case-end-COLLATERAL_INQUIRY


// case-begin-NETWORK_BC
// After generation one can sed this out if NETWORK_BC is not incoming message
      case MsgTypeRaw_NETWORK_BC : {
       if( resetMessage ) _msgNetworkCounterpartySystemStatusRequest.reset();
       pos = _msgNetworkCounterpartySystemStatusRequest.scan( buf, len - pos );
       onMessage( _msgNetworkCounterpartySystemStatusRequest );
       break;
      }
// case-end-NETWORK_BC


// case-begin-NETWORK_BD
// After generation one can sed this out if NETWORK_BD is not incoming message
      case MsgTypeRaw_NETWORK_BD : {
       if( resetMessage ) _msgNetworkCounterpartySystemStatusResponse.reset();
       pos = _msgNetworkCounterpartySystemStatusResponse.scan( buf, len - pos );
       onMessage( _msgNetworkCounterpartySystemStatusResponse );
       break;
      }
// case-end-NETWORK_BD


// case-begin-USER_REQUEST
// After generation one can sed this out if USER_REQUEST is not incoming message
      case MsgTypeRaw_USER_REQUEST : {
       if( resetMessage ) _msgUserRequest.reset();
       pos = _msgUserRequest.scan( buf, len - pos );
       onMessage( _msgUserRequest );
       break;
      }
// case-end-USER_REQUEST


// case-begin-USER_RESPONSE
// After generation one can sed this out if USER_RESPONSE is not incoming message
      case MsgTypeRaw_USER_RESPONSE : {
       if( resetMessage ) _msgUserResponse.reset();
       pos = _msgUserResponse.scan( buf, len - pos );
       onMessage( _msgUserResponse );
       break;
      }
// case-end-USER_RESPONSE


// case-begin-COLLATERAL_INQUIRY_ACK
// After generation one can sed this out if COLLATERAL_INQUIRY_ACK is not incoming message
      case MsgTypeRaw_COLLATERAL_INQUIRY_ACK : {
       if( resetMessage ) _msgCollateralInquiryAck.reset();
       pos = _msgCollateralInquiryAck.scan( buf, len - pos );
       onMessage( _msgCollateralInquiryAck );
       break;
      }
// case-end-COLLATERAL_INQUIRY_ACK


// case-begin-CONFIRMATION_REQUEST
// After generation one can sed this out if CONFIRMATION_REQUEST is not incoming message
      case MsgTypeRaw_CONFIRMATION_REQUEST : {
       if( resetMessage ) _msgConfirmationRequest.reset();
       pos = _msgConfirmationRequest.scan( buf, len - pos );
       onMessage( _msgConfirmationRequest );
       break;
      }
// case-end-CONFIRMATION_REQUEST


      default:
        onUnknownMessage( msgType );
        return endOfMessage;
    }
    return buf + pos;
}

void ParserDispatcher::onMessage( MessageHeader & msg )
{
   unprocessedMessage( MsgTypeRaw__, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageHeartbeat & msg )
{
   unprocessedMessage( MsgTypeRaw_HEARTBEAT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTestRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_TEST_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageResendRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_RESEND_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageReject & msg )
{
   unprocessedMessage( MsgTypeRaw_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSequenceReset & msg )
{
   unprocessedMessage( MsgTypeRaw_SEQUENCE_RESET, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageLogout & msg )
{
   unprocessedMessage( MsgTypeRaw_LOGOUT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageIOI & msg )
{
   unprocessedMessage( MsgTypeRaw_INDICATION_OF_INTEREST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAdvertisement & msg )
{
   unprocessedMessage( MsgTypeRaw_ADVERTISEMENT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageExecutionReport & msg )
{
   unprocessedMessage( MsgTypeRaw_EXECUTION_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderCancelReject & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_CANCEL_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageLogon & msg )
{
   unprocessedMessage( MsgTypeRaw_LOGON, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNews & msg )
{
   unprocessedMessage( MsgTypeRaw_NEWS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageEmail & msg )
{
   unprocessedMessage( MsgTypeRaw_EMAIL, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNewOrderSingle & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_SINGLE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNewOrderList & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_LIST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderCancelRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_CANCEL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderCancelReplaceRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_CANCEL_REPLACE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAllocationInstruction & msg )
{
   unprocessedMessage( MsgTypeRaw_ALLOCATION_INSTRUCTION, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListCancelRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_CANCEL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListExecute & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_EXECUTE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListStatus & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_STATUS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAllocationInstructionAck & msg )
{
   unprocessedMessage( MsgTypeRaw_ALLOCATION_INSTRUCTION_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageDontKnowTrade & msg )
{
   unprocessedMessage( MsgTypeRaw_DONT_KNOW_TRADE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuote & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSettlementInstructions & msg )
{
   unprocessedMessage( MsgTypeRaw_SETTLEMENT_INSTRUCTIONS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMarketDataRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_MARKET_DATA_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMarketDataSnapshotFullRefresh & msg )
{
   unprocessedMessage( MsgTypeRaw_MARKET_DATA_SNAPSHOT_FULL_REFRESH, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMarketDataIncrementalRefresh & msg )
{
   unprocessedMessage( MsgTypeRaw_MARKET_DATA_INCREMENTAL_REFRESH, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMarketDataRequestReject & msg )
{
   unprocessedMessage( MsgTypeRaw_MARKET_DATA_REQUEST_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteCancel & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_CANCEL, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMassQuoteAcknowledgement & msg )
{
   unprocessedMessage( MsgTypeRaw_MASS_QUOTE_ACKNOWLEDGEMENT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityDefinitionRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_DEFINITION_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityDefinition & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_DEFINITION, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityStatus & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_STATUS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradingSessionStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADING_SESSION_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradingSessionStatus & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADING_SESSION_STATUS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMassQuote & msg )
{
   unprocessedMessage( MsgTypeRaw_MASS_QUOTE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageBusinessMessageReject & msg )
{
   unprocessedMessage( MsgTypeRaw_BUSINESS_MESSAGE_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageBidRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_BID_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageBidResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_BID_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListStrikePrice & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_STRIKE_PRICE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageXMLnonFIX & msg )
{
   unprocessedMessage( MsgTypeRaw_XML_MESSAGE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRegistrationInstructions & msg )
{
   unprocessedMessage( MsgTypeRaw_REGISTRATION_INSTRUCTIONS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRegistrationInstructionsResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_REGISTRATION_INSTRUCTIONS_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderMassCancelRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_MASS_CANCEL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderMassCancelReport & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_MASS_CANCEL_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNewOrderCross & msg )
{
   unprocessedMessage( MsgTypeRaw_NEW_ORDER_s, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCrossOrderCancelReplaceRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_CROSS_ORDER_CANCEL_REPLACE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCrossOrderCancelRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_CROSS_ORDER_CANCEL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityTypeRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_TYPE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityTypes & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_TYPES, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityListRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_LIST_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityList & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_LIST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageDerivativeSecurityListRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_DERIVATIVE_SECURITY_LIST_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageDerivativeSecurityList & msg )
{
   unprocessedMessage( MsgTypeRaw_DERIVATIVE_SECURITY_LIST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNewOrderMultileg & msg )
{
   unprocessedMessage( MsgTypeRaw_NEW_ORDER_AB, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMultilegOrderCancelReplace & msg )
{
   unprocessedMessage( MsgTypeRaw_MULTILEG_ORDER_CANCEL_REPLACE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradeCaptureReportRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradeCaptureReport & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADE_CAPTURE_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderMassStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_MASS_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteRequestReject & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_REQUEST_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRFQRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_RFQ_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteStatusReport & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_STATUS_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageConfirmation & msg )
{
   unprocessedMessage( MsgTypeRaw_CONFIRMATION, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessagePositionMaintenanceRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_POSITION_MAINTENANCE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessagePositionMaintenanceReport & msg )
{
   unprocessedMessage( MsgTypeRaw_POSITION_MAINTENANCE_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRequestForPositions & msg )
{
   unprocessedMessage( MsgTypeRaw_REQUEST_FOR_POSITIONS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRequestForPositionsAck & msg )
{
   unprocessedMessage( MsgTypeRaw_REQUEST_FOR_POSITIONS_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessagePositionReport & msg )
{
   unprocessedMessage( MsgTypeRaw_POSITION_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradeCaptureReportRequestAck & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradeCaptureReportAck & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADE_CAPTURE_REPORT_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAllocationReport & msg )
{
   unprocessedMessage( MsgTypeRaw_ALLOCATION_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAllocationReportAck & msg )
{
   unprocessedMessage( MsgTypeRaw_ALLOCATION_REPORT_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageConfirmationAck & msg )
{
   unprocessedMessage( MsgTypeRaw_CONFIRMATION_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSettlementInstructionRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SETTLEMENT_INSTRUCTION_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAssignmentReport & msg )
{
   unprocessedMessage( MsgTypeRaw_ASSIGNMENT_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralAssignment & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_ASSIGNMENT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralReport & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralInquiry & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_INQUIRY, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNetworkCounterpartySystemStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_NETWORK_BC, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNetworkCounterpartySystemStatusResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_NETWORK_BD, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageUserRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_USER_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageUserResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_USER_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralInquiryAck & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_INQUIRY_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageConfirmationRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_CONFIRMATION_REQUEST, msg ); 
   msg.reset(); 
}


// end of Messages.cxx


ParserDispatcher::ParserDispatcher()
{
}

ParserDispatcher::~ParserDispatcher()
{
}

void ParserDispatcher::onUnknownMessage( raw_enum_t msgType )
{
}

bool ParserDispatcher::ignoreMessage( raw_enum_t msgType ) const
{
    return false;
}

void ParserDispatcher::unprocessedMessage( raw_enum_t msgType, MessageBase & msg )
{
}

std::set< raw_tag_t > headerRawTags =
{
// start of HeaderRaw.cxx
 FieldBeginString::RAW_TAG,
 FieldBodyLength::RAW_TAG,
 FieldMsgType::RAW_TAG,
 FieldSenderCompID::RAW_TAG,
 FieldTargetCompID::RAW_TAG,
 FieldOnBehalfOfCompID::RAW_TAG,
 FieldDeliverToCompID::RAW_TAG,
 FieldSecureDataLen::RAW_TAG,
 FieldSecureData::RAW_TAG,
 FieldMsgSeqNum::RAW_TAG,
 FieldSenderSubID::RAW_TAG,
 FieldSenderLocationID::RAW_TAG,
 FieldTargetSubID::RAW_TAG,
 FieldTargetLocationID::RAW_TAG,
 FieldOnBehalfOfSubID::RAW_TAG,
 FieldOnBehalfOfLocationID::RAW_TAG,
 FieldDeliverToSubID::RAW_TAG,
 FieldDeliverToLocationID::RAW_TAG,
 FieldPossDupFlag::RAW_TAG,
 FieldPossResend::RAW_TAG,
 FieldSendingTime::RAW_TAG,
 FieldOrigSendingTime::RAW_TAG,
 FieldXmlDataLen::RAW_TAG,
 FieldXmlData::RAW_TAG,
 FieldMessageEncoding::RAW_TAG,
 FieldLastMsgSeqNumProcessed::RAW_TAG,
// end of HeaderRaw.cxx
};

const FixFormatStyle defaultStyle =
{
    .messageBegin       = "",
    .messageEnd         = "",
    .indent             = "",
    .groupFirstField    = "",
    .fieldBegin         = "",
    .fieldEnd           = " ",
    .headerTagNameStart = "",
    .headerTagNameStop  = "",
    .tagNameStart       = "",
    .tagNameStop        = "",
    .tagValueStart      = "(",
    .tagValueStop       = ")",
    .equal              = "=",
    .valueStart         = "",
    .valueStop          = "",
    .enumStart          = "<",
    .enumStop           = ">",
    .unknownStart       = "",
    .unknownStop        = ""
};

const FixFormatStyle defaultVerticalStyle =
{
    .messageBegin       = "",
    .messageEnd         = "",
    .indent             = "  ",
    .groupFirstField    = " *",
    .fieldBegin         = " ",
    .fieldEnd           = "\n",
    .headerTagNameStart = "",
    .headerTagNameStop  = "",
    .tagNameStart       = "",
    .tagNameStop        = "",
    .tagValueStart      = "(",
    .tagValueStop       = ")",
    .equal              = "=",
    .valueStart         = "",
    .valueStop          = "",
    .enumStart          = "<",
    .enumStop           = ">",
    .unknownStart       = "",
    .unknownStop        = ""
};

const FixFormatStyle ttyStyle =
{
    .messageBegin       = "",
    .messageEnd         = "",
    .indent             = "  ",
    .groupFirstField    = " \u2022",
    .fieldBegin         = " ",
    .fieldEnd           = "\n",
    .headerTagNameStart = "",
    .headerTagNameStop  = "",
    .tagNameStart       = "\e[1m",
    .tagNameStop        = "\e[0m",
    .tagValueStart      = "(",
    .tagValueStop       = ")",
    .equal              = "=",
    .valueStart         = "",
    .valueStop          = "",
    .enumStart          = "<",
    .enumStop           = ">",
    .unknownStart       = "\e[31;1m",
    .unknownStop        = "\e[0m"
};

const FixFormatStyle ttyRgbStyle =
{
    .messageBegin       = "",
    .messageEnd         = "",
    .indent             = "  ",
    .groupFirstField    = " \u2022",
    .fieldBegin         = " ",
    .fieldEnd           = "\n",
    .headerTagNameStart = "\e[33m",
    .headerTagNameStop  = "\e[0m",
    .tagNameStart       = "\e[33;1m",
    .tagNameStop        = "\e[0m",
    .tagValueStart      = "(\e[37;1m",
    .tagValueStop       = "\e[0m)",
    .equal              = " = ",
    .valueStart         = "\e[34;1m",
    .valueStop          = "\e[0m",
    .enumStart          = " \e[32m",
    .enumStop           = "\e[0m",
    .unknownStart       = "\e[31;1m",
    .unknownStop        = "\e[0m"
};

const FixFormatStyle ttyRgbSingleLineStyle =
{
    .messageBegin       = "",
    .messageEnd         = "",
    .indent             = "",
    .groupFirstField    = "",
    .fieldBegin         = "",
    .fieldEnd           = "  ",
    .headerTagNameStart = "\e[33m",
    .headerTagNameStop  = "\e[0m",
    .tagNameStart       = "\e[33;1m",
    .tagNameStop        = "\e[0m",
    .tagValueStart      = "<\e[37;1m",
    .tagValueStop       = "\e[0m>",
    .equal              = "=",
    .valueStart         = "\e[34;1m",
    .valueStop          = "\e[0m",
    .enumStart          = "/\e[32m",
    .enumStop           = "\e[0m",
    .unknownStart       = "\e[31;1m",
    .unknownStop        = "\e[0m"
};

// no tag names
const FixFormatStyle ttyRgbRawStyle =
{
    .messageBegin       = "",
    .messageEnd         = "",
    .indent             = "",
    .groupFirstField    = "",
    .fieldBegin         = "",
    .fieldEnd           = " ",
    .headerTagNameStart = nullptr,
    .headerTagNameStop  = "\e[0m",
    .tagNameStart       = nullptr,
    .tagNameStop        = "\e[0m",
    .tagValueStart      = "\e[93;1m",
    .tagValueStop       = "\e[0m",
    .equal              = "=",
    .valueStart         = "\e[37;1m",
    .valueStop          = "\e[0m",
    .enumStart          = "/\e[92m",
    .enumStop           = "\e[0m",
    .unknownStart       = "\e[31;1m",
    .unknownStop        = "\e[0m"
};

// msgTypePos = offset of 35=
unsigned parseMessageLength( const char * fix, unsigned & msgTypePos )
{
    unsigned bodyLengthPos = msgTypePos = FixBeginStringValue.size() + 5; // 8=| + 9=|
    return parseUInt( fix + bodyLengthPos, ++msgTypePos );
}


unsigned computeChecksum( const char * begin, const char * end )
{
    unsigned sum = 0;
    while( begin < end )
    {
        sum += (unsigned)*begin++;
    }
    return sum & 0xff;
}

const char * getEnumName( const char * fix, int valueOffset )
{
    if( valueOffset < 0 )
    {
        return nullptr;
    }

    offset_t pos = (offset_t)valueOffset;
    while( pos > 0 and fix[pos-1] != FIXPP_SOH )
    {
        --pos;
    }

    const raw_tag_t tag = loadRawTag( fix+pos, pos );
    if( tag == 0 )
    {
        return nullptr;
    }

    auto eit = RAW_TO_ENUM.find( tag );
    if( eit == RAW_TO_ENUM.end() )
    {
        return nullptr;
    }
    const FieldEnumsBase * enums = eit->second;
    raw_enum_t rawEnum = toRawEnum( fix + valueOffset );
    const char * enumName = enums->getEnumNameByRaw( rawEnum );
    return enumName;
}

std::ostream & fixToHuman( const char * fix, offset_t & pos, std::ostream & os, const FixFormatStyle & style, GetDepthMethod indentator )
{
    os << style.messageBegin;

    while( fix[pos] )
    {
        offset_t prev = pos;
        const raw_tag_t tag = loadRawTag( fix+pos, pos );

        if( tag == 0 )
        {
            os << style.unknownStart << "[bad tag at " << pos << "]" << style.unknownStop << style.messageEnd;
            return os;
        }

        os << style.fieldBegin;

        auto it = RAW_TAG_TO_NAME.find( tag );
        const FieldEnumsBase * enums = nullptr;
        if( it != RAW_TAG_TO_NAME.end() )
        {
            if( headerRawTags.find( tag ) != headerRawTags.end() )
            {
                if( style.headerTagNameStart )
                {
                    os << style.headerTagNameStart << it->second << style.headerTagNameStop;
                }
            }
            else
            {
                if( indentator and indentator != autoIndentFields )
                {
                    FieldDepth fd = (*indentator)( tag );
                    if( fd.isFirstInGroup )
                    {
                        for( int d = 1; d < fd.depth; ++d ) os << style.indent;
                        os << style.groupFirstField;
                    }
                    else
                    {
                        for( int d = 0; d < fd.depth; ++d ) os << style.indent;
                    }
                }
                if( style.tagNameStart )
                {
                    os << style.tagNameStart << it->second << style.tagNameStop;
                }
            }

            auto eit = RAW_TO_ENUM.find( tag );
            if( eit != RAW_TO_ENUM.end() )
            {
                enums = eit->second;
            }
        }
        else
        {
            os << style.unknownStart << " ?" << style.unknownStop;
        }

        // tag
        os << style.tagValueStart;
        while( fix[prev] != '=' )
        {
            os << fix[prev++];
        }
        os << style.tagValueStop << style.equal << style.valueStart;

        raw_enum_t rawEnum = toRawEnum( fix + pos );

        // value as is
        while( fix[pos] and fix[pos] != FIXPP_SOH )
        {
            os << fix[pos++];
        }

        os << style.valueStop;

        // enum
        if( enums and style.enumStart )
        {
            const char * enumName = enums->getEnumNameByRaw( rawEnum );
            if( enumName )
            {
                os << style.enumStart << enumName << style.enumStop;
            }
            else
            {
                os << style.unknownStart << " UNKNOWN" << style.unknownStop;
            }

            if( tag == FieldMsgType::RAW_TAG and indentator == autoIndentFields )
            {
                indentator = getTagDepthMethodByRawMsgType( rawEnum );
            }

        }

        os << style.fieldEnd;
        os.flush();

        ++pos;
        if( tag == FieldCheckSum::RAW_TAG )
        {
            break;
        }

    }
    os << style.messageEnd;
    return os;
}

} // namespace fix44

// gdb helper
extern "C" const char * fixppGetEnumName( const char * fix, int valueOffset )
{
    return fix44::getEnumName( fix, valueOffset );
}
