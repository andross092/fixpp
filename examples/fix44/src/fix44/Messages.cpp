#include <fix44/Messages.h>

#include <set>

namespace fix44
{

// start of Messages.cxx

// Generated

// -------------------------- getMessageName getMessageType -------------------------

const std::string EMPTY_STRING;

const char * MessageHeader::getMessageName(){
     return "Header";
}

const std::string & MessageHeader::getMessageType(){
     return EMPTY_STRING;
}


const char * MessageHeartbeat::getMessageName(){
     return "Heartbeat";
}

const std::string & MessageHeartbeat::getMessageType(){
     return MsgTypeEnums::HEARTBEAT.str;
}


const char * MessageTestRequest::getMessageName(){
     return "TestRequest";
}

const std::string & MessageTestRequest::getMessageType(){
     return MsgTypeEnums::TEST_REQUEST.str;
}


const char * MessageResendRequest::getMessageName(){
     return "ResendRequest";
}

const std::string & MessageResendRequest::getMessageType(){
     return MsgTypeEnums::RESEND_REQUEST.str;
}


const char * MessageReject::getMessageName(){
     return "Reject";
}

const std::string & MessageReject::getMessageType(){
     return MsgTypeEnums::REJECT.str;
}


const char * MessageSequenceReset::getMessageName(){
     return "SequenceReset";
}

const std::string & MessageSequenceReset::getMessageType(){
     return MsgTypeEnums::SEQUENCE_RESET.str;
}


const char * MessageLogout::getMessageName(){
     return "Logout";
}

const std::string & MessageLogout::getMessageType(){
     return MsgTypeEnums::LOGOUT.str;
}


const char * MessageIOI::getMessageName(){
     return "IOI";
}

const std::string & MessageIOI::getMessageType(){
     return MsgTypeEnums::INDICATION_OF_INTEREST.str;
}


const char * MessageAdvertisement::getMessageName(){
     return "Advertisement";
}

const std::string & MessageAdvertisement::getMessageType(){
     return MsgTypeEnums::ADVERTISEMENT.str;
}


const char * MessageExecutionReport::getMessageName(){
     return "ExecutionReport";
}

const std::string & MessageExecutionReport::getMessageType(){
     return MsgTypeEnums::EXECUTION_REPORT.str;
}


const char * MessageOrderCancelReject::getMessageName(){
     return "OrderCancelReject";
}

const std::string & MessageOrderCancelReject::getMessageType(){
     return MsgTypeEnums::ORDER_CANCEL_REJECT.str;
}


const char * MessageLogon::getMessageName(){
     return "Logon";
}

const std::string & MessageLogon::getMessageType(){
     return MsgTypeEnums::LOGON.str;
}


const char * MessageNews::getMessageName(){
     return "News";
}

const std::string & MessageNews::getMessageType(){
     return MsgTypeEnums::NEWS.str;
}


const char * MessageEmail::getMessageName(){
     return "Email";
}

const std::string & MessageEmail::getMessageType(){
     return MsgTypeEnums::EMAIL.str;
}


const char * MessageNewOrderSingle::getMessageName(){
     return "NewOrderSingle";
}

const std::string & MessageNewOrderSingle::getMessageType(){
     return MsgTypeEnums::ORDER_SINGLE.str;
}


const char * MessageNewOrderList::getMessageName(){
     return "NewOrderList";
}

const std::string & MessageNewOrderList::getMessageType(){
     return MsgTypeEnums::ORDER_LIST.str;
}


const char * MessageOrderCancelRequest::getMessageName(){
     return "OrderCancelRequest";
}

const std::string & MessageOrderCancelRequest::getMessageType(){
     return MsgTypeEnums::ORDER_CANCEL_REQUEST.str;
}


const char * MessageOrderCancelReplaceRequest::getMessageName(){
     return "OrderCancelReplaceRequest";
}

const std::string & MessageOrderCancelReplaceRequest::getMessageType(){
     return MsgTypeEnums::ORDER_CANCEL_REPLACE_REQUEST.str;
}


const char * MessageOrderStatusRequest::getMessageName(){
     return "OrderStatusRequest";
}

const std::string & MessageOrderStatusRequest::getMessageType(){
     return MsgTypeEnums::ORDER_STATUS_REQUEST.str;
}


const char * MessageAllocationInstruction::getMessageName(){
     return "AllocationInstruction";
}

const std::string & MessageAllocationInstruction::getMessageType(){
     return MsgTypeEnums::ALLOCATION_INSTRUCTION.str;
}


const char * MessageListCancelRequest::getMessageName(){
     return "ListCancelRequest";
}

const std::string & MessageListCancelRequest::getMessageType(){
     return MsgTypeEnums::LIST_CANCEL_REQUEST.str;
}


const char * MessageListExecute::getMessageName(){
     return "ListExecute";
}

const std::string & MessageListExecute::getMessageType(){
     return MsgTypeEnums::LIST_EXECUTE.str;
}


const char * MessageListStatusRequest::getMessageName(){
     return "ListStatusRequest";
}

const std::string & MessageListStatusRequest::getMessageType(){
     return MsgTypeEnums::LIST_STATUS_REQUEST.str;
}


const char * MessageListStatus::getMessageName(){
     return "ListStatus";
}

const std::string & MessageListStatus::getMessageType(){
     return MsgTypeEnums::LIST_STATUS.str;
}


const char * MessageAllocationInstructionAck::getMessageName(){
     return "AllocationInstructionAck";
}

const std::string & MessageAllocationInstructionAck::getMessageType(){
     return MsgTypeEnums::ALLOCATION_INSTRUCTION_ACK.str;
}


const char * MessageDontKnowTrade::getMessageName(){
     return "DontKnowTrade";
}

const std::string & MessageDontKnowTrade::getMessageType(){
     return MsgTypeEnums::DONT_KNOW_TRADE.str;
}


const char * MessageQuoteRequest::getMessageName(){
     return "QuoteRequest";
}

const std::string & MessageQuoteRequest::getMessageType(){
     return MsgTypeEnums::QUOTE_REQUEST.str;
}


const char * MessageQuote::getMessageName(){
     return "Quote";
}

const std::string & MessageQuote::getMessageType(){
     return MsgTypeEnums::QUOTE.str;
}


const char * MessageSettlementInstructions::getMessageName(){
     return "SettlementInstructions";
}

const std::string & MessageSettlementInstructions::getMessageType(){
     return MsgTypeEnums::SETTLEMENT_INSTRUCTIONS.str;
}


const char * MessageMarketDataRequest::getMessageName(){
     return "MarketDataRequest";
}

const std::string & MessageMarketDataRequest::getMessageType(){
     return MsgTypeEnums::MARKET_DATA_REQUEST.str;
}


const char * MessageMarketDataSnapshotFullRefresh::getMessageName(){
     return "MarketDataSnapshotFullRefresh";
}

const std::string & MessageMarketDataSnapshotFullRefresh::getMessageType(){
     return MsgTypeEnums::MARKET_DATA_SNAPSHOT_FULL_REFRESH.str;
}


const char * MessageMarketDataIncrementalRefresh::getMessageName(){
     return "MarketDataIncrementalRefresh";
}

const std::string & MessageMarketDataIncrementalRefresh::getMessageType(){
     return MsgTypeEnums::MARKET_DATA_INCREMENTAL_REFRESH.str;
}


const char * MessageMarketDataRequestReject::getMessageName(){
     return "MarketDataRequestReject";
}

const std::string & MessageMarketDataRequestReject::getMessageType(){
     return MsgTypeEnums::MARKET_DATA_REQUEST_REJECT.str;
}


const char * MessageQuoteCancel::getMessageName(){
     return "QuoteCancel";
}

const std::string & MessageQuoteCancel::getMessageType(){
     return MsgTypeEnums::QUOTE_CANCEL.str;
}


const char * MessageQuoteStatusRequest::getMessageName(){
     return "QuoteStatusRequest";
}

const std::string & MessageQuoteStatusRequest::getMessageType(){
     return MsgTypeEnums::QUOTE_STATUS_REQUEST.str;
}


const char * MessageMassQuoteAcknowledgement::getMessageName(){
     return "MassQuoteAcknowledgement";
}

const std::string & MessageMassQuoteAcknowledgement::getMessageType(){
     return MsgTypeEnums::MASS_QUOTE_ACKNOWLEDGEMENT.str;
}


const char * MessageSecurityDefinitionRequest::getMessageName(){
     return "SecurityDefinitionRequest";
}

const std::string & MessageSecurityDefinitionRequest::getMessageType(){
     return MsgTypeEnums::SECURITY_DEFINITION_REQUEST.str;
}


const char * MessageSecurityDefinition::getMessageName(){
     return "SecurityDefinition";
}

const std::string & MessageSecurityDefinition::getMessageType(){
     return MsgTypeEnums::SECURITY_DEFINITION.str;
}


const char * MessageSecurityStatusRequest::getMessageName(){
     return "SecurityStatusRequest";
}

const std::string & MessageSecurityStatusRequest::getMessageType(){
     return MsgTypeEnums::SECURITY_STATUS_REQUEST.str;
}


const char * MessageSecurityStatus::getMessageName(){
     return "SecurityStatus";
}

const std::string & MessageSecurityStatus::getMessageType(){
     return MsgTypeEnums::SECURITY_STATUS.str;
}


const char * MessageTradingSessionStatusRequest::getMessageName(){
     return "TradingSessionStatusRequest";
}

const std::string & MessageTradingSessionStatusRequest::getMessageType(){
     return MsgTypeEnums::TRADING_SESSION_STATUS_REQUEST.str;
}


const char * MessageTradingSessionStatus::getMessageName(){
     return "TradingSessionStatus";
}

const std::string & MessageTradingSessionStatus::getMessageType(){
     return MsgTypeEnums::TRADING_SESSION_STATUS.str;
}


const char * MessageMassQuote::getMessageName(){
     return "MassQuote";
}

const std::string & MessageMassQuote::getMessageType(){
     return MsgTypeEnums::MASS_QUOTE.str;
}


const char * MessageBusinessMessageReject::getMessageName(){
     return "BusinessMessageReject";
}

const std::string & MessageBusinessMessageReject::getMessageType(){
     return MsgTypeEnums::BUSINESS_MESSAGE_REJECT.str;
}


const char * MessageBidRequest::getMessageName(){
     return "BidRequest";
}

const std::string & MessageBidRequest::getMessageType(){
     return MsgTypeEnums::BID_REQUEST.str;
}


const char * MessageBidResponse::getMessageName(){
     return "BidResponse";
}

const std::string & MessageBidResponse::getMessageType(){
     return MsgTypeEnums::BID_RESPONSE.str;
}


const char * MessageListStrikePrice::getMessageName(){
     return "ListStrikePrice";
}

const std::string & MessageListStrikePrice::getMessageType(){
     return MsgTypeEnums::LIST_STRIKE_PRICE.str;
}


const char * MessageXMLnonFIX::getMessageName(){
     return "XMLnonFIX";
}

const std::string & MessageXMLnonFIX::getMessageType(){
     return MsgTypeEnums::XML_MESSAGE.str;
}


const char * MessageRegistrationInstructions::getMessageName(){
     return "RegistrationInstructions";
}

const std::string & MessageRegistrationInstructions::getMessageType(){
     return MsgTypeEnums::REGISTRATION_INSTRUCTIONS.str;
}


const char * MessageRegistrationInstructionsResponse::getMessageName(){
     return "RegistrationInstructionsResponse";
}

const std::string & MessageRegistrationInstructionsResponse::getMessageType(){
     return MsgTypeEnums::REGISTRATION_INSTRUCTIONS_RESPONSE.str;
}


const char * MessageOrderMassCancelRequest::getMessageName(){
     return "OrderMassCancelRequest";
}

const std::string & MessageOrderMassCancelRequest::getMessageType(){
     return MsgTypeEnums::ORDER_MASS_CANCEL_REQUEST.str;
}


const char * MessageOrderMassCancelReport::getMessageName(){
     return "OrderMassCancelReport";
}

const std::string & MessageOrderMassCancelReport::getMessageType(){
     return MsgTypeEnums::ORDER_MASS_CANCEL_REPORT.str;
}


const char * MessageNewOrderCross::getMessageName(){
     return "NewOrderCross";
}

const std::string & MessageNewOrderCross::getMessageType(){
     return MsgTypeEnums::NEW_ORDER_s.str;
}


const char * MessageCrossOrderCancelReplaceRequest::getMessageName(){
     return "CrossOrderCancelReplaceRequest";
}

const std::string & MessageCrossOrderCancelReplaceRequest::getMessageType(){
     return MsgTypeEnums::CROSS_ORDER_CANCEL_REPLACE_REQUEST.str;
}


const char * MessageCrossOrderCancelRequest::getMessageName(){
     return "CrossOrderCancelRequest";
}

const std::string & MessageCrossOrderCancelRequest::getMessageType(){
     return MsgTypeEnums::CROSS_ORDER_CANCEL_REQUEST.str;
}


const char * MessageSecurityTypeRequest::getMessageName(){
     return "SecurityTypeRequest";
}

const std::string & MessageSecurityTypeRequest::getMessageType(){
     return MsgTypeEnums::SECURITY_TYPE_REQUEST.str;
}


const char * MessageSecurityTypes::getMessageName(){
     return "SecurityTypes";
}

const std::string & MessageSecurityTypes::getMessageType(){
     return MsgTypeEnums::SECURITY_TYPES.str;
}


const char * MessageSecurityListRequest::getMessageName(){
     return "SecurityListRequest";
}

const std::string & MessageSecurityListRequest::getMessageType(){
     return MsgTypeEnums::SECURITY_LIST_REQUEST.str;
}


const char * MessageSecurityList::getMessageName(){
     return "SecurityList";
}

const std::string & MessageSecurityList::getMessageType(){
     return MsgTypeEnums::SECURITY_LIST.str;
}


const char * MessageDerivativeSecurityListRequest::getMessageName(){
     return "DerivativeSecurityListRequest";
}

const std::string & MessageDerivativeSecurityListRequest::getMessageType(){
     return MsgTypeEnums::DERIVATIVE_SECURITY_LIST_REQUEST.str;
}


const char * MessageDerivativeSecurityList::getMessageName(){
     return "DerivativeSecurityList";
}

const std::string & MessageDerivativeSecurityList::getMessageType(){
     return MsgTypeEnums::DERIVATIVE_SECURITY_LIST.str;
}


const char * MessageNewOrderMultileg::getMessageName(){
     return "NewOrderMultileg";
}

const std::string & MessageNewOrderMultileg::getMessageType(){
     return MsgTypeEnums::NEW_ORDER_AB.str;
}


const char * MessageMultilegOrderCancelReplace::getMessageName(){
     return "MultilegOrderCancelReplace";
}

const std::string & MessageMultilegOrderCancelReplace::getMessageType(){
     return MsgTypeEnums::MULTILEG_ORDER_CANCEL_REPLACE.str;
}


const char * MessageTradeCaptureReportRequest::getMessageName(){
     return "TradeCaptureReportRequest";
}

const std::string & MessageTradeCaptureReportRequest::getMessageType(){
     return MsgTypeEnums::TRADE_CAPTURE_REPORT_REQUEST.str;
}


const char * MessageTradeCaptureReport::getMessageName(){
     return "TradeCaptureReport";
}

const std::string & MessageTradeCaptureReport::getMessageType(){
     return MsgTypeEnums::TRADE_CAPTURE_REPORT.str;
}


const char * MessageOrderMassStatusRequest::getMessageName(){
     return "OrderMassStatusRequest";
}

const std::string & MessageOrderMassStatusRequest::getMessageType(){
     return MsgTypeEnums::ORDER_MASS_STATUS_REQUEST.str;
}


const char * MessageQuoteRequestReject::getMessageName(){
     return "QuoteRequestReject";
}

const std::string & MessageQuoteRequestReject::getMessageType(){
     return MsgTypeEnums::QUOTE_REQUEST_REJECT.str;
}


const char * MessageRFQRequest::getMessageName(){
     return "RFQRequest";
}

const std::string & MessageRFQRequest::getMessageType(){
     return MsgTypeEnums::RFQ_REQUEST.str;
}


const char * MessageQuoteStatusReport::getMessageName(){
     return "QuoteStatusReport";
}

const std::string & MessageQuoteStatusReport::getMessageType(){
     return MsgTypeEnums::QUOTE_STATUS_REPORT.str;
}


const char * MessageQuoteResponse::getMessageName(){
     return "QuoteResponse";
}

const std::string & MessageQuoteResponse::getMessageType(){
     return MsgTypeEnums::QUOTE_RESPONSE.str;
}


const char * MessageConfirmation::getMessageName(){
     return "Confirmation";
}

const std::string & MessageConfirmation::getMessageType(){
     return MsgTypeEnums::CONFIRMATION.str;
}


const char * MessagePositionMaintenanceRequest::getMessageName(){
     return "PositionMaintenanceRequest";
}

const std::string & MessagePositionMaintenanceRequest::getMessageType(){
     return MsgTypeEnums::POSITION_MAINTENANCE_REQUEST.str;
}


const char * MessagePositionMaintenanceReport::getMessageName(){
     return "PositionMaintenanceReport";
}

const std::string & MessagePositionMaintenanceReport::getMessageType(){
     return MsgTypeEnums::POSITION_MAINTENANCE_REPORT.str;
}


const char * MessageRequestForPositions::getMessageName(){
     return "RequestForPositions";
}

const std::string & MessageRequestForPositions::getMessageType(){
     return MsgTypeEnums::REQUEST_FOR_POSITIONS.str;
}


const char * MessageRequestForPositionsAck::getMessageName(){
     return "RequestForPositionsAck";
}

const std::string & MessageRequestForPositionsAck::getMessageType(){
     return MsgTypeEnums::REQUEST_FOR_POSITIONS_ACK.str;
}


const char * MessagePositionReport::getMessageName(){
     return "PositionReport";
}

const std::string & MessagePositionReport::getMessageType(){
     return MsgTypeEnums::POSITION_REPORT.str;
}


const char * MessageTradeCaptureReportRequestAck::getMessageName(){
     return "TradeCaptureReportRequestAck";
}

const std::string & MessageTradeCaptureReportRequestAck::getMessageType(){
     return MsgTypeEnums::TRADE_CAPTURE_REPORT_REQUEST_ACK.str;
}


const char * MessageTradeCaptureReportAck::getMessageName(){
     return "TradeCaptureReportAck";
}

const std::string & MessageTradeCaptureReportAck::getMessageType(){
     return MsgTypeEnums::TRADE_CAPTURE_REPORT_ACK.str;
}


const char * MessageAllocationReport::getMessageName(){
     return "AllocationReport";
}

const std::string & MessageAllocationReport::getMessageType(){
     return MsgTypeEnums::ALLOCATION_REPORT.str;
}


const char * MessageAllocationReportAck::getMessageName(){
     return "AllocationReportAck";
}

const std::string & MessageAllocationReportAck::getMessageType(){
     return MsgTypeEnums::ALLOCATION_REPORT_ACK.str;
}


const char * MessageConfirmationAck::getMessageName(){
     return "ConfirmationAck";
}

const std::string & MessageConfirmationAck::getMessageType(){
     return MsgTypeEnums::CONFIRMATION_ACK.str;
}


const char * MessageSettlementInstructionRequest::getMessageName(){
     return "SettlementInstructionRequest";
}

const std::string & MessageSettlementInstructionRequest::getMessageType(){
     return MsgTypeEnums::SETTLEMENT_INSTRUCTION_REQUEST.str;
}


const char * MessageAssignmentReport::getMessageName(){
     return "AssignmentReport";
}

const std::string & MessageAssignmentReport::getMessageType(){
     return MsgTypeEnums::ASSIGNMENT_REPORT.str;
}


const char * MessageCollateralRequest::getMessageName(){
     return "CollateralRequest";
}

const std::string & MessageCollateralRequest::getMessageType(){
     return MsgTypeEnums::COLLATERAL_REQUEST.str;
}


const char * MessageCollateralAssignment::getMessageName(){
     return "CollateralAssignment";
}

const std::string & MessageCollateralAssignment::getMessageType(){
     return MsgTypeEnums::COLLATERAL_ASSIGNMENT.str;
}


const char * MessageCollateralResponse::getMessageName(){
     return "CollateralResponse";
}

const std::string & MessageCollateralResponse::getMessageType(){
     return MsgTypeEnums::COLLATERAL_RESPONSE.str;
}


const char * MessageCollateralReport::getMessageName(){
     return "CollateralReport";
}

const std::string & MessageCollateralReport::getMessageType(){
     return MsgTypeEnums::COLLATERAL_REPORT.str;
}


const char * MessageCollateralInquiry::getMessageName(){
     return "CollateralInquiry";
}

const std::string & MessageCollateralInquiry::getMessageType(){
     return MsgTypeEnums::COLLATERAL_INQUIRY.str;
}


const char * MessageNetworkCounterpartySystemStatusRequest::getMessageName(){
     return "NetworkCounterpartySystemStatusRequest";
}

const std::string & MessageNetworkCounterpartySystemStatusRequest::getMessageType(){
     return MsgTypeEnums::NETWORK_BC.str;
}


const char * MessageNetworkCounterpartySystemStatusResponse::getMessageName(){
     return "NetworkCounterpartySystemStatusResponse";
}

const std::string & MessageNetworkCounterpartySystemStatusResponse::getMessageType(){
     return MsgTypeEnums::NETWORK_BD.str;
}


const char * MessageUserRequest::getMessageName(){
     return "UserRequest";
}

const std::string & MessageUserRequest::getMessageType(){
     return MsgTypeEnums::USER_REQUEST.str;
}


const char * MessageUserResponse::getMessageName(){
     return "UserResponse";
}

const std::string & MessageUserResponse::getMessageType(){
     return MsgTypeEnums::USER_RESPONSE.str;
}


const char * MessageCollateralInquiryAck::getMessageName(){
     return "CollateralInquiryAck";
}

const std::string & MessageCollateralInquiryAck::getMessageType(){
     return MsgTypeEnums::COLLATERAL_INQUIRY_ACK.str;
}


const char * MessageConfirmationRequest::getMessageName(){
     return "ConfirmationRequest";
}

const std::string & MessageConfirmationRequest::getMessageType(){
     return MsgTypeEnums::CONFIRMATION_REQUEST.str;
}


// -------------------------------------- scan ----------------------------------------

offset_t MessageHeader::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW :
     FIXPP_PRINT_FIELD(BeginString) 
     fieldBeginString.offset = pos;
     break;

   case FieldBodyLength::RAW :
     FIXPP_PRINT_FIELD(BodyLength) 
     fieldBodyLength.offset = pos;
     break;

   case FieldMsgType::RAW :
     FIXPP_PRINT_FIELD(MsgType) 
     fieldMsgType.offset = pos;
     break;

   case FieldSenderCompID::RAW :
     FIXPP_PRINT_FIELD(SenderCompID) 
     fieldSenderCompID.offset = pos;
     break;

   case FieldTargetCompID::RAW :
     FIXPP_PRINT_FIELD(TargetCompID) 
     fieldTargetCompID.offset = pos;
     break;

   case FieldOnBehalfOfCompID::RAW :
     FIXPP_PRINT_FIELD(OnBehalfOfCompID) 
     fieldOnBehalfOfCompID.offset = pos;
     break;

   case FieldDeliverToCompID::RAW :
     FIXPP_PRINT_FIELD(DeliverToCompID) 
     fieldDeliverToCompID.offset = pos;
     break;

   case FieldSecureDataLen::RAW :
     FIXPP_PRINT_FIELD(SecureDataLen) 
     fieldSecureDataLen.offset = pos;
     break;

   case FieldSecureData::RAW :
     FIXPP_PRINT_FIELD(SecureData) 
     fieldSecureData.offset = pos;
     break;

   case FieldMsgSeqNum::RAW :
     FIXPP_PRINT_FIELD(MsgSeqNum) 
     fieldMsgSeqNum.offset = pos;
     break;

   case FieldSenderSubID::RAW :
     FIXPP_PRINT_FIELD(SenderSubID) 
     fieldSenderSubID.offset = pos;
     break;

   case FieldSenderLocationID::RAW :
     FIXPP_PRINT_FIELD(SenderLocationID) 
     fieldSenderLocationID.offset = pos;
     break;

   case FieldTargetSubID::RAW :
     FIXPP_PRINT_FIELD(TargetSubID) 
     fieldTargetSubID.offset = pos;
     break;

   case FieldTargetLocationID::RAW :
     FIXPP_PRINT_FIELD(TargetLocationID) 
     fieldTargetLocationID.offset = pos;
     break;

   case FieldOnBehalfOfSubID::RAW :
     FIXPP_PRINT_FIELD(OnBehalfOfSubID) 
     fieldOnBehalfOfSubID.offset = pos;
     break;

   case FieldOnBehalfOfLocationID::RAW :
     FIXPP_PRINT_FIELD(OnBehalfOfLocationID) 
     fieldOnBehalfOfLocationID.offset = pos;
     break;

   case FieldDeliverToSubID::RAW :
     FIXPP_PRINT_FIELD(DeliverToSubID) 
     fieldDeliverToSubID.offset = pos;
     break;

   case FieldDeliverToLocationID::RAW :
     FIXPP_PRINT_FIELD(DeliverToLocationID) 
     fieldDeliverToLocationID.offset = pos;
     break;

   case FieldPossDupFlag::RAW :
     FIXPP_PRINT_FIELD(PossDupFlag) 
     fieldPossDupFlag.offset = pos;
     break;

   case FieldPossResend::RAW :
     FIXPP_PRINT_FIELD(PossResend) 
     fieldPossResend.offset = pos;
     break;

   case FieldSendingTime::RAW :
     FIXPP_PRINT_FIELD(SendingTime) 
     fieldSendingTime.offset = pos;
     break;

   case FieldOrigSendingTime::RAW :
     FIXPP_PRINT_FIELD(OrigSendingTime) 
     fieldOrigSendingTime.offset = pos;
     break;

   case FieldXmlDataLen::RAW :
     FIXPP_PRINT_FIELD(XmlDataLen) 
     fieldXmlDataLen.offset = pos;
     break;

   case FieldXmlData::RAW :
     FIXPP_PRINT_FIELD(XmlData) 
     fieldXmlData.offset = pos;
     break;

   case FieldMessageEncoding::RAW :
     FIXPP_PRINT_FIELD(MessageEncoding) 
     fieldMessageEncoding.offset = pos;
     break;

   case FieldLastMsgSeqNumProcessed::RAW :
     FIXPP_PRINT_FIELD(LastMsgSeqNumProcessed) 
     fieldLastMsgSeqNumProcessed.offset = pos;
     break;

   case FieldNoHops::RAW :
     FIXPP_PRINT_FIELD(NoHops) 
     fieldNoHops.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupHops::scan( groupsHops, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageHeartbeat::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW :
     FIXPP_PRINT_FIELD(TestReqID) 
     fieldTestReqID.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTestRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW :
     FIXPP_PRINT_FIELD(TestReqID) 
     fieldTestReqID.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageResendRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginSeqNo::RAW :
     FIXPP_PRINT_FIELD(BeginSeqNo) 
     fieldBeginSeqNo.offset = pos;
     break;

   case FieldEndSeqNo::RAW :
     FIXPP_PRINT_FIELD(EndSeqNo) 
     fieldEndSeqNo.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageReject::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     fieldRefSeqNum.offset = pos;
     break;

   case FieldRefTagID::RAW :
     FIXPP_PRINT_FIELD(RefTagID) 
     fieldRefTagID.offset = pos;
     break;

   case FieldRefMsgType::RAW :
     FIXPP_PRINT_FIELD(RefMsgType) 
     fieldRefMsgType.offset = pos;
     break;

   case FieldSessionRejectReason::RAW :
     FIXPP_PRINT_FIELD(SessionRejectReason) 
     fieldSessionRejectReason.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSequenceReset::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldGapFillFlag::RAW :
     FIXPP_PRINT_FIELD(GapFillFlag) 
     fieldGapFillFlag.offset = pos;
     break;

   case FieldNewSeqNo::RAW :
     FIXPP_PRINT_FIELD(NewSeqNo) 
     fieldNewSeqNo.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogout::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageIOI::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldIOIID::RAW :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldIOITransType::RAW :
     FIXPP_PRINT_FIELD(IOITransType) 
     fieldIOITransType.offset = pos;
     break;

   case FieldIOIRefID::RAW :
     FIXPP_PRINT_FIELD(IOIRefID) 
     fieldIOIRefID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldIOIQty::RAW :
     FIXPP_PRINT_FIELD(IOIQty) 
     fieldIOIQty.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldValidUntilTime::RAW :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldIOIQltyInd::RAW :
     FIXPP_PRINT_FIELD(IOIQltyInd) 
     fieldIOIQltyInd.offset = pos;
     break;

   case FieldIOINaturalFlag::RAW :
     FIXPP_PRINT_FIELD(IOINaturalFlag) 
     fieldIOINaturalFlag.offset = pos;
     break;

   case FieldNoIOIQualifiers::RAW :
     FIXPP_PRINT_FIELD(NoIOIQualifiers) 
     fieldNoIOIQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupIOIQualifiers::scan( groupsIOIQualifiers, fix+pos, len - pos );
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldURLLink::RAW :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAdvertisement::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAdvId::RAW :
     FIXPP_PRINT_FIELD(AdvId) 
     fieldAdvId.offset = pos;
     break;

   case FieldAdvTransType::RAW :
     FIXPP_PRINT_FIELD(AdvTransType) 
     fieldAdvTransType.offset = pos;
     break;

   case FieldAdvRefID::RAW :
     FIXPP_PRINT_FIELD(AdvRefID) 
     fieldAdvRefID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldAdvSide::RAW :
     FIXPP_PRINT_FIELD(AdvSide) 
     fieldAdvSide.offset = pos;
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldURLLink::RAW :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldLastMkt::RAW :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageExecutionReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldSecondaryExecID::RAW :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldQuoteRespID::RAW :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldOrdStatusReqID::RAW :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     fieldOrdStatusReqID.offset = pos;
     break;

   case FieldMassStatusReqID::RAW :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     fieldMassStatusReqID.offset = pos;
     break;

   case FieldTotNumReports::RAW :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldNoContraBrokers::RAW :
     FIXPP_PRINT_FIELD(NoContraBrokers) 
     fieldNoContraBrokers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContraBrokers::scan( groupsContraBrokers, fix+pos, len - pos );
     break;

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldCrossID::RAW :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldExecID::RAW :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecRefID::RAW :
     FIXPP_PRINT_FIELD(ExecRefID) 
     fieldExecRefID.offset = pos;
     break;

   case FieldExecType::RAW :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrdStatus::RAW :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldWorkingIndicator::RAW :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     fieldWorkingIndicator.offset = pos;
     break;

   case FieldOrdRejReason::RAW :
     FIXPP_PRINT_FIELD(OrdRejReason) 
     fieldOrdRejReason.offset = pos;
     break;

   case FieldExecRestatementReason::RAW :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     fieldExecRestatementReason.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldPegOffsetValue::RAW :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldPeggedPrice::RAW :
     FIXPP_PRINT_FIELD(PeggedPrice) 
     fieldPeggedPrice.offset = pos;
     break;

   case FieldDiscretionPrice::RAW :
     FIXPP_PRINT_FIELD(DiscretionPrice) 
     fieldDiscretionPrice.offset = pos;
     break;

   case FieldTargetStrategy::RAW :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldTargetStrategyPerformance::RAW :
     FIXPP_PRINT_FIELD(TargetStrategyPerformance) 
     fieldTargetStrategyPerformance.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldTimeInForce::RAW :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldExecInst::RAW :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldLastQty::RAW :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldUnderlyingLastQty::RAW :
     FIXPP_PRINT_FIELD(UnderlyingLastQty) 
     fieldUnderlyingLastQty.offset = pos;
     break;

   case FieldLastPx::RAW :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldUnderlyingLastPx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingLastPx) 
     fieldUnderlyingLastPx.offset = pos;
     break;

   case FieldLastParPx::RAW :
     FIXPP_PRINT_FIELD(LastParPx) 
     fieldLastParPx.offset = pos;
     break;

   case FieldLastSpotRate::RAW :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     fieldLastSpotRate.offset = pos;
     break;

   case FieldLastForwardPoints::RAW :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     fieldLastForwardPoints.offset = pos;
     break;

   case FieldLastMkt::RAW :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTimeBracket::RAW :
     FIXPP_PRINT_FIELD(TimeBracket) 
     fieldTimeBracket.offset = pos;
     break;

   case FieldLastCapacity::RAW :
     FIXPP_PRINT_FIELD(LastCapacity) 
     fieldLastCapacity.offset = pos;
     break;

   case FieldLeavesQty::RAW :
     FIXPP_PRINT_FIELD(LeavesQty) 
     fieldLeavesQty.offset = pos;
     break;

   case FieldCumQty::RAW :
     FIXPP_PRINT_FIELD(CumQty) 
     fieldCumQty.offset = pos;
     break;

   case FieldAvgPx::RAW :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldDayOrderQty::RAW :
     FIXPP_PRINT_FIELD(DayOrderQty) 
     fieldDayOrderQty.offset = pos;
     break;

   case FieldDayCumQty::RAW :
     FIXPP_PRINT_FIELD(DayCumQty) 
     fieldDayCumQty.offset = pos;
     break;

   case FieldDayAvgPx::RAW :
     FIXPP_PRINT_FIELD(DayAvgPx) 
     fieldDayAvgPx.offset = pos;
     break;

   case FieldGTBookingInst::RAW :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldReportToExch::RAW :
     FIXPP_PRINT_FIELD(ReportToExch) 
     fieldReportToExch.offset = pos;
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldNumDaysInterest::RAW :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldExDate::RAW :
     FIXPP_PRINT_FIELD(ExDate) 
     fieldExDate.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldTradedFlatSwitch::RAW :
     FIXPP_PRINT_FIELD(TradedFlatSwitch) 
     fieldTradedFlatSwitch.offset = pos;
     break;

   case FieldBasisFeatureDate::RAW :
     FIXPP_PRINT_FIELD(BasisFeatureDate) 
     fieldBasisFeatureDate.offset = pos;
     break;

   case FieldBasisFeaturePrice::RAW :
     FIXPP_PRINT_FIELD(BasisFeaturePrice) 
     fieldBasisFeaturePrice.offset = pos;
     break;

   case FieldConcession::RAW :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldSettlCurrAmt::RAW :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     fieldSettlCurrAmt.offset = pos;
     break;

   case FieldSettlCurrency::RAW :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldSettlCurrFxRate::RAW :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     fieldSettlCurrFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldHandlInst::RAW :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldMinQty::RAW :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldPositionEffect::RAW :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldMaxShow::RAW :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldBookingType::RAW :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldLastForwardPoints2::RAW :
     FIXPP_PRINT_FIELD(LastForwardPoints2) 
     fieldLastForwardPoints2.offset = pos;
     break;

   case FieldMultiLegReportingType::RAW :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldCancellationRights::RAW :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldTransBkdTime::RAW :
     FIXPP_PRINT_FIELD(TransBkdTime) 
     fieldTransBkdTime.offset = pos;
     break;

   case FieldExecValuationPoint::RAW :
     FIXPP_PRINT_FIELD(ExecValuationPoint) 
     fieldExecValuationPoint.offset = pos;
     break;

   case FieldExecPriceType::RAW :
     FIXPP_PRINT_FIELD(ExecPriceType) 
     fieldExecPriceType.offset = pos;
     break;

   case FieldExecPriceAdjustment::RAW :
     FIXPP_PRINT_FIELD(ExecPriceAdjustment) 
     fieldExecPriceAdjustment.offset = pos;
     break;

   case FieldPriorityIndicator::RAW :
     FIXPP_PRINT_FIELD(PriorityIndicator) 
     fieldPriorityIndicator.offset = pos;
     break;

   case FieldPriceImprovement::RAW :
     FIXPP_PRINT_FIELD(PriceImprovement) 
     fieldPriceImprovement.offset = pos;
     break;

   case FieldLastLiquidityInd::RAW :
     FIXPP_PRINT_FIELD(LastLiquidityInd) 
     fieldLastLiquidityInd.offset = pos;
     break;

   case FieldNoContAmts::RAW :
     FIXPP_PRINT_FIELD(NoContAmts) 
     fieldNoContAmts.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContAmts::scan( groupsContAmts, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldNoMiscFees::RAW :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReject::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldOrdStatus::RAW :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldWorkingIndicator::RAW :
     FIXPP_PRINT_FIELD(WorkingIndicator) 
     fieldWorkingIndicator.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCxlRejResponseTo::RAW :
     FIXPP_PRINT_FIELD(CxlRejResponseTo) 
     fieldCxlRejResponseTo.offset = pos;
     break;

   case FieldCxlRejReason::RAW :
     FIXPP_PRINT_FIELD(CxlRejReason) 
     fieldCxlRejReason.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogon::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEncryptMethod::RAW :
     FIXPP_PRINT_FIELD(EncryptMethod) 
     fieldEncryptMethod.offset = pos;
     break;

   case FieldHeartBtInt::RAW :
     FIXPP_PRINT_FIELD(HeartBtInt) 
     fieldHeartBtInt.offset = pos;
     break;

   case FieldRawDataLength::RAW :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldResetSeqNumFlag::RAW :
     FIXPP_PRINT_FIELD(ResetSeqNumFlag) 
     fieldResetSeqNumFlag.offset = pos;
     break;

   case FieldNextExpectedMsgSeqNum::RAW :
     FIXPP_PRINT_FIELD(NextExpectedMsgSeqNum) 
     fieldNextExpectedMsgSeqNum.offset = pos;
     break;

   case FieldMaxMessageSize::RAW :
     FIXPP_PRINT_FIELD(MaxMessageSize) 
     fieldMaxMessageSize.offset = pos;
     break;

   case FieldNoMsgTypes::RAW :
     FIXPP_PRINT_FIELD(NoMsgTypes) 
     fieldNoMsgTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMsgTypes::scan( groupsMsgTypes, fix+pos, len - pos );
     break;

   case FieldTestMessageIndicator::RAW :
     FIXPP_PRINT_FIELD(TestMessageIndicator) 
     fieldTestMessageIndicator.offset = pos;
     break;

   case FieldUsername::RAW :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldPassword::RAW :
     FIXPP_PRINT_FIELD(Password) 
     fieldPassword.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNews::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigTime::RAW :
     FIXPP_PRINT_FIELD(OrigTime) 
     fieldOrigTime.offset = pos;
     break;

   case FieldUrgency::RAW :
     FIXPP_PRINT_FIELD(Urgency) 
     fieldUrgency.offset = pos;
     break;

   case FieldHeadline::RAW :
     FIXPP_PRINT_FIELD(Headline) 
     fieldHeadline.offset = pos;
     break;

   case FieldEncodedHeadlineLen::RAW :
     FIXPP_PRINT_FIELD(EncodedHeadlineLen) 
     fieldEncodedHeadlineLen.offset = pos;
     break;

   case FieldEncodedHeadline::RAW :
     FIXPP_PRINT_FIELD(EncodedHeadline) 
     fieldEncodedHeadline.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLinesOfText::RAW :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     fieldNoLinesOfText.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::scan( groupsLinesOfText, fix+pos, len - pos );
     break;

   case FieldURLLink::RAW :
     FIXPP_PRINT_FIELD(URLLink) 
     fieldURLLink.offset = pos;
     break;

   case FieldRawDataLength::RAW :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageEmail::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEmailThreadID::RAW :
     FIXPP_PRINT_FIELD(EmailThreadID) 
     fieldEmailThreadID.offset = pos;
     break;

   case FieldEmailType::RAW :
     FIXPP_PRINT_FIELD(EmailType) 
     fieldEmailType.offset = pos;
     break;

   case FieldOrigTime::RAW :
     FIXPP_PRINT_FIELD(OrigTime) 
     fieldOrigTime.offset = pos;
     break;

   case FieldSubject::RAW :
     FIXPP_PRINT_FIELD(Subject) 
     fieldSubject.offset = pos;
     break;

   case FieldEncodedSubjectLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSubjectLen) 
     fieldEncodedSubjectLen.offset = pos;
     break;

   case FieldEncodedSubject::RAW :
     FIXPP_PRINT_FIELD(EncodedSubject) 
     fieldEncodedSubject.offset = pos;
     break;

   case FieldNoRoutingIDs::RAW :
     FIXPP_PRINT_FIELD(NoRoutingIDs) 
     fieldNoRoutingIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::scan( groupsRoutingIDs, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoLinesOfText::RAW :
     FIXPP_PRINT_FIELD(NoLinesOfText) 
     fieldNoLinesOfText.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::scan( groupsLinesOfText, fix+pos, len - pos );
     break;

   case FieldRawDataLength::RAW :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderSingle::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldLocateReqd::RAW :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldPrice2::RAW :
     FIXPP_PRINT_FIELD(Price2) 
     fieldPrice2.offset = pos;
     break;

   case FieldPositionEffect::RAW :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderList::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldBidID::RAW :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldProgRptReqs::RAW :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     fieldProgRptReqs.offset = pos;
     break;

   case FieldBidType::RAW :
     FIXPP_PRINT_FIELD(BidType) 
     fieldBidType.offset = pos;
     break;

   case FieldProgPeriodInterval::RAW :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     fieldProgPeriodInterval.offset = pos;
     break;

   case FieldCancellationRights::RAW :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldListExecInstType::RAW :
     FIXPP_PRINT_FIELD(ListExecInstType) 
     fieldListExecInstType.offset = pos;
     break;

   case FieldListExecInst::RAW :
     FIXPP_PRINT_FIELD(ListExecInst) 
     fieldListExecInst.offset = pos;
     break;

   case FieldEncodedListExecInstLen::RAW :
     FIXPP_PRINT_FIELD(EncodedListExecInstLen) 
     fieldEncodedListExecInstLen.offset = pos;
     break;

   case FieldEncodedListExecInst::RAW :
     FIXPP_PRINT_FIELD(EncodedListExecInst) 
     fieldEncodedListExecInst.offset = pos;
     break;

   case FieldAllowableOneSidednessPct::RAW :
     FIXPP_PRINT_FIELD(AllowableOneSidednessPct) 
     fieldAllowableOneSidednessPct.offset = pos;
     break;

   case FieldAllowableOneSidednessValue::RAW :
     FIXPP_PRINT_FIELD(AllowableOneSidednessValue) 
     fieldAllowableOneSidednessValue.offset = pos;
     break;

   case FieldAllowableOneSidednessCurr::RAW :
     FIXPP_PRINT_FIELD(AllowableOneSidednessCurr) 
     fieldAllowableOneSidednessCurr.offset = pos;
     break;

   case FieldTotNoOrders::RAW :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     fieldTotNoOrders.offset = pos;
     break;

   case FieldLastFragment::RAW :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoOrders::RAW :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigClOrdID::RAW :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldComplianceID::RAW :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldOrigClOrdID::RAW :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldPegOffsetValue::RAW :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldComplianceID::RAW :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTimeInForce::RAW :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldSettlDate2::RAW :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldPrice2::RAW :
     FIXPP_PRINT_FIELD(Price2) 
     fieldPrice2.offset = pos;
     break;

   case FieldPositionEffect::RAW :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldLocateReqd::RAW :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldCancellationRights::RAW :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderStatusRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldOrdStatusReqID::RAW :
     FIXPP_PRINT_FIELD(OrdStatusReqID) 
     fieldOrdStatusReqID.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstruction::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldAllocTransType::RAW :
     FIXPP_PRINT_FIELD(AllocTransType) 
     fieldAllocTransType.offset = pos;
     break;

   case FieldAllocType::RAW :
     FIXPP_PRINT_FIELD(AllocType) 
     fieldAllocType.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldRefAllocID::RAW :
     FIXPP_PRINT_FIELD(RefAllocID) 
     fieldRefAllocID.offset = pos;
     break;

   case FieldAllocCancReplaceReason::RAW :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     fieldAllocCancReplaceReason.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldAllocLinkID::RAW :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     fieldAllocLinkID.offset = pos;
     break;

   case FieldAllocLinkType::RAW :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     fieldAllocLinkType.offset = pos;
     break;

   case FieldBookingRefID::RAW :
     FIXPP_PRINT_FIELD(BookingRefID) 
     fieldBookingRefID.offset = pos;
     break;

   case FieldAllocNoOrdersType::RAW :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     fieldAllocNoOrdersType.offset = pos;
     break;

   case FieldNoOrders::RAW :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldReversalIndicator::RAW :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     fieldReversalIndicator.offset = pos;
     break;

   case FieldMatchType::RAW :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldLastMkt::RAW :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgPx::RAW :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgParPx::RAW :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldBookingType::RAW :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldConcession::RAW :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldPositionEffect::RAW :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldAutoAcceptIndicator::RAW :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     fieldAutoAcceptIndicator.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNumDaysInterest::RAW :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldTotalAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     fieldTotalAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldLegalConfirm::RAW :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldTotNoAllocs::RAW :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     fieldTotNoAllocs.offset = pos;
     break;

   case FieldLastFragment::RAW :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListCancelRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListExecute::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldClientBidID::RAW :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldBidID::RAW :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatusRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatus::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldListStatusType::RAW :
     FIXPP_PRINT_FIELD(ListStatusType) 
     fieldListStatusType.offset = pos;
     break;

   case FieldNoRpts::RAW :
     FIXPP_PRINT_FIELD(NoRpts) 
     fieldNoRpts.offset = pos;
     break;

   case FieldListOrderStatus::RAW :
     FIXPP_PRINT_FIELD(ListOrderStatus) 
     fieldListOrderStatus.offset = pos;
     break;

   case FieldRptSeq::RAW :
     FIXPP_PRINT_FIELD(RptSeq) 
     fieldRptSeq.offset = pos;
     break;

   case FieldListStatusText::RAW :
     FIXPP_PRINT_FIELD(ListStatusText) 
     fieldListStatusText.offset = pos;
     break;

   case FieldEncodedListStatusTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedListStatusTextLen) 
     fieldEncodedListStatusTextLen.offset = pos;
     break;

   case FieldEncodedListStatusText::RAW :
     FIXPP_PRINT_FIELD(EncodedListStatusText) 
     fieldEncodedListStatusText.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTotNoOrders::RAW :
     FIXPP_PRINT_FIELD(TotNoOrders) 
     fieldTotNoOrders.offset = pos;
     break;

   case FieldLastFragment::RAW :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoOrders::RAW :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstructionAck::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocStatus::RAW :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldAllocType::RAW :
     FIXPP_PRINT_FIELD(AllocType) 
     fieldAllocType.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDontKnowTrade::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldExecID::RAW :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldDKReason::RAW :
     FIXPP_PRINT_FIELD(DKReason) 
     fieldDKReason.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldLastQty::RAW :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldRFQReqID::RAW :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuote::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespID::RAW :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteType::RAW :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoQuoteQualifiers::RAW :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldQuoteResponseLevel::RAW :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldBidPx::RAW :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructions::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstMsgID::RAW :
     FIXPP_PRINT_FIELD(SettlInstMsgID) 
     fieldSettlInstMsgID.offset = pos;
     break;

   case FieldSettlInstReqID::RAW :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     fieldSettlInstReqID.offset = pos;
     break;

   case FieldSettlInstMode::RAW :
     FIXPP_PRINT_FIELD(SettlInstMode) 
     fieldSettlInstMode.offset = pos;
     break;

   case FieldSettlInstReqRejCode::RAW :
     FIXPP_PRINT_FIELD(SettlInstReqRejCode) 
     fieldSettlInstReqRejCode.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoSettlInst::RAW :
     FIXPP_PRINT_FIELD(NoSettlInst) 
     fieldNoSettlInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSettlInst::scan( groupsSettlInst, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldMarketDepth::RAW :
     FIXPP_PRINT_FIELD(MarketDepth) 
     fieldMarketDepth.offset = pos;
     break;

   case FieldMDUpdateType::RAW :
     FIXPP_PRINT_FIELD(MDUpdateType) 
     fieldMDUpdateType.offset = pos;
     break;

   case FieldAggregatedBook::RAW :
     FIXPP_PRINT_FIELD(AggregatedBook) 
     fieldAggregatedBook.offset = pos;
     break;

   case FieldOpenCloseSettlFlag::RAW :
     FIXPP_PRINT_FIELD(OpenCloseSettlFlag) 
     fieldOpenCloseSettlFlag.offset = pos;
     break;

   case FieldScope::RAW :
     FIXPP_PRINT_FIELD(Scope) 
     fieldScope.offset = pos;
     break;

   case FieldMDImplicitDelete::RAW :
     FIXPP_PRINT_FIELD(MDImplicitDelete) 
     fieldMDImplicitDelete.offset = pos;
     break;

   case FieldNoMDEntryTypes::RAW :
     FIXPP_PRINT_FIELD(NoMDEntryTypes) 
     fieldNoMDEntryTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntryTypes::scan( groupsMDEntryTypes, fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldApplQueueAction::RAW :
     FIXPP_PRINT_FIELD(ApplQueueAction) 
     fieldApplQueueAction.offset = pos;
     break;

   case FieldApplQueueMax::RAW :
     FIXPP_PRINT_FIELD(ApplQueueMax) 
     fieldApplQueueMax.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldFinancialStatus::RAW :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     fieldFinancialStatus.offset = pos;
     break;

   case FieldCorporateAction::RAW :
     FIXPP_PRINT_FIELD(CorporateAction) 
     fieldCorporateAction.offset = pos;
     break;

   case FieldNetChgPrevDay::RAW :
     FIXPP_PRINT_FIELD(NetChgPrevDay) 
     fieldNetChgPrevDay.offset = pos;
     break;

   case FieldNoMDEntries::RAW :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     fieldNoMDEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::scan( groupsMDEntries, fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     fieldApplQueueDepth.offset = pos;
     break;

   case FieldApplQueueResolution::RAW :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     fieldApplQueueResolution.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldNoMDEntries::RAW :
     FIXPP_PRINT_FIELD(NoMDEntries) 
     fieldNoMDEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::scan( groupsMDEntries, fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW :
     FIXPP_PRINT_FIELD(ApplQueueDepth) 
     fieldApplQueueDepth.offset = pos;
     break;

   case FieldApplQueueResolution::RAW :
     FIXPP_PRINT_FIELD(ApplQueueResolution) 
     fieldApplQueueResolution.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequestReject::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW :
     FIXPP_PRINT_FIELD(MDReqID) 
     fieldMDReqID.offset = pos;
     break;

   case FieldMDReqRejReason::RAW :
     FIXPP_PRINT_FIELD(MDReqRejReason) 
     fieldMDReqRejReason.offset = pos;
     break;

   case FieldNoAltMDSource::RAW :
     FIXPP_PRINT_FIELD(NoAltMDSource) 
     fieldNoAltMDSource.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAltMDSource::scan( groupsAltMDSource, fix+pos, len - pos );
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteCancel::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteCancelType::RAW :
     FIXPP_PRINT_FIELD(QuoteCancelType) 
     fieldQuoteCancelType.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldNoQuoteEntries::RAW :
     FIXPP_PRINT_FIELD(NoQuoteEntries) 
     fieldNoQuoteEntries.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteEntries::scan( groupsQuoteEntries, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     fieldQuoteStatusReqID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteStatus::RAW :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     fieldQuoteStatus.offset = pos;
     break;

   case FieldQuoteRejectReason::RAW :
     FIXPP_PRINT_FIELD(QuoteRejectReason) 
     fieldQuoteRejectReason.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldQuoteType::RAW :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoQuoteSets::RAW :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     fieldNoQuoteSets.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::scan( groupsQuoteSets, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinitionRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityRequestType::RAW :
     FIXPP_PRINT_FIELD(SecurityRequestType) 
     fieldSecurityRequestType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     fieldExpirationCycle.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinition::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityResponseType::RAW :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     fieldSecurityResponseType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW :
     FIXPP_PRINT_FIELD(ExpirationCycle) 
     fieldExpirationCycle.offset = pos;
     break;

   case FieldRoundLot::RAW :
     FIXPP_PRINT_FIELD(RoundLot) 
     fieldRoundLot.offset = pos;
     break;

   case FieldMinTradeVol::RAW :
     FIXPP_PRINT_FIELD(MinTradeVol) 
     fieldMinTradeVol.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatusRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     fieldSecurityStatusReqID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatus::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityStatusReqID) 
     fieldSecurityStatusReqID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldSecurityTradingStatus::RAW :
     FIXPP_PRINT_FIELD(SecurityTradingStatus) 
     fieldSecurityTradingStatus.offset = pos;
     break;

   case FieldFinancialStatus::RAW :
     FIXPP_PRINT_FIELD(FinancialStatus) 
     fieldFinancialStatus.offset = pos;
     break;

   case FieldCorporateAction::RAW :
     FIXPP_PRINT_FIELD(CorporateAction) 
     fieldCorporateAction.offset = pos;
     break;

   case FieldHaltReasonChar::RAW :
     FIXPP_PRINT_FIELD(HaltReasonChar) 
     fieldHaltReasonChar.offset = pos;
     break;

   case FieldInViewOfCommon::RAW :
     FIXPP_PRINT_FIELD(InViewOfCommon) 
     fieldInViewOfCommon.offset = pos;
     break;

   case FieldDueToRelated::RAW :
     FIXPP_PRINT_FIELD(DueToRelated) 
     fieldDueToRelated.offset = pos;
     break;

   case FieldBuyVolume::RAW :
     FIXPP_PRINT_FIELD(BuyVolume) 
     fieldBuyVolume.offset = pos;
     break;

   case FieldSellVolume::RAW :
     FIXPP_PRINT_FIELD(SellVolume) 
     fieldSellVolume.offset = pos;
     break;

   case FieldHighPx::RAW :
     FIXPP_PRINT_FIELD(HighPx) 
     fieldHighPx.offset = pos;
     break;

   case FieldLowPx::RAW :
     FIXPP_PRINT_FIELD(LowPx) 
     fieldLowPx.offset = pos;
     break;

   case FieldLastPx::RAW :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAdjustment::RAW :
     FIXPP_PRINT_FIELD(Adjustment) 
     fieldAdjustment.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatusRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     fieldTradSesReqID.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTradSesMethod::RAW :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     fieldTradSesMethod.offset = pos;
     break;

   case FieldTradSesMode::RAW :
     FIXPP_PRINT_FIELD(TradSesMode) 
     fieldTradSesMode.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatus::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW :
     FIXPP_PRINT_FIELD(TradSesReqID) 
     fieldTradSesReqID.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTradSesMethod::RAW :
     FIXPP_PRINT_FIELD(TradSesMethod) 
     fieldTradSesMethod.offset = pos;
     break;

   case FieldTradSesMode::RAW :
     FIXPP_PRINT_FIELD(TradSesMode) 
     fieldTradSesMode.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldTradSesStatus::RAW :
     FIXPP_PRINT_FIELD(TradSesStatus) 
     fieldTradSesStatus.offset = pos;
     break;

   case FieldTradSesStatusRejReason::RAW :
     FIXPP_PRINT_FIELD(TradSesStatusRejReason) 
     fieldTradSesStatusRejReason.offset = pos;
     break;

   case FieldTradSesStartTime::RAW :
     FIXPP_PRINT_FIELD(TradSesStartTime) 
     fieldTradSesStartTime.offset = pos;
     break;

   case FieldTradSesOpenTime::RAW :
     FIXPP_PRINT_FIELD(TradSesOpenTime) 
     fieldTradSesOpenTime.offset = pos;
     break;

   case FieldTradSesPreCloseTime::RAW :
     FIXPP_PRINT_FIELD(TradSesPreCloseTime) 
     fieldTradSesPreCloseTime.offset = pos;
     break;

   case FieldTradSesCloseTime::RAW :
     FIXPP_PRINT_FIELD(TradSesCloseTime) 
     fieldTradSesCloseTime.offset = pos;
     break;

   case FieldTradSesEndTime::RAW :
     FIXPP_PRINT_FIELD(TradSesEndTime) 
     fieldTradSesEndTime.offset = pos;
     break;

   case FieldTotalVolumeTraded::RAW :
     FIXPP_PRINT_FIELD(TotalVolumeTraded) 
     fieldTotalVolumeTraded.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuote::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteType::RAW :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldQuoteResponseLevel::RAW :
     FIXPP_PRINT_FIELD(QuoteResponseLevel) 
     fieldQuoteResponseLevel.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDefBidSize::RAW :
     FIXPP_PRINT_FIELD(DefBidSize) 
     fieldDefBidSize.offset = pos;
     break;

   case FieldDefOfferSize::RAW :
     FIXPP_PRINT_FIELD(DefOfferSize) 
     fieldDefOfferSize.offset = pos;
     break;

   case FieldNoQuoteSets::RAW :
     FIXPP_PRINT_FIELD(NoQuoteSets) 
     fieldNoQuoteSets.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::scan( groupsQuoteSets, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBusinessMessageReject::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW :
     FIXPP_PRINT_FIELD(RefSeqNum) 
     fieldRefSeqNum.offset = pos;
     break;

   case FieldRefMsgType::RAW :
     FIXPP_PRINT_FIELD(RefMsgType) 
     fieldRefMsgType.offset = pos;
     break;

   case FieldBusinessRejectRefID::RAW :
     FIXPP_PRINT_FIELD(BusinessRejectRefID) 
     fieldBusinessRejectRefID.offset = pos;
     break;

   case FieldBusinessRejectReason::RAW :
     FIXPP_PRINT_FIELD(BusinessRejectReason) 
     fieldBusinessRejectReason.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldBidRequestTransType::RAW :
     FIXPP_PRINT_FIELD(BidRequestTransType) 
     fieldBidRequestTransType.offset = pos;
     break;

   case FieldListName::RAW :
     FIXPP_PRINT_FIELD(ListName) 
     fieldListName.offset = pos;
     break;

   case FieldTotNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldBidType::RAW :
     FIXPP_PRINT_FIELD(BidType) 
     fieldBidType.offset = pos;
     break;

   case FieldNumTickets::RAW :
     FIXPP_PRINT_FIELD(NumTickets) 
     fieldNumTickets.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSideValue1::RAW :
     FIXPP_PRINT_FIELD(SideValue1) 
     fieldSideValue1.offset = pos;
     break;

   case FieldSideValue2::RAW :
     FIXPP_PRINT_FIELD(SideValue2) 
     fieldSideValue2.offset = pos;
     break;

   case FieldNoBidDescriptors::RAW :
     FIXPP_PRINT_FIELD(NoBidDescriptors) 
     fieldNoBidDescriptors.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidDescriptors::scan( groupsBidDescriptors, fix+pos, len - pos );
     break;

   case FieldNoBidComponents::RAW :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     fieldNoBidComponents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::scan( groupsBidComponents, fix+pos, len - pos );
     break;

   case FieldLiquidityIndType::RAW :
     FIXPP_PRINT_FIELD(LiquidityIndType) 
     fieldLiquidityIndType.offset = pos;
     break;

   case FieldWtAverageLiquidity::RAW :
     FIXPP_PRINT_FIELD(WtAverageLiquidity) 
     fieldWtAverageLiquidity.offset = pos;
     break;

   case FieldExchangeForPhysical::RAW :
     FIXPP_PRINT_FIELD(ExchangeForPhysical) 
     fieldExchangeForPhysical.offset = pos;
     break;

   case FieldOutMainCntryUIndex::RAW :
     FIXPP_PRINT_FIELD(OutMainCntryUIndex) 
     fieldOutMainCntryUIndex.offset = pos;
     break;

   case FieldCrossPercent::RAW :
     FIXPP_PRINT_FIELD(CrossPercent) 
     fieldCrossPercent.offset = pos;
     break;

   case FieldProgRptReqs::RAW :
     FIXPP_PRINT_FIELD(ProgRptReqs) 
     fieldProgRptReqs.offset = pos;
     break;

   case FieldProgPeriodInterval::RAW :
     FIXPP_PRINT_FIELD(ProgPeriodInterval) 
     fieldProgPeriodInterval.offset = pos;
     break;

   case FieldIncTaxInd::RAW :
     FIXPP_PRINT_FIELD(IncTaxInd) 
     fieldIncTaxInd.offset = pos;
     break;

   case FieldForexReq::RAW :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldNumBidders::RAW :
     FIXPP_PRINT_FIELD(NumBidders) 
     fieldNumBidders.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldBidTradeType::RAW :
     FIXPP_PRINT_FIELD(BidTradeType) 
     fieldBidTradeType.offset = pos;
     break;

   case FieldBasisPxType::RAW :
     FIXPP_PRINT_FIELD(BasisPxType) 
     fieldBasisPxType.offset = pos;
     break;

   case FieldStrikeTime::RAW :
     FIXPP_PRINT_FIELD(StrikeTime) 
     fieldStrikeTime.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidResponse::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW :
     FIXPP_PRINT_FIELD(BidID) 
     fieldBidID.offset = pos;
     break;

   case FieldClientBidID::RAW :
     FIXPP_PRINT_FIELD(ClientBidID) 
     fieldClientBidID.offset = pos;
     break;

   case FieldNoBidComponents::RAW :
     FIXPP_PRINT_FIELD(NoBidComponents) 
     fieldNoBidComponents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::scan( groupsBidComponents, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStrikePrice::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     FIXPP_PRINT_FIELD(ListID) 
     fieldListID.offset = pos;
     break;

   case FieldTotNoStrikes::RAW :
     FIXPP_PRINT_FIELD(TotNoStrikes) 
     fieldTotNoStrikes.offset = pos;
     break;

   case FieldLastFragment::RAW :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoStrikes::RAW :
     FIXPP_PRINT_FIELD(NoStrikes) 
     fieldNoStrikes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStrikes::scan( groupsStrikes, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageXMLnonFIX::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructions::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldRegistTransType::RAW :
     FIXPP_PRINT_FIELD(RegistTransType) 
     fieldRegistTransType.offset = pos;
     break;

   case FieldRegistRefID::RAW :
     FIXPP_PRINT_FIELD(RegistRefID) 
     fieldRegistRefID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldRegistAcctType::RAW :
     FIXPP_PRINT_FIELD(RegistAcctType) 
     fieldRegistAcctType.offset = pos;
     break;

   case FieldTaxAdvantageType::RAW :
     FIXPP_PRINT_FIELD(TaxAdvantageType) 
     fieldTaxAdvantageType.offset = pos;
     break;

   case FieldOwnershipType::RAW :
     FIXPP_PRINT_FIELD(OwnershipType) 
     fieldOwnershipType.offset = pos;
     break;

   case FieldNoRegistDtls::RAW :
     FIXPP_PRINT_FIELD(NoRegistDtls) 
     fieldNoRegistDtls.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRegistDtls::scan( groupsRegistDtls, fix+pos, len - pos );
     break;

   case FieldNoDistribInsts::RAW :
     FIXPP_PRINT_FIELD(NoDistribInsts) 
     fieldNoDistribInsts.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDistribInsts::scan( groupsDistribInsts, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldRegistTransType::RAW :
     FIXPP_PRINT_FIELD(RegistTransType) 
     fieldRegistTransType.offset = pos;
     break;

   case FieldRegistRefID::RAW :
     FIXPP_PRINT_FIELD(RegistRefID) 
     fieldRegistRefID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldRegistStatus::RAW :
     FIXPP_PRINT_FIELD(RegistStatus) 
     fieldRegistStatus.offset = pos;
     break;

   case FieldRegistRejReasonCode::RAW :
     FIXPP_PRINT_FIELD(RegistRejReasonCode) 
     fieldRegistRejReasonCode.offset = pos;
     break;

   case FieldRegistRejReasonText::RAW :
     FIXPP_PRINT_FIELD(RegistRejReasonText) 
     fieldRegistRejReasonText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldMassCancelRequestType::RAW :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     fieldMassCancelRequestType.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldMassCancelRequestType::RAW :
     FIXPP_PRINT_FIELD(MassCancelRequestType) 
     fieldMassCancelRequestType.offset = pos;
     break;

   case FieldMassCancelResponse::RAW :
     FIXPP_PRINT_FIELD(MassCancelResponse) 
     fieldMassCancelResponse.offset = pos;
     break;

   case FieldMassCancelRejectReason::RAW :
     FIXPP_PRINT_FIELD(MassCancelRejectReason) 
     fieldMassCancelRejectReason.offset = pos;
     break;

   case FieldTotalAffectedOrders::RAW :
     FIXPP_PRINT_FIELD(TotalAffectedOrders) 
     fieldTotalAffectedOrders.offset = pos;
     break;

   case FieldNoAffectedOrders::RAW :
     FIXPP_PRINT_FIELD(NoAffectedOrders) 
     fieldNoAffectedOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAffectedOrders::scan( groupsAffectedOrders, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderCross::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCrossID::RAW :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldCrossType::RAW :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldHandlInst::RAW :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldPrevClosePx::RAW :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldLocateReqd::RAW :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldIOIID::RAW :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldMaxShow::RAW :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldCrossID::RAW :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldHandlInst::RAW :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldPrevClosePx::RAW :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldLocateReqd::RAW :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldIOIID::RAW :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldMaxShow::RAW :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldCrossID::RAW :
     FIXPP_PRINT_FIELD(CrossID) 
     fieldCrossID.offset = pos;
     break;

   case FieldOrigCrossID::RAW :
     FIXPP_PRINT_FIELD(OrigCrossID) 
     fieldOrigCrossID.offset = pos;
     break;

   case FieldCrossType::RAW :
     FIXPP_PRINT_FIELD(CrossType) 
     fieldCrossType.offset = pos;
     break;

   case FieldCrossPrioritization::RAW :
     FIXPP_PRINT_FIELD(CrossPrioritization) 
     fieldCrossPrioritization.offset = pos;
     break;

   case FieldNoSides::RAW :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypeRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypes::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityResponseType::RAW :
     FIXPP_PRINT_FIELD(SecurityResponseType) 
     fieldSecurityResponseType.offset = pos;
     break;

   case FieldTotNoSecurityTypes::RAW :
     FIXPP_PRINT_FIELD(TotNoSecurityTypes) 
     fieldTotNoSecurityTypes.offset = pos;
     break;

   case FieldLastFragment::RAW :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoSecurityTypes::RAW :
     FIXPP_PRINT_FIELD(NoSecurityTypes) 
     fieldNoSecurityTypes.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityTypes::scan( groupsSecurityTypes, fix+pos, len - pos );
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityListRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityListRequestType::RAW :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     fieldSecurityListRequestType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityList::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityRequestResult::RAW :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     fieldSecurityRequestResult.offset = pos;
     break;

   case FieldTotNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldLastFragment::RAW :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityListRequestType::RAW :
     FIXPP_PRINT_FIELD(SecurityListRequestType) 
     fieldSecurityListRequestType.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityList::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     FIXPP_PRINT_FIELD(SecurityReqID) 
     fieldSecurityReqID.offset = pos;
     break;

   case FieldSecurityResponseID::RAW :
     FIXPP_PRINT_FIELD(SecurityResponseID) 
     fieldSecurityResponseID.offset = pos;
     break;

   case FieldSecurityRequestResult::RAW :
     FIXPP_PRINT_FIELD(SecurityRequestResult) 
     fieldSecurityRequestResult.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldTotNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(TotNoRelatedSym) 
     fieldTotNoRelatedSym.offset = pos;
     break;

   case FieldLastFragment::RAW :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderMultileg::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPositionEffect::RAW :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldMultiLegRptTypeReq::RAW :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     fieldMultiLegRptTypeReq.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldOrigClOrdID::RAW :
     FIXPP_PRINT_FIELD(OrigClOrdID) 
     fieldOrigClOrdID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldClOrdLinkID::RAW :
     FIXPP_PRINT_FIELD(ClOrdLinkID) 
     fieldClOrdLinkID.offset = pos;
     break;

   case FieldOrigOrdModTime::RAW :
     FIXPP_PRINT_FIELD(OrigOrdModTime) 
     fieldOrigOrdModTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldDayBookingInst::RAW :
     FIXPP_PRINT_FIELD(DayBookingInst) 
     fieldDayBookingInst.offset = pos;
     break;

   case FieldBookingUnit::RAW :
     FIXPP_PRINT_FIELD(BookingUnit) 
     fieldBookingUnit.offset = pos;
     break;

   case FieldPreallocMethod::RAW :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldCashMargin::RAW :
     FIXPP_PRINT_FIELD(CashMargin) 
     fieldCashMargin.offset = pos;
     break;

   case FieldClearingFeeIndicator::RAW :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldHandlInst::RAW :
     FIXPP_PRINT_FIELD(HandlInst) 
     fieldHandlInst.offset = pos;
     break;

   case FieldExecInst::RAW :
     FIXPP_PRINT_FIELD(ExecInst) 
     fieldExecInst.offset = pos;
     break;

   case FieldMinQty::RAW :
     FIXPP_PRINT_FIELD(MinQty) 
     fieldMinQty.offset = pos;
     break;

   case FieldMaxFloor::RAW :
     FIXPP_PRINT_FIELD(MaxFloor) 
     fieldMaxFloor.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW :
     FIXPP_PRINT_FIELD(PrevClosePx) 
     fieldPrevClosePx.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW :
     FIXPP_PRINT_FIELD(LocateReqd) 
     fieldLocateReqd.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldStopPx::RAW :
     FIXPP_PRINT_FIELD(StopPx) 
     fieldStopPx.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldComplianceID::RAW :
     FIXPP_PRINT_FIELD(ComplianceID) 
     fieldComplianceID.offset = pos;
     break;

   case FieldSolicitedFlag::RAW :
     FIXPP_PRINT_FIELD(SolicitedFlag) 
     fieldSolicitedFlag.offset = pos;
     break;

   case FieldIOIID::RAW :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldTimeInForce::RAW :
     FIXPP_PRINT_FIELD(TimeInForce) 
     fieldTimeInForce.offset = pos;
     break;

   case FieldEffectiveTime::RAW :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireDate::RAW :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldGTBookingInst::RAW :
     FIXPP_PRINT_FIELD(GTBookingInst) 
     fieldGTBookingInst.offset = pos;
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldForexReq::RAW :
     FIXPP_PRINT_FIELD(ForexReq) 
     fieldForexReq.offset = pos;
     break;

   case FieldSettlCurrency::RAW :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldBookingType::RAW :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPositionEffect::RAW :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldCoveredOrUncovered::RAW :
     FIXPP_PRINT_FIELD(CoveredOrUncovered) 
     fieldCoveredOrUncovered.offset = pos;
     break;

   case FieldMaxShow::RAW :
     FIXPP_PRINT_FIELD(MaxShow) 
     fieldMaxShow.offset = pos;
     break;

   case FieldPegOffsetValue::RAW :
     FIXPP_PRINT_FIELD(PegOffsetValue) 
     fieldPegOffsetValue.offset = pos;
     break;

   case FieldPegMoveType::RAW :
     FIXPP_PRINT_FIELD(PegMoveType) 
     fieldPegMoveType.offset = pos;
     break;

   case FieldPegOffsetType::RAW :
     FIXPP_PRINT_FIELD(PegOffsetType) 
     fieldPegOffsetType.offset = pos;
     break;

   case FieldPegLimitType::RAW :
     FIXPP_PRINT_FIELD(PegLimitType) 
     fieldPegLimitType.offset = pos;
     break;

   case FieldPegRoundDirection::RAW :
     FIXPP_PRINT_FIELD(PegRoundDirection) 
     fieldPegRoundDirection.offset = pos;
     break;

   case FieldPegScope::RAW :
     FIXPP_PRINT_FIELD(PegScope) 
     fieldPegScope.offset = pos;
     break;

   case FieldDiscretionInst::RAW :
     FIXPP_PRINT_FIELD(DiscretionInst) 
     fieldDiscretionInst.offset = pos;
     break;

   case FieldDiscretionOffsetValue::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetValue) 
     fieldDiscretionOffsetValue.offset = pos;
     break;

   case FieldDiscretionMoveType::RAW :
     FIXPP_PRINT_FIELD(DiscretionMoveType) 
     fieldDiscretionMoveType.offset = pos;
     break;

   case FieldDiscretionOffsetType::RAW :
     FIXPP_PRINT_FIELD(DiscretionOffsetType) 
     fieldDiscretionOffsetType.offset = pos;
     break;

   case FieldDiscretionLimitType::RAW :
     FIXPP_PRINT_FIELD(DiscretionLimitType) 
     fieldDiscretionLimitType.offset = pos;
     break;

   case FieldDiscretionRoundDirection::RAW :
     FIXPP_PRINT_FIELD(DiscretionRoundDirection) 
     fieldDiscretionRoundDirection.offset = pos;
     break;

   case FieldDiscretionScope::RAW :
     FIXPP_PRINT_FIELD(DiscretionScope) 
     fieldDiscretionScope.offset = pos;
     break;

   case FieldTargetStrategy::RAW :
     FIXPP_PRINT_FIELD(TargetStrategy) 
     fieldTargetStrategy.offset = pos;
     break;

   case FieldTargetStrategyParameters::RAW :
     FIXPP_PRINT_FIELD(TargetStrategyParameters) 
     fieldTargetStrategyParameters.offset = pos;
     break;

   case FieldParticipationRate::RAW :
     FIXPP_PRINT_FIELD(ParticipationRate) 
     fieldParticipationRate.offset = pos;
     break;

   case FieldCancellationRights::RAW :
     FIXPP_PRINT_FIELD(CancellationRights) 
     fieldCancellationRights.offset = pos;
     break;

   case FieldMoneyLaunderingStatus::RAW :
     FIXPP_PRINT_FIELD(MoneyLaunderingStatus) 
     fieldMoneyLaunderingStatus.offset = pos;
     break;

   case FieldRegistID::RAW :
     FIXPP_PRINT_FIELD(RegistID) 
     fieldRegistID.offset = pos;
     break;

   case FieldDesignation::RAW :
     FIXPP_PRINT_FIELD(Designation) 
     fieldDesignation.offset = pos;
     break;

   case FieldMultiLegRptTypeReq::RAW :
     FIXPP_PRINT_FIELD(MultiLegRptTypeReq) 
     fieldMultiLegRptTypeReq.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTradeRequestType::RAW :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     fieldTradeRequestType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeReportID::RAW :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldExecID::RAW :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldExecType::RAW :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldMatchStatus::RAW :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldTrdType::RAW :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldTransferReason::RAW :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTradeLinkID::RAW :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoDates::RAW :
     FIXPP_PRINT_FIELD(NoDates) 
     fieldNoDates.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDates::scan( groupsDates, fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldTimeBracket::RAW :
     FIXPP_PRINT_FIELD(TimeBracket) 
     fieldTimeBracket.offset = pos;
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldMultiLegReportingType::RAW :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldTradeInputSource::RAW :
     FIXPP_PRINT_FIELD(TradeInputSource) 
     fieldTradeInputSource.offset = pos;
     break;

   case FieldTradeInputDevice::RAW :
     FIXPP_PRINT_FIELD(TradeInputDevice) 
     fieldTradeInputDevice.offset = pos;
     break;

   case FieldResponseTransportType::RAW :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldTradeReportTransType::RAW :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     fieldTradeReportTransType.offset = pos;
     break;

   case FieldTradeReportType::RAW :
     FIXPP_PRINT_FIELD(TradeReportType) 
     fieldTradeReportType.offset = pos;
     break;

   case FieldTradeRequestID::RAW :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTrdType::RAW :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTransferReason::RAW :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldExecType::RAW :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldTotNumTradeReports::RAW :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     fieldTotNumTradeReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeReportRefID::RAW :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     fieldTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportRefID::RAW :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     fieldSecondaryTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldTradeLinkID::RAW :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldExecID::RAW :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldOrdStatus::RAW :
     FIXPP_PRINT_FIELD(OrdStatus) 
     fieldOrdStatus.offset = pos;
     break;

   case FieldSecondaryExecID::RAW :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldExecRestatementReason::RAW :
     FIXPP_PRINT_FIELD(ExecRestatementReason) 
     fieldExecRestatementReason.offset = pos;
     break;

   case FieldPreviouslyReported::RAW :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldUnderlyingTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionID) 
     fieldUnderlyingTradingSessionID.offset = pos;
     break;

   case FieldUnderlyingTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(UnderlyingTradingSessionSubID) 
     fieldUnderlyingTradingSessionSubID.offset = pos;
     break;

   case FieldLastQty::RAW :
     FIXPP_PRINT_FIELD(LastQty) 
     fieldLastQty.offset = pos;
     break;

   case FieldLastPx::RAW :
     FIXPP_PRINT_FIELD(LastPx) 
     fieldLastPx.offset = pos;
     break;

   case FieldLastParPx::RAW :
     FIXPP_PRINT_FIELD(LastParPx) 
     fieldLastParPx.offset = pos;
     break;

   case FieldLastSpotRate::RAW :
     FIXPP_PRINT_FIELD(LastSpotRate) 
     fieldLastSpotRate.offset = pos;
     break;

   case FieldLastForwardPoints::RAW :
     FIXPP_PRINT_FIELD(LastForwardPoints) 
     fieldLastForwardPoints.offset = pos;
     break;

   case FieldLastMkt::RAW :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldAvgPx::RAW :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldAvgPxIndicator::RAW :
     FIXPP_PRINT_FIELD(AvgPxIndicator) 
     fieldAvgPxIndicator.offset = pos;
     break;

   case FieldNoPosAmt::RAW :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldTradeLegRefID::RAW :
     FIXPP_PRINT_FIELD(TradeLegRefID) 
     fieldTradeLegRefID.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldMatchStatus::RAW :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldMatchType::RAW :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldNoSides::RAW :
     FIXPP_PRINT_FIELD(NoSides) 
     fieldNoSides.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::scan( groupsSides, fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldPublishTrdIndicator::RAW :
     FIXPP_PRINT_FIELD(PublishTrdIndicator) 
     fieldPublishTrdIndicator.offset = pos;
     break;

   case FieldShortSaleReason::RAW :
     FIXPP_PRINT_FIELD(ShortSaleReason) 
     fieldShortSaleReason.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassStatusRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMassStatusReqID::RAW :
     FIXPP_PRINT_FIELD(MassStatusReqID) 
     fieldMassStatusReqID.offset = pos;
     break;

   case FieldMassStatusReqType::RAW :
     FIXPP_PRINT_FIELD(MassStatusReqType) 
     fieldMassStatusReqType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldUnderlyingSymbol::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbol) 
     fieldUnderlyingSymbol.offset = pos;
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSymbolSfx) 
     fieldUnderlyingSymbolSfx.offset = pos;
     break;

   case FieldUnderlyingSecurityID::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityID) 
     fieldUnderlyingSecurityID.offset = pos;
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityIDSource) 
     fieldUnderlyingSecurityIDSource.offset = pos;
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingSecurityAltID) 
     fieldNoUnderlyingSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::scan( groupsUnderlyingSecurityAltID, fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     FIXPP_PRINT_FIELD(UnderlyingProduct) 
     fieldUnderlyingProduct.offset = pos;
     break;

   case FieldUnderlyingCFICode::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCFICode) 
     fieldUnderlyingCFICode.offset = pos;
     break;

   case FieldUnderlyingSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityType) 
     fieldUnderlyingSecurityType.offset = pos;
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecuritySubType) 
     fieldUnderlyingSecuritySubType.offset = pos;
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityMonthYear) 
     fieldUnderlyingMaturityMonthYear.offset = pos;
     break;

   case FieldUnderlyingMaturityDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingMaturityDate) 
     fieldUnderlyingMaturityDate.offset = pos;
     break;

   case FieldUnderlyingPutOrCall::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPutOrCall) 
     fieldUnderlyingPutOrCall.offset = pos;
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponPaymentDate) 
     fieldUnderlyingCouponPaymentDate.offset = pos;
     break;

   case FieldUnderlyingIssueDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssueDate) 
     fieldUnderlyingIssueDate.offset = pos;
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepoCollateralSecurityType) 
     fieldUnderlyingRepoCollateralSecurityType.offset = pos;
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseTerm) 
     fieldUnderlyingRepurchaseTerm.offset = pos;
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRepurchaseRate) 
     fieldUnderlyingRepurchaseRate.offset = pos;
     break;

   case FieldUnderlyingFactor::RAW :
     FIXPP_PRINT_FIELD(UnderlyingFactor) 
     fieldUnderlyingFactor.offset = pos;
     break;

   case FieldUnderlyingCreditRating::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCreditRating) 
     fieldUnderlyingCreditRating.offset = pos;
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(UnderlyingInstrRegistry) 
     fieldUnderlyingInstrRegistry.offset = pos;
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCountryOfIssue) 
     fieldUnderlyingCountryOfIssue.offset = pos;
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStateOrProvinceOfIssue) 
     fieldUnderlyingStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingLocaleOfIssue) 
     fieldUnderlyingLocaleOfIssue.offset = pos;
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingRedemptionDate) 
     fieldUnderlyingRedemptionDate.offset = pos;
     break;

   case FieldUnderlyingStrikePrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikePrice) 
     fieldUnderlyingStrikePrice.offset = pos;
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStrikeCurrency) 
     fieldUnderlyingStrikeCurrency.offset = pos;
     break;

   case FieldUnderlyingOptAttribute::RAW :
     FIXPP_PRINT_FIELD(UnderlyingOptAttribute) 
     fieldUnderlyingOptAttribute.offset = pos;
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(UnderlyingContractMultiplier) 
     fieldUnderlyingContractMultiplier.offset = pos;
     break;

   case FieldUnderlyingCouponRate::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCouponRate) 
     fieldUnderlyingCouponRate.offset = pos;
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityExchange) 
     fieldUnderlyingSecurityExchange.offset = pos;
     break;

   case FieldUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(UnderlyingIssuer) 
     fieldUnderlyingIssuer.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuerLen) 
     fieldEncodedUnderlyingIssuerLen.offset = pos;
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingIssuer) 
     fieldEncodedUnderlyingIssuer.offset = pos;
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSecurityDesc) 
     fieldUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDescLen) 
     fieldEncodedUnderlyingSecurityDescLen.offset = pos;
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedUnderlyingSecurityDesc) 
     fieldEncodedUnderlyingSecurityDesc.offset = pos;
     break;

   case FieldUnderlyingCPProgram::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPProgram) 
     fieldUnderlyingCPProgram.offset = pos;
     break;

   case FieldUnderlyingCPRegType::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCPRegType) 
     fieldUnderlyingCPRegType.offset = pos;
     break;

   case FieldUnderlyingCurrency::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrency) 
     fieldUnderlyingCurrency.offset = pos;
     break;

   case FieldUnderlyingQty::RAW :
     FIXPP_PRINT_FIELD(UnderlyingQty) 
     fieldUnderlyingQty.offset = pos;
     break;

   case FieldUnderlyingPx::RAW :
     FIXPP_PRINT_FIELD(UnderlyingPx) 
     fieldUnderlyingPx.offset = pos;
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingDirtyPrice) 
     fieldUnderlyingDirtyPrice.offset = pos;
     break;

   case FieldUnderlyingEndPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndPrice) 
     fieldUnderlyingEndPrice.offset = pos;
     break;

   case FieldUnderlyingStartValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingStartValue) 
     fieldUnderlyingStartValue.offset = pos;
     break;

   case FieldUnderlyingCurrentValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingCurrentValue) 
     fieldUnderlyingCurrentValue.offset = pos;
     break;

   case FieldUnderlyingEndValue::RAW :
     FIXPP_PRINT_FIELD(UnderlyingEndValue) 
     fieldUnderlyingEndValue.offset = pos;
     break;

   case FieldNoUnderlyingStips::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyingStips) 
     fieldNoUnderlyingStips.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::scan( groupsUnderlyingStips, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequestReject::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldRFQReqID::RAW :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldQuoteRequestRejectReason::RAW :
     FIXPP_PRINT_FIELD(QuoteRequestRejectReason) 
     fieldQuoteRequestRejectReason.offset = pos;
     break;

   case FieldNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRFQRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRFQReqID::RAW :
     FIXPP_PRINT_FIELD(RFQReqID) 
     fieldRFQReqID.offset = pos;
     break;

   case FieldNoRelatedSym::RAW :
     FIXPP_PRINT_FIELD(NoRelatedSym) 
     fieldNoRelatedSym.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::scan( groupsRelatedSym, fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteStatusReqID) 
     fieldQuoteStatusReqID.offset = pos;
     break;

   case FieldQuoteReqID::RAW :
     FIXPP_PRINT_FIELD(QuoteReqID) 
     fieldQuoteReqID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespID::RAW :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteType::RAW :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoQuoteQualifiers::RAW :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldBidPx::RAW :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldQuoteStatus::RAW :
     FIXPP_PRINT_FIELD(QuoteStatus) 
     fieldQuoteStatus.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteResponse::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteRespID::RAW :
     FIXPP_PRINT_FIELD(QuoteRespID) 
     fieldQuoteRespID.offset = pos;
     break;

   case FieldQuoteID::RAW :
     FIXPP_PRINT_FIELD(QuoteID) 
     fieldQuoteID.offset = pos;
     break;

   case FieldQuoteRespType::RAW :
     FIXPP_PRINT_FIELD(QuoteRespType) 
     fieldQuoteRespType.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldIOIID::RAW :
     FIXPP_PRINT_FIELD(IOIID) 
     fieldIOIID.offset = pos;
     break;

   case FieldQuoteType::RAW :
     FIXPP_PRINT_FIELD(QuoteType) 
     fieldQuoteType.offset = pos;
     break;

   case FieldNoQuoteQualifiers::RAW :
     FIXPP_PRINT_FIELD(NoQuoteQualifiers) 
     fieldNoQuoteQualifiers.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::scan( groupsQuoteQualifiers, fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldOrderQty::RAW :
     FIXPP_PRINT_FIELD(OrderQty) 
     fieldOrderQty.offset = pos;
     break;

   case FieldCashOrderQty::RAW :
     FIXPP_PRINT_FIELD(CashOrderQty) 
     fieldCashOrderQty.offset = pos;
     break;

   case FieldOrderPercent::RAW :
     FIXPP_PRINT_FIELD(OrderPercent) 
     fieldOrderPercent.offset = pos;
     break;

   case FieldRoundingDirection::RAW :
     FIXPP_PRINT_FIELD(RoundingDirection) 
     fieldRoundingDirection.offset = pos;
     break;

   case FieldRoundingModulus::RAW :
     FIXPP_PRINT_FIELD(RoundingModulus) 
     fieldRoundingModulus.offset = pos;
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDate2::RAW :
     FIXPP_PRINT_FIELD(SettlDate2) 
     fieldSettlDate2.offset = pos;
     break;

   case FieldOrderQty2::RAW :
     FIXPP_PRINT_FIELD(OrderQty2) 
     fieldOrderQty2.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldBidPx::RAW :
     FIXPP_PRINT_FIELD(BidPx) 
     fieldBidPx.offset = pos;
     break;

   case FieldOfferPx::RAW :
     FIXPP_PRINT_FIELD(OfferPx) 
     fieldOfferPx.offset = pos;
     break;

   case FieldMktBidPx::RAW :
     FIXPP_PRINT_FIELD(MktBidPx) 
     fieldMktBidPx.offset = pos;
     break;

   case FieldMktOfferPx::RAW :
     FIXPP_PRINT_FIELD(MktOfferPx) 
     fieldMktOfferPx.offset = pos;
     break;

   case FieldMinBidSize::RAW :
     FIXPP_PRINT_FIELD(MinBidSize) 
     fieldMinBidSize.offset = pos;
     break;

   case FieldBidSize::RAW :
     FIXPP_PRINT_FIELD(BidSize) 
     fieldBidSize.offset = pos;
     break;

   case FieldMinOfferSize::RAW :
     FIXPP_PRINT_FIELD(MinOfferSize) 
     fieldMinOfferSize.offset = pos;
     break;

   case FieldOfferSize::RAW :
     FIXPP_PRINT_FIELD(OfferSize) 
     fieldOfferSize.offset = pos;
     break;

   case FieldValidUntilTime::RAW :
     FIXPP_PRINT_FIELD(ValidUntilTime) 
     fieldValidUntilTime.offset = pos;
     break;

   case FieldBidSpotRate::RAW :
     FIXPP_PRINT_FIELD(BidSpotRate) 
     fieldBidSpotRate.offset = pos;
     break;

   case FieldOfferSpotRate::RAW :
     FIXPP_PRINT_FIELD(OfferSpotRate) 
     fieldOfferSpotRate.offset = pos;
     break;

   case FieldBidForwardPoints::RAW :
     FIXPP_PRINT_FIELD(BidForwardPoints) 
     fieldBidForwardPoints.offset = pos;
     break;

   case FieldOfferForwardPoints::RAW :
     FIXPP_PRINT_FIELD(OfferForwardPoints) 
     fieldOfferForwardPoints.offset = pos;
     break;

   case FieldMidPx::RAW :
     FIXPP_PRINT_FIELD(MidPx) 
     fieldMidPx.offset = pos;
     break;

   case FieldBidYield::RAW :
     FIXPP_PRINT_FIELD(BidYield) 
     fieldBidYield.offset = pos;
     break;

   case FieldMidYield::RAW :
     FIXPP_PRINT_FIELD(MidYield) 
     fieldMidYield.offset = pos;
     break;

   case FieldOfferYield::RAW :
     FIXPP_PRINT_FIELD(OfferYield) 
     fieldOfferYield.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldOrdType::RAW :
     FIXPP_PRINT_FIELD(OrdType) 
     fieldOrdType.offset = pos;
     break;

   case FieldBidForwardPoints2::RAW :
     FIXPP_PRINT_FIELD(BidForwardPoints2) 
     fieldBidForwardPoints2.offset = pos;
     break;

   case FieldOfferForwardPoints2::RAW :
     FIXPP_PRINT_FIELD(OfferForwardPoints2) 
     fieldOfferForwardPoints2.offset = pos;
     break;

   case FieldSettlCurrBidFxRate::RAW :
     FIXPP_PRINT_FIELD(SettlCurrBidFxRate) 
     fieldSettlCurrBidFxRate.offset = pos;
     break;

   case FieldSettlCurrOfferFxRate::RAW :
     FIXPP_PRINT_FIELD(SettlCurrOfferFxRate) 
     fieldSettlCurrOfferFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldExDestination::RAW :
     FIXPP_PRINT_FIELD(ExDestination) 
     fieldExDestination.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmation::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW :
     FIXPP_PRINT_FIELD(ConfirmID) 
     fieldConfirmID.offset = pos;
     break;

   case FieldConfirmRefID::RAW :
     FIXPP_PRINT_FIELD(ConfirmRefID) 
     fieldConfirmRefID.offset = pos;
     break;

   case FieldConfirmReqID::RAW :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     fieldConfirmReqID.offset = pos;
     break;

   case FieldConfirmTransType::RAW :
     FIXPP_PRINT_FIELD(ConfirmTransType) 
     fieldConfirmTransType.offset = pos;
     break;

   case FieldConfirmType::RAW :
     FIXPP_PRINT_FIELD(ConfirmType) 
     fieldConfirmType.offset = pos;
     break;

   case FieldCopyMsgIndicator::RAW :
     FIXPP_PRINT_FIELD(CopyMsgIndicator) 
     fieldCopyMsgIndicator.offset = pos;
     break;

   case FieldLegalConfirm::RAW :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldConfirmStatus::RAW :
     FIXPP_PRINT_FIELD(ConfirmStatus) 
     fieldConfirmStatus.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldNoOrders::RAW :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldIndividualAllocID::RAW :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     fieldIndividualAllocID.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldAllocQty::RAW :
     FIXPP_PRINT_FIELD(AllocQty) 
     fieldAllocQty.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldLastMkt::RAW :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldNoCapacities::RAW :
     FIXPP_PRINT_FIELD(NoCapacities) 
     fieldNoCapacities.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCapacities::scan( groupsCapacities, fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldAllocAccountType::RAW :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     fieldAllocAccountType.offset = pos;
     break;

   case FieldAvgPx::RAW :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgParPx::RAW :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldReportedPx::RAW :
     FIXPP_PRINT_FIELD(ReportedPx) 
     fieldReportedPx.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldProcessCode::RAW :
     FIXPP_PRINT_FIELD(ProcessCode) 
     fieldProcessCode.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldNumDaysInterest::RAW :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldExDate::RAW :
     FIXPP_PRINT_FIELD(ExDate) 
     fieldExDate.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldConcession::RAW :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldMaturityNetMoney::RAW :
     FIXPP_PRINT_FIELD(MaturityNetMoney) 
     fieldMaturityNetMoney.offset = pos;
     break;

   case FieldSettlCurrAmt::RAW :
     FIXPP_PRINT_FIELD(SettlCurrAmt) 
     fieldSettlCurrAmt.offset = pos;
     break;

   case FieldSettlCurrency::RAW :
     FIXPP_PRINT_FIELD(SettlCurrency) 
     fieldSettlCurrency.offset = pos;
     break;

   case FieldSettlCurrFxRate::RAW :
     FIXPP_PRINT_FIELD(SettlCurrFxRate) 
     fieldSettlCurrFxRate.offset = pos;
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     FIXPP_PRINT_FIELD(SettlCurrFxRateCalc) 
     fieldSettlCurrFxRateCalc.offset = pos;
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldSettlDeliveryType::RAW :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldCommission::RAW :
     FIXPP_PRINT_FIELD(Commission) 
     fieldCommission.offset = pos;
     break;

   case FieldCommType::RAW :
     FIXPP_PRINT_FIELD(CommType) 
     fieldCommType.offset = pos;
     break;

   case FieldCommCurrency::RAW :
     FIXPP_PRINT_FIELD(CommCurrency) 
     fieldCommCurrency.offset = pos;
     break;

   case FieldFundRenewWaiv::RAW :
     FIXPP_PRINT_FIELD(FundRenewWaiv) 
     fieldFundRenewWaiv.offset = pos;
     break;

   case FieldSharedCommission::RAW :
     FIXPP_PRINT_FIELD(SharedCommission) 
     fieldSharedCommission.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldNoMiscFees::RAW :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosTransType::RAW :
     FIXPP_PRINT_FIELD(PosTransType) 
     fieldPosTransType.offset = pos;
     break;

   case FieldPosMaintAction::RAW :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     fieldPosMaintAction.offset = pos;
     break;

   case FieldOrigPosReqRefID::RAW :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     fieldOrigPosReqRefID.offset = pos;
     break;

   case FieldPosMaintRptRefID::RAW :
     FIXPP_PRINT_FIELD(PosMaintRptRefID) 
     fieldPosMaintRptRefID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPositions::RAW :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     fieldAdjustmentType.offset = pos;
     break;

   case FieldContraryInstructionIndicator::RAW :
     FIXPP_PRINT_FIELD(ContraryInstructionIndicator) 
     fieldContraryInstructionIndicator.offset = pos;
     break;

   case FieldPriorSpreadIndicator::RAW :
     FIXPP_PRINT_FIELD(PriorSpreadIndicator) 
     fieldPriorSpreadIndicator.offset = pos;
     break;

   case FieldThresholdAmount::RAW :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosTransType::RAW :
     FIXPP_PRINT_FIELD(PosTransType) 
     fieldPosTransType.offset = pos;
     break;

   case FieldPosReqID::RAW :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosMaintAction::RAW :
     FIXPP_PRINT_FIELD(PosMaintAction) 
     fieldPosMaintAction.offset = pos;
     break;

   case FieldOrigPosReqRefID::RAW :
     FIXPP_PRINT_FIELD(OrigPosReqRefID) 
     fieldOrigPosReqRefID.offset = pos;
     break;

   case FieldPosMaintStatus::RAW :
     FIXPP_PRINT_FIELD(PosMaintStatus) 
     fieldPosMaintStatus.offset = pos;
     break;

   case FieldPosMaintResult::RAW :
     FIXPP_PRINT_FIELD(PosMaintResult) 
     fieldPosMaintResult.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPositions::RAW :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW :
     FIXPP_PRINT_FIELD(AdjustmentType) 
     fieldAdjustmentType.offset = pos;
     break;

   case FieldThresholdAmount::RAW :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositions::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosReqType::RAW :
     FIXPP_PRINT_FIELD(PosReqType) 
     fieldPosReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoTradingSessions::RAW :
     FIXPP_PRINT_FIELD(NoTradingSessions) 
     fieldNoTradingSessions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::scan( groupsTradingSessions, fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldResponseTransportType::RAW :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositionsAck::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosReqID::RAW :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldTotalNumPosReports::RAW :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     fieldTotalNumPosReports.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldPosReqResult::RAW :
     FIXPP_PRINT_FIELD(PosReqResult) 
     fieldPosReqResult.offset = pos;
     break;

   case FieldPosReqStatus::RAW :
     FIXPP_PRINT_FIELD(PosReqStatus) 
     fieldPosReqStatus.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW :
     FIXPP_PRINT_FIELD(PosMaintRptID) 
     fieldPosMaintRptID.offset = pos;
     break;

   case FieldPosReqID::RAW :
     FIXPP_PRINT_FIELD(PosReqID) 
     fieldPosReqID.offset = pos;
     break;

   case FieldPosReqType::RAW :
     FIXPP_PRINT_FIELD(PosReqType) 
     fieldPosReqType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTotalNumPosReports::RAW :
     FIXPP_PRINT_FIELD(TotalNumPosReports) 
     fieldTotalNumPosReports.offset = pos;
     break;

   case FieldUnsolicitedIndicator::RAW :
     FIXPP_PRINT_FIELD(UnsolicitedIndicator) 
     fieldUnsolicitedIndicator.offset = pos;
     break;

   case FieldPosReqResult::RAW :
     FIXPP_PRINT_FIELD(PosReqResult) 
     fieldPosReqResult.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldSettlPrice::RAW :
     FIXPP_PRINT_FIELD(SettlPrice) 
     fieldSettlPrice.offset = pos;
     break;

   case FieldSettlPriceType::RAW :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     fieldSettlPriceType.offset = pos;
     break;

   case FieldPriorSettlPrice::RAW :
     FIXPP_PRINT_FIELD(PriorSettlPrice) 
     fieldPriorSettlPrice.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldRegistStatus::RAW :
     FIXPP_PRINT_FIELD(RegistStatus) 
     fieldRegistStatus.offset = pos;
     break;

   case FieldDeliveryDate::RAW :
     FIXPP_PRINT_FIELD(DeliveryDate) 
     fieldDeliveryDate.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW :
     FIXPP_PRINT_FIELD(TradeRequestID) 
     fieldTradeRequestID.offset = pos;
     break;

   case FieldTradeRequestType::RAW :
     FIXPP_PRINT_FIELD(TradeRequestType) 
     fieldTradeRequestType.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTotNumTradeReports::RAW :
     FIXPP_PRINT_FIELD(TotNumTradeReports) 
     fieldTotNumTradeReports.offset = pos;
     break;

   case FieldTradeRequestResult::RAW :
     FIXPP_PRINT_FIELD(TradeRequestResult) 
     fieldTradeRequestResult.offset = pos;
     break;

   case FieldTradeRequestStatus::RAW :
     FIXPP_PRINT_FIELD(TradeRequestStatus) 
     fieldTradeRequestStatus.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW :
     FIXPP_PRINT_FIELD(MultiLegReportingType) 
     fieldMultiLegReportingType.offset = pos;
     break;

   case FieldResponseTransportType::RAW :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportAck::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW :
     FIXPP_PRINT_FIELD(TradeReportID) 
     fieldTradeReportID.offset = pos;
     break;

   case FieldTradeReportTransType::RAW :
     FIXPP_PRINT_FIELD(TradeReportTransType) 
     fieldTradeReportTransType.offset = pos;
     break;

   case FieldTradeReportType::RAW :
     FIXPP_PRINT_FIELD(TradeReportType) 
     fieldTradeReportType.offset = pos;
     break;

   case FieldTrdType::RAW :
     FIXPP_PRINT_FIELD(TrdType) 
     fieldTrdType.offset = pos;
     break;

   case FieldTrdSubType::RAW :
     FIXPP_PRINT_FIELD(TrdSubType) 
     fieldTrdSubType.offset = pos;
     break;

   case FieldSecondaryTrdType::RAW :
     FIXPP_PRINT_FIELD(SecondaryTrdType) 
     fieldSecondaryTrdType.offset = pos;
     break;

   case FieldTransferReason::RAW :
     FIXPP_PRINT_FIELD(TransferReason) 
     fieldTransferReason.offset = pos;
     break;

   case FieldExecType::RAW :
     FIXPP_PRINT_FIELD(ExecType) 
     fieldExecType.offset = pos;
     break;

   case FieldTradeReportRefID::RAW :
     FIXPP_PRINT_FIELD(TradeReportRefID) 
     fieldTradeReportRefID.offset = pos;
     break;

   case FieldSecondaryTradeReportRefID::RAW :
     FIXPP_PRINT_FIELD(SecondaryTradeReportRefID) 
     fieldSecondaryTradeReportRefID.offset = pos;
     break;

   case FieldTrdRptStatus::RAW :
     FIXPP_PRINT_FIELD(TrdRptStatus) 
     fieldTrdRptStatus.offset = pos;
     break;

   case FieldTradeReportRejectReason::RAW :
     FIXPP_PRINT_FIELD(TradeReportRejectReason) 
     fieldTradeReportRejectReason.offset = pos;
     break;

   case FieldSecondaryTradeReportID::RAW :
     FIXPP_PRINT_FIELD(SecondaryTradeReportID) 
     fieldSecondaryTradeReportID.offset = pos;
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldTradeLinkID::RAW :
     FIXPP_PRINT_FIELD(TradeLinkID) 
     fieldTradeLinkID.offset = pos;
     break;

   case FieldTrdMatchID::RAW :
     FIXPP_PRINT_FIELD(TrdMatchID) 
     fieldTrdMatchID.offset = pos;
     break;

   case FieldExecID::RAW :
     FIXPP_PRINT_FIELD(ExecID) 
     fieldExecID.offset = pos;
     break;

   case FieldSecondaryExecID::RAW :
     FIXPP_PRINT_FIELD(SecondaryExecID) 
     fieldSecondaryExecID.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldClearingFeeIndicator::RAW :
     FIXPP_PRINT_FIELD(ClearingFeeIndicator) 
     fieldClearingFeeIndicator.offset = pos;
     break;

   case FieldOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(OrderCapacity) 
     fieldOrderCapacity.offset = pos;
     break;

   case FieldOrderRestrictions::RAW :
     FIXPP_PRINT_FIELD(OrderRestrictions) 
     fieldOrderRestrictions.offset = pos;
     break;

   case FieldCustOrderCapacity::RAW :
     FIXPP_PRINT_FIELD(CustOrderCapacity) 
     fieldCustOrderCapacity.offset = pos;
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AcctIDSource) 
     fieldAcctIDSource.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldPositionEffect::RAW :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldPreallocMethod::RAW :
     FIXPP_PRINT_FIELD(PreallocMethod) 
     fieldPreallocMethod.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW :
     FIXPP_PRINT_FIELD(AllocReportID) 
     fieldAllocReportID.offset = pos;
     break;

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldAllocTransType::RAW :
     FIXPP_PRINT_FIELD(AllocTransType) 
     fieldAllocTransType.offset = pos;
     break;

   case FieldAllocReportRefID::RAW :
     FIXPP_PRINT_FIELD(AllocReportRefID) 
     fieldAllocReportRefID.offset = pos;
     break;

   case FieldAllocCancReplaceReason::RAW :
     FIXPP_PRINT_FIELD(AllocCancReplaceReason) 
     fieldAllocCancReplaceReason.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldAllocReportType::RAW :
     FIXPP_PRINT_FIELD(AllocReportType) 
     fieldAllocReportType.offset = pos;
     break;

   case FieldAllocStatus::RAW :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldRefAllocID::RAW :
     FIXPP_PRINT_FIELD(RefAllocID) 
     fieldRefAllocID.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldAllocLinkID::RAW :
     FIXPP_PRINT_FIELD(AllocLinkID) 
     fieldAllocLinkID.offset = pos;
     break;

   case FieldAllocLinkType::RAW :
     FIXPP_PRINT_FIELD(AllocLinkType) 
     fieldAllocLinkType.offset = pos;
     break;

   case FieldBookingRefID::RAW :
     FIXPP_PRINT_FIELD(BookingRefID) 
     fieldBookingRefID.offset = pos;
     break;

   case FieldAllocNoOrdersType::RAW :
     FIXPP_PRINT_FIELD(AllocNoOrdersType) 
     fieldAllocNoOrdersType.offset = pos;
     break;

   case FieldNoOrders::RAW :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW :
     FIXPP_PRINT_FIELD(PreviouslyReported) 
     fieldPreviouslyReported.offset = pos;
     break;

   case FieldReversalIndicator::RAW :
     FIXPP_PRINT_FIELD(ReversalIndicator) 
     fieldReversalIndicator.offset = pos;
     break;

   case FieldMatchType::RAW :
     FIXPP_PRINT_FIELD(MatchType) 
     fieldMatchType.offset = pos;
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldDeliveryForm::RAW :
     FIXPP_PRINT_FIELD(DeliveryForm) 
     fieldDeliveryForm.offset = pos;
     break;

   case FieldPctAtRisk::RAW :
     FIXPP_PRINT_FIELD(PctAtRisk) 
     fieldPctAtRisk.offset = pos;
     break;

   case FieldNoInstrAttrib::RAW :
     FIXPP_PRINT_FIELD(NoInstrAttrib) 
     fieldNoInstrAttrib.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::scan( groupsInstrAttrib, fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldLastMkt::RAW :
     FIXPP_PRINT_FIELD(LastMkt) 
     fieldLastMkt.offset = pos;
     break;

   case FieldTradeOriginationDate::RAW :
     FIXPP_PRINT_FIELD(TradeOriginationDate) 
     fieldTradeOriginationDate.offset = pos;
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAvgPx::RAW :
     FIXPP_PRINT_FIELD(AvgPx) 
     fieldAvgPx.offset = pos;
     break;

   case FieldAvgParPx::RAW :
     FIXPP_PRINT_FIELD(AvgParPx) 
     fieldAvgParPx.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldAvgPxPrecision::RAW :
     FIXPP_PRINT_FIELD(AvgPxPrecision) 
     fieldAvgPxPrecision.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldSettlType::RAW :
     FIXPP_PRINT_FIELD(SettlType) 
     fieldSettlType.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldBookingType::RAW :
     FIXPP_PRINT_FIELD(BookingType) 
     fieldBookingType.offset = pos;
     break;

   case FieldGrossTradeAmt::RAW :
     FIXPP_PRINT_FIELD(GrossTradeAmt) 
     fieldGrossTradeAmt.offset = pos;
     break;

   case FieldConcession::RAW :
     FIXPP_PRINT_FIELD(Concession) 
     fieldConcession.offset = pos;
     break;

   case FieldTotalTakedown::RAW :
     FIXPP_PRINT_FIELD(TotalTakedown) 
     fieldTotalTakedown.offset = pos;
     break;

   case FieldNetMoney::RAW :
     FIXPP_PRINT_FIELD(NetMoney) 
     fieldNetMoney.offset = pos;
     break;

   case FieldPositionEffect::RAW :
     FIXPP_PRINT_FIELD(PositionEffect) 
     fieldPositionEffect.offset = pos;
     break;

   case FieldAutoAcceptIndicator::RAW :
     FIXPP_PRINT_FIELD(AutoAcceptIndicator) 
     fieldAutoAcceptIndicator.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNumDaysInterest::RAW :
     FIXPP_PRINT_FIELD(NumDaysInterest) 
     fieldNumDaysInterest.offset = pos;
     break;

   case FieldAccruedInterestRate::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestRate) 
     fieldAccruedInterestRate.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldTotalAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(TotalAccruedInterestAmt) 
     fieldTotalAccruedInterestAmt.offset = pos;
     break;

   case FieldInterestAtMaturity::RAW :
     FIXPP_PRINT_FIELD(InterestAtMaturity) 
     fieldInterestAtMaturity.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldLegalConfirm::RAW :
     FIXPP_PRINT_FIELD(LegalConfirm) 
     fieldLegalConfirm.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldYieldType::RAW :
     FIXPP_PRINT_FIELD(YieldType) 
     fieldYieldType.offset = pos;
     break;

   case FieldYield::RAW :
     FIXPP_PRINT_FIELD(Yield) 
     fieldYield.offset = pos;
     break;

   case FieldYieldCalcDate::RAW :
     FIXPP_PRINT_FIELD(YieldCalcDate) 
     fieldYieldCalcDate.offset = pos;
     break;

   case FieldYieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionDate) 
     fieldYieldRedemptionDate.offset = pos;
     break;

   case FieldYieldRedemptionPrice::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPrice) 
     fieldYieldRedemptionPrice.offset = pos;
     break;

   case FieldYieldRedemptionPriceType::RAW :
     FIXPP_PRINT_FIELD(YieldRedemptionPriceType) 
     fieldYieldRedemptionPriceType.offset = pos;
     break;

   case FieldTotNoAllocs::RAW :
     FIXPP_PRINT_FIELD(TotNoAllocs) 
     fieldTotNoAllocs.offset = pos;
     break;

   case FieldLastFragment::RAW :
     FIXPP_PRINT_FIELD(LastFragment) 
     fieldLastFragment.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReportAck::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW :
     FIXPP_PRINT_FIELD(AllocReportID) 
     fieldAllocReportID.offset = pos;
     break;

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocStatus::RAW :
     FIXPP_PRINT_FIELD(AllocStatus) 
     fieldAllocStatus.offset = pos;
     break;

   case FieldAllocRejCode::RAW :
     FIXPP_PRINT_FIELD(AllocRejCode) 
     fieldAllocRejCode.offset = pos;
     break;

   case FieldAllocReportType::RAW :
     FIXPP_PRINT_FIELD(AllocReportType) 
     fieldAllocReportType.offset = pos;
     break;

   case FieldAllocIntermedReqType::RAW :
     FIXPP_PRINT_FIELD(AllocIntermedReqType) 
     fieldAllocIntermedReqType.offset = pos;
     break;

   case FieldMatchStatus::RAW :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldNoAllocs::RAW :
     FIXPP_PRINT_FIELD(NoAllocs) 
     fieldNoAllocs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::scan( groupsAllocs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationAck::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW :
     FIXPP_PRINT_FIELD(ConfirmID) 
     fieldConfirmID.offset = pos;
     break;

   case FieldTradeDate::RAW :
     FIXPP_PRINT_FIELD(TradeDate) 
     fieldTradeDate.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAffirmStatus::RAW :
     FIXPP_PRINT_FIELD(AffirmStatus) 
     fieldAffirmStatus.offset = pos;
     break;

   case FieldConfirmRejReason::RAW :
     FIXPP_PRINT_FIELD(ConfirmRejReason) 
     fieldConfirmRejReason.offset = pos;
     break;

   case FieldMatchStatus::RAW :
     FIXPP_PRINT_FIELD(MatchStatus) 
     fieldMatchStatus.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructionRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstReqID::RAW :
     FIXPP_PRINT_FIELD(SettlInstReqID) 
     fieldSettlInstReqID.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldEffectiveTime::RAW :
     FIXPP_PRINT_FIELD(EffectiveTime) 
     fieldEffectiveTime.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldLastUpdateTime::RAW :
     FIXPP_PRINT_FIELD(LastUpdateTime) 
     fieldLastUpdateTime.offset = pos;
     break;

   case FieldStandInstDbType::RAW :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAssignmentReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAsgnRptID::RAW :
     FIXPP_PRINT_FIELD(AsgnRptID) 
     fieldAsgnRptID.offset = pos;
     break;

   case FieldTotNumAssignmentReports::RAW :
     FIXPP_PRINT_FIELD(TotNumAssignmentReports) 
     fieldTotNumAssignmentReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW :
     FIXPP_PRINT_FIELD(NoPositions) 
     fieldNoPositions.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::scan( groupsPositions, fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW :
     FIXPP_PRINT_FIELD(NoPosAmt) 
     fieldNoPosAmt.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::scan( groupsPosAmt, fix+pos, len - pos );
     break;

   case FieldThresholdAmount::RAW :
     FIXPP_PRINT_FIELD(ThresholdAmount) 
     fieldThresholdAmount.offset = pos;
     break;

   case FieldSettlPrice::RAW :
     FIXPP_PRINT_FIELD(SettlPrice) 
     fieldSettlPrice.offset = pos;
     break;

   case FieldSettlPriceType::RAW :
     FIXPP_PRINT_FIELD(SettlPriceType) 
     fieldSettlPriceType.offset = pos;
     break;

   case FieldUnderlyingSettlPrice::RAW :
     FIXPP_PRINT_FIELD(UnderlyingSettlPrice) 
     fieldUnderlyingSettlPrice.offset = pos;
     break;

   case FieldExpireDate::RAW :
     FIXPP_PRINT_FIELD(ExpireDate) 
     fieldExpireDate.offset = pos;
     break;

   case FieldAssignmentMethod::RAW :
     FIXPP_PRINT_FIELD(AssignmentMethod) 
     fieldAssignmentMethod.offset = pos;
     break;

   case FieldAssignmentUnit::RAW :
     FIXPP_PRINT_FIELD(AssignmentUnit) 
     fieldAssignmentUnit.offset = pos;
     break;

   case FieldOpenInterest::RAW :
     FIXPP_PRINT_FIELD(OpenInterest) 
     fieldOpenInterest.offset = pos;
     break;

   case FieldExerciseMethod::RAW :
     FIXPP_PRINT_FIELD(ExerciseMethod) 
     fieldExerciseMethod.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollReqID::RAW :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralAssignment::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollAsgnID::RAW :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     fieldCollAsgnID.offset = pos;
     break;

   case FieldCollReqID::RAW :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldCollAsgnTransType::RAW :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     fieldCollAsgnTransType.offset = pos;
     break;

   case FieldCollAsgnRefID::RAW :
     FIXPP_PRINT_FIELD(CollAsgnRefID) 
     fieldCollAsgnRefID.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldExpireTime::RAW :
     FIXPP_PRINT_FIELD(ExpireTime) 
     fieldExpireTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralResponse::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRespID::RAW :
     FIXPP_PRINT_FIELD(CollRespID) 
     fieldCollRespID.offset = pos;
     break;

   case FieldCollAsgnID::RAW :
     FIXPP_PRINT_FIELD(CollAsgnID) 
     fieldCollAsgnID.offset = pos;
     break;

   case FieldCollReqID::RAW :
     FIXPP_PRINT_FIELD(CollReqID) 
     fieldCollReqID.offset = pos;
     break;

   case FieldCollAsgnReason::RAW :
     FIXPP_PRINT_FIELD(CollAsgnReason) 
     fieldCollAsgnReason.offset = pos;
     break;

   case FieldCollAsgnTransType::RAW :
     FIXPP_PRINT_FIELD(CollAsgnTransType) 
     fieldCollAsgnTransType.offset = pos;
     break;

   case FieldCollAsgnRespType::RAW :
     FIXPP_PRINT_FIELD(CollAsgnRespType) 
     fieldCollAsgnRespType.offset = pos;
     break;

   case FieldCollAsgnRejectReason::RAW :
     FIXPP_PRINT_FIELD(CollAsgnRejectReason) 
     fieldCollAsgnRejectReason.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralReport::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRptID::RAW :
     FIXPP_PRINT_FIELD(CollRptID) 
     fieldCollRptID.offset = pos;
     break;

   case FieldCollInquiryID::RAW :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldCollStatus::RAW :
     FIXPP_PRINT_FIELD(CollStatus) 
     fieldCollStatus.offset = pos;
     break;

   case FieldTotNumReports::RAW :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldLastRptRequested::RAW :
     FIXPP_PRINT_FIELD(LastRptRequested) 
     fieldLastRptRequested.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldNoMiscFees::RAW :
     FIXPP_PRINT_FIELD(NoMiscFees) 
     fieldNoMiscFees.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::scan( groupsMiscFees, fix+pos, len - pos );
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiry::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldNoCollInquiryQualifier::RAW :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     fieldNoCollInquiryQualifier.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::scan( groupsCollInquiryQualifier, fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW :
     FIXPP_PRINT_FIELD(SubscriptionRequestType) 
     fieldSubscriptionRequestType.offset = pos;
     break;

   case FieldResponseTransportType::RAW :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     FIXPP_PRINT_FIELD(MarginExcess) 
     fieldMarginExcess.offset = pos;
     break;

   case FieldTotalNetValue::RAW :
     FIXPP_PRINT_FIELD(TotalNetValue) 
     fieldTotalNetValue.offset = pos;
     break;

   case FieldCashOutstanding::RAW :
     FIXPP_PRINT_FIELD(CashOutstanding) 
     fieldCashOutstanding.offset = pos;
     break;

   case FieldNoTrdRegTimestamps::RAW :
     FIXPP_PRINT_FIELD(NoTrdRegTimestamps) 
     fieldNoTrdRegTimestamps.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::scan( groupsTrdRegTimestamps, fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     FIXPP_PRINT_FIELD(Side) 
     fieldSide.offset = pos;
     break;

   case FieldPrice::RAW :
     FIXPP_PRINT_FIELD(Price) 
     fieldPrice.offset = pos;
     break;

   case FieldPriceType::RAW :
     FIXPP_PRINT_FIELD(PriceType) 
     fieldPriceType.offset = pos;
     break;

   case FieldAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(AccruedInterestAmt) 
     fieldAccruedInterestAmt.offset = pos;
     break;

   case FieldEndAccruedInterestAmt::RAW :
     FIXPP_PRINT_FIELD(EndAccruedInterestAmt) 
     fieldEndAccruedInterestAmt.offset = pos;
     break;

   case FieldStartCash::RAW :
     FIXPP_PRINT_FIELD(StartCash) 
     fieldStartCash.offset = pos;
     break;

   case FieldEndCash::RAW :
     FIXPP_PRINT_FIELD(EndCash) 
     fieldEndCash.offset = pos;
     break;

   case FieldSpread::RAW :
     FIXPP_PRINT_FIELD(Spread) 
     fieldSpread.offset = pos;
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveCurrency) 
     fieldBenchmarkCurveCurrency.offset = pos;
     break;

   case FieldBenchmarkCurveName::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurveName) 
     fieldBenchmarkCurveName.offset = pos;
     break;

   case FieldBenchmarkCurvePoint::RAW :
     FIXPP_PRINT_FIELD(BenchmarkCurvePoint) 
     fieldBenchmarkCurvePoint.offset = pos;
     break;

   case FieldBenchmarkPrice::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPrice) 
     fieldBenchmarkPrice.offset = pos;
     break;

   case FieldBenchmarkPriceType::RAW :
     FIXPP_PRINT_FIELD(BenchmarkPriceType) 
     fieldBenchmarkPriceType.offset = pos;
     break;

   case FieldBenchmarkSecurityID::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityID) 
     fieldBenchmarkSecurityID.offset = pos;
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(BenchmarkSecurityIDSource) 
     fieldBenchmarkSecurityIDSource.offset = pos;
     break;

   case FieldNoStipulations::RAW :
     FIXPP_PRINT_FIELD(NoStipulations) 
     fieldNoStipulations.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::scan( groupsStipulations, fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW :
     FIXPP_PRINT_FIELD(SettlDeliveryType) 
     fieldSettlDeliveryType.offset = pos;
     break;

   case FieldStandInstDbType::RAW :
     FIXPP_PRINT_FIELD(StandInstDbType) 
     fieldStandInstDbType.offset = pos;
     break;

   case FieldStandInstDbName::RAW :
     FIXPP_PRINT_FIELD(StandInstDbName) 
     fieldStandInstDbName.offset = pos;
     break;

   case FieldStandInstDbID::RAW :
     FIXPP_PRINT_FIELD(StandInstDbID) 
     fieldStandInstDbID.offset = pos;
     break;

   case FieldNoDlvyInst::RAW :
     FIXPP_PRINT_FIELD(NoDlvyInst) 
     fieldNoDlvyInst.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::scan( groupsDlvyInst, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkRequestType::RAW :
     FIXPP_PRINT_FIELD(NetworkRequestType) 
     fieldNetworkRequestType.offset = pos;
     break;

   case FieldNetworkRequestID::RAW :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     fieldNetworkRequestID.offset = pos;
     break;

   case FieldNoCompIDs::RAW :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     fieldNoCompIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::scan( groupsCompIDs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW :
     FIXPP_PRINT_FIELD(NetworkStatusResponseType) 
     fieldNetworkStatusResponseType.offset = pos;
     break;

   case FieldNetworkRequestID::RAW :
     FIXPP_PRINT_FIELD(NetworkRequestID) 
     fieldNetworkRequestID.offset = pos;
     break;

   case FieldNetworkResponseID::RAW :
     FIXPP_PRINT_FIELD(NetworkResponseID) 
     fieldNetworkResponseID.offset = pos;
     break;

   case FieldLastNetworkResponseID::RAW :
     FIXPP_PRINT_FIELD(LastNetworkResponseID) 
     fieldLastNetworkResponseID.offset = pos;
     break;

   case FieldNoCompIDs::RAW :
     FIXPP_PRINT_FIELD(NoCompIDs) 
     fieldNoCompIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::scan( groupsCompIDs, fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW :
     FIXPP_PRINT_FIELD(UserRequestID) 
     fieldUserRequestID.offset = pos;
     break;

   case FieldUserRequestType::RAW :
     FIXPP_PRINT_FIELD(UserRequestType) 
     fieldUserRequestType.offset = pos;
     break;

   case FieldUsername::RAW :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldPassword::RAW :
     FIXPP_PRINT_FIELD(Password) 
     fieldPassword.offset = pos;
     break;

   case FieldNewPassword::RAW :
     FIXPP_PRINT_FIELD(NewPassword) 
     fieldNewPassword.offset = pos;
     break;

   case FieldRawDataLength::RAW :
     FIXPP_PRINT_FIELD(RawDataLength) 
     fieldRawDataLength.offset = pos;
     break;

   case FieldRawData::RAW :
     FIXPP_PRINT_FIELD(RawData) 
     fieldRawData.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserResponse::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW :
     FIXPP_PRINT_FIELD(UserRequestID) 
     fieldUserRequestID.offset = pos;
     break;

   case FieldUsername::RAW :
     FIXPP_PRINT_FIELD(Username) 
     fieldUsername.offset = pos;
     break;

   case FieldUserStatus::RAW :
     FIXPP_PRINT_FIELD(UserStatus) 
     fieldUserStatus.offset = pos;
     break;

   case FieldUserStatusText::RAW :
     FIXPP_PRINT_FIELD(UserStatusText) 
     fieldUserStatusText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiryAck::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW :
     FIXPP_PRINT_FIELD(CollInquiryID) 
     fieldCollInquiryID.offset = pos;
     break;

   case FieldCollInquiryStatus::RAW :
     FIXPP_PRINT_FIELD(CollInquiryStatus) 
     fieldCollInquiryStatus.offset = pos;
     break;

   case FieldCollInquiryResult::RAW :
     FIXPP_PRINT_FIELD(CollInquiryResult) 
     fieldCollInquiryResult.offset = pos;
     break;

   case FieldNoCollInquiryQualifier::RAW :
     FIXPP_PRINT_FIELD(NoCollInquiryQualifier) 
     fieldNoCollInquiryQualifier.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::scan( groupsCollInquiryQualifier, fix+pos, len - pos );
     break;

   case FieldTotNumReports::RAW :
     FIXPP_PRINT_FIELD(TotNumReports) 
     fieldTotNumReports.offset = pos;
     break;

   case FieldNoPartyIDs::RAW :
     FIXPP_PRINT_FIELD(NoPartyIDs) 
     fieldNoPartyIDs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::scan( groupsPartyIDs, fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     FIXPP_PRINT_FIELD(Account) 
     fieldAccount.offset = pos;
     break;

   case FieldAccountType::RAW :
     FIXPP_PRINT_FIELD(AccountType) 
     fieldAccountType.offset = pos;
     break;

   case FieldClOrdID::RAW :
     FIXPP_PRINT_FIELD(ClOrdID) 
     fieldClOrdID.offset = pos;
     break;

   case FieldOrderID::RAW :
     FIXPP_PRINT_FIELD(OrderID) 
     fieldOrderID.offset = pos;
     break;

   case FieldSecondaryOrderID::RAW :
     FIXPP_PRINT_FIELD(SecondaryOrderID) 
     fieldSecondaryOrderID.offset = pos;
     break;

   case FieldSecondaryClOrdID::RAW :
     FIXPP_PRINT_FIELD(SecondaryClOrdID) 
     fieldSecondaryClOrdID.offset = pos;
     break;

   case FieldNoExecs::RAW :
     FIXPP_PRINT_FIELD(NoExecs) 
     fieldNoExecs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::scan( groupsExecs, fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     FIXPP_PRINT_FIELD(NoTrades) 
     fieldNoTrades.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::scan( groupsTrades, fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     FIXPP_PRINT_FIELD(Symbol) 
     fieldSymbol.offset = pos;
     break;

   case FieldSymbolSfx::RAW :
     FIXPP_PRINT_FIELD(SymbolSfx) 
     fieldSymbolSfx.offset = pos;
     break;

   case FieldSecurityID::RAW :
     FIXPP_PRINT_FIELD(SecurityID) 
     fieldSecurityID.offset = pos;
     break;

   case FieldSecurityIDSource::RAW :
     FIXPP_PRINT_FIELD(SecurityIDSource) 
     fieldSecurityIDSource.offset = pos;
     break;

   case FieldNoSecurityAltID::RAW :
     FIXPP_PRINT_FIELD(NoSecurityAltID) 
     fieldNoSecurityAltID.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::scan( groupsSecurityAltID, fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     FIXPP_PRINT_FIELD(Product) 
     fieldProduct.offset = pos;
     break;

   case FieldCFICode::RAW :
     FIXPP_PRINT_FIELD(CFICode) 
     fieldCFICode.offset = pos;
     break;

   case FieldSecurityType::RAW :
     FIXPP_PRINT_FIELD(SecurityType) 
     fieldSecurityType.offset = pos;
     break;

   case FieldSecuritySubType::RAW :
     FIXPP_PRINT_FIELD(SecuritySubType) 
     fieldSecuritySubType.offset = pos;
     break;

   case FieldMaturityMonthYear::RAW :
     FIXPP_PRINT_FIELD(MaturityMonthYear) 
     fieldMaturityMonthYear.offset = pos;
     break;

   case FieldMaturityDate::RAW :
     FIXPP_PRINT_FIELD(MaturityDate) 
     fieldMaturityDate.offset = pos;
     break;

   case FieldPutOrCall::RAW :
     FIXPP_PRINT_FIELD(PutOrCall) 
     fieldPutOrCall.offset = pos;
     break;

   case FieldCouponPaymentDate::RAW :
     FIXPP_PRINT_FIELD(CouponPaymentDate) 
     fieldCouponPaymentDate.offset = pos;
     break;

   case FieldIssueDate::RAW :
     FIXPP_PRINT_FIELD(IssueDate) 
     fieldIssueDate.offset = pos;
     break;

   case FieldRepoCollateralSecurityType::RAW :
     FIXPP_PRINT_FIELD(RepoCollateralSecurityType) 
     fieldRepoCollateralSecurityType.offset = pos;
     break;

   case FieldRepurchaseTerm::RAW :
     FIXPP_PRINT_FIELD(RepurchaseTerm) 
     fieldRepurchaseTerm.offset = pos;
     break;

   case FieldRepurchaseRate::RAW :
     FIXPP_PRINT_FIELD(RepurchaseRate) 
     fieldRepurchaseRate.offset = pos;
     break;

   case FieldFactor::RAW :
     FIXPP_PRINT_FIELD(Factor) 
     fieldFactor.offset = pos;
     break;

   case FieldCreditRating::RAW :
     FIXPP_PRINT_FIELD(CreditRating) 
     fieldCreditRating.offset = pos;
     break;

   case FieldInstrRegistry::RAW :
     FIXPP_PRINT_FIELD(InstrRegistry) 
     fieldInstrRegistry.offset = pos;
     break;

   case FieldCountryOfIssue::RAW :
     FIXPP_PRINT_FIELD(CountryOfIssue) 
     fieldCountryOfIssue.offset = pos;
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     FIXPP_PRINT_FIELD(StateOrProvinceOfIssue) 
     fieldStateOrProvinceOfIssue.offset = pos;
     break;

   case FieldLocaleOfIssue::RAW :
     FIXPP_PRINT_FIELD(LocaleOfIssue) 
     fieldLocaleOfIssue.offset = pos;
     break;

   case FieldRedemptionDate::RAW :
     FIXPP_PRINT_FIELD(RedemptionDate) 
     fieldRedemptionDate.offset = pos;
     break;

   case FieldStrikePrice::RAW :
     FIXPP_PRINT_FIELD(StrikePrice) 
     fieldStrikePrice.offset = pos;
     break;

   case FieldStrikeCurrency::RAW :
     FIXPP_PRINT_FIELD(StrikeCurrency) 
     fieldStrikeCurrency.offset = pos;
     break;

   case FieldOptAttribute::RAW :
     FIXPP_PRINT_FIELD(OptAttribute) 
     fieldOptAttribute.offset = pos;
     break;

   case FieldContractMultiplier::RAW :
     FIXPP_PRINT_FIELD(ContractMultiplier) 
     fieldContractMultiplier.offset = pos;
     break;

   case FieldCouponRate::RAW :
     FIXPP_PRINT_FIELD(CouponRate) 
     fieldCouponRate.offset = pos;
     break;

   case FieldSecurityExchange::RAW :
     FIXPP_PRINT_FIELD(SecurityExchange) 
     fieldSecurityExchange.offset = pos;
     break;

   case FieldIssuer::RAW :
     FIXPP_PRINT_FIELD(Issuer) 
     fieldIssuer.offset = pos;
     break;

   case FieldEncodedIssuerLen::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuerLen) 
     fieldEncodedIssuerLen.offset = pos;
     break;

   case FieldEncodedIssuer::RAW :
     FIXPP_PRINT_FIELD(EncodedIssuer) 
     fieldEncodedIssuer.offset = pos;
     break;

   case FieldSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(SecurityDesc) 
     fieldSecurityDesc.offset = pos;
     break;

   case FieldEncodedSecurityDescLen::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDescLen) 
     fieldEncodedSecurityDescLen.offset = pos;
     break;

   case FieldEncodedSecurityDesc::RAW :
     FIXPP_PRINT_FIELD(EncodedSecurityDesc) 
     fieldEncodedSecurityDesc.offset = pos;
     break;

   case FieldPool::RAW :
     FIXPP_PRINT_FIELD(Pool) 
     fieldPool.offset = pos;
     break;

   case FieldContractSettlMonth::RAW :
     FIXPP_PRINT_FIELD(ContractSettlMonth) 
     fieldContractSettlMonth.offset = pos;
     break;

   case FieldCPProgram::RAW :
     FIXPP_PRINT_FIELD(CPProgram) 
     fieldCPProgram.offset = pos;
     break;

   case FieldCPRegType::RAW :
     FIXPP_PRINT_FIELD(CPRegType) 
     fieldCPRegType.offset = pos;
     break;

   case FieldNoEvents::RAW :
     FIXPP_PRINT_FIELD(NoEvents) 
     fieldNoEvents.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::scan( groupsEvents, fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     FIXPP_PRINT_FIELD(DatedDate) 
     fieldDatedDate.offset = pos;
     break;

   case FieldInterestAccrualDate::RAW :
     FIXPP_PRINT_FIELD(InterestAccrualDate) 
     fieldInterestAccrualDate.offset = pos;
     break;

   case FieldAgreementDesc::RAW :
     FIXPP_PRINT_FIELD(AgreementDesc) 
     fieldAgreementDesc.offset = pos;
     break;

   case FieldAgreementID::RAW :
     FIXPP_PRINT_FIELD(AgreementID) 
     fieldAgreementID.offset = pos;
     break;

   case FieldAgreementDate::RAW :
     FIXPP_PRINT_FIELD(AgreementDate) 
     fieldAgreementDate.offset = pos;
     break;

   case FieldAgreementCurrency::RAW :
     FIXPP_PRINT_FIELD(AgreementCurrency) 
     fieldAgreementCurrency.offset = pos;
     break;

   case FieldTerminationType::RAW :
     FIXPP_PRINT_FIELD(TerminationType) 
     fieldTerminationType.offset = pos;
     break;

   case FieldStartDate::RAW :
     FIXPP_PRINT_FIELD(StartDate) 
     fieldStartDate.offset = pos;
     break;

   case FieldEndDate::RAW :
     FIXPP_PRINT_FIELD(EndDate) 
     fieldEndDate.offset = pos;
     break;

   case FieldDeliveryType::RAW :
     FIXPP_PRINT_FIELD(DeliveryType) 
     fieldDeliveryType.offset = pos;
     break;

   case FieldMarginRatio::RAW :
     FIXPP_PRINT_FIELD(MarginRatio) 
     fieldMarginRatio.offset = pos;
     break;

   case FieldSettlDate::RAW :
     FIXPP_PRINT_FIELD(SettlDate) 
     fieldSettlDate.offset = pos;
     break;

   case FieldQuantity::RAW :
     FIXPP_PRINT_FIELD(Quantity) 
     fieldQuantity.offset = pos;
     break;

   case FieldQtyType::RAW :
     FIXPP_PRINT_FIELD(QtyType) 
     fieldQtyType.offset = pos;
     break;

   case FieldCurrency::RAW :
     FIXPP_PRINT_FIELD(Currency) 
     fieldCurrency.offset = pos;
     break;

   case FieldNoLegs::RAW :
     FIXPP_PRINT_FIELD(NoLegs) 
     fieldNoLegs.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::scan( groupsLegs, fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     FIXPP_PRINT_FIELD(NoUnderlyings) 
     fieldNoUnderlyings.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::scan( groupsUnderlyings, fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionID) 
     fieldTradingSessionID.offset = pos;
     break;

   case FieldTradingSessionSubID::RAW :
     FIXPP_PRINT_FIELD(TradingSessionSubID) 
     fieldTradingSessionSubID.offset = pos;
     break;

   case FieldSettlSessID::RAW :
     FIXPP_PRINT_FIELD(SettlSessID) 
     fieldSettlSessID.offset = pos;
     break;

   case FieldSettlSessSubID::RAW :
     FIXPP_PRINT_FIELD(SettlSessSubID) 
     fieldSettlSessSubID.offset = pos;
     break;

   case FieldClearingBusinessDate::RAW :
     FIXPP_PRINT_FIELD(ClearingBusinessDate) 
     fieldClearingBusinessDate.offset = pos;
     break;

   case FieldResponseTransportType::RAW :
     FIXPP_PRINT_FIELD(ResponseTransportType) 
     fieldResponseTransportType.offset = pos;
     break;

   case FieldResponseDestination::RAW :
     FIXPP_PRINT_FIELD(ResponseDestination) 
     fieldResponseDestination.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationRequest::scan( const char * fix, unsigned len ){
buf = fix; 
offset_t prev = 0, pos = 0; 
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmReqID::RAW :
     FIXPP_PRINT_FIELD(ConfirmReqID) 
     fieldConfirmReqID.offset = pos;
     break;

   case FieldConfirmType::RAW :
     FIXPP_PRINT_FIELD(ConfirmType) 
     fieldConfirmType.offset = pos;
     break;

   case FieldNoOrders::RAW :
     FIXPP_PRINT_FIELD(NoOrders) 
     fieldNoOrders.offset = pos;
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::scan( groupsOrders, fix+pos, len - pos );
     break;

   case FieldAllocID::RAW :
     FIXPP_PRINT_FIELD(AllocID) 
     fieldAllocID.offset = pos;
     break;

   case FieldSecondaryAllocID::RAW :
     FIXPP_PRINT_FIELD(SecondaryAllocID) 
     fieldSecondaryAllocID.offset = pos;
     break;

   case FieldIndividualAllocID::RAW :
     FIXPP_PRINT_FIELD(IndividualAllocID) 
     fieldIndividualAllocID.offset = pos;
     break;

   case FieldTransactTime::RAW :
     FIXPP_PRINT_FIELD(TransactTime) 
     fieldTransactTime.offset = pos;
     break;

   case FieldAllocAccount::RAW :
     FIXPP_PRINT_FIELD(AllocAccount) 
     fieldAllocAccount.offset = pos;
     break;

   case FieldAllocAcctIDSource::RAW :
     FIXPP_PRINT_FIELD(AllocAcctIDSource) 
     fieldAllocAcctIDSource.offset = pos;
     break;

   case FieldAllocAccountType::RAW :
     FIXPP_PRINT_FIELD(AllocAccountType) 
     fieldAllocAccountType.offset = pos;
     break;

   case FieldText::RAW :
     FIXPP_PRINT_FIELD(Text) 
     fieldText.offset = pos;
     break;

   case FieldEncodedTextLen::RAW :
     FIXPP_PRINT_FIELD(EncodedTextLen) 
     fieldEncodedTextLen.offset = pos;
     break;

   case FieldEncodedText::RAW :
     FIXPP_PRINT_FIELD(EncodedText) 
     fieldEncodedText.offset = pos;
     break;

   case FieldCheckSum::RAW :
     FIXPP_PRINT_FIELD(CheckSum) 
     fieldCheckSum.offset = pos;
     gotoNextField( fix, pos );
     return pos; 

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}


// -------------------------------------- skip ----------------------------------------

offset_t MessageHeader::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginString::RAW :
     break;

   case FieldBodyLength::RAW :
     break;

   case FieldMsgType::RAW :
     break;

   case FieldSenderCompID::RAW :
     break;

   case FieldTargetCompID::RAW :
     break;

   case FieldOnBehalfOfCompID::RAW :
     break;

   case FieldDeliverToCompID::RAW :
     break;

   case FieldSecureDataLen::RAW :
     break;

   case FieldSecureData::RAW :
     break;

   case FieldMsgSeqNum::RAW :
     break;

   case FieldSenderSubID::RAW :
     break;

   case FieldSenderLocationID::RAW :
     break;

   case FieldTargetSubID::RAW :
     break;

   case FieldTargetLocationID::RAW :
     break;

   case FieldOnBehalfOfSubID::RAW :
     break;

   case FieldOnBehalfOfLocationID::RAW :
     break;

   case FieldDeliverToSubID::RAW :
     break;

   case FieldDeliverToLocationID::RAW :
     break;

   case FieldPossDupFlag::RAW :
     break;

   case FieldPossResend::RAW :
     break;

   case FieldSendingTime::RAW :
     break;

   case FieldOrigSendingTime::RAW :
     break;

   case FieldXmlDataLen::RAW :
     break;

   case FieldXmlData::RAW :
     break;

   case FieldMessageEncoding::RAW :
     break;

   case FieldLastMsgSeqNumProcessed::RAW :
     break;

   case FieldNoHops::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupHops::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageHeartbeat::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTestRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTestReqID::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageResendRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBeginSeqNo::RAW :
     break;

   case FieldEndSeqNo::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW :
     break;

   case FieldRefTagID::RAW :
     break;

   case FieldRefMsgType::RAW :
     break;

   case FieldSessionRejectReason::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSequenceReset::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldGapFillFlag::RAW :
     break;

   case FieldNewSeqNo::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogout::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageIOI::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldIOIID::RAW :
     break;

   case FieldIOITransType::RAW :
     break;

   case FieldIOIRefID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldIOIQty::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldPriceType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldValidUntilTime::RAW :
     break;

   case FieldIOIQltyInd::RAW :
     break;

   case FieldIOINaturalFlag::RAW :
     break;

   case FieldNoIOIQualifiers::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupIOIQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldURLLink::RAW :
     break;

   case FieldNoRoutingIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAdvertisement::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAdvId::RAW :
     break;

   case FieldAdvTransType::RAW :
     break;

   case FieldAdvRefID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldAdvSide::RAW :
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldURLLink::RAW :
     break;

   case FieldLastMkt::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageExecutionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldSecondaryExecID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrigClOrdID::RAW :
     break;

   case FieldClOrdLinkID::RAW :
     break;

   case FieldQuoteRespID::RAW :
     break;

   case FieldOrdStatusReqID::RAW :
     break;

   case FieldMassStatusReqID::RAW :
     break;

   case FieldTotNumReports::RAW :
     break;

   case FieldLastRptRequested::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldNoContraBrokers::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContraBrokers::skip( fix+pos, len - pos );
     break;

   case FieldListID::RAW :
     break;

   case FieldCrossID::RAW :
     break;

   case FieldOrigCrossID::RAW :
     break;

   case FieldCrossType::RAW :
     break;

   case FieldExecID::RAW :
     break;

   case FieldExecRefID::RAW :
     break;

   case FieldExecType::RAW :
     break;

   case FieldOrdStatus::RAW :
     break;

   case FieldWorkingIndicator::RAW :
     break;

   case FieldOrdRejReason::RAW :
     break;

   case FieldExecRestatementReason::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldDayBookingInst::RAW :
     break;

   case FieldBookingUnit::RAW :
     break;

   case FieldPreallocMethod::RAW :
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldCashMargin::RAW :
     break;

   case FieldClearingFeeIndicator::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldQtyType::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldOrdType::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldStopPx::RAW :
     break;

   case FieldPegOffsetValue::RAW :
     break;

   case FieldPegMoveType::RAW :
     break;

   case FieldPegOffsetType::RAW :
     break;

   case FieldPegLimitType::RAW :
     break;

   case FieldPegRoundDirection::RAW :
     break;

   case FieldPegScope::RAW :
     break;

   case FieldDiscretionInst::RAW :
     break;

   case FieldDiscretionOffsetValue::RAW :
     break;

   case FieldDiscretionMoveType::RAW :
     break;

   case FieldDiscretionOffsetType::RAW :
     break;

   case FieldDiscretionLimitType::RAW :
     break;

   case FieldDiscretionRoundDirection::RAW :
     break;

   case FieldDiscretionScope::RAW :
     break;

   case FieldPeggedPrice::RAW :
     break;

   case FieldDiscretionPrice::RAW :
     break;

   case FieldTargetStrategy::RAW :
     break;

   case FieldTargetStrategyParameters::RAW :
     break;

   case FieldParticipationRate::RAW :
     break;

   case FieldTargetStrategyPerformance::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldComplianceID::RAW :
     break;

   case FieldSolicitedFlag::RAW :
     break;

   case FieldTimeInForce::RAW :
     break;

   case FieldEffectiveTime::RAW :
     break;

   case FieldExpireDate::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldExecInst::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldOrderRestrictions::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldLastQty::RAW :
     break;

   case FieldUnderlyingLastQty::RAW :
     break;

   case FieldLastPx::RAW :
     break;

   case FieldUnderlyingLastPx::RAW :
     break;

   case FieldLastParPx::RAW :
     break;

   case FieldLastSpotRate::RAW :
     break;

   case FieldLastForwardPoints::RAW :
     break;

   case FieldLastMkt::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldTimeBracket::RAW :
     break;

   case FieldLastCapacity::RAW :
     break;

   case FieldLeavesQty::RAW :
     break;

   case FieldCumQty::RAW :
     break;

   case FieldAvgPx::RAW :
     break;

   case FieldDayOrderQty::RAW :
     break;

   case FieldDayCumQty::RAW :
     break;

   case FieldDayAvgPx::RAW :
     break;

   case FieldGTBookingInst::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldReportToExch::RAW :
     break;

   case FieldCommission::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCommCurrency::RAW :
     break;

   case FieldFundRenewWaiv::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldGrossTradeAmt::RAW :
     break;

   case FieldNumDaysInterest::RAW :
     break;

   case FieldExDate::RAW :
     break;

   case FieldAccruedInterestRate::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldInterestAtMaturity::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldTradedFlatSwitch::RAW :
     break;

   case FieldBasisFeatureDate::RAW :
     break;

   case FieldBasisFeaturePrice::RAW :
     break;

   case FieldConcession::RAW :
     break;

   case FieldTotalTakedown::RAW :
     break;

   case FieldNetMoney::RAW :
     break;

   case FieldSettlCurrAmt::RAW :
     break;

   case FieldSettlCurrency::RAW :
     break;

   case FieldSettlCurrFxRate::RAW :
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     break;

   case FieldHandlInst::RAW :
     break;

   case FieldMinQty::RAW :
     break;

   case FieldMaxFloor::RAW :
     break;

   case FieldPositionEffect::RAW :
     break;

   case FieldMaxShow::RAW :
     break;

   case FieldBookingType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldSettlDate2::RAW :
     break;

   case FieldOrderQty2::RAW :
     break;

   case FieldLastForwardPoints2::RAW :
     break;

   case FieldMultiLegReportingType::RAW :
     break;

   case FieldCancellationRights::RAW :
     break;

   case FieldMoneyLaunderingStatus::RAW :
     break;

   case FieldRegistID::RAW :
     break;

   case FieldDesignation::RAW :
     break;

   case FieldTransBkdTime::RAW :
     break;

   case FieldExecValuationPoint::RAW :
     break;

   case FieldExecPriceType::RAW :
     break;

   case FieldExecPriceAdjustment::RAW :
     break;

   case FieldPriorityIndicator::RAW :
     break;

   case FieldPriceImprovement::RAW :
     break;

   case FieldLastLiquidityInd::RAW :
     break;

   case FieldNoContAmts::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupContAmts::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW :
     break;

   case FieldNoMiscFees::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldClOrdLinkID::RAW :
     break;

   case FieldOrigClOrdID::RAW :
     break;

   case FieldOrdStatus::RAW :
     break;

   case FieldWorkingIndicator::RAW :
     break;

   case FieldOrigOrdModTime::RAW :
     break;

   case FieldListID::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldCxlRejResponseTo::RAW :
     break;

   case FieldCxlRejReason::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageLogon::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEncryptMethod::RAW :
     break;

   case FieldHeartBtInt::RAW :
     break;

   case FieldRawDataLength::RAW :
     break;

   case FieldRawData::RAW :
     break;

   case FieldResetSeqNumFlag::RAW :
     break;

   case FieldNextExpectedMsgSeqNum::RAW :
     break;

   case FieldMaxMessageSize::RAW :
     break;

   case FieldNoMsgTypes::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMsgTypes::skip( fix+pos, len - pos );
     break;

   case FieldTestMessageIndicator::RAW :
     break;

   case FieldUsername::RAW :
     break;

   case FieldPassword::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNews::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigTime::RAW :
     break;

   case FieldUrgency::RAW :
     break;

   case FieldHeadline::RAW :
     break;

   case FieldEncodedHeadlineLen::RAW :
     break;

   case FieldEncodedHeadline::RAW :
     break;

   case FieldNoRoutingIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLinesOfText::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::skip( fix+pos, len - pos );
     break;

   case FieldURLLink::RAW :
     break;

   case FieldRawDataLength::RAW :
     break;

   case FieldRawData::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageEmail::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldEmailThreadID::RAW :
     break;

   case FieldEmailType::RAW :
     break;

   case FieldOrigTime::RAW :
     break;

   case FieldSubject::RAW :
     break;

   case FieldEncodedSubjectLen::RAW :
     break;

   case FieldEncodedSubject::RAW :
     break;

   case FieldNoRoutingIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRoutingIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldOrderID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldNoLinesOfText::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLinesOfText::skip( fix+pos, len - pos );
     break;

   case FieldRawDataLength::RAW :
     break;

   case FieldRawData::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderSingle::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldClOrdLinkID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldDayBookingInst::RAW :
     break;

   case FieldBookingUnit::RAW :
     break;

   case FieldPreallocMethod::RAW :
     break;

   case FieldAllocID::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldCashMargin::RAW :
     break;

   case FieldClearingFeeIndicator::RAW :
     break;

   case FieldHandlInst::RAW :
     break;

   case FieldExecInst::RAW :
     break;

   case FieldMinQty::RAW :
     break;

   case FieldMaxFloor::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW :
     break;

   case FieldSide::RAW :
     break;

   case FieldLocateReqd::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldQtyType::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldOrdType::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldStopPx::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldComplianceID::RAW :
     break;

   case FieldSolicitedFlag::RAW :
     break;

   case FieldIOIID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldTimeInForce::RAW :
     break;

   case FieldEffectiveTime::RAW :
     break;

   case FieldExpireDate::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldGTBookingInst::RAW :
     break;

   case FieldCommission::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCommCurrency::RAW :
     break;

   case FieldFundRenewWaiv::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldOrderRestrictions::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldForexReq::RAW :
     break;

   case FieldSettlCurrency::RAW :
     break;

   case FieldBookingType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldSettlDate2::RAW :
     break;

   case FieldOrderQty2::RAW :
     break;

   case FieldPrice2::RAW :
     break;

   case FieldPositionEffect::RAW :
     break;

   case FieldCoveredOrUncovered::RAW :
     break;

   case FieldMaxShow::RAW :
     break;

   case FieldPegOffsetValue::RAW :
     break;

   case FieldPegMoveType::RAW :
     break;

   case FieldPegOffsetType::RAW :
     break;

   case FieldPegLimitType::RAW :
     break;

   case FieldPegRoundDirection::RAW :
     break;

   case FieldPegScope::RAW :
     break;

   case FieldDiscretionInst::RAW :
     break;

   case FieldDiscretionOffsetValue::RAW :
     break;

   case FieldDiscretionMoveType::RAW :
     break;

   case FieldDiscretionOffsetType::RAW :
     break;

   case FieldDiscretionLimitType::RAW :
     break;

   case FieldDiscretionRoundDirection::RAW :
     break;

   case FieldDiscretionScope::RAW :
     break;

   case FieldTargetStrategy::RAW :
     break;

   case FieldTargetStrategyParameters::RAW :
     break;

   case FieldParticipationRate::RAW :
     break;

   case FieldCancellationRights::RAW :
     break;

   case FieldMoneyLaunderingStatus::RAW :
     break;

   case FieldRegistID::RAW :
     break;

   case FieldDesignation::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     break;

   case FieldBidID::RAW :
     break;

   case FieldClientBidID::RAW :
     break;

   case FieldProgRptReqs::RAW :
     break;

   case FieldBidType::RAW :
     break;

   case FieldProgPeriodInterval::RAW :
     break;

   case FieldCancellationRights::RAW :
     break;

   case FieldMoneyLaunderingStatus::RAW :
     break;

   case FieldRegistID::RAW :
     break;

   case FieldListExecInstType::RAW :
     break;

   case FieldListExecInst::RAW :
     break;

   case FieldEncodedListExecInstLen::RAW :
     break;

   case FieldEncodedListExecInst::RAW :
     break;

   case FieldAllowableOneSidednessPct::RAW :
     break;

   case FieldAllowableOneSidednessValue::RAW :
     break;

   case FieldAllowableOneSidednessCurr::RAW :
     break;

   case FieldTotNoOrders::RAW :
     break;

   case FieldLastFragment::RAW :
     break;

   case FieldNoOrders::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrigClOrdID::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldClOrdLinkID::RAW :
     break;

   case FieldListID::RAW :
     break;

   case FieldOrigOrdModTime::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldComplianceID::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderCancelReplaceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldOrigClOrdID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldClOrdLinkID::RAW :
     break;

   case FieldListID::RAW :
     break;

   case FieldOrigOrdModTime::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldDayBookingInst::RAW :
     break;

   case FieldBookingUnit::RAW :
     break;

   case FieldPreallocMethod::RAW :
     break;

   case FieldAllocID::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldCashMargin::RAW :
     break;

   case FieldClearingFeeIndicator::RAW :
     break;

   case FieldHandlInst::RAW :
     break;

   case FieldExecInst::RAW :
     break;

   case FieldMinQty::RAW :
     break;

   case FieldMaxFloor::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldOrdType::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldStopPx::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldPegOffsetValue::RAW :
     break;

   case FieldPegMoveType::RAW :
     break;

   case FieldPegOffsetType::RAW :
     break;

   case FieldPegLimitType::RAW :
     break;

   case FieldPegRoundDirection::RAW :
     break;

   case FieldPegScope::RAW :
     break;

   case FieldDiscretionInst::RAW :
     break;

   case FieldDiscretionOffsetValue::RAW :
     break;

   case FieldDiscretionMoveType::RAW :
     break;

   case FieldDiscretionOffsetType::RAW :
     break;

   case FieldDiscretionLimitType::RAW :
     break;

   case FieldDiscretionRoundDirection::RAW :
     break;

   case FieldDiscretionScope::RAW :
     break;

   case FieldTargetStrategy::RAW :
     break;

   case FieldTargetStrategyParameters::RAW :
     break;

   case FieldParticipationRate::RAW :
     break;

   case FieldComplianceID::RAW :
     break;

   case FieldSolicitedFlag::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldTimeInForce::RAW :
     break;

   case FieldEffectiveTime::RAW :
     break;

   case FieldExpireDate::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldGTBookingInst::RAW :
     break;

   case FieldCommission::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCommCurrency::RAW :
     break;

   case FieldFundRenewWaiv::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldOrderRestrictions::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldForexReq::RAW :
     break;

   case FieldSettlCurrency::RAW :
     break;

   case FieldBookingType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldSettlDate2::RAW :
     break;

   case FieldOrderQty2::RAW :
     break;

   case FieldPrice2::RAW :
     break;

   case FieldPositionEffect::RAW :
     break;

   case FieldCoveredOrUncovered::RAW :
     break;

   case FieldMaxShow::RAW :
     break;

   case FieldLocateReqd::RAW :
     break;

   case FieldCancellationRights::RAW :
     break;

   case FieldMoneyLaunderingStatus::RAW :
     break;

   case FieldRegistID::RAW :
     break;

   case FieldDesignation::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldClOrdLinkID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldOrdStatusReqID::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstruction::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW :
     break;

   case FieldAllocTransType::RAW :
     break;

   case FieldAllocType::RAW :
     break;

   case FieldSecondaryAllocID::RAW :
     break;

   case FieldRefAllocID::RAW :
     break;

   case FieldAllocCancReplaceReason::RAW :
     break;

   case FieldAllocIntermedReqType::RAW :
     break;

   case FieldAllocLinkID::RAW :
     break;

   case FieldAllocLinkType::RAW :
     break;

   case FieldBookingRefID::RAW :
     break;

   case FieldAllocNoOrdersType::RAW :
     break;

   case FieldNoOrders::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW :
     break;

   case FieldReversalIndicator::RAW :
     break;

   case FieldMatchType::RAW :
     break;

   case FieldSide::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldLastMkt::RAW :
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldAvgPx::RAW :
     break;

   case FieldAvgParPx::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldAvgPxPrecision::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldBookingType::RAW :
     break;

   case FieldGrossTradeAmt::RAW :
     break;

   case FieldConcession::RAW :
     break;

   case FieldTotalTakedown::RAW :
     break;

   case FieldNetMoney::RAW :
     break;

   case FieldPositionEffect::RAW :
     break;

   case FieldAutoAcceptIndicator::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldNumDaysInterest::RAW :
     break;

   case FieldAccruedInterestRate::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldTotalAccruedInterestAmt::RAW :
     break;

   case FieldInterestAtMaturity::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldLegalConfirm::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldTotNoAllocs::RAW :
     break;

   case FieldLastFragment::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListExecute::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     break;

   case FieldClientBidID::RAW :
     break;

   case FieldBidID::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     break;

   case FieldListStatusType::RAW :
     break;

   case FieldNoRpts::RAW :
     break;

   case FieldListOrderStatus::RAW :
     break;

   case FieldRptSeq::RAW :
     break;

   case FieldListStatusText::RAW :
     break;

   case FieldEncodedListStatusTextLen::RAW :
     break;

   case FieldEncodedListStatusText::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldTotNoOrders::RAW :
     break;

   case FieldLastFragment::RAW :
     break;

   case FieldNoOrders::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationInstructionAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldAllocStatus::RAW :
     break;

   case FieldAllocRejCode::RAW :
     break;

   case FieldAllocType::RAW :
     break;

   case FieldAllocIntermedReqType::RAW :
     break;

   case FieldMatchStatus::RAW :
     break;

   case FieldProduct::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDontKnowTrade::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldExecID::RAW :
     break;

   case FieldDKReason::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldLastQty::RAW :
     break;

   case FieldLastPx::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     break;

   case FieldRFQReqID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldNoRelatedSym::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuote::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldQuoteRespID::RAW :
     break;

   case FieldQuoteType::RAW :
     break;

   case FieldNoQuoteQualifiers::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldQuoteResponseLevel::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldSettlDate2::RAW :
     break;

   case FieldOrderQty2::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldBidPx::RAW :
     break;

   case FieldOfferPx::RAW :
     break;

   case FieldMktBidPx::RAW :
     break;

   case FieldMktOfferPx::RAW :
     break;

   case FieldMinBidSize::RAW :
     break;

   case FieldBidSize::RAW :
     break;

   case FieldMinOfferSize::RAW :
     break;

   case FieldOfferSize::RAW :
     break;

   case FieldValidUntilTime::RAW :
     break;

   case FieldBidSpotRate::RAW :
     break;

   case FieldOfferSpotRate::RAW :
     break;

   case FieldBidForwardPoints::RAW :
     break;

   case FieldOfferForwardPoints::RAW :
     break;

   case FieldMidPx::RAW :
     break;

   case FieldBidYield::RAW :
     break;

   case FieldMidYield::RAW :
     break;

   case FieldOfferYield::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldOrdType::RAW :
     break;

   case FieldBidForwardPoints2::RAW :
     break;

   case FieldOfferForwardPoints2::RAW :
     break;

   case FieldSettlCurrBidFxRate::RAW :
     break;

   case FieldSettlCurrOfferFxRate::RAW :
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCommission::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstMsgID::RAW :
     break;

   case FieldSettlInstReqID::RAW :
     break;

   case FieldSettlInstMode::RAW :
     break;

   case FieldSettlInstReqRejCode::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoSettlInst::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSettlInst::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldMarketDepth::RAW :
     break;

   case FieldMDUpdateType::RAW :
     break;

   case FieldAggregatedBook::RAW :
     break;

   case FieldOpenCloseSettlFlag::RAW :
     break;

   case FieldScope::RAW :
     break;

   case FieldMDImplicitDelete::RAW :
     break;

   case FieldNoMDEntryTypes::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntryTypes::skip( fix+pos, len - pos );
     break;

   case FieldNoRelatedSym::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueAction::RAW :
     break;

   case FieldApplQueueMax::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataSnapshotFullRefresh::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldFinancialStatus::RAW :
     break;

   case FieldCorporateAction::RAW :
     break;

   case FieldNetChgPrevDay::RAW :
     break;

   case FieldNoMDEntries::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW :
     break;

   case FieldApplQueueResolution::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataIncrementalRefresh::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW :
     break;

   case FieldNoMDEntries::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMDEntries::skip( fix+pos, len - pos );
     break;

   case FieldApplQueueDepth::RAW :
     break;

   case FieldApplQueueResolution::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMarketDataRequestReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMDReqID::RAW :
     break;

   case FieldMDReqRejReason::RAW :
     break;

   case FieldNoAltMDSource::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAltMDSource::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteCancel::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldQuoteCancelType::RAW :
     break;

   case FieldQuoteResponseLevel::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldNoQuoteEntries::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteEntries::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuoteAcknowledgement::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldQuoteStatus::RAW :
     break;

   case FieldQuoteRejectReason::RAW :
     break;

   case FieldQuoteResponseLevel::RAW :
     break;

   case FieldQuoteType::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldNoQuoteSets::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinitionRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     break;

   case FieldSecurityRequestType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityDefinition::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     break;

   case FieldSecurityResponseID::RAW :
     break;

   case FieldSecurityResponseType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldExpirationCycle::RAW :
     break;

   case FieldRoundLot::RAW :
     break;

   case FieldMinTradeVol::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityStatusReqID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldUnsolicitedIndicator::RAW :
     break;

   case FieldSecurityTradingStatus::RAW :
     break;

   case FieldFinancialStatus::RAW :
     break;

   case FieldCorporateAction::RAW :
     break;

   case FieldHaltReasonChar::RAW :
     break;

   case FieldInViewOfCommon::RAW :
     break;

   case FieldDueToRelated::RAW :
     break;

   case FieldBuyVolume::RAW :
     break;

   case FieldSellVolume::RAW :
     break;

   case FieldHighPx::RAW :
     break;

   case FieldLowPx::RAW :
     break;

   case FieldLastPx::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldAdjustment::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldTradSesMethod::RAW :
     break;

   case FieldTradSesMode::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradingSessionStatus::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradSesReqID::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldTradSesMethod::RAW :
     break;

   case FieldTradSesMode::RAW :
     break;

   case FieldUnsolicitedIndicator::RAW :
     break;

   case FieldTradSesStatus::RAW :
     break;

   case FieldTradSesStatusRejReason::RAW :
     break;

   case FieldTradSesStartTime::RAW :
     break;

   case FieldTradSesOpenTime::RAW :
     break;

   case FieldTradSesPreCloseTime::RAW :
     break;

   case FieldTradSesCloseTime::RAW :
     break;

   case FieldTradSesEndTime::RAW :
     break;

   case FieldTotalVolumeTraded::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMassQuote::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldQuoteType::RAW :
     break;

   case FieldQuoteResponseLevel::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldDefBidSize::RAW :
     break;

   case FieldDefOfferSize::RAW :
     break;

   case FieldNoQuoteSets::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteSets::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBusinessMessageReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRefSeqNum::RAW :
     break;

   case FieldRefMsgType::RAW :
     break;

   case FieldBusinessRejectRefID::RAW :
     break;

   case FieldBusinessRejectReason::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW :
     break;

   case FieldClientBidID::RAW :
     break;

   case FieldBidRequestTransType::RAW :
     break;

   case FieldListName::RAW :
     break;

   case FieldTotNoRelatedSym::RAW :
     break;

   case FieldBidType::RAW :
     break;

   case FieldNumTickets::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldSideValue1::RAW :
     break;

   case FieldSideValue2::RAW :
     break;

   case FieldNoBidDescriptors::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidDescriptors::skip( fix+pos, len - pos );
     break;

   case FieldNoBidComponents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::skip( fix+pos, len - pos );
     break;

   case FieldLiquidityIndType::RAW :
     break;

   case FieldWtAverageLiquidity::RAW :
     break;

   case FieldExchangeForPhysical::RAW :
     break;

   case FieldOutMainCntryUIndex::RAW :
     break;

   case FieldCrossPercent::RAW :
     break;

   case FieldProgRptReqs::RAW :
     break;

   case FieldProgPeriodInterval::RAW :
     break;

   case FieldIncTaxInd::RAW :
     break;

   case FieldForexReq::RAW :
     break;

   case FieldNumBidders::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldBidTradeType::RAW :
     break;

   case FieldBasisPxType::RAW :
     break;

   case FieldStrikeTime::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageBidResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldBidID::RAW :
     break;

   case FieldClientBidID::RAW :
     break;

   case FieldNoBidComponents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupBidComponents::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageListStrikePrice::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldListID::RAW :
     break;

   case FieldTotNoStrikes::RAW :
     break;

   case FieldLastFragment::RAW :
     break;

   case FieldNoStrikes::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStrikes::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageXMLnonFIX::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW :
     break;

   case FieldRegistTransType::RAW :
     break;

   case FieldRegistRefID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldRegistAcctType::RAW :
     break;

   case FieldTaxAdvantageType::RAW :
     break;

   case FieldOwnershipType::RAW :
     break;

   case FieldNoRegistDtls::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRegistDtls::skip( fix+pos, len - pos );
     break;

   case FieldNoDistribInsts::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDistribInsts::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRegistrationInstructionsResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRegistID::RAW :
     break;

   case FieldRegistTransType::RAW :
     break;

   case FieldRegistRefID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldRegistStatus::RAW :
     break;

   case FieldRegistRejReasonCode::RAW :
     break;

   case FieldRegistRejReasonText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldMassCancelRequestType::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldUnderlyingSymbol::RAW :
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     break;

   case FieldUnderlyingSecurityID::RAW :
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     break;

   case FieldUnderlyingCFICode::RAW :
     break;

   case FieldUnderlyingSecurityType::RAW :
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     break;

   case FieldUnderlyingMaturityDate::RAW :
     break;

   case FieldUnderlyingPutOrCall::RAW :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     break;

   case FieldUnderlyingIssueDate::RAW :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     break;

   case FieldUnderlyingFactor::RAW :
     break;

   case FieldUnderlyingCreditRating::RAW :
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     break;

   case FieldUnderlyingStrikePrice::RAW :
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     break;

   case FieldUnderlyingOptAttribute::RAW :
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     break;

   case FieldUnderlyingCouponRate::RAW :
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     break;

   case FieldUnderlyingIssuer::RAW :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     break;

   case FieldUnderlyingCPProgram::RAW :
     break;

   case FieldUnderlyingCPRegType::RAW :
     break;

   case FieldUnderlyingCurrency::RAW :
     break;

   case FieldUnderlyingQty::RAW :
     break;

   case FieldUnderlyingPx::RAW :
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     break;

   case FieldUnderlyingEndPrice::RAW :
     break;

   case FieldUnderlyingStartValue::RAW :
     break;

   case FieldUnderlyingCurrentValue::RAW :
     break;

   case FieldUnderlyingEndValue::RAW :
     break;

   case FieldNoUnderlyingStips::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassCancelReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldMassCancelRequestType::RAW :
     break;

   case FieldMassCancelResponse::RAW :
     break;

   case FieldMassCancelRejectReason::RAW :
     break;

   case FieldTotalAffectedOrders::RAW :
     break;

   case FieldNoAffectedOrders::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAffectedOrders::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldUnderlyingSymbol::RAW :
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     break;

   case FieldUnderlyingSecurityID::RAW :
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     break;

   case FieldUnderlyingCFICode::RAW :
     break;

   case FieldUnderlyingSecurityType::RAW :
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     break;

   case FieldUnderlyingMaturityDate::RAW :
     break;

   case FieldUnderlyingPutOrCall::RAW :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     break;

   case FieldUnderlyingIssueDate::RAW :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     break;

   case FieldUnderlyingFactor::RAW :
     break;

   case FieldUnderlyingCreditRating::RAW :
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     break;

   case FieldUnderlyingStrikePrice::RAW :
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     break;

   case FieldUnderlyingOptAttribute::RAW :
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     break;

   case FieldUnderlyingCouponRate::RAW :
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     break;

   case FieldUnderlyingIssuer::RAW :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     break;

   case FieldUnderlyingCPProgram::RAW :
     break;

   case FieldUnderlyingCPRegType::RAW :
     break;

   case FieldUnderlyingCurrency::RAW :
     break;

   case FieldUnderlyingQty::RAW :
     break;

   case FieldUnderlyingPx::RAW :
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     break;

   case FieldUnderlyingEndPrice::RAW :
     break;

   case FieldUnderlyingStartValue::RAW :
     break;

   case FieldUnderlyingCurrentValue::RAW :
     break;

   case FieldUnderlyingEndValue::RAW :
     break;

   case FieldNoUnderlyingStips::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderCross::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCrossID::RAW :
     break;

   case FieldCrossType::RAW :
     break;

   case FieldCrossPrioritization::RAW :
     break;

   case FieldNoSides::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldHandlInst::RAW :
     break;

   case FieldExecInst::RAW :
     break;

   case FieldMinQty::RAW :
     break;

   case FieldMaxFloor::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     break;

   case FieldPrevClosePx::RAW :
     break;

   case FieldLocateReqd::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldOrdType::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldStopPx::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldComplianceID::RAW :
     break;

   case FieldIOIID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldTimeInForce::RAW :
     break;

   case FieldEffectiveTime::RAW :
     break;

   case FieldExpireDate::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldGTBookingInst::RAW :
     break;

   case FieldMaxShow::RAW :
     break;

   case FieldPegOffsetValue::RAW :
     break;

   case FieldPegMoveType::RAW :
     break;

   case FieldPegOffsetType::RAW :
     break;

   case FieldPegLimitType::RAW :
     break;

   case FieldPegRoundDirection::RAW :
     break;

   case FieldPegScope::RAW :
     break;

   case FieldDiscretionInst::RAW :
     break;

   case FieldDiscretionOffsetValue::RAW :
     break;

   case FieldDiscretionMoveType::RAW :
     break;

   case FieldDiscretionOffsetType::RAW :
     break;

   case FieldDiscretionLimitType::RAW :
     break;

   case FieldDiscretionRoundDirection::RAW :
     break;

   case FieldDiscretionScope::RAW :
     break;

   case FieldTargetStrategy::RAW :
     break;

   case FieldTargetStrategyParameters::RAW :
     break;

   case FieldParticipationRate::RAW :
     break;

   case FieldCancellationRights::RAW :
     break;

   case FieldMoneyLaunderingStatus::RAW :
     break;

   case FieldRegistID::RAW :
     break;

   case FieldDesignation::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelReplaceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     break;

   case FieldCrossID::RAW :
     break;

   case FieldOrigCrossID::RAW :
     break;

   case FieldCrossType::RAW :
     break;

   case FieldCrossPrioritization::RAW :
     break;

   case FieldNoSides::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldHandlInst::RAW :
     break;

   case FieldExecInst::RAW :
     break;

   case FieldMinQty::RAW :
     break;

   case FieldMaxFloor::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     break;

   case FieldPrevClosePx::RAW :
     break;

   case FieldLocateReqd::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldOrdType::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldStopPx::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldComplianceID::RAW :
     break;

   case FieldIOIID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldTimeInForce::RAW :
     break;

   case FieldEffectiveTime::RAW :
     break;

   case FieldExpireDate::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldGTBookingInst::RAW :
     break;

   case FieldMaxShow::RAW :
     break;

   case FieldPegOffsetValue::RAW :
     break;

   case FieldPegMoveType::RAW :
     break;

   case FieldPegOffsetType::RAW :
     break;

   case FieldPegLimitType::RAW :
     break;

   case FieldPegRoundDirection::RAW :
     break;

   case FieldPegScope::RAW :
     break;

   case FieldDiscretionInst::RAW :
     break;

   case FieldDiscretionOffsetValue::RAW :
     break;

   case FieldDiscretionMoveType::RAW :
     break;

   case FieldDiscretionOffsetType::RAW :
     break;

   case FieldDiscretionLimitType::RAW :
     break;

   case FieldDiscretionRoundDirection::RAW :
     break;

   case FieldDiscretionScope::RAW :
     break;

   case FieldTargetStrategy::RAW :
     break;

   case FieldTargetStrategyParameters::RAW :
     break;

   case FieldParticipationRate::RAW :
     break;

   case FieldCancellationRights::RAW :
     break;

   case FieldMoneyLaunderingStatus::RAW :
     break;

   case FieldRegistID::RAW :
     break;

   case FieldDesignation::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCrossOrderCancelRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     break;

   case FieldCrossID::RAW :
     break;

   case FieldOrigCrossID::RAW :
     break;

   case FieldCrossType::RAW :
     break;

   case FieldCrossPrioritization::RAW :
     break;

   case FieldNoSides::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypeRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldProduct::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityTypes::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     break;

   case FieldSecurityResponseID::RAW :
     break;

   case FieldSecurityResponseType::RAW :
     break;

   case FieldTotNoSecurityTypes::RAW :
     break;

   case FieldLastFragment::RAW :
     break;

   case FieldNoSecurityTypes::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityTypes::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityListRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     break;

   case FieldSecurityListRequestType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldCurrency::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSecurityList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     break;

   case FieldSecurityResponseID::RAW :
     break;

   case FieldSecurityRequestResult::RAW :
     break;

   case FieldTotNoRelatedSym::RAW :
     break;

   case FieldLastFragment::RAW :
     break;

   case FieldNoRelatedSym::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityListRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     break;

   case FieldSecurityListRequestType::RAW :
     break;

   case FieldUnderlyingSymbol::RAW :
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     break;

   case FieldUnderlyingSecurityID::RAW :
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     break;

   case FieldUnderlyingCFICode::RAW :
     break;

   case FieldUnderlyingSecurityType::RAW :
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     break;

   case FieldUnderlyingMaturityDate::RAW :
     break;

   case FieldUnderlyingPutOrCall::RAW :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     break;

   case FieldUnderlyingIssueDate::RAW :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     break;

   case FieldUnderlyingFactor::RAW :
     break;

   case FieldUnderlyingCreditRating::RAW :
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     break;

   case FieldUnderlyingStrikePrice::RAW :
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     break;

   case FieldUnderlyingOptAttribute::RAW :
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     break;

   case FieldUnderlyingCouponRate::RAW :
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     break;

   case FieldUnderlyingIssuer::RAW :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     break;

   case FieldUnderlyingCPProgram::RAW :
     break;

   case FieldUnderlyingCPRegType::RAW :
     break;

   case FieldUnderlyingCurrency::RAW :
     break;

   case FieldUnderlyingQty::RAW :
     break;

   case FieldUnderlyingPx::RAW :
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     break;

   case FieldUnderlyingEndPrice::RAW :
     break;

   case FieldUnderlyingStartValue::RAW :
     break;

   case FieldUnderlyingCurrentValue::RAW :
     break;

   case FieldUnderlyingEndValue::RAW :
     break;

   case FieldNoUnderlyingStips::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageDerivativeSecurityList::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSecurityReqID::RAW :
     break;

   case FieldSecurityResponseID::RAW :
     break;

   case FieldSecurityRequestResult::RAW :
     break;

   case FieldUnderlyingSymbol::RAW :
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     break;

   case FieldUnderlyingSecurityID::RAW :
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     break;

   case FieldUnderlyingCFICode::RAW :
     break;

   case FieldUnderlyingSecurityType::RAW :
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     break;

   case FieldUnderlyingMaturityDate::RAW :
     break;

   case FieldUnderlyingPutOrCall::RAW :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     break;

   case FieldUnderlyingIssueDate::RAW :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     break;

   case FieldUnderlyingFactor::RAW :
     break;

   case FieldUnderlyingCreditRating::RAW :
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     break;

   case FieldUnderlyingStrikePrice::RAW :
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     break;

   case FieldUnderlyingOptAttribute::RAW :
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     break;

   case FieldUnderlyingCouponRate::RAW :
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     break;

   case FieldUnderlyingIssuer::RAW :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     break;

   case FieldUnderlyingCPProgram::RAW :
     break;

   case FieldUnderlyingCPRegType::RAW :
     break;

   case FieldUnderlyingCurrency::RAW :
     break;

   case FieldUnderlyingQty::RAW :
     break;

   case FieldUnderlyingPx::RAW :
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     break;

   case FieldUnderlyingEndPrice::RAW :
     break;

   case FieldUnderlyingStartValue::RAW :
     break;

   case FieldUnderlyingCurrentValue::RAW :
     break;

   case FieldUnderlyingEndValue::RAW :
     break;

   case FieldNoUnderlyingStips::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldTotNoRelatedSym::RAW :
     break;

   case FieldLastFragment::RAW :
     break;

   case FieldNoRelatedSym::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNewOrderMultileg::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldClOrdID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldClOrdLinkID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldDayBookingInst::RAW :
     break;

   case FieldBookingUnit::RAW :
     break;

   case FieldPreallocMethod::RAW :
     break;

   case FieldAllocID::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldCashMargin::RAW :
     break;

   case FieldClearingFeeIndicator::RAW :
     break;

   case FieldHandlInst::RAW :
     break;

   case FieldExecInst::RAW :
     break;

   case FieldMinQty::RAW :
     break;

   case FieldMaxFloor::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     break;

   case FieldSide::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldOrdType::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldStopPx::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldComplianceID::RAW :
     break;

   case FieldSolicitedFlag::RAW :
     break;

   case FieldIOIID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldTimeInForce::RAW :
     break;

   case FieldEffectiveTime::RAW :
     break;

   case FieldExpireDate::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldGTBookingInst::RAW :
     break;

   case FieldCommission::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCommCurrency::RAW :
     break;

   case FieldFundRenewWaiv::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldOrderRestrictions::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldForexReq::RAW :
     break;

   case FieldSettlCurrency::RAW :
     break;

   case FieldBookingType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldPositionEffect::RAW :
     break;

   case FieldCoveredOrUncovered::RAW :
     break;

   case FieldMaxShow::RAW :
     break;

   case FieldPegOffsetValue::RAW :
     break;

   case FieldPegMoveType::RAW :
     break;

   case FieldPegOffsetType::RAW :
     break;

   case FieldPegLimitType::RAW :
     break;

   case FieldPegRoundDirection::RAW :
     break;

   case FieldPegScope::RAW :
     break;

   case FieldDiscretionInst::RAW :
     break;

   case FieldDiscretionOffsetValue::RAW :
     break;

   case FieldDiscretionMoveType::RAW :
     break;

   case FieldDiscretionOffsetType::RAW :
     break;

   case FieldDiscretionLimitType::RAW :
     break;

   case FieldDiscretionRoundDirection::RAW :
     break;

   case FieldDiscretionScope::RAW :
     break;

   case FieldTargetStrategy::RAW :
     break;

   case FieldTargetStrategyParameters::RAW :
     break;

   case FieldParticipationRate::RAW :
     break;

   case FieldCancellationRights::RAW :
     break;

   case FieldMoneyLaunderingStatus::RAW :
     break;

   case FieldRegistID::RAW :
     break;

   case FieldDesignation::RAW :
     break;

   case FieldMultiLegRptTypeReq::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageMultilegOrderCancelReplace::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldOrderID::RAW :
     break;

   case FieldOrigClOrdID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldClOrdLinkID::RAW :
     break;

   case FieldOrigOrdModTime::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldDayBookingInst::RAW :
     break;

   case FieldBookingUnit::RAW :
     break;

   case FieldPreallocMethod::RAW :
     break;

   case FieldAllocID::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldCashMargin::RAW :
     break;

   case FieldClearingFeeIndicator::RAW :
     break;

   case FieldHandlInst::RAW :
     break;

   case FieldExecInst::RAW :
     break;

   case FieldMinQty::RAW :
     break;

   case FieldMaxFloor::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldProcessCode::RAW :
     break;

   case FieldSide::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldPrevClosePx::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldLocateReqd::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldOrdType::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldStopPx::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldComplianceID::RAW :
     break;

   case FieldSolicitedFlag::RAW :
     break;

   case FieldIOIID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldTimeInForce::RAW :
     break;

   case FieldEffectiveTime::RAW :
     break;

   case FieldExpireDate::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldGTBookingInst::RAW :
     break;

   case FieldCommission::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCommCurrency::RAW :
     break;

   case FieldFundRenewWaiv::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldOrderRestrictions::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldForexReq::RAW :
     break;

   case FieldSettlCurrency::RAW :
     break;

   case FieldBookingType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldPositionEffect::RAW :
     break;

   case FieldCoveredOrUncovered::RAW :
     break;

   case FieldMaxShow::RAW :
     break;

   case FieldPegOffsetValue::RAW :
     break;

   case FieldPegMoveType::RAW :
     break;

   case FieldPegOffsetType::RAW :
     break;

   case FieldPegLimitType::RAW :
     break;

   case FieldPegRoundDirection::RAW :
     break;

   case FieldPegScope::RAW :
     break;

   case FieldDiscretionInst::RAW :
     break;

   case FieldDiscretionOffsetValue::RAW :
     break;

   case FieldDiscretionMoveType::RAW :
     break;

   case FieldDiscretionOffsetType::RAW :
     break;

   case FieldDiscretionLimitType::RAW :
     break;

   case FieldDiscretionRoundDirection::RAW :
     break;

   case FieldDiscretionScope::RAW :
     break;

   case FieldTargetStrategy::RAW :
     break;

   case FieldTargetStrategyParameters::RAW :
     break;

   case FieldParticipationRate::RAW :
     break;

   case FieldCancellationRights::RAW :
     break;

   case FieldMoneyLaunderingStatus::RAW :
     break;

   case FieldRegistID::RAW :
     break;

   case FieldDesignation::RAW :
     break;

   case FieldMultiLegRptTypeReq::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW :
     break;

   case FieldTradeRequestType::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldTradeReportID::RAW :
     break;

   case FieldSecondaryTradeReportID::RAW :
     break;

   case FieldExecID::RAW :
     break;

   case FieldExecType::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldMatchStatus::RAW :
     break;

   case FieldTrdType::RAW :
     break;

   case FieldTrdSubType::RAW :
     break;

   case FieldTransferReason::RAW :
     break;

   case FieldSecondaryTrdType::RAW :
     break;

   case FieldTradeLinkID::RAW :
     break;

   case FieldTrdMatchID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoDates::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDates::skip( fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldTimeBracket::RAW :
     break;

   case FieldSide::RAW :
     break;

   case FieldMultiLegReportingType::RAW :
     break;

   case FieldTradeInputSource::RAW :
     break;

   case FieldTradeInputDevice::RAW :
     break;

   case FieldResponseTransportType::RAW :
     break;

   case FieldResponseDestination::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW :
     break;

   case FieldTradeReportTransType::RAW :
     break;

   case FieldTradeReportType::RAW :
     break;

   case FieldTradeRequestID::RAW :
     break;

   case FieldTrdType::RAW :
     break;

   case FieldTrdSubType::RAW :
     break;

   case FieldSecondaryTrdType::RAW :
     break;

   case FieldTransferReason::RAW :
     break;

   case FieldExecType::RAW :
     break;

   case FieldTotNumTradeReports::RAW :
     break;

   case FieldLastRptRequested::RAW :
     break;

   case FieldUnsolicitedIndicator::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldTradeReportRefID::RAW :
     break;

   case FieldSecondaryTradeReportRefID::RAW :
     break;

   case FieldSecondaryTradeReportID::RAW :
     break;

   case FieldTradeLinkID::RAW :
     break;

   case FieldTrdMatchID::RAW :
     break;

   case FieldExecID::RAW :
     break;

   case FieldOrdStatus::RAW :
     break;

   case FieldSecondaryExecID::RAW :
     break;

   case FieldExecRestatementReason::RAW :
     break;

   case FieldPreviouslyReported::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingTradingSessionID::RAW :
     break;

   case FieldUnderlyingTradingSessionSubID::RAW :
     break;

   case FieldLastQty::RAW :
     break;

   case FieldLastPx::RAW :
     break;

   case FieldLastParPx::RAW :
     break;

   case FieldLastSpotRate::RAW :
     break;

   case FieldLastForwardPoints::RAW :
     break;

   case FieldLastMkt::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldAvgPx::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldAvgPxIndicator::RAW :
     break;

   case FieldNoPosAmt::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW :
     break;

   case FieldTradeLegRefID::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoTrdRegTimestamps::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldMatchStatus::RAW :
     break;

   case FieldMatchType::RAW :
     break;

   case FieldNoSides::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSides::skip( fix+pos, len - pos );
     break;

   case FieldCopyMsgIndicator::RAW :
     break;

   case FieldPublishTrdIndicator::RAW :
     break;

   case FieldShortSaleReason::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageOrderMassStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldMassStatusReqID::RAW :
     break;

   case FieldMassStatusReqType::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldUnderlyingSymbol::RAW :
     break;

   case FieldUnderlyingSymbolSfx::RAW :
     break;

   case FieldUnderlyingSecurityID::RAW :
     break;

   case FieldUnderlyingSecurityIDSource::RAW :
     break;

   case FieldNoUnderlyingSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldUnderlyingProduct::RAW :
     break;

   case FieldUnderlyingCFICode::RAW :
     break;

   case FieldUnderlyingSecurityType::RAW :
     break;

   case FieldUnderlyingSecuritySubType::RAW :
     break;

   case FieldUnderlyingMaturityMonthYear::RAW :
     break;

   case FieldUnderlyingMaturityDate::RAW :
     break;

   case FieldUnderlyingPutOrCall::RAW :
     break;

   case FieldUnderlyingCouponPaymentDate::RAW :
     break;

   case FieldUnderlyingIssueDate::RAW :
     break;

   case FieldUnderlyingRepoCollateralSecurityType::RAW :
     break;

   case FieldUnderlyingRepurchaseTerm::RAW :
     break;

   case FieldUnderlyingRepurchaseRate::RAW :
     break;

   case FieldUnderlyingFactor::RAW :
     break;

   case FieldUnderlyingCreditRating::RAW :
     break;

   case FieldUnderlyingInstrRegistry::RAW :
     break;

   case FieldUnderlyingCountryOfIssue::RAW :
     break;

   case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     break;

   case FieldUnderlyingLocaleOfIssue::RAW :
     break;

   case FieldUnderlyingRedemptionDate::RAW :
     break;

   case FieldUnderlyingStrikePrice::RAW :
     break;

   case FieldUnderlyingStrikeCurrency::RAW :
     break;

   case FieldUnderlyingOptAttribute::RAW :
     break;

   case FieldUnderlyingContractMultiplier::RAW :
     break;

   case FieldUnderlyingCouponRate::RAW :
     break;

   case FieldUnderlyingSecurityExchange::RAW :
     break;

   case FieldUnderlyingIssuer::RAW :
     break;

   case FieldEncodedUnderlyingIssuerLen::RAW :
     break;

   case FieldEncodedUnderlyingIssuer::RAW :
     break;

   case FieldUnderlyingSecurityDesc::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDescLen::RAW :
     break;

   case FieldEncodedUnderlyingSecurityDesc::RAW :
     break;

   case FieldUnderlyingCPProgram::RAW :
     break;

   case FieldUnderlyingCPRegType::RAW :
     break;

   case FieldUnderlyingCurrency::RAW :
     break;

   case FieldUnderlyingQty::RAW :
     break;

   case FieldUnderlyingPx::RAW :
     break;

   case FieldUnderlyingDirtyPrice::RAW :
     break;

   case FieldUnderlyingEndPrice::RAW :
     break;

   case FieldUnderlyingStartValue::RAW :
     break;

   case FieldUnderlyingCurrentValue::RAW :
     break;

   case FieldUnderlyingEndValue::RAW :
     break;

   case FieldNoUnderlyingStips::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyingStips::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteRequestReject::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteReqID::RAW :
     break;

   case FieldRFQReqID::RAW :
     break;

   case FieldQuoteRequestRejectReason::RAW :
     break;

   case FieldNoRelatedSym::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRFQRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldRFQReqID::RAW :
     break;

   case FieldNoRelatedSym::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupRelatedSym::skip( fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteStatusReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteStatusReqID::RAW :
     break;

   case FieldQuoteReqID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldQuoteRespID::RAW :
     break;

   case FieldQuoteType::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldSettlDate2::RAW :
     break;

   case FieldOrderQty2::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoQuoteQualifiers::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldBidPx::RAW :
     break;

   case FieldOfferPx::RAW :
     break;

   case FieldMktBidPx::RAW :
     break;

   case FieldMktOfferPx::RAW :
     break;

   case FieldMinBidSize::RAW :
     break;

   case FieldBidSize::RAW :
     break;

   case FieldMinOfferSize::RAW :
     break;

   case FieldOfferSize::RAW :
     break;

   case FieldValidUntilTime::RAW :
     break;

   case FieldBidSpotRate::RAW :
     break;

   case FieldOfferSpotRate::RAW :
     break;

   case FieldBidForwardPoints::RAW :
     break;

   case FieldOfferForwardPoints::RAW :
     break;

   case FieldMidPx::RAW :
     break;

   case FieldBidYield::RAW :
     break;

   case FieldMidYield::RAW :
     break;

   case FieldOfferYield::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldOrdType::RAW :
     break;

   case FieldBidForwardPoints2::RAW :
     break;

   case FieldOfferForwardPoints2::RAW :
     break;

   case FieldSettlCurrBidFxRate::RAW :
     break;

   case FieldSettlCurrOfferFxRate::RAW :
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCommission::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldQuoteStatus::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageQuoteResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldQuoteRespID::RAW :
     break;

   case FieldQuoteID::RAW :
     break;

   case FieldQuoteRespType::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldIOIID::RAW :
     break;

   case FieldQuoteType::RAW :
     break;

   case FieldNoQuoteQualifiers::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupQuoteQualifiers::skip( fix+pos, len - pos );
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldOrderQty::RAW :
     break;

   case FieldCashOrderQty::RAW :
     break;

   case FieldOrderPercent::RAW :
     break;

   case FieldRoundingDirection::RAW :
     break;

   case FieldRoundingModulus::RAW :
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldSettlDate2::RAW :
     break;

   case FieldOrderQty2::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldBidPx::RAW :
     break;

   case FieldOfferPx::RAW :
     break;

   case FieldMktBidPx::RAW :
     break;

   case FieldMktOfferPx::RAW :
     break;

   case FieldMinBidSize::RAW :
     break;

   case FieldBidSize::RAW :
     break;

   case FieldMinOfferSize::RAW :
     break;

   case FieldOfferSize::RAW :
     break;

   case FieldValidUntilTime::RAW :
     break;

   case FieldBidSpotRate::RAW :
     break;

   case FieldOfferSpotRate::RAW :
     break;

   case FieldBidForwardPoints::RAW :
     break;

   case FieldOfferForwardPoints::RAW :
     break;

   case FieldMidPx::RAW :
     break;

   case FieldBidYield::RAW :
     break;

   case FieldMidYield::RAW :
     break;

   case FieldOfferYield::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldOrdType::RAW :
     break;

   case FieldBidForwardPoints2::RAW :
     break;

   case FieldOfferForwardPoints2::RAW :
     break;

   case FieldSettlCurrBidFxRate::RAW :
     break;

   case FieldSettlCurrOfferFxRate::RAW :
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     break;

   case FieldCommission::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldExDestination::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmation::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW :
     break;

   case FieldConfirmRefID::RAW :
     break;

   case FieldConfirmReqID::RAW :
     break;

   case FieldConfirmTransType::RAW :
     break;

   case FieldConfirmType::RAW :
     break;

   case FieldCopyMsgIndicator::RAW :
     break;

   case FieldLegalConfirm::RAW :
     break;

   case FieldConfirmStatus::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldNoOrders::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldAllocID::RAW :
     break;

   case FieldSecondaryAllocID::RAW :
     break;

   case FieldIndividualAllocID::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldNoTrdRegTimestamps::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldAllocQty::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldSide::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldLastMkt::RAW :
     break;

   case FieldNoCapacities::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCapacities::skip( fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW :
     break;

   case FieldAllocAcctIDSource::RAW :
     break;

   case FieldAllocAccountType::RAW :
     break;

   case FieldAvgPx::RAW :
     break;

   case FieldAvgPxPrecision::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldAvgParPx::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldReportedPx::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldProcessCode::RAW :
     break;

   case FieldGrossTradeAmt::RAW :
     break;

   case FieldNumDaysInterest::RAW :
     break;

   case FieldExDate::RAW :
     break;

   case FieldAccruedInterestRate::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldInterestAtMaturity::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldConcession::RAW :
     break;

   case FieldTotalTakedown::RAW :
     break;

   case FieldNetMoney::RAW :
     break;

   case FieldMaturityNetMoney::RAW :
     break;

   case FieldSettlCurrAmt::RAW :
     break;

   case FieldSettlCurrency::RAW :
     break;

   case FieldSettlCurrFxRate::RAW :
     break;

   case FieldSettlCurrFxRateCalc::RAW :
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldSettlDeliveryType::RAW :
     break;

   case FieldStandInstDbType::RAW :
     break;

   case FieldStandInstDbName::RAW :
     break;

   case FieldStandInstDbID::RAW :
     break;

   case FieldNoDlvyInst::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldCommission::RAW :
     break;

   case FieldCommType::RAW :
     break;

   case FieldCommCurrency::RAW :
     break;

   case FieldFundRenewWaiv::RAW :
     break;

   case FieldSharedCommission::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldNoMiscFees::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW :
     break;

   case FieldPosTransType::RAW :
     break;

   case FieldPosMaintAction::RAW :
     break;

   case FieldOrigPosReqRefID::RAW :
     break;

   case FieldPosMaintRptRefID::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoPositions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW :
     break;

   case FieldContraryInstructionIndicator::RAW :
     break;

   case FieldPriorSpreadIndicator::RAW :
     break;

   case FieldThresholdAmount::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionMaintenanceReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW :
     break;

   case FieldPosTransType::RAW :
     break;

   case FieldPosReqID::RAW :
     break;

   case FieldPosMaintAction::RAW :
     break;

   case FieldOrigPosReqRefID::RAW :
     break;

   case FieldPosMaintStatus::RAW :
     break;

   case FieldPosMaintResult::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoPositions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldAdjustmentType::RAW :
     break;

   case FieldThresholdAmount::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositions::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosReqID::RAW :
     break;

   case FieldPosReqType::RAW :
     break;

   case FieldMatchStatus::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldNoTradingSessions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTradingSessions::skip( fix+pos, len - pos );
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldResponseTransportType::RAW :
     break;

   case FieldResponseDestination::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageRequestForPositionsAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW :
     break;

   case FieldPosReqID::RAW :
     break;

   case FieldTotalNumPosReports::RAW :
     break;

   case FieldUnsolicitedIndicator::RAW :
     break;

   case FieldPosReqResult::RAW :
     break;

   case FieldPosReqStatus::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW :
     break;

   case FieldResponseDestination::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessagePositionReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldPosMaintRptID::RAW :
     break;

   case FieldPosReqID::RAW :
     break;

   case FieldPosReqType::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldTotalNumPosReports::RAW :
     break;

   case FieldUnsolicitedIndicator::RAW :
     break;

   case FieldPosReqResult::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldSettlPrice::RAW :
     break;

   case FieldSettlPriceType::RAW :
     break;

   case FieldPriorSettlPrice::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldRegistStatus::RAW :
     break;

   case FieldDeliveryDate::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportRequestAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeRequestID::RAW :
     break;

   case FieldTradeRequestType::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldTotNumTradeReports::RAW :
     break;

   case FieldTradeRequestResult::RAW :
     break;

   case FieldTradeRequestStatus::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldMultiLegReportingType::RAW :
     break;

   case FieldResponseTransportType::RAW :
     break;

   case FieldResponseDestination::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageTradeCaptureReportAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldTradeReportID::RAW :
     break;

   case FieldTradeReportTransType::RAW :
     break;

   case FieldTradeReportType::RAW :
     break;

   case FieldTrdType::RAW :
     break;

   case FieldTrdSubType::RAW :
     break;

   case FieldSecondaryTrdType::RAW :
     break;

   case FieldTransferReason::RAW :
     break;

   case FieldExecType::RAW :
     break;

   case FieldTradeReportRefID::RAW :
     break;

   case FieldSecondaryTradeReportRefID::RAW :
     break;

   case FieldTrdRptStatus::RAW :
     break;

   case FieldTradeReportRejectReason::RAW :
     break;

   case FieldSecondaryTradeReportID::RAW :
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldTradeLinkID::RAW :
     break;

   case FieldTrdMatchID::RAW :
     break;

   case FieldExecID::RAW :
     break;

   case FieldSecondaryExecID::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoTrdRegTimestamps::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldResponseTransportType::RAW :
     break;

   case FieldResponseDestination::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldClearingFeeIndicator::RAW :
     break;

   case FieldOrderCapacity::RAW :
     break;

   case FieldOrderRestrictions::RAW :
     break;

   case FieldCustOrderCapacity::RAW :
     break;

   case FieldAccount::RAW :
     break;

   case FieldAcctIDSource::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldPositionEffect::RAW :
     break;

   case FieldPreallocMethod::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW :
     break;

   case FieldAllocID::RAW :
     break;

   case FieldAllocTransType::RAW :
     break;

   case FieldAllocReportRefID::RAW :
     break;

   case FieldAllocCancReplaceReason::RAW :
     break;

   case FieldSecondaryAllocID::RAW :
     break;

   case FieldAllocReportType::RAW :
     break;

   case FieldAllocStatus::RAW :
     break;

   case FieldAllocRejCode::RAW :
     break;

   case FieldRefAllocID::RAW :
     break;

   case FieldAllocIntermedReqType::RAW :
     break;

   case FieldAllocLinkID::RAW :
     break;

   case FieldAllocLinkType::RAW :
     break;

   case FieldBookingRefID::RAW :
     break;

   case FieldAllocNoOrdersType::RAW :
     break;

   case FieldNoOrders::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldNoExecs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldPreviouslyReported::RAW :
     break;

   case FieldReversalIndicator::RAW :
     break;

   case FieldMatchType::RAW :
     break;

   case FieldSide::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldDeliveryForm::RAW :
     break;

   case FieldPctAtRisk::RAW :
     break;

   case FieldNoInstrAttrib::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupInstrAttrib::skip( fix+pos, len - pos );
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldLastMkt::RAW :
     break;

   case FieldTradeOriginationDate::RAW :
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldAvgPx::RAW :
     break;

   case FieldAvgParPx::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldAvgPxPrecision::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldSettlType::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldBookingType::RAW :
     break;

   case FieldGrossTradeAmt::RAW :
     break;

   case FieldConcession::RAW :
     break;

   case FieldTotalTakedown::RAW :
     break;

   case FieldNetMoney::RAW :
     break;

   case FieldPositionEffect::RAW :
     break;

   case FieldAutoAcceptIndicator::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldNumDaysInterest::RAW :
     break;

   case FieldAccruedInterestRate::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldTotalAccruedInterestAmt::RAW :
     break;

   case FieldInterestAtMaturity::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldLegalConfirm::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldYieldType::RAW :
     break;

   case FieldYield::RAW :
     break;

   case FieldYieldCalcDate::RAW :
     break;

   case FieldYieldRedemptionDate::RAW :
     break;

   case FieldYieldRedemptionPrice::RAW :
     break;

   case FieldYieldRedemptionPriceType::RAW :
     break;

   case FieldTotNoAllocs::RAW :
     break;

   case FieldLastFragment::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAllocationReportAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAllocReportID::RAW :
     break;

   case FieldAllocID::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldSecondaryAllocID::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldAllocStatus::RAW :
     break;

   case FieldAllocRejCode::RAW :
     break;

   case FieldAllocReportType::RAW :
     break;

   case FieldAllocIntermedReqType::RAW :
     break;

   case FieldMatchStatus::RAW :
     break;

   case FieldProduct::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldNoAllocs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupAllocs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmID::RAW :
     break;

   case FieldTradeDate::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldAffirmStatus::RAW :
     break;

   case FieldConfirmRejReason::RAW :
     break;

   case FieldMatchStatus::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageSettlementInstructionRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldSettlInstReqID::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAllocAccount::RAW :
     break;

   case FieldAllocAcctIDSource::RAW :
     break;

   case FieldSide::RAW :
     break;

   case FieldProduct::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldEffectiveTime::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldLastUpdateTime::RAW :
     break;

   case FieldStandInstDbType::RAW :
     break;

   case FieldStandInstDbName::RAW :
     break;

   case FieldStandInstDbID::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageAssignmentReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldAsgnRptID::RAW :
     break;

   case FieldTotNumAssignmentReports::RAW :
     break;

   case FieldLastRptRequested::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldNoPositions::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPositions::skip( fix+pos, len - pos );
     break;

   case FieldNoPosAmt::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPosAmt::skip( fix+pos, len - pos );
     break;

   case FieldThresholdAmount::RAW :
     break;

   case FieldSettlPrice::RAW :
     break;

   case FieldSettlPriceType::RAW :
     break;

   case FieldUnderlyingSettlPrice::RAW :
     break;

   case FieldExpireDate::RAW :
     break;

   case FieldAssignmentMethod::RAW :
     break;

   case FieldAssignmentUnit::RAW :
     break;

   case FieldOpenInterest::RAW :
     break;

   case FieldExerciseMethod::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollReqID::RAW :
     break;

   case FieldCollAsgnReason::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldNoExecs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     break;

   case FieldTotalNetValue::RAW :
     break;

   case FieldCashOutstanding::RAW :
     break;

   case FieldNoTrdRegTimestamps::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldNoMiscFees::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralAssignment::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollAsgnID::RAW :
     break;

   case FieldCollReqID::RAW :
     break;

   case FieldCollAsgnReason::RAW :
     break;

   case FieldCollAsgnTransType::RAW :
     break;

   case FieldCollAsgnRefID::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldExpireTime::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldNoExecs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     break;

   case FieldTotalNetValue::RAW :
     break;

   case FieldCashOutstanding::RAW :
     break;

   case FieldNoTrdRegTimestamps::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldNoMiscFees::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW :
     break;

   case FieldStandInstDbType::RAW :
     break;

   case FieldStandInstDbName::RAW :
     break;

   case FieldStandInstDbID::RAW :
     break;

   case FieldNoDlvyInst::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRespID::RAW :
     break;

   case FieldCollAsgnID::RAW :
     break;

   case FieldCollReqID::RAW :
     break;

   case FieldCollAsgnReason::RAW :
     break;

   case FieldCollAsgnTransType::RAW :
     break;

   case FieldCollAsgnRespType::RAW :
     break;

   case FieldCollAsgnRejectReason::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldNoExecs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     break;

   case FieldTotalNetValue::RAW :
     break;

   case FieldCashOutstanding::RAW :
     break;

   case FieldNoTrdRegTimestamps::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldNoMiscFees::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralReport::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollRptID::RAW :
     break;

   case FieldCollInquiryID::RAW :
     break;

   case FieldCollStatus::RAW :
     break;

   case FieldTotNumReports::RAW :
     break;

   case FieldLastRptRequested::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldNoExecs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     break;

   case FieldTotalNetValue::RAW :
     break;

   case FieldCashOutstanding::RAW :
     break;

   case FieldNoTrdRegTimestamps::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldNoMiscFees::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupMiscFees::skip( fix+pos, len - pos );
     break;

   case FieldPrice::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW :
     break;

   case FieldStandInstDbType::RAW :
     break;

   case FieldStandInstDbName::RAW :
     break;

   case FieldStandInstDbID::RAW :
     break;

   case FieldNoDlvyInst::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiry::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW :
     break;

   case FieldNoCollInquiryQualifier::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::skip( fix+pos, len - pos );
     break;

   case FieldSubscriptionRequestType::RAW :
     break;

   case FieldResponseTransportType::RAW :
     break;

   case FieldResponseDestination::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldNoExecs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldMarginExcess::RAW :
     break;

   case FieldTotalNetValue::RAW :
     break;

   case FieldCashOutstanding::RAW :
     break;

   case FieldNoTrdRegTimestamps::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrdRegTimestamps::skip( fix+pos, len - pos );
     break;

   case FieldSide::RAW :
     break;

   case FieldPrice::RAW :
     break;

   case FieldPriceType::RAW :
     break;

   case FieldAccruedInterestAmt::RAW :
     break;

   case FieldEndAccruedInterestAmt::RAW :
     break;

   case FieldStartCash::RAW :
     break;

   case FieldEndCash::RAW :
     break;

   case FieldSpread::RAW :
     break;

   case FieldBenchmarkCurveCurrency::RAW :
     break;

   case FieldBenchmarkCurveName::RAW :
     break;

   case FieldBenchmarkCurvePoint::RAW :
     break;

   case FieldBenchmarkPrice::RAW :
     break;

   case FieldBenchmarkPriceType::RAW :
     break;

   case FieldBenchmarkSecurityID::RAW :
     break;

   case FieldBenchmarkSecurityIDSource::RAW :
     break;

   case FieldNoStipulations::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupStipulations::skip( fix+pos, len - pos );
     break;

   case FieldSettlDeliveryType::RAW :
     break;

   case FieldStandInstDbType::RAW :
     break;

   case FieldStandInstDbName::RAW :
     break;

   case FieldStandInstDbID::RAW :
     break;

   case FieldNoDlvyInst::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupDlvyInst::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkRequestType::RAW :
     break;

   case FieldNetworkRequestID::RAW :
     break;

   case FieldNoCompIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageNetworkCounterpartySystemStatusResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldNetworkStatusResponseType::RAW :
     break;

   case FieldNetworkRequestID::RAW :
     break;

   case FieldNetworkResponseID::RAW :
     break;

   case FieldLastNetworkResponseID::RAW :
     break;

   case FieldNoCompIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCompIDs::skip( fix+pos, len - pos );
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW :
     break;

   case FieldUserRequestType::RAW :
     break;

   case FieldUsername::RAW :
     break;

   case FieldPassword::RAW :
     break;

   case FieldNewPassword::RAW :
     break;

   case FieldRawDataLength::RAW :
     break;

   case FieldRawData::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageUserResponse::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldUserRequestID::RAW :
     break;

   case FieldUsername::RAW :
     break;

   case FieldUserStatus::RAW :
     break;

   case FieldUserStatusText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageCollateralInquiryAck::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldCollInquiryID::RAW :
     break;

   case FieldCollInquiryStatus::RAW :
     break;

   case FieldCollInquiryResult::RAW :
     break;

   case FieldNoCollInquiryQualifier::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupCollInquiryQualifier::skip( fix+pos, len - pos );
     break;

   case FieldTotNumReports::RAW :
     break;

   case FieldNoPartyIDs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupPartyIDs::skip( fix+pos, len - pos );
     break;

   case FieldAccount::RAW :
     break;

   case FieldAccountType::RAW :
     break;

   case FieldClOrdID::RAW :
     break;

   case FieldOrderID::RAW :
     break;

   case FieldSecondaryOrderID::RAW :
     break;

   case FieldSecondaryClOrdID::RAW :
     break;

   case FieldNoExecs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupExecs::skip( fix+pos, len - pos );
     break;

   case FieldNoTrades::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupTrades::skip( fix+pos, len - pos );
     break;

   case FieldSymbol::RAW :
     break;

   case FieldSymbolSfx::RAW :
     break;

   case FieldSecurityID::RAW :
     break;

   case FieldSecurityIDSource::RAW :
     break;

   case FieldNoSecurityAltID::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupSecurityAltID::skip( fix+pos, len - pos );
     break;

   case FieldProduct::RAW :
     break;

   case FieldCFICode::RAW :
     break;

   case FieldSecurityType::RAW :
     break;

   case FieldSecuritySubType::RAW :
     break;

   case FieldMaturityMonthYear::RAW :
     break;

   case FieldMaturityDate::RAW :
     break;

   case FieldPutOrCall::RAW :
     break;

   case FieldCouponPaymentDate::RAW :
     break;

   case FieldIssueDate::RAW :
     break;

   case FieldRepoCollateralSecurityType::RAW :
     break;

   case FieldRepurchaseTerm::RAW :
     break;

   case FieldRepurchaseRate::RAW :
     break;

   case FieldFactor::RAW :
     break;

   case FieldCreditRating::RAW :
     break;

   case FieldInstrRegistry::RAW :
     break;

   case FieldCountryOfIssue::RAW :
     break;

   case FieldStateOrProvinceOfIssue::RAW :
     break;

   case FieldLocaleOfIssue::RAW :
     break;

   case FieldRedemptionDate::RAW :
     break;

   case FieldStrikePrice::RAW :
     break;

   case FieldStrikeCurrency::RAW :
     break;

   case FieldOptAttribute::RAW :
     break;

   case FieldContractMultiplier::RAW :
     break;

   case FieldCouponRate::RAW :
     break;

   case FieldSecurityExchange::RAW :
     break;

   case FieldIssuer::RAW :
     break;

   case FieldEncodedIssuerLen::RAW :
     break;

   case FieldEncodedIssuer::RAW :
     break;

   case FieldSecurityDesc::RAW :
     break;

   case FieldEncodedSecurityDescLen::RAW :
     break;

   case FieldEncodedSecurityDesc::RAW :
     break;

   case FieldPool::RAW :
     break;

   case FieldContractSettlMonth::RAW :
     break;

   case FieldCPProgram::RAW :
     break;

   case FieldCPRegType::RAW :
     break;

   case FieldNoEvents::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupEvents::skip( fix+pos, len - pos );
     break;

   case FieldDatedDate::RAW :
     break;

   case FieldInterestAccrualDate::RAW :
     break;

   case FieldAgreementDesc::RAW :
     break;

   case FieldAgreementID::RAW :
     break;

   case FieldAgreementDate::RAW :
     break;

   case FieldAgreementCurrency::RAW :
     break;

   case FieldTerminationType::RAW :
     break;

   case FieldStartDate::RAW :
     break;

   case FieldEndDate::RAW :
     break;

   case FieldDeliveryType::RAW :
     break;

   case FieldMarginRatio::RAW :
     break;

   case FieldSettlDate::RAW :
     break;

   case FieldQuantity::RAW :
     break;

   case FieldQtyType::RAW :
     break;

   case FieldCurrency::RAW :
     break;

   case FieldNoLegs::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupLegs::skip( fix+pos, len - pos );
     break;

   case FieldNoUnderlyings::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupUnderlyings::skip( fix+pos, len - pos );
     break;

   case FieldTradingSessionID::RAW :
     break;

   case FieldTradingSessionSubID::RAW :
     break;

   case FieldSettlSessID::RAW :
     break;

   case FieldSettlSessSubID::RAW :
     break;

   case FieldClearingBusinessDate::RAW :
     break;

   case FieldResponseTransportType::RAW :
     break;

   case FieldResponseDestination::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}

offset_t MessageConfirmationRequest::skip( const char * fix, unsigned len ) const
{
offset_t prev = 0, pos = 0; 
gotoNextField( fix, pos );
while( pos < (int)len ) {
   bool isGroupStart = false;
   prev = pos;
   raw_tag_t tag = nextRawTag( fix+pos, pos );
   switch( tag ){

   case FieldConfirmReqID::RAW :
     break;

   case FieldConfirmType::RAW :
     break;

   case FieldNoOrders::RAW :
     isGroupStart = true;
     gotoNextField( fix, pos );
     pos += GroupOrders::skip( fix+pos, len - pos );
     break;

   case FieldAllocID::RAW :
     break;

   case FieldSecondaryAllocID::RAW :
     break;

   case FieldIndividualAllocID::RAW :
     break;

   case FieldTransactTime::RAW :
     break;

   case FieldAllocAccount::RAW :
     break;

   case FieldAllocAcctIDSource::RAW :
     break;

   case FieldAllocAccountType::RAW :
     break;

   case FieldText::RAW :
     break;

   case FieldEncodedTextLen::RAW :
     break;

   case FieldEncodedText::RAW :
     break;

   case FieldCheckSum::RAW :
     gotoNextField( fix, pos );
     return pos;

   default: FIXPP_PRINT_UNKNOWN_FIELD
     return prev;
   }
   if( ! isGroupStart ) gotoNextField( fix, pos );
 }
 return pos;
}


// ---------------------------------- fields ---------------------------------

GetDepthMethod MessageHeader::groupGetDepthMethods[] = {
  GroupHops::getFieldDepth,
  nullptr };

GetDepthMethod MessageHeartbeat::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageTestRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageResendRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageReject::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageSequenceReset::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageLogout::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageIOI::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupIOIQualifiers::getFieldDepth,
  GroupRoutingIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageAdvertisement::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageExecutionReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupContraBrokers::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupContAmts::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderCancelReject::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageLogon::groupGetDepthMethods[] = {
  GroupMsgTypes::getFieldDepth,
  nullptr };

GetDepthMethod MessageNews::groupGetDepthMethods[] = {
  GroupRoutingIDs::getFieldDepth,
  GroupRelatedSym::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLinesOfText::getFieldDepth,
  nullptr };

GetDepthMethod MessageEmail::groupGetDepthMethods[] = {
  GroupRoutingIDs::getFieldDepth,
  GroupRelatedSym::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupLinesOfText::getFieldDepth,
  nullptr };

GetDepthMethod MessageNewOrderSingle::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageNewOrderList::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderCancelRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderCancelReplaceRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderStatusRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageAllocationInstruction::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageListCancelRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageListExecute::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageListStatusRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageListStatus::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  nullptr };

GetDepthMethod MessageAllocationInstructionAck::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageDontKnowTrade::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteRequest::groupGetDepthMethods[] = {
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuote::groupGetDepthMethods[] = {
  GroupQuoteQualifiers::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSettlementInstructions::groupGetDepthMethods[] = {
  GroupSettlInst::getFieldDepth,
  nullptr };

GetDepthMethod MessageMarketDataRequest::groupGetDepthMethods[] = {
  GroupMDEntryTypes::getFieldDepth,
  GroupRelatedSym::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  nullptr };

GetDepthMethod MessageMarketDataSnapshotFullRefresh::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupMDEntries::getFieldDepth,
  nullptr };

GetDepthMethod MessageMarketDataIncrementalRefresh::groupGetDepthMethods[] = {
  GroupMDEntries::getFieldDepth,
  nullptr };

GetDepthMethod MessageMarketDataRequestReject::groupGetDepthMethods[] = {
  GroupAltMDSource::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteCancel::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupQuoteEntries::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteStatusRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageMassQuoteAcknowledgement::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupQuoteSets::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityDefinitionRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityDefinition::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityStatusRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityStatus::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradingSessionStatusRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageTradingSessionStatus::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageMassQuote::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupQuoteSets::getFieldDepth,
  nullptr };

GetDepthMethod MessageBusinessMessageReject::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageBidRequest::groupGetDepthMethods[] = {
  GroupBidDescriptors::getFieldDepth,
  GroupBidComponents::getFieldDepth,
  nullptr };

GetDepthMethod MessageBidResponse::groupGetDepthMethods[] = {
  GroupBidComponents::getFieldDepth,
  nullptr };

GetDepthMethod MessageListStrikePrice::groupGetDepthMethods[] = {
  GroupStrikes::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageXMLnonFIX::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageRegistrationInstructions::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupRegistDtls::getFieldDepth,
  GroupDistribInsts::getFieldDepth,
  nullptr };

GetDepthMethod MessageRegistrationInstructionsResponse::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderMassCancelRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderMassCancelReport::groupGetDepthMethods[] = {
  GroupAffectedOrders::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  nullptr };

GetDepthMethod MessageNewOrderCross::groupGetDepthMethods[] = {
  GroupSides::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageCrossOrderCancelReplaceRequest::groupGetDepthMethods[] = {
  GroupSides::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageCrossOrderCancelRequest::groupGetDepthMethods[] = {
  GroupSides::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityTypeRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageSecurityTypes::groupGetDepthMethods[] = {
  GroupSecurityTypes::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityListRequest::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageSecurityList::groupGetDepthMethods[] = {
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageDerivativeSecurityListRequest::groupGetDepthMethods[] = {
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  nullptr };

GetDepthMethod MessageDerivativeSecurityList::groupGetDepthMethods[] = {
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageNewOrderMultileg::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageMultilegOrderCancelReplace::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradeCaptureReportRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupDates::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradeCaptureReport::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupPosAmt::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupSides::getFieldDepth,
  nullptr };

GetDepthMethod MessageOrderMassStatusRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyingSecurityAltID::getFieldDepth,
  GroupUnderlyingStips::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteRequestReject::groupGetDepthMethods[] = {
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageRFQRequest::groupGetDepthMethods[] = {
  GroupRelatedSym::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteStatusReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupQuoteQualifiers::getFieldDepth,
  nullptr };

GetDepthMethod MessageQuoteResponse::groupGetDepthMethods[] = {
  GroupQuoteQualifiers::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageConfirmation::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupOrders::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupCapacities::getFieldDepth,
  GroupDlvyInst::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  nullptr };

GetDepthMethod MessagePositionMaintenanceRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupPositions::getFieldDepth,
  nullptr };

GetDepthMethod MessagePositionMaintenanceReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  GroupPositions::getFieldDepth,
  GroupPosAmt::getFieldDepth,
  nullptr };

GetDepthMethod MessageRequestForPositions::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTradingSessions::getFieldDepth,
  nullptr };

GetDepthMethod MessageRequestForPositionsAck::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessagePositionReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupPositions::getFieldDepth,
  GroupPosAmt::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradeCaptureReportRequestAck::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  nullptr };

GetDepthMethod MessageTradeCaptureReportAck::groupGetDepthMethods[] = {
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageAllocationReport::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupInstrAttrib::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageAllocationReportAck::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupAllocs::getFieldDepth,
  nullptr };

GetDepthMethod MessageConfirmationAck::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageSettlementInstructionRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageAssignmentReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupPositions::getFieldDepth,
  GroupPosAmt::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralRequest::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralAssignment::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupDlvyInst::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralResponse::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  GroupStipulations::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralReport::groupGetDepthMethods[] = {
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupMiscFees::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupDlvyInst::getFieldDepth,
  nullptr };

GetDepthMethod MessageCollateralInquiry::groupGetDepthMethods[] = {
  GroupCollInquiryQualifier::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  GroupTrdRegTimestamps::getFieldDepth,
  GroupStipulations::getFieldDepth,
  GroupDlvyInst::getFieldDepth,
  nullptr };

GetDepthMethod MessageNetworkCounterpartySystemStatusRequest::groupGetDepthMethods[] = {
  GroupCompIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageNetworkCounterpartySystemStatusResponse::groupGetDepthMethods[] = {
  GroupCompIDs::getFieldDepth,
  nullptr };

GetDepthMethod MessageUserRequest::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageUserResponse::groupGetDepthMethods[] = {
  nullptr };

GetDepthMethod MessageCollateralInquiryAck::groupGetDepthMethods[] = {
  GroupCollInquiryQualifier::getFieldDepth,
  GroupPartyIDs::getFieldDepth,
  GroupExecs::getFieldDepth,
  GroupTrades::getFieldDepth,
  GroupSecurityAltID::getFieldDepth,
  GroupEvents::getFieldDepth,
  GroupLegs::getFieldDepth,
  GroupUnderlyings::getFieldDepth,
  nullptr };

GetDepthMethod MessageConfirmationRequest::groupGetDepthMethods[] = {
  GroupOrders::getFieldDepth,
  nullptr };


FieldDepth MessageHeader::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBeginString::RAW :
     case FieldBodyLength::RAW :
     case FieldMsgType::RAW :
     case FieldSenderCompID::RAW :
     case FieldTargetCompID::RAW :
     case FieldOnBehalfOfCompID::RAW :
     case FieldDeliverToCompID::RAW :
     case FieldSecureDataLen::RAW :
     case FieldSecureData::RAW :
     case FieldMsgSeqNum::RAW :
     case FieldSenderSubID::RAW :
     case FieldSenderLocationID::RAW :
     case FieldTargetSubID::RAW :
     case FieldTargetLocationID::RAW :
     case FieldOnBehalfOfSubID::RAW :
     case FieldOnBehalfOfLocationID::RAW :
     case FieldDeliverToSubID::RAW :
     case FieldDeliverToLocationID::RAW :
     case FieldPossDupFlag::RAW :
     case FieldPossResend::RAW :
     case FieldSendingTime::RAW :
     case FieldOrigSendingTime::RAW :
     case FieldXmlDataLen::RAW :
     case FieldXmlData::RAW :
     case FieldMessageEncoding::RAW :
     case FieldLastMsgSeqNumProcessed::RAW :
     case FieldNoHops::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageHeartbeat::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTestReqID::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTestRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTestReqID::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageResendRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBeginSeqNo::RAW :
     case FieldEndSeqNo::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRefSeqNum::RAW :
     case FieldRefTagID::RAW :
     case FieldRefMsgType::RAW :
     case FieldSessionRejectReason::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSequenceReset::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldGapFillFlag::RAW :
     case FieldNewSeqNo::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageLogout::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageIOI::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldIOIID::RAW :
     case FieldIOITransType::RAW :
     case FieldIOIRefID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldSide::RAW :
     case FieldQtyType::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldIOIQty::RAW :
     case FieldCurrency::RAW :
     case FieldNoStipulations::RAW :
     case FieldNoLegs::RAW :
     case FieldPriceType::RAW :
     case FieldPrice::RAW :
     case FieldValidUntilTime::RAW :
     case FieldIOIQltyInd::RAW :
     case FieldIOINaturalFlag::RAW :
     case FieldNoIOIQualifiers::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldTransactTime::RAW :
     case FieldURLLink::RAW :
     case FieldNoRoutingIDs::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAdvertisement::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAdvId::RAW :
     case FieldAdvTransType::RAW :
     case FieldAdvRefID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldAdvSide::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldPrice::RAW :
     case FieldCurrency::RAW :
     case FieldTradeDate::RAW :
     case FieldTransactTime::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldURLLink::RAW :
     case FieldLastMkt::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageExecutionReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldSecondaryExecID::RAW :
     case FieldClOrdID::RAW :
     case FieldOrigClOrdID::RAW :
     case FieldClOrdLinkID::RAW :
     case FieldQuoteRespID::RAW :
     case FieldOrdStatusReqID::RAW :
     case FieldMassStatusReqID::RAW :
     case FieldTotNumReports::RAW :
     case FieldLastRptRequested::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldNoContraBrokers::RAW :
     case FieldListID::RAW :
     case FieldCrossID::RAW :
     case FieldOrigCrossID::RAW :
     case FieldCrossType::RAW :
     case FieldExecID::RAW :
     case FieldExecRefID::RAW :
     case FieldExecType::RAW :
     case FieldOrdStatus::RAW :
     case FieldWorkingIndicator::RAW :
     case FieldOrdRejReason::RAW :
     case FieldExecRestatementReason::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldDayBookingInst::RAW :
     case FieldBookingUnit::RAW :
     case FieldPreallocMethod::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldCashMargin::RAW :
     case FieldClearingFeeIndicator::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldSide::RAW :
     case FieldNoStipulations::RAW :
     case FieldQtyType::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldOrdType::RAW :
     case FieldPriceType::RAW :
     case FieldPrice::RAW :
     case FieldStopPx::RAW :
     case FieldPegOffsetValue::RAW :
     case FieldPegMoveType::RAW :
     case FieldPegOffsetType::RAW :
     case FieldPegLimitType::RAW :
     case FieldPegRoundDirection::RAW :
     case FieldPegScope::RAW :
     case FieldDiscretionInst::RAW :
     case FieldDiscretionOffsetValue::RAW :
     case FieldDiscretionMoveType::RAW :
     case FieldDiscretionOffsetType::RAW :
     case FieldDiscretionLimitType::RAW :
     case FieldDiscretionRoundDirection::RAW :
     case FieldDiscretionScope::RAW :
     case FieldPeggedPrice::RAW :
     case FieldDiscretionPrice::RAW :
     case FieldTargetStrategy::RAW :
     case FieldTargetStrategyParameters::RAW :
     case FieldParticipationRate::RAW :
     case FieldTargetStrategyPerformance::RAW :
     case FieldCurrency::RAW :
     case FieldComplianceID::RAW :
     case FieldSolicitedFlag::RAW :
     case FieldTimeInForce::RAW :
     case FieldEffectiveTime::RAW :
     case FieldExpireDate::RAW :
     case FieldExpireTime::RAW :
     case FieldExecInst::RAW :
     case FieldOrderCapacity::RAW :
     case FieldOrderRestrictions::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldLastQty::RAW :
     case FieldUnderlyingLastQty::RAW :
     case FieldLastPx::RAW :
     case FieldUnderlyingLastPx::RAW :
     case FieldLastParPx::RAW :
     case FieldLastSpotRate::RAW :
     case FieldLastForwardPoints::RAW :
     case FieldLastMkt::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldTimeBracket::RAW :
     case FieldLastCapacity::RAW :
     case FieldLeavesQty::RAW :
     case FieldCumQty::RAW :
     case FieldAvgPx::RAW :
     case FieldDayOrderQty::RAW :
     case FieldDayCumQty::RAW :
     case FieldDayAvgPx::RAW :
     case FieldGTBookingInst::RAW :
     case FieldTradeDate::RAW :
     case FieldTransactTime::RAW :
     case FieldReportToExch::RAW :
     case FieldCommission::RAW :
     case FieldCommType::RAW :
     case FieldCommCurrency::RAW :
     case FieldFundRenewWaiv::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldGrossTradeAmt::RAW :
     case FieldNumDaysInterest::RAW :
     case FieldExDate::RAW :
     case FieldAccruedInterestRate::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldInterestAtMaturity::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldTradedFlatSwitch::RAW :
     case FieldBasisFeatureDate::RAW :
     case FieldBasisFeaturePrice::RAW :
     case FieldConcession::RAW :
     case FieldTotalTakedown::RAW :
     case FieldNetMoney::RAW :
     case FieldSettlCurrAmt::RAW :
     case FieldSettlCurrency::RAW :
     case FieldSettlCurrFxRate::RAW :
     case FieldSettlCurrFxRateCalc::RAW :
     case FieldHandlInst::RAW :
     case FieldMinQty::RAW :
     case FieldMaxFloor::RAW :
     case FieldPositionEffect::RAW :
     case FieldMaxShow::RAW :
     case FieldBookingType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldSettlDate2::RAW :
     case FieldOrderQty2::RAW :
     case FieldLastForwardPoints2::RAW :
     case FieldMultiLegReportingType::RAW :
     case FieldCancellationRights::RAW :
     case FieldMoneyLaunderingStatus::RAW :
     case FieldRegistID::RAW :
     case FieldDesignation::RAW :
     case FieldTransBkdTime::RAW :
     case FieldExecValuationPoint::RAW :
     case FieldExecPriceType::RAW :
     case FieldExecPriceAdjustment::RAW :
     case FieldPriorityIndicator::RAW :
     case FieldPriceImprovement::RAW :
     case FieldLastLiquidityInd::RAW :
     case FieldNoContAmts::RAW :
     case FieldNoLegs::RAW :
     case FieldCopyMsgIndicator::RAW :
     case FieldNoMiscFees::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderCancelReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldClOrdID::RAW :
     case FieldClOrdLinkID::RAW :
     case FieldOrigClOrdID::RAW :
     case FieldOrdStatus::RAW :
     case FieldWorkingIndicator::RAW :
     case FieldOrigOrdModTime::RAW :
     case FieldListID::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldTradeDate::RAW :
     case FieldTransactTime::RAW :
     case FieldCxlRejResponseTo::RAW :
     case FieldCxlRejReason::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageLogon::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldEncryptMethod::RAW :
     case FieldHeartBtInt::RAW :
     case FieldRawDataLength::RAW :
     case FieldRawData::RAW :
     case FieldResetSeqNumFlag::RAW :
     case FieldNextExpectedMsgSeqNum::RAW :
     case FieldMaxMessageSize::RAW :
     case FieldNoMsgTypes::RAW :
     case FieldTestMessageIndicator::RAW :
     case FieldUsername::RAW :
     case FieldPassword::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNews::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrigTime::RAW :
     case FieldUrgency::RAW :
     case FieldHeadline::RAW :
     case FieldEncodedHeadlineLen::RAW :
     case FieldEncodedHeadline::RAW :
     case FieldNoRoutingIDs::RAW :
     case FieldNoRelatedSym::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLinesOfText::RAW :
     case FieldURLLink::RAW :
     case FieldRawDataLength::RAW :
     case FieldRawData::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageEmail::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldEmailThreadID::RAW :
     case FieldEmailType::RAW :
     case FieldOrigTime::RAW :
     case FieldSubject::RAW :
     case FieldEncodedSubjectLen::RAW :
     case FieldEncodedSubject::RAW :
     case FieldNoRoutingIDs::RAW :
     case FieldNoRelatedSym::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldOrderID::RAW :
     case FieldClOrdID::RAW :
     case FieldNoLinesOfText::RAW :
     case FieldRawDataLength::RAW :
     case FieldRawData::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNewOrderSingle::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldClOrdLinkID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldTradeDate::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldDayBookingInst::RAW :
     case FieldBookingUnit::RAW :
     case FieldPreallocMethod::RAW :
     case FieldAllocID::RAW :
     case FieldNoAllocs::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldCashMargin::RAW :
     case FieldClearingFeeIndicator::RAW :
     case FieldHandlInst::RAW :
     case FieldExecInst::RAW :
     case FieldMinQty::RAW :
     case FieldMaxFloor::RAW :
     case FieldExDestination::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldProcessCode::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldPrevClosePx::RAW :
     case FieldSide::RAW :
     case FieldLocateReqd::RAW :
     case FieldTransactTime::RAW :
     case FieldNoStipulations::RAW :
     case FieldQtyType::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldOrdType::RAW :
     case FieldPriceType::RAW :
     case FieldPrice::RAW :
     case FieldStopPx::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldCurrency::RAW :
     case FieldComplianceID::RAW :
     case FieldSolicitedFlag::RAW :
     case FieldIOIID::RAW :
     case FieldQuoteID::RAW :
     case FieldTimeInForce::RAW :
     case FieldEffectiveTime::RAW :
     case FieldExpireDate::RAW :
     case FieldExpireTime::RAW :
     case FieldGTBookingInst::RAW :
     case FieldCommission::RAW :
     case FieldCommType::RAW :
     case FieldCommCurrency::RAW :
     case FieldFundRenewWaiv::RAW :
     case FieldOrderCapacity::RAW :
     case FieldOrderRestrictions::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldForexReq::RAW :
     case FieldSettlCurrency::RAW :
     case FieldBookingType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldSettlDate2::RAW :
     case FieldOrderQty2::RAW :
     case FieldPrice2::RAW :
     case FieldPositionEffect::RAW :
     case FieldCoveredOrUncovered::RAW :
     case FieldMaxShow::RAW :
     case FieldPegOffsetValue::RAW :
     case FieldPegMoveType::RAW :
     case FieldPegOffsetType::RAW :
     case FieldPegLimitType::RAW :
     case FieldPegRoundDirection::RAW :
     case FieldPegScope::RAW :
     case FieldDiscretionInst::RAW :
     case FieldDiscretionOffsetValue::RAW :
     case FieldDiscretionMoveType::RAW :
     case FieldDiscretionOffsetType::RAW :
     case FieldDiscretionLimitType::RAW :
     case FieldDiscretionRoundDirection::RAW :
     case FieldDiscretionScope::RAW :
     case FieldTargetStrategy::RAW :
     case FieldTargetStrategyParameters::RAW :
     case FieldParticipationRate::RAW :
     case FieldCancellationRights::RAW :
     case FieldMoneyLaunderingStatus::RAW :
     case FieldRegistID::RAW :
     case FieldDesignation::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNewOrderList::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW :
     case FieldBidID::RAW :
     case FieldClientBidID::RAW :
     case FieldProgRptReqs::RAW :
     case FieldBidType::RAW :
     case FieldProgPeriodInterval::RAW :
     case FieldCancellationRights::RAW :
     case FieldMoneyLaunderingStatus::RAW :
     case FieldRegistID::RAW :
     case FieldListExecInstType::RAW :
     case FieldListExecInst::RAW :
     case FieldEncodedListExecInstLen::RAW :
     case FieldEncodedListExecInst::RAW :
     case FieldAllowableOneSidednessPct::RAW :
     case FieldAllowableOneSidednessValue::RAW :
     case FieldAllowableOneSidednessCurr::RAW :
     case FieldTotNoOrders::RAW :
     case FieldLastFragment::RAW :
     case FieldNoOrders::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderCancelRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrigClOrdID::RAW :
     case FieldOrderID::RAW :
     case FieldClOrdID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldClOrdLinkID::RAW :
     case FieldListID::RAW :
     case FieldOrigOrdModTime::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldSide::RAW :
     case FieldTransactTime::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldComplianceID::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderCancelReplaceRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldTradeDate::RAW :
     case FieldOrigClOrdID::RAW :
     case FieldClOrdID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldClOrdLinkID::RAW :
     case FieldListID::RAW :
     case FieldOrigOrdModTime::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldDayBookingInst::RAW :
     case FieldBookingUnit::RAW :
     case FieldPreallocMethod::RAW :
     case FieldAllocID::RAW :
     case FieldNoAllocs::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldCashMargin::RAW :
     case FieldClearingFeeIndicator::RAW :
     case FieldHandlInst::RAW :
     case FieldExecInst::RAW :
     case FieldMinQty::RAW :
     case FieldMaxFloor::RAW :
     case FieldExDestination::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldSide::RAW :
     case FieldTransactTime::RAW :
     case FieldQtyType::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldOrdType::RAW :
     case FieldPriceType::RAW :
     case FieldPrice::RAW :
     case FieldStopPx::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldPegOffsetValue::RAW :
     case FieldPegMoveType::RAW :
     case FieldPegOffsetType::RAW :
     case FieldPegLimitType::RAW :
     case FieldPegRoundDirection::RAW :
     case FieldPegScope::RAW :
     case FieldDiscretionInst::RAW :
     case FieldDiscretionOffsetValue::RAW :
     case FieldDiscretionMoveType::RAW :
     case FieldDiscretionOffsetType::RAW :
     case FieldDiscretionLimitType::RAW :
     case FieldDiscretionRoundDirection::RAW :
     case FieldDiscretionScope::RAW :
     case FieldTargetStrategy::RAW :
     case FieldTargetStrategyParameters::RAW :
     case FieldParticipationRate::RAW :
     case FieldComplianceID::RAW :
     case FieldSolicitedFlag::RAW :
     case FieldCurrency::RAW :
     case FieldTimeInForce::RAW :
     case FieldEffectiveTime::RAW :
     case FieldExpireDate::RAW :
     case FieldExpireTime::RAW :
     case FieldGTBookingInst::RAW :
     case FieldCommission::RAW :
     case FieldCommType::RAW :
     case FieldCommCurrency::RAW :
     case FieldFundRenewWaiv::RAW :
     case FieldOrderCapacity::RAW :
     case FieldOrderRestrictions::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldForexReq::RAW :
     case FieldSettlCurrency::RAW :
     case FieldBookingType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldSettlDate2::RAW :
     case FieldOrderQty2::RAW :
     case FieldPrice2::RAW :
     case FieldPositionEffect::RAW :
     case FieldCoveredOrUncovered::RAW :
     case FieldMaxShow::RAW :
     case FieldLocateReqd::RAW :
     case FieldCancellationRights::RAW :
     case FieldMoneyLaunderingStatus::RAW :
     case FieldRegistID::RAW :
     case FieldDesignation::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW :
     case FieldClOrdID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldClOrdLinkID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldOrdStatusReqID::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldSide::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAllocationInstruction::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocID::RAW :
     case FieldAllocTransType::RAW :
     case FieldAllocType::RAW :
     case FieldSecondaryAllocID::RAW :
     case FieldRefAllocID::RAW :
     case FieldAllocCancReplaceReason::RAW :
     case FieldAllocIntermedReqType::RAW :
     case FieldAllocLinkID::RAW :
     case FieldAllocLinkType::RAW :
     case FieldBookingRefID::RAW :
     case FieldAllocNoOrdersType::RAW :
     case FieldNoOrders::RAW :
     case FieldNoExecs::RAW :
     case FieldPreviouslyReported::RAW :
     case FieldReversalIndicator::RAW :
     case FieldMatchType::RAW :
     case FieldSide::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldLastMkt::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldPriceType::RAW :
     case FieldAvgPx::RAW :
     case FieldAvgParPx::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldCurrency::RAW :
     case FieldAvgPxPrecision::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradeDate::RAW :
     case FieldTransactTime::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldBookingType::RAW :
     case FieldGrossTradeAmt::RAW :
     case FieldConcession::RAW :
     case FieldTotalTakedown::RAW :
     case FieldNetMoney::RAW :
     case FieldPositionEffect::RAW :
     case FieldAutoAcceptIndicator::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldNumDaysInterest::RAW :
     case FieldAccruedInterestRate::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldTotalAccruedInterestAmt::RAW :
     case FieldInterestAtMaturity::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldLegalConfirm::RAW :
     case FieldNoStipulations::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldTotNoAllocs::RAW :
     case FieldLastFragment::RAW :
     case FieldNoAllocs::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListCancelRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW :
     case FieldTransactTime::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldTradeDate::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListExecute::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW :
     case FieldClientBidID::RAW :
     case FieldBidID::RAW :
     case FieldTransactTime::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListStatus::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW :
     case FieldListStatusType::RAW :
     case FieldNoRpts::RAW :
     case FieldListOrderStatus::RAW :
     case FieldRptSeq::RAW :
     case FieldListStatusText::RAW :
     case FieldEncodedListStatusTextLen::RAW :
     case FieldEncodedListStatusText::RAW :
     case FieldTransactTime::RAW :
     case FieldTotNoOrders::RAW :
     case FieldLastFragment::RAW :
     case FieldNoOrders::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAllocationInstructionAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldSecondaryAllocID::RAW :
     case FieldTradeDate::RAW :
     case FieldTransactTime::RAW :
     case FieldAllocStatus::RAW :
     case FieldAllocRejCode::RAW :
     case FieldAllocType::RAW :
     case FieldAllocIntermedReqType::RAW :
     case FieldMatchStatus::RAW :
     case FieldProduct::RAW :
     case FieldSecurityType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldNoAllocs::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageDontKnowTrade::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldExecID::RAW :
     case FieldDKReason::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldSide::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldLastQty::RAW :
     case FieldLastPx::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW :
     case FieldRFQReqID::RAW :
     case FieldClOrdID::RAW :
     case FieldOrderCapacity::RAW :
     case FieldNoRelatedSym::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuote::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW :
     case FieldQuoteID::RAW :
     case FieldQuoteRespID::RAW :
     case FieldQuoteType::RAW :
     case FieldNoQuoteQualifiers::RAW :
     case FieldQuoteResponseLevel::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldSide::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldSettlDate2::RAW :
     case FieldOrderQty2::RAW :
     case FieldCurrency::RAW :
     case FieldNoStipulations::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldNoLegs::RAW :
     case FieldBidPx::RAW :
     case FieldOfferPx::RAW :
     case FieldMktBidPx::RAW :
     case FieldMktOfferPx::RAW :
     case FieldMinBidSize::RAW :
     case FieldBidSize::RAW :
     case FieldMinOfferSize::RAW :
     case FieldOfferSize::RAW :
     case FieldValidUntilTime::RAW :
     case FieldBidSpotRate::RAW :
     case FieldOfferSpotRate::RAW :
     case FieldBidForwardPoints::RAW :
     case FieldOfferForwardPoints::RAW :
     case FieldMidPx::RAW :
     case FieldBidYield::RAW :
     case FieldMidYield::RAW :
     case FieldOfferYield::RAW :
     case FieldTransactTime::RAW :
     case FieldOrdType::RAW :
     case FieldBidForwardPoints2::RAW :
     case FieldOfferForwardPoints2::RAW :
     case FieldSettlCurrBidFxRate::RAW :
     case FieldSettlCurrOfferFxRate::RAW :
     case FieldSettlCurrFxRateCalc::RAW :
     case FieldCommType::RAW :
     case FieldCommission::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldExDestination::RAW :
     case FieldOrderCapacity::RAW :
     case FieldPriceType::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSettlementInstructions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSettlInstMsgID::RAW :
     case FieldSettlInstReqID::RAW :
     case FieldSettlInstMode::RAW :
     case FieldSettlInstReqRejCode::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldClOrdID::RAW :
     case FieldTransactTime::RAW :
     case FieldNoSettlInst::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMarketDataRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDReqID::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldMarketDepth::RAW :
     case FieldMDUpdateType::RAW :
     case FieldAggregatedBook::RAW :
     case FieldOpenCloseSettlFlag::RAW :
     case FieldScope::RAW :
     case FieldMDImplicitDelete::RAW :
     case FieldNoMDEntryTypes::RAW :
     case FieldNoRelatedSym::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldApplQueueAction::RAW :
     case FieldApplQueueMax::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMarketDataSnapshotFullRefresh::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDReqID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldFinancialStatus::RAW :
     case FieldCorporateAction::RAW :
     case FieldNetChgPrevDay::RAW :
     case FieldNoMDEntries::RAW :
     case FieldApplQueueDepth::RAW :
     case FieldApplQueueResolution::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMarketDataIncrementalRefresh::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDReqID::RAW :
     case FieldNoMDEntries::RAW :
     case FieldApplQueueDepth::RAW :
     case FieldApplQueueResolution::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMarketDataRequestReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMDReqID::RAW :
     case FieldMDReqRejReason::RAW :
     case FieldNoAltMDSource::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteCancel::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW :
     case FieldQuoteID::RAW :
     case FieldQuoteCancelType::RAW :
     case FieldQuoteResponseLevel::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldNoQuoteEntries::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteStatusReqID::RAW :
     case FieldQuoteID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMassQuoteAcknowledgement::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW :
     case FieldQuoteID::RAW :
     case FieldQuoteStatus::RAW :
     case FieldQuoteRejectReason::RAW :
     case FieldQuoteResponseLevel::RAW :
     case FieldQuoteType::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldNoQuoteSets::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityDefinitionRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW :
     case FieldSecurityRequestType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldCurrency::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldNoLegs::RAW :
     case FieldExpirationCycle::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityDefinition::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW :
     case FieldSecurityResponseID::RAW :
     case FieldSecurityResponseType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldCurrency::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldNoLegs::RAW :
     case FieldExpirationCycle::RAW :
     case FieldRoundLot::RAW :
     case FieldMinTradeVol::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityStatusReqID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldCurrency::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityStatus::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityStatusReqID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldCurrency::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldUnsolicitedIndicator::RAW :
     case FieldSecurityTradingStatus::RAW :
     case FieldFinancialStatus::RAW :
     case FieldCorporateAction::RAW :
     case FieldHaltReasonChar::RAW :
     case FieldInViewOfCommon::RAW :
     case FieldDueToRelated::RAW :
     case FieldBuyVolume::RAW :
     case FieldSellVolume::RAW :
     case FieldHighPx::RAW :
     case FieldLowPx::RAW :
     case FieldLastPx::RAW :
     case FieldTransactTime::RAW :
     case FieldAdjustment::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradingSessionStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradSesReqID::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldTradSesMethod::RAW :
     case FieldTradSesMode::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradingSessionStatus::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradSesReqID::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldTradSesMethod::RAW :
     case FieldTradSesMode::RAW :
     case FieldUnsolicitedIndicator::RAW :
     case FieldTradSesStatus::RAW :
     case FieldTradSesStatusRejReason::RAW :
     case FieldTradSesStartTime::RAW :
     case FieldTradSesOpenTime::RAW :
     case FieldTradSesPreCloseTime::RAW :
     case FieldTradSesCloseTime::RAW :
     case FieldTradSesEndTime::RAW :
     case FieldTotalVolumeTraded::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMassQuote::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW :
     case FieldQuoteID::RAW :
     case FieldQuoteType::RAW :
     case FieldQuoteResponseLevel::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldDefBidSize::RAW :
     case FieldDefOfferSize::RAW :
     case FieldNoQuoteSets::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageBusinessMessageReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRefSeqNum::RAW :
     case FieldRefMsgType::RAW :
     case FieldBusinessRejectRefID::RAW :
     case FieldBusinessRejectReason::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageBidRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBidID::RAW :
     case FieldClientBidID::RAW :
     case FieldBidRequestTransType::RAW :
     case FieldListName::RAW :
     case FieldTotNoRelatedSym::RAW :
     case FieldBidType::RAW :
     case FieldNumTickets::RAW :
     case FieldCurrency::RAW :
     case FieldSideValue1::RAW :
     case FieldSideValue2::RAW :
     case FieldNoBidDescriptors::RAW :
     case FieldNoBidComponents::RAW :
     case FieldLiquidityIndType::RAW :
     case FieldWtAverageLiquidity::RAW :
     case FieldExchangeForPhysical::RAW :
     case FieldOutMainCntryUIndex::RAW :
     case FieldCrossPercent::RAW :
     case FieldProgRptReqs::RAW :
     case FieldProgPeriodInterval::RAW :
     case FieldIncTaxInd::RAW :
     case FieldForexReq::RAW :
     case FieldNumBidders::RAW :
     case FieldTradeDate::RAW :
     case FieldBidTradeType::RAW :
     case FieldBasisPxType::RAW :
     case FieldStrikeTime::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageBidResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldBidID::RAW :
     case FieldClientBidID::RAW :
     case FieldNoBidComponents::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageListStrikePrice::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldListID::RAW :
     case FieldTotNoStrikes::RAW :
     case FieldLastFragment::RAW :
     case FieldNoStrikes::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageXMLnonFIX::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRegistrationInstructions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRegistID::RAW :
     case FieldRegistTransType::RAW :
     case FieldRegistRefID::RAW :
     case FieldClOrdID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldRegistAcctType::RAW :
     case FieldTaxAdvantageType::RAW :
     case FieldOwnershipType::RAW :
     case FieldNoRegistDtls::RAW :
     case FieldNoDistribInsts::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRegistrationInstructionsResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRegistID::RAW :
     case FieldRegistTransType::RAW :
     case FieldRegistRefID::RAW :
     case FieldClOrdID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldRegistStatus::RAW :
     case FieldRegistRejReasonCode::RAW :
     case FieldRegistRejReasonText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderMassCancelRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldMassCancelRequestType::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldUnderlyingSymbol::RAW :
     case FieldUnderlyingSymbolSfx::RAW :
     case FieldUnderlyingSecurityID::RAW :
     case FieldUnderlyingSecurityIDSource::RAW :
     case FieldNoUnderlyingSecurityAltID::RAW :
     case FieldUnderlyingProduct::RAW :
     case FieldUnderlyingCFICode::RAW :
     case FieldUnderlyingSecurityType::RAW :
     case FieldUnderlyingSecuritySubType::RAW :
     case FieldUnderlyingMaturityMonthYear::RAW :
     case FieldUnderlyingMaturityDate::RAW :
     case FieldUnderlyingPutOrCall::RAW :
     case FieldUnderlyingCouponPaymentDate::RAW :
     case FieldUnderlyingIssueDate::RAW :
     case FieldUnderlyingRepoCollateralSecurityType::RAW :
     case FieldUnderlyingRepurchaseTerm::RAW :
     case FieldUnderlyingRepurchaseRate::RAW :
     case FieldUnderlyingFactor::RAW :
     case FieldUnderlyingCreditRating::RAW :
     case FieldUnderlyingInstrRegistry::RAW :
     case FieldUnderlyingCountryOfIssue::RAW :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     case FieldUnderlyingLocaleOfIssue::RAW :
     case FieldUnderlyingRedemptionDate::RAW :
     case FieldUnderlyingStrikePrice::RAW :
     case FieldUnderlyingStrikeCurrency::RAW :
     case FieldUnderlyingOptAttribute::RAW :
     case FieldUnderlyingContractMultiplier::RAW :
     case FieldUnderlyingCouponRate::RAW :
     case FieldUnderlyingSecurityExchange::RAW :
     case FieldUnderlyingIssuer::RAW :
     case FieldEncodedUnderlyingIssuerLen::RAW :
     case FieldEncodedUnderlyingIssuer::RAW :
     case FieldUnderlyingSecurityDesc::RAW :
     case FieldEncodedUnderlyingSecurityDescLen::RAW :
     case FieldEncodedUnderlyingSecurityDesc::RAW :
     case FieldUnderlyingCPProgram::RAW :
     case FieldUnderlyingCPRegType::RAW :
     case FieldUnderlyingCurrency::RAW :
     case FieldUnderlyingQty::RAW :
     case FieldUnderlyingPx::RAW :
     case FieldUnderlyingDirtyPrice::RAW :
     case FieldUnderlyingEndPrice::RAW :
     case FieldUnderlyingStartValue::RAW :
     case FieldUnderlyingCurrentValue::RAW :
     case FieldUnderlyingEndValue::RAW :
     case FieldNoUnderlyingStips::RAW :
     case FieldSide::RAW :
     case FieldTransactTime::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderMassCancelReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldMassCancelRequestType::RAW :
     case FieldMassCancelResponse::RAW :
     case FieldMassCancelRejectReason::RAW :
     case FieldTotalAffectedOrders::RAW :
     case FieldNoAffectedOrders::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldUnderlyingSymbol::RAW :
     case FieldUnderlyingSymbolSfx::RAW :
     case FieldUnderlyingSecurityID::RAW :
     case FieldUnderlyingSecurityIDSource::RAW :
     case FieldNoUnderlyingSecurityAltID::RAW :
     case FieldUnderlyingProduct::RAW :
     case FieldUnderlyingCFICode::RAW :
     case FieldUnderlyingSecurityType::RAW :
     case FieldUnderlyingSecuritySubType::RAW :
     case FieldUnderlyingMaturityMonthYear::RAW :
     case FieldUnderlyingMaturityDate::RAW :
     case FieldUnderlyingPutOrCall::RAW :
     case FieldUnderlyingCouponPaymentDate::RAW :
     case FieldUnderlyingIssueDate::RAW :
     case FieldUnderlyingRepoCollateralSecurityType::RAW :
     case FieldUnderlyingRepurchaseTerm::RAW :
     case FieldUnderlyingRepurchaseRate::RAW :
     case FieldUnderlyingFactor::RAW :
     case FieldUnderlyingCreditRating::RAW :
     case FieldUnderlyingInstrRegistry::RAW :
     case FieldUnderlyingCountryOfIssue::RAW :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     case FieldUnderlyingLocaleOfIssue::RAW :
     case FieldUnderlyingRedemptionDate::RAW :
     case FieldUnderlyingStrikePrice::RAW :
     case FieldUnderlyingStrikeCurrency::RAW :
     case FieldUnderlyingOptAttribute::RAW :
     case FieldUnderlyingContractMultiplier::RAW :
     case FieldUnderlyingCouponRate::RAW :
     case FieldUnderlyingSecurityExchange::RAW :
     case FieldUnderlyingIssuer::RAW :
     case FieldEncodedUnderlyingIssuerLen::RAW :
     case FieldEncodedUnderlyingIssuer::RAW :
     case FieldUnderlyingSecurityDesc::RAW :
     case FieldEncodedUnderlyingSecurityDescLen::RAW :
     case FieldEncodedUnderlyingSecurityDesc::RAW :
     case FieldUnderlyingCPProgram::RAW :
     case FieldUnderlyingCPRegType::RAW :
     case FieldUnderlyingCurrency::RAW :
     case FieldUnderlyingQty::RAW :
     case FieldUnderlyingPx::RAW :
     case FieldUnderlyingDirtyPrice::RAW :
     case FieldUnderlyingEndPrice::RAW :
     case FieldUnderlyingStartValue::RAW :
     case FieldUnderlyingCurrentValue::RAW :
     case FieldUnderlyingEndValue::RAW :
     case FieldNoUnderlyingStips::RAW :
     case FieldSide::RAW :
     case FieldTransactTime::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNewOrderCross::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCrossID::RAW :
     case FieldCrossType::RAW :
     case FieldCrossPrioritization::RAW :
     case FieldNoSides::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldHandlInst::RAW :
     case FieldExecInst::RAW :
     case FieldMinQty::RAW :
     case FieldMaxFloor::RAW :
     case FieldExDestination::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldProcessCode::RAW :
     case FieldPrevClosePx::RAW :
     case FieldLocateReqd::RAW :
     case FieldTransactTime::RAW :
     case FieldNoStipulations::RAW :
     case FieldOrdType::RAW :
     case FieldPriceType::RAW :
     case FieldPrice::RAW :
     case FieldStopPx::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldCurrency::RAW :
     case FieldComplianceID::RAW :
     case FieldIOIID::RAW :
     case FieldQuoteID::RAW :
     case FieldTimeInForce::RAW :
     case FieldEffectiveTime::RAW :
     case FieldExpireDate::RAW :
     case FieldExpireTime::RAW :
     case FieldGTBookingInst::RAW :
     case FieldMaxShow::RAW :
     case FieldPegOffsetValue::RAW :
     case FieldPegMoveType::RAW :
     case FieldPegOffsetType::RAW :
     case FieldPegLimitType::RAW :
     case FieldPegRoundDirection::RAW :
     case FieldPegScope::RAW :
     case FieldDiscretionInst::RAW :
     case FieldDiscretionOffsetValue::RAW :
     case FieldDiscretionMoveType::RAW :
     case FieldDiscretionOffsetType::RAW :
     case FieldDiscretionLimitType::RAW :
     case FieldDiscretionRoundDirection::RAW :
     case FieldDiscretionScope::RAW :
     case FieldTargetStrategy::RAW :
     case FieldTargetStrategyParameters::RAW :
     case FieldParticipationRate::RAW :
     case FieldCancellationRights::RAW :
     case FieldMoneyLaunderingStatus::RAW :
     case FieldRegistID::RAW :
     case FieldDesignation::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCrossOrderCancelReplaceRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW :
     case FieldCrossID::RAW :
     case FieldOrigCrossID::RAW :
     case FieldCrossType::RAW :
     case FieldCrossPrioritization::RAW :
     case FieldNoSides::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldHandlInst::RAW :
     case FieldExecInst::RAW :
     case FieldMinQty::RAW :
     case FieldMaxFloor::RAW :
     case FieldExDestination::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldProcessCode::RAW :
     case FieldPrevClosePx::RAW :
     case FieldLocateReqd::RAW :
     case FieldTransactTime::RAW :
     case FieldNoStipulations::RAW :
     case FieldOrdType::RAW :
     case FieldPriceType::RAW :
     case FieldPrice::RAW :
     case FieldStopPx::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldCurrency::RAW :
     case FieldComplianceID::RAW :
     case FieldIOIID::RAW :
     case FieldQuoteID::RAW :
     case FieldTimeInForce::RAW :
     case FieldEffectiveTime::RAW :
     case FieldExpireDate::RAW :
     case FieldExpireTime::RAW :
     case FieldGTBookingInst::RAW :
     case FieldMaxShow::RAW :
     case FieldPegOffsetValue::RAW :
     case FieldPegMoveType::RAW :
     case FieldPegOffsetType::RAW :
     case FieldPegLimitType::RAW :
     case FieldPegRoundDirection::RAW :
     case FieldPegScope::RAW :
     case FieldDiscretionInst::RAW :
     case FieldDiscretionOffsetValue::RAW :
     case FieldDiscretionMoveType::RAW :
     case FieldDiscretionOffsetType::RAW :
     case FieldDiscretionLimitType::RAW :
     case FieldDiscretionRoundDirection::RAW :
     case FieldDiscretionScope::RAW :
     case FieldTargetStrategy::RAW :
     case FieldTargetStrategyParameters::RAW :
     case FieldParticipationRate::RAW :
     case FieldCancellationRights::RAW :
     case FieldMoneyLaunderingStatus::RAW :
     case FieldRegistID::RAW :
     case FieldDesignation::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCrossOrderCancelRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW :
     case FieldCrossID::RAW :
     case FieldOrigCrossID::RAW :
     case FieldCrossType::RAW :
     case FieldCrossPrioritization::RAW :
     case FieldNoSides::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldTransactTime::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityTypeRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldProduct::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityTypes::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW :
     case FieldSecurityResponseID::RAW :
     case FieldSecurityResponseType::RAW :
     case FieldTotNoSecurityTypes::RAW :
     case FieldLastFragment::RAW :
     case FieldNoSecurityTypes::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityListRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW :
     case FieldSecurityListRequestType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldCurrency::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSecurityList::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW :
     case FieldSecurityResponseID::RAW :
     case FieldSecurityRequestResult::RAW :
     case FieldTotNoRelatedSym::RAW :
     case FieldLastFragment::RAW :
     case FieldNoRelatedSym::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageDerivativeSecurityListRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW :
     case FieldSecurityListRequestType::RAW :
     case FieldUnderlyingSymbol::RAW :
     case FieldUnderlyingSymbolSfx::RAW :
     case FieldUnderlyingSecurityID::RAW :
     case FieldUnderlyingSecurityIDSource::RAW :
     case FieldNoUnderlyingSecurityAltID::RAW :
     case FieldUnderlyingProduct::RAW :
     case FieldUnderlyingCFICode::RAW :
     case FieldUnderlyingSecurityType::RAW :
     case FieldUnderlyingSecuritySubType::RAW :
     case FieldUnderlyingMaturityMonthYear::RAW :
     case FieldUnderlyingMaturityDate::RAW :
     case FieldUnderlyingPutOrCall::RAW :
     case FieldUnderlyingCouponPaymentDate::RAW :
     case FieldUnderlyingIssueDate::RAW :
     case FieldUnderlyingRepoCollateralSecurityType::RAW :
     case FieldUnderlyingRepurchaseTerm::RAW :
     case FieldUnderlyingRepurchaseRate::RAW :
     case FieldUnderlyingFactor::RAW :
     case FieldUnderlyingCreditRating::RAW :
     case FieldUnderlyingInstrRegistry::RAW :
     case FieldUnderlyingCountryOfIssue::RAW :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     case FieldUnderlyingLocaleOfIssue::RAW :
     case FieldUnderlyingRedemptionDate::RAW :
     case FieldUnderlyingStrikePrice::RAW :
     case FieldUnderlyingStrikeCurrency::RAW :
     case FieldUnderlyingOptAttribute::RAW :
     case FieldUnderlyingContractMultiplier::RAW :
     case FieldUnderlyingCouponRate::RAW :
     case FieldUnderlyingSecurityExchange::RAW :
     case FieldUnderlyingIssuer::RAW :
     case FieldEncodedUnderlyingIssuerLen::RAW :
     case FieldEncodedUnderlyingIssuer::RAW :
     case FieldUnderlyingSecurityDesc::RAW :
     case FieldEncodedUnderlyingSecurityDescLen::RAW :
     case FieldEncodedUnderlyingSecurityDesc::RAW :
     case FieldUnderlyingCPProgram::RAW :
     case FieldUnderlyingCPRegType::RAW :
     case FieldUnderlyingCurrency::RAW :
     case FieldUnderlyingQty::RAW :
     case FieldUnderlyingPx::RAW :
     case FieldUnderlyingDirtyPrice::RAW :
     case FieldUnderlyingEndPrice::RAW :
     case FieldUnderlyingStartValue::RAW :
     case FieldUnderlyingCurrentValue::RAW :
     case FieldUnderlyingEndValue::RAW :
     case FieldNoUnderlyingStips::RAW :
     case FieldSecuritySubType::RAW :
     case FieldCurrency::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageDerivativeSecurityList::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSecurityReqID::RAW :
     case FieldSecurityResponseID::RAW :
     case FieldSecurityRequestResult::RAW :
     case FieldUnderlyingSymbol::RAW :
     case FieldUnderlyingSymbolSfx::RAW :
     case FieldUnderlyingSecurityID::RAW :
     case FieldUnderlyingSecurityIDSource::RAW :
     case FieldNoUnderlyingSecurityAltID::RAW :
     case FieldUnderlyingProduct::RAW :
     case FieldUnderlyingCFICode::RAW :
     case FieldUnderlyingSecurityType::RAW :
     case FieldUnderlyingSecuritySubType::RAW :
     case FieldUnderlyingMaturityMonthYear::RAW :
     case FieldUnderlyingMaturityDate::RAW :
     case FieldUnderlyingPutOrCall::RAW :
     case FieldUnderlyingCouponPaymentDate::RAW :
     case FieldUnderlyingIssueDate::RAW :
     case FieldUnderlyingRepoCollateralSecurityType::RAW :
     case FieldUnderlyingRepurchaseTerm::RAW :
     case FieldUnderlyingRepurchaseRate::RAW :
     case FieldUnderlyingFactor::RAW :
     case FieldUnderlyingCreditRating::RAW :
     case FieldUnderlyingInstrRegistry::RAW :
     case FieldUnderlyingCountryOfIssue::RAW :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     case FieldUnderlyingLocaleOfIssue::RAW :
     case FieldUnderlyingRedemptionDate::RAW :
     case FieldUnderlyingStrikePrice::RAW :
     case FieldUnderlyingStrikeCurrency::RAW :
     case FieldUnderlyingOptAttribute::RAW :
     case FieldUnderlyingContractMultiplier::RAW :
     case FieldUnderlyingCouponRate::RAW :
     case FieldUnderlyingSecurityExchange::RAW :
     case FieldUnderlyingIssuer::RAW :
     case FieldEncodedUnderlyingIssuerLen::RAW :
     case FieldEncodedUnderlyingIssuer::RAW :
     case FieldUnderlyingSecurityDesc::RAW :
     case FieldEncodedUnderlyingSecurityDescLen::RAW :
     case FieldEncodedUnderlyingSecurityDesc::RAW :
     case FieldUnderlyingCPProgram::RAW :
     case FieldUnderlyingCPRegType::RAW :
     case FieldUnderlyingCurrency::RAW :
     case FieldUnderlyingQty::RAW :
     case FieldUnderlyingPx::RAW :
     case FieldUnderlyingDirtyPrice::RAW :
     case FieldUnderlyingEndPrice::RAW :
     case FieldUnderlyingStartValue::RAW :
     case FieldUnderlyingCurrentValue::RAW :
     case FieldUnderlyingEndValue::RAW :
     case FieldNoUnderlyingStips::RAW :
     case FieldTotNoRelatedSym::RAW :
     case FieldLastFragment::RAW :
     case FieldNoRelatedSym::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNewOrderMultileg::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldClOrdID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldClOrdLinkID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldTradeDate::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldDayBookingInst::RAW :
     case FieldBookingUnit::RAW :
     case FieldPreallocMethod::RAW :
     case FieldAllocID::RAW :
     case FieldNoAllocs::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldCashMargin::RAW :
     case FieldClearingFeeIndicator::RAW :
     case FieldHandlInst::RAW :
     case FieldExecInst::RAW :
     case FieldMinQty::RAW :
     case FieldMaxFloor::RAW :
     case FieldExDestination::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldProcessCode::RAW :
     case FieldSide::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldPrevClosePx::RAW :
     case FieldNoLegs::RAW :
     case FieldLocateReqd::RAW :
     case FieldTransactTime::RAW :
     case FieldQtyType::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldOrdType::RAW :
     case FieldPriceType::RAW :
     case FieldPrice::RAW :
     case FieldStopPx::RAW :
     case FieldCurrency::RAW :
     case FieldComplianceID::RAW :
     case FieldSolicitedFlag::RAW :
     case FieldIOIID::RAW :
     case FieldQuoteID::RAW :
     case FieldTimeInForce::RAW :
     case FieldEffectiveTime::RAW :
     case FieldExpireDate::RAW :
     case FieldExpireTime::RAW :
     case FieldGTBookingInst::RAW :
     case FieldCommission::RAW :
     case FieldCommType::RAW :
     case FieldCommCurrency::RAW :
     case FieldFundRenewWaiv::RAW :
     case FieldOrderCapacity::RAW :
     case FieldOrderRestrictions::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldForexReq::RAW :
     case FieldSettlCurrency::RAW :
     case FieldBookingType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldPositionEffect::RAW :
     case FieldCoveredOrUncovered::RAW :
     case FieldMaxShow::RAW :
     case FieldPegOffsetValue::RAW :
     case FieldPegMoveType::RAW :
     case FieldPegOffsetType::RAW :
     case FieldPegLimitType::RAW :
     case FieldPegRoundDirection::RAW :
     case FieldPegScope::RAW :
     case FieldDiscretionInst::RAW :
     case FieldDiscretionOffsetValue::RAW :
     case FieldDiscretionMoveType::RAW :
     case FieldDiscretionOffsetType::RAW :
     case FieldDiscretionLimitType::RAW :
     case FieldDiscretionRoundDirection::RAW :
     case FieldDiscretionScope::RAW :
     case FieldTargetStrategy::RAW :
     case FieldTargetStrategyParameters::RAW :
     case FieldParticipationRate::RAW :
     case FieldCancellationRights::RAW :
     case FieldMoneyLaunderingStatus::RAW :
     case FieldRegistID::RAW :
     case FieldDesignation::RAW :
     case FieldMultiLegRptTypeReq::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageMultilegOrderCancelReplace::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldOrderID::RAW :
     case FieldOrigClOrdID::RAW :
     case FieldClOrdID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldClOrdLinkID::RAW :
     case FieldOrigOrdModTime::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldTradeDate::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldDayBookingInst::RAW :
     case FieldBookingUnit::RAW :
     case FieldPreallocMethod::RAW :
     case FieldAllocID::RAW :
     case FieldNoAllocs::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldCashMargin::RAW :
     case FieldClearingFeeIndicator::RAW :
     case FieldHandlInst::RAW :
     case FieldExecInst::RAW :
     case FieldMinQty::RAW :
     case FieldMaxFloor::RAW :
     case FieldExDestination::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldProcessCode::RAW :
     case FieldSide::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldPrevClosePx::RAW :
     case FieldNoLegs::RAW :
     case FieldLocateReqd::RAW :
     case FieldTransactTime::RAW :
     case FieldQtyType::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldOrdType::RAW :
     case FieldPriceType::RAW :
     case FieldPrice::RAW :
     case FieldStopPx::RAW :
     case FieldCurrency::RAW :
     case FieldComplianceID::RAW :
     case FieldSolicitedFlag::RAW :
     case FieldIOIID::RAW :
     case FieldQuoteID::RAW :
     case FieldTimeInForce::RAW :
     case FieldEffectiveTime::RAW :
     case FieldExpireDate::RAW :
     case FieldExpireTime::RAW :
     case FieldGTBookingInst::RAW :
     case FieldCommission::RAW :
     case FieldCommType::RAW :
     case FieldCommCurrency::RAW :
     case FieldFundRenewWaiv::RAW :
     case FieldOrderCapacity::RAW :
     case FieldOrderRestrictions::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldForexReq::RAW :
     case FieldSettlCurrency::RAW :
     case FieldBookingType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldPositionEffect::RAW :
     case FieldCoveredOrUncovered::RAW :
     case FieldMaxShow::RAW :
     case FieldPegOffsetValue::RAW :
     case FieldPegMoveType::RAW :
     case FieldPegOffsetType::RAW :
     case FieldPegLimitType::RAW :
     case FieldPegRoundDirection::RAW :
     case FieldPegScope::RAW :
     case FieldDiscretionInst::RAW :
     case FieldDiscretionOffsetValue::RAW :
     case FieldDiscretionMoveType::RAW :
     case FieldDiscretionOffsetType::RAW :
     case FieldDiscretionLimitType::RAW :
     case FieldDiscretionRoundDirection::RAW :
     case FieldDiscretionScope::RAW :
     case FieldTargetStrategy::RAW :
     case FieldTargetStrategyParameters::RAW :
     case FieldParticipationRate::RAW :
     case FieldCancellationRights::RAW :
     case FieldMoneyLaunderingStatus::RAW :
     case FieldRegistID::RAW :
     case FieldDesignation::RAW :
     case FieldMultiLegRptTypeReq::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradeCaptureReportRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeRequestID::RAW :
     case FieldTradeRequestType::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldTradeReportID::RAW :
     case FieldSecondaryTradeReportID::RAW :
     case FieldExecID::RAW :
     case FieldExecType::RAW :
     case FieldOrderID::RAW :
     case FieldClOrdID::RAW :
     case FieldMatchStatus::RAW :
     case FieldTrdType::RAW :
     case FieldTrdSubType::RAW :
     case FieldTransferReason::RAW :
     case FieldSecondaryTrdType::RAW :
     case FieldTradeLinkID::RAW :
     case FieldTrdMatchID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldNoDates::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldTimeBracket::RAW :
     case FieldSide::RAW :
     case FieldMultiLegReportingType::RAW :
     case FieldTradeInputSource::RAW :
     case FieldTradeInputDevice::RAW :
     case FieldResponseTransportType::RAW :
     case FieldResponseDestination::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradeCaptureReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeReportID::RAW :
     case FieldTradeReportTransType::RAW :
     case FieldTradeReportType::RAW :
     case FieldTradeRequestID::RAW :
     case FieldTrdType::RAW :
     case FieldTrdSubType::RAW :
     case FieldSecondaryTrdType::RAW :
     case FieldTransferReason::RAW :
     case FieldExecType::RAW :
     case FieldTotNumTradeReports::RAW :
     case FieldLastRptRequested::RAW :
     case FieldUnsolicitedIndicator::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldTradeReportRefID::RAW :
     case FieldSecondaryTradeReportRefID::RAW :
     case FieldSecondaryTradeReportID::RAW :
     case FieldTradeLinkID::RAW :
     case FieldTrdMatchID::RAW :
     case FieldExecID::RAW :
     case FieldOrdStatus::RAW :
     case FieldSecondaryExecID::RAW :
     case FieldExecRestatementReason::RAW :
     case FieldPreviouslyReported::RAW :
     case FieldPriceType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldQtyType::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldUnderlyingTradingSessionID::RAW :
     case FieldUnderlyingTradingSessionSubID::RAW :
     case FieldLastQty::RAW :
     case FieldLastPx::RAW :
     case FieldLastParPx::RAW :
     case FieldLastSpotRate::RAW :
     case FieldLastForwardPoints::RAW :
     case FieldLastMkt::RAW :
     case FieldTradeDate::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldAvgPx::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldAvgPxIndicator::RAW :
     case FieldNoPosAmt::RAW :
     case FieldMultiLegReportingType::RAW :
     case FieldTradeLegRefID::RAW :
     case FieldNoLegs::RAW :
     case FieldTransactTime::RAW :
     case FieldNoTrdRegTimestamps::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldMatchStatus::RAW :
     case FieldMatchType::RAW :
     case FieldNoSides::RAW :
     case FieldCopyMsgIndicator::RAW :
     case FieldPublishTrdIndicator::RAW :
     case FieldShortSaleReason::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageOrderMassStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldMassStatusReqID::RAW :
     case FieldMassStatusReqType::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldUnderlyingSymbol::RAW :
     case FieldUnderlyingSymbolSfx::RAW :
     case FieldUnderlyingSecurityID::RAW :
     case FieldUnderlyingSecurityIDSource::RAW :
     case FieldNoUnderlyingSecurityAltID::RAW :
     case FieldUnderlyingProduct::RAW :
     case FieldUnderlyingCFICode::RAW :
     case FieldUnderlyingSecurityType::RAW :
     case FieldUnderlyingSecuritySubType::RAW :
     case FieldUnderlyingMaturityMonthYear::RAW :
     case FieldUnderlyingMaturityDate::RAW :
     case FieldUnderlyingPutOrCall::RAW :
     case FieldUnderlyingCouponPaymentDate::RAW :
     case FieldUnderlyingIssueDate::RAW :
     case FieldUnderlyingRepoCollateralSecurityType::RAW :
     case FieldUnderlyingRepurchaseTerm::RAW :
     case FieldUnderlyingRepurchaseRate::RAW :
     case FieldUnderlyingFactor::RAW :
     case FieldUnderlyingCreditRating::RAW :
     case FieldUnderlyingInstrRegistry::RAW :
     case FieldUnderlyingCountryOfIssue::RAW :
     case FieldUnderlyingStateOrProvinceOfIssue::RAW :
     case FieldUnderlyingLocaleOfIssue::RAW :
     case FieldUnderlyingRedemptionDate::RAW :
     case FieldUnderlyingStrikePrice::RAW :
     case FieldUnderlyingStrikeCurrency::RAW :
     case FieldUnderlyingOptAttribute::RAW :
     case FieldUnderlyingContractMultiplier::RAW :
     case FieldUnderlyingCouponRate::RAW :
     case FieldUnderlyingSecurityExchange::RAW :
     case FieldUnderlyingIssuer::RAW :
     case FieldEncodedUnderlyingIssuerLen::RAW :
     case FieldEncodedUnderlyingIssuer::RAW :
     case FieldUnderlyingSecurityDesc::RAW :
     case FieldEncodedUnderlyingSecurityDescLen::RAW :
     case FieldEncodedUnderlyingSecurityDesc::RAW :
     case FieldUnderlyingCPProgram::RAW :
     case FieldUnderlyingCPRegType::RAW :
     case FieldUnderlyingCurrency::RAW :
     case FieldUnderlyingQty::RAW :
     case FieldUnderlyingPx::RAW :
     case FieldUnderlyingDirtyPrice::RAW :
     case FieldUnderlyingEndPrice::RAW :
     case FieldUnderlyingStartValue::RAW :
     case FieldUnderlyingCurrentValue::RAW :
     case FieldUnderlyingEndValue::RAW :
     case FieldNoUnderlyingStips::RAW :
     case FieldSide::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteRequestReject::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteReqID::RAW :
     case FieldRFQReqID::RAW :
     case FieldQuoteRequestRejectReason::RAW :
     case FieldNoRelatedSym::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRFQRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldRFQReqID::RAW :
     case FieldNoRelatedSym::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteStatusReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteStatusReqID::RAW :
     case FieldQuoteReqID::RAW :
     case FieldQuoteID::RAW :
     case FieldQuoteRespID::RAW :
     case FieldQuoteType::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldSide::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldSettlDate2::RAW :
     case FieldOrderQty2::RAW :
     case FieldCurrency::RAW :
     case FieldNoStipulations::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldNoLegs::RAW :
     case FieldNoQuoteQualifiers::RAW :
     case FieldExpireTime::RAW :
     case FieldPrice::RAW :
     case FieldPriceType::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldBidPx::RAW :
     case FieldOfferPx::RAW :
     case FieldMktBidPx::RAW :
     case FieldMktOfferPx::RAW :
     case FieldMinBidSize::RAW :
     case FieldBidSize::RAW :
     case FieldMinOfferSize::RAW :
     case FieldOfferSize::RAW :
     case FieldValidUntilTime::RAW :
     case FieldBidSpotRate::RAW :
     case FieldOfferSpotRate::RAW :
     case FieldBidForwardPoints::RAW :
     case FieldOfferForwardPoints::RAW :
     case FieldMidPx::RAW :
     case FieldBidYield::RAW :
     case FieldMidYield::RAW :
     case FieldOfferYield::RAW :
     case FieldTransactTime::RAW :
     case FieldOrdType::RAW :
     case FieldBidForwardPoints2::RAW :
     case FieldOfferForwardPoints2::RAW :
     case FieldSettlCurrBidFxRate::RAW :
     case FieldSettlCurrOfferFxRate::RAW :
     case FieldSettlCurrFxRateCalc::RAW :
     case FieldCommType::RAW :
     case FieldCommission::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldExDestination::RAW :
     case FieldQuoteStatus::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageQuoteResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldQuoteRespID::RAW :
     case FieldQuoteID::RAW :
     case FieldQuoteRespType::RAW :
     case FieldClOrdID::RAW :
     case FieldOrderCapacity::RAW :
     case FieldIOIID::RAW :
     case FieldQuoteType::RAW :
     case FieldNoQuoteQualifiers::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldSide::RAW :
     case FieldOrderQty::RAW :
     case FieldCashOrderQty::RAW :
     case FieldOrderPercent::RAW :
     case FieldRoundingDirection::RAW :
     case FieldRoundingModulus::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldSettlDate2::RAW :
     case FieldOrderQty2::RAW :
     case FieldCurrency::RAW :
     case FieldNoStipulations::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldNoLegs::RAW :
     case FieldBidPx::RAW :
     case FieldOfferPx::RAW :
     case FieldMktBidPx::RAW :
     case FieldMktOfferPx::RAW :
     case FieldMinBidSize::RAW :
     case FieldBidSize::RAW :
     case FieldMinOfferSize::RAW :
     case FieldOfferSize::RAW :
     case FieldValidUntilTime::RAW :
     case FieldBidSpotRate::RAW :
     case FieldOfferSpotRate::RAW :
     case FieldBidForwardPoints::RAW :
     case FieldOfferForwardPoints::RAW :
     case FieldMidPx::RAW :
     case FieldBidYield::RAW :
     case FieldMidYield::RAW :
     case FieldOfferYield::RAW :
     case FieldTransactTime::RAW :
     case FieldOrdType::RAW :
     case FieldBidForwardPoints2::RAW :
     case FieldOfferForwardPoints2::RAW :
     case FieldSettlCurrBidFxRate::RAW :
     case FieldSettlCurrOfferFxRate::RAW :
     case FieldSettlCurrFxRateCalc::RAW :
     case FieldCommission::RAW :
     case FieldCommType::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldExDestination::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldPrice::RAW :
     case FieldPriceType::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageConfirmation::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldConfirmID::RAW :
     case FieldConfirmRefID::RAW :
     case FieldConfirmReqID::RAW :
     case FieldConfirmTransType::RAW :
     case FieldConfirmType::RAW :
     case FieldCopyMsgIndicator::RAW :
     case FieldLegalConfirm::RAW :
     case FieldConfirmStatus::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldNoOrders::RAW :
     case FieldAllocID::RAW :
     case FieldSecondaryAllocID::RAW :
     case FieldIndividualAllocID::RAW :
     case FieldTransactTime::RAW :
     case FieldTradeDate::RAW :
     case FieldNoTrdRegTimestamps::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldAllocQty::RAW :
     case FieldQtyType::RAW :
     case FieldSide::RAW :
     case FieldCurrency::RAW :
     case FieldLastMkt::RAW :
     case FieldNoCapacities::RAW :
     case FieldAllocAccount::RAW :
     case FieldAllocAcctIDSource::RAW :
     case FieldAllocAccountType::RAW :
     case FieldAvgPx::RAW :
     case FieldAvgPxPrecision::RAW :
     case FieldPriceType::RAW :
     case FieldAvgParPx::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldReportedPx::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldProcessCode::RAW :
     case FieldGrossTradeAmt::RAW :
     case FieldNumDaysInterest::RAW :
     case FieldExDate::RAW :
     case FieldAccruedInterestRate::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldInterestAtMaturity::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldConcession::RAW :
     case FieldTotalTakedown::RAW :
     case FieldNetMoney::RAW :
     case FieldMaturityNetMoney::RAW :
     case FieldSettlCurrAmt::RAW :
     case FieldSettlCurrency::RAW :
     case FieldSettlCurrFxRate::RAW :
     case FieldSettlCurrFxRateCalc::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldSettlDeliveryType::RAW :
     case FieldStandInstDbType::RAW :
     case FieldStandInstDbName::RAW :
     case FieldStandInstDbID::RAW :
     case FieldNoDlvyInst::RAW :
     case FieldCommission::RAW :
     case FieldCommType::RAW :
     case FieldCommCurrency::RAW :
     case FieldFundRenewWaiv::RAW :
     case FieldSharedCommission::RAW :
     case FieldNoStipulations::RAW :
     case FieldNoMiscFees::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessagePositionMaintenanceRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosReqID::RAW :
     case FieldPosTransType::RAW :
     case FieldPosMaintAction::RAW :
     case FieldOrigPosReqRefID::RAW :
     case FieldPosMaintRptRefID::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldTransactTime::RAW :
     case FieldNoPositions::RAW :
     case FieldAdjustmentType::RAW :
     case FieldContraryInstructionIndicator::RAW :
     case FieldPriorSpreadIndicator::RAW :
     case FieldThresholdAmount::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessagePositionMaintenanceReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosMaintRptID::RAW :
     case FieldPosTransType::RAW :
     case FieldPosReqID::RAW :
     case FieldPosMaintAction::RAW :
     case FieldOrigPosReqRefID::RAW :
     case FieldPosMaintStatus::RAW :
     case FieldPosMaintResult::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldTransactTime::RAW :
     case FieldNoPositions::RAW :
     case FieldNoPosAmt::RAW :
     case FieldAdjustmentType::RAW :
     case FieldThresholdAmount::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRequestForPositions::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosReqID::RAW :
     case FieldPosReqType::RAW :
     case FieldMatchStatus::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldNoTradingSessions::RAW :
     case FieldTransactTime::RAW :
     case FieldResponseTransportType::RAW :
     case FieldResponseDestination::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageRequestForPositionsAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosMaintRptID::RAW :
     case FieldPosReqID::RAW :
     case FieldTotalNumPosReports::RAW :
     case FieldUnsolicitedIndicator::RAW :
     case FieldPosReqResult::RAW :
     case FieldPosReqStatus::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldResponseTransportType::RAW :
     case FieldResponseDestination::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessagePositionReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldPosMaintRptID::RAW :
     case FieldPosReqID::RAW :
     case FieldPosReqType::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldTotalNumPosReports::RAW :
     case FieldUnsolicitedIndicator::RAW :
     case FieldPosReqResult::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldCurrency::RAW :
     case FieldSettlPrice::RAW :
     case FieldSettlPriceType::RAW :
     case FieldPriorSettlPrice::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoPositions::RAW :
     case FieldNoPosAmt::RAW :
     case FieldRegistStatus::RAW :
     case FieldDeliveryDate::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradeCaptureReportRequestAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeRequestID::RAW :
     case FieldTradeRequestType::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldTotNumTradeReports::RAW :
     case FieldTradeRequestResult::RAW :
     case FieldTradeRequestStatus::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldMultiLegReportingType::RAW :
     case FieldResponseTransportType::RAW :
     case FieldResponseDestination::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageTradeCaptureReportAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldTradeReportID::RAW :
     case FieldTradeReportTransType::RAW :
     case FieldTradeReportType::RAW :
     case FieldTrdType::RAW :
     case FieldTrdSubType::RAW :
     case FieldSecondaryTrdType::RAW :
     case FieldTransferReason::RAW :
     case FieldExecType::RAW :
     case FieldTradeReportRefID::RAW :
     case FieldSecondaryTradeReportRefID::RAW :
     case FieldTrdRptStatus::RAW :
     case FieldTradeReportRejectReason::RAW :
     case FieldSecondaryTradeReportID::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldTradeLinkID::RAW :
     case FieldTrdMatchID::RAW :
     case FieldExecID::RAW :
     case FieldSecondaryExecID::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldTransactTime::RAW :
     case FieldNoTrdRegTimestamps::RAW :
     case FieldResponseTransportType::RAW :
     case FieldResponseDestination::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldNoLegs::RAW :
     case FieldClearingFeeIndicator::RAW :
     case FieldOrderCapacity::RAW :
     case FieldOrderRestrictions::RAW :
     case FieldCustOrderCapacity::RAW :
     case FieldAccount::RAW :
     case FieldAcctIDSource::RAW :
     case FieldAccountType::RAW :
     case FieldPositionEffect::RAW :
     case FieldPreallocMethod::RAW :
     case FieldNoAllocs::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAllocationReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocReportID::RAW :
     case FieldAllocID::RAW :
     case FieldAllocTransType::RAW :
     case FieldAllocReportRefID::RAW :
     case FieldAllocCancReplaceReason::RAW :
     case FieldSecondaryAllocID::RAW :
     case FieldAllocReportType::RAW :
     case FieldAllocStatus::RAW :
     case FieldAllocRejCode::RAW :
     case FieldRefAllocID::RAW :
     case FieldAllocIntermedReqType::RAW :
     case FieldAllocLinkID::RAW :
     case FieldAllocLinkType::RAW :
     case FieldBookingRefID::RAW :
     case FieldAllocNoOrdersType::RAW :
     case FieldNoOrders::RAW :
     case FieldNoExecs::RAW :
     case FieldPreviouslyReported::RAW :
     case FieldReversalIndicator::RAW :
     case FieldMatchType::RAW :
     case FieldSide::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldDeliveryForm::RAW :
     case FieldPctAtRisk::RAW :
     case FieldNoInstrAttrib::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoLegs::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldLastMkt::RAW :
     case FieldTradeOriginationDate::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldPriceType::RAW :
     case FieldAvgPx::RAW :
     case FieldAvgParPx::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldCurrency::RAW :
     case FieldAvgPxPrecision::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldTradeDate::RAW :
     case FieldTransactTime::RAW :
     case FieldSettlType::RAW :
     case FieldSettlDate::RAW :
     case FieldBookingType::RAW :
     case FieldGrossTradeAmt::RAW :
     case FieldConcession::RAW :
     case FieldTotalTakedown::RAW :
     case FieldNetMoney::RAW :
     case FieldPositionEffect::RAW :
     case FieldAutoAcceptIndicator::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldNumDaysInterest::RAW :
     case FieldAccruedInterestRate::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldTotalAccruedInterestAmt::RAW :
     case FieldInterestAtMaturity::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldLegalConfirm::RAW :
     case FieldNoStipulations::RAW :
     case FieldYieldType::RAW :
     case FieldYield::RAW :
     case FieldYieldCalcDate::RAW :
     case FieldYieldRedemptionDate::RAW :
     case FieldYieldRedemptionPrice::RAW :
     case FieldYieldRedemptionPriceType::RAW :
     case FieldTotNoAllocs::RAW :
     case FieldLastFragment::RAW :
     case FieldNoAllocs::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAllocationReportAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAllocReportID::RAW :
     case FieldAllocID::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldSecondaryAllocID::RAW :
     case FieldTradeDate::RAW :
     case FieldTransactTime::RAW :
     case FieldAllocStatus::RAW :
     case FieldAllocRejCode::RAW :
     case FieldAllocReportType::RAW :
     case FieldAllocIntermedReqType::RAW :
     case FieldMatchStatus::RAW :
     case FieldProduct::RAW :
     case FieldSecurityType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldNoAllocs::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageConfirmationAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldConfirmID::RAW :
     case FieldTradeDate::RAW :
     case FieldTransactTime::RAW :
     case FieldAffirmStatus::RAW :
     case FieldConfirmRejReason::RAW :
     case FieldMatchStatus::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageSettlementInstructionRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldSettlInstReqID::RAW :
     case FieldTransactTime::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAllocAccount::RAW :
     case FieldAllocAcctIDSource::RAW :
     case FieldSide::RAW :
     case FieldProduct::RAW :
     case FieldSecurityType::RAW :
     case FieldCFICode::RAW :
     case FieldEffectiveTime::RAW :
     case FieldExpireTime::RAW :
     case FieldLastUpdateTime::RAW :
     case FieldStandInstDbType::RAW :
     case FieldStandInstDbName::RAW :
     case FieldStandInstDbID::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageAssignmentReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldAsgnRptID::RAW :
     case FieldTotNumAssignmentReports::RAW :
     case FieldLastRptRequested::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAccountType::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldNoPositions::RAW :
     case FieldNoPosAmt::RAW :
     case FieldThresholdAmount::RAW :
     case FieldSettlPrice::RAW :
     case FieldSettlPriceType::RAW :
     case FieldUnderlyingSettlPrice::RAW :
     case FieldExpireDate::RAW :
     case FieldAssignmentMethod::RAW :
     case FieldAssignmentUnit::RAW :
     case FieldOpenInterest::RAW :
     case FieldExerciseMethod::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollReqID::RAW :
     case FieldCollAsgnReason::RAW :
     case FieldTransactTime::RAW :
     case FieldExpireTime::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAccountType::RAW :
     case FieldClOrdID::RAW :
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldNoExecs::RAW :
     case FieldNoTrades::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldSettlDate::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldMarginExcess::RAW :
     case FieldTotalNetValue::RAW :
     case FieldCashOutstanding::RAW :
     case FieldNoTrdRegTimestamps::RAW :
     case FieldSide::RAW :
     case FieldNoMiscFees::RAW :
     case FieldPrice::RAW :
     case FieldPriceType::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldNoStipulations::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralAssignment::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollAsgnID::RAW :
     case FieldCollReqID::RAW :
     case FieldCollAsgnReason::RAW :
     case FieldCollAsgnTransType::RAW :
     case FieldCollAsgnRefID::RAW :
     case FieldTransactTime::RAW :
     case FieldExpireTime::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAccountType::RAW :
     case FieldClOrdID::RAW :
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldNoExecs::RAW :
     case FieldNoTrades::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldSettlDate::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldMarginExcess::RAW :
     case FieldTotalNetValue::RAW :
     case FieldCashOutstanding::RAW :
     case FieldNoTrdRegTimestamps::RAW :
     case FieldSide::RAW :
     case FieldNoMiscFees::RAW :
     case FieldPrice::RAW :
     case FieldPriceType::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldNoStipulations::RAW :
     case FieldSettlDeliveryType::RAW :
     case FieldStandInstDbType::RAW :
     case FieldStandInstDbName::RAW :
     case FieldStandInstDbID::RAW :
     case FieldNoDlvyInst::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollRespID::RAW :
     case FieldCollAsgnID::RAW :
     case FieldCollReqID::RAW :
     case FieldCollAsgnReason::RAW :
     case FieldCollAsgnTransType::RAW :
     case FieldCollAsgnRespType::RAW :
     case FieldCollAsgnRejectReason::RAW :
     case FieldTransactTime::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAccountType::RAW :
     case FieldClOrdID::RAW :
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldNoExecs::RAW :
     case FieldNoTrades::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldSettlDate::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldMarginExcess::RAW :
     case FieldTotalNetValue::RAW :
     case FieldCashOutstanding::RAW :
     case FieldNoTrdRegTimestamps::RAW :
     case FieldSide::RAW :
     case FieldNoMiscFees::RAW :
     case FieldPrice::RAW :
     case FieldPriceType::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldNoStipulations::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralReport::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollRptID::RAW :
     case FieldCollInquiryID::RAW :
     case FieldCollStatus::RAW :
     case FieldTotNumReports::RAW :
     case FieldLastRptRequested::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAccountType::RAW :
     case FieldClOrdID::RAW :
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldNoExecs::RAW :
     case FieldNoTrades::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldSettlDate::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldMarginExcess::RAW :
     case FieldTotalNetValue::RAW :
     case FieldCashOutstanding::RAW :
     case FieldNoTrdRegTimestamps::RAW :
     case FieldSide::RAW :
     case FieldNoMiscFees::RAW :
     case FieldPrice::RAW :
     case FieldPriceType::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldNoStipulations::RAW :
     case FieldSettlDeliveryType::RAW :
     case FieldStandInstDbType::RAW :
     case FieldStandInstDbName::RAW :
     case FieldStandInstDbID::RAW :
     case FieldNoDlvyInst::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralInquiry::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollInquiryID::RAW :
     case FieldNoCollInquiryQualifier::RAW :
     case FieldSubscriptionRequestType::RAW :
     case FieldResponseTransportType::RAW :
     case FieldResponseDestination::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAccountType::RAW :
     case FieldClOrdID::RAW :
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldNoExecs::RAW :
     case FieldNoTrades::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldSettlDate::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldMarginExcess::RAW :
     case FieldTotalNetValue::RAW :
     case FieldCashOutstanding::RAW :
     case FieldNoTrdRegTimestamps::RAW :
     case FieldSide::RAW :
     case FieldPrice::RAW :
     case FieldPriceType::RAW :
     case FieldAccruedInterestAmt::RAW :
     case FieldEndAccruedInterestAmt::RAW :
     case FieldStartCash::RAW :
     case FieldEndCash::RAW :
     case FieldSpread::RAW :
     case FieldBenchmarkCurveCurrency::RAW :
     case FieldBenchmarkCurveName::RAW :
     case FieldBenchmarkCurvePoint::RAW :
     case FieldBenchmarkPrice::RAW :
     case FieldBenchmarkPriceType::RAW :
     case FieldBenchmarkSecurityID::RAW :
     case FieldBenchmarkSecurityIDSource::RAW :
     case FieldNoStipulations::RAW :
     case FieldSettlDeliveryType::RAW :
     case FieldStandInstDbType::RAW :
     case FieldStandInstDbName::RAW :
     case FieldStandInstDbID::RAW :
     case FieldNoDlvyInst::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNetworkCounterpartySystemStatusRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNetworkRequestType::RAW :
     case FieldNetworkRequestID::RAW :
     case FieldNoCompIDs::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageNetworkCounterpartySystemStatusResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldNetworkStatusResponseType::RAW :
     case FieldNetworkRequestID::RAW :
     case FieldNetworkResponseID::RAW :
     case FieldLastNetworkResponseID::RAW :
     case FieldNoCompIDs::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageUserRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldUserRequestID::RAW :
     case FieldUserRequestType::RAW :
     case FieldUsername::RAW :
     case FieldPassword::RAW :
     case FieldNewPassword::RAW :
     case FieldRawDataLength::RAW :
     case FieldRawData::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageUserResponse::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldUserRequestID::RAW :
     case FieldUsername::RAW :
     case FieldUserStatus::RAW :
     case FieldUserStatusText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageCollateralInquiryAck::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldCollInquiryID::RAW :
     case FieldCollInquiryStatus::RAW :
     case FieldCollInquiryResult::RAW :
     case FieldNoCollInquiryQualifier::RAW :
     case FieldTotNumReports::RAW :
     case FieldNoPartyIDs::RAW :
     case FieldAccount::RAW :
     case FieldAccountType::RAW :
     case FieldClOrdID::RAW :
     case FieldOrderID::RAW :
     case FieldSecondaryOrderID::RAW :
     case FieldSecondaryClOrdID::RAW :
     case FieldNoExecs::RAW :
     case FieldNoTrades::RAW :
     case FieldSymbol::RAW :
     case FieldSymbolSfx::RAW :
     case FieldSecurityID::RAW :
     case FieldSecurityIDSource::RAW :
     case FieldNoSecurityAltID::RAW :
     case FieldProduct::RAW :
     case FieldCFICode::RAW :
     case FieldSecurityType::RAW :
     case FieldSecuritySubType::RAW :
     case FieldMaturityMonthYear::RAW :
     case FieldMaturityDate::RAW :
     case FieldPutOrCall::RAW :
     case FieldCouponPaymentDate::RAW :
     case FieldIssueDate::RAW :
     case FieldRepoCollateralSecurityType::RAW :
     case FieldRepurchaseTerm::RAW :
     case FieldRepurchaseRate::RAW :
     case FieldFactor::RAW :
     case FieldCreditRating::RAW :
     case FieldInstrRegistry::RAW :
     case FieldCountryOfIssue::RAW :
     case FieldStateOrProvinceOfIssue::RAW :
     case FieldLocaleOfIssue::RAW :
     case FieldRedemptionDate::RAW :
     case FieldStrikePrice::RAW :
     case FieldStrikeCurrency::RAW :
     case FieldOptAttribute::RAW :
     case FieldContractMultiplier::RAW :
     case FieldCouponRate::RAW :
     case FieldSecurityExchange::RAW :
     case FieldIssuer::RAW :
     case FieldEncodedIssuerLen::RAW :
     case FieldEncodedIssuer::RAW :
     case FieldSecurityDesc::RAW :
     case FieldEncodedSecurityDescLen::RAW :
     case FieldEncodedSecurityDesc::RAW :
     case FieldPool::RAW :
     case FieldContractSettlMonth::RAW :
     case FieldCPProgram::RAW :
     case FieldCPRegType::RAW :
     case FieldNoEvents::RAW :
     case FieldDatedDate::RAW :
     case FieldInterestAccrualDate::RAW :
     case FieldAgreementDesc::RAW :
     case FieldAgreementID::RAW :
     case FieldAgreementDate::RAW :
     case FieldAgreementCurrency::RAW :
     case FieldTerminationType::RAW :
     case FieldStartDate::RAW :
     case FieldEndDate::RAW :
     case FieldDeliveryType::RAW :
     case FieldMarginRatio::RAW :
     case FieldSettlDate::RAW :
     case FieldQuantity::RAW :
     case FieldQtyType::RAW :
     case FieldCurrency::RAW :
     case FieldNoLegs::RAW :
     case FieldNoUnderlyings::RAW :
     case FieldTradingSessionID::RAW :
     case FieldTradingSessionSubID::RAW :
     case FieldSettlSessID::RAW :
     case FieldSettlSessSubID::RAW :
     case FieldClearingBusinessDate::RAW :
     case FieldResponseTransportType::RAW :
     case FieldResponseDestination::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}

FieldDepth MessageConfirmationRequest::getFieldDepth( raw_tag_t tag ){
   FieldDepth ret;
   switch( tag ){
     case FieldConfirmReqID::RAW :
     case FieldConfirmType::RAW :
     case FieldNoOrders::RAW :
     case FieldAllocID::RAW :
     case FieldSecondaryAllocID::RAW :
     case FieldIndividualAllocID::RAW :
     case FieldTransactTime::RAW :
     case FieldAllocAccount::RAW :
     case FieldAllocAcctIDSource::RAW :
     case FieldAllocAccountType::RAW :
     case FieldText::RAW :
     case FieldEncodedTextLen::RAW :
     case FieldEncodedText::RAW :
     case FieldCheckSum::RAW :
     ret.depth = 0; 
     return ret; 
   }
   for( auto m : groupGetDepthMethods ) if( m ){
     FieldDepth gdepth = (*m)( tag ); 
     if( gdepth.depth >= 0 ) { return gdepth.inc(); }
   }
   return ret;
}


const char * MessageHeader::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldBeginString::KEY : return fieldBeginString.offset >= 0 ? buf + fieldBeginString.offset : nullptr;
     case FieldBodyLength::KEY : return fieldBodyLength.offset >= 0 ? buf + fieldBodyLength.offset : nullptr;
     case FieldMsgType::KEY : return fieldMsgType.offset >= 0 ? buf + fieldMsgType.offset : nullptr;
     case FieldSenderCompID::KEY : return fieldSenderCompID.offset >= 0 ? buf + fieldSenderCompID.offset : nullptr;
     case FieldTargetCompID::KEY : return fieldTargetCompID.offset >= 0 ? buf + fieldTargetCompID.offset : nullptr;
     case FieldOnBehalfOfCompID::KEY : return fieldOnBehalfOfCompID.offset >= 0 ? buf + fieldOnBehalfOfCompID.offset : nullptr;
     case FieldDeliverToCompID::KEY : return fieldDeliverToCompID.offset >= 0 ? buf + fieldDeliverToCompID.offset : nullptr;
     case FieldSecureDataLen::KEY : return fieldSecureDataLen.offset >= 0 ? buf + fieldSecureDataLen.offset : nullptr;
     case FieldSecureData::KEY : return fieldSecureData.offset >= 0 ? buf + fieldSecureData.offset : nullptr;
     case FieldMsgSeqNum::KEY : return fieldMsgSeqNum.offset >= 0 ? buf + fieldMsgSeqNum.offset : nullptr;
     case FieldSenderSubID::KEY : return fieldSenderSubID.offset >= 0 ? buf + fieldSenderSubID.offset : nullptr;
     case FieldSenderLocationID::KEY : return fieldSenderLocationID.offset >= 0 ? buf + fieldSenderLocationID.offset : nullptr;
     case FieldTargetSubID::KEY : return fieldTargetSubID.offset >= 0 ? buf + fieldTargetSubID.offset : nullptr;
     case FieldTargetLocationID::KEY : return fieldTargetLocationID.offset >= 0 ? buf + fieldTargetLocationID.offset : nullptr;
     case FieldOnBehalfOfSubID::KEY : return fieldOnBehalfOfSubID.offset >= 0 ? buf + fieldOnBehalfOfSubID.offset : nullptr;
     case FieldOnBehalfOfLocationID::KEY : return fieldOnBehalfOfLocationID.offset >= 0 ? buf + fieldOnBehalfOfLocationID.offset : nullptr;
     case FieldDeliverToSubID::KEY : return fieldDeliverToSubID.offset >= 0 ? buf + fieldDeliverToSubID.offset : nullptr;
     case FieldDeliverToLocationID::KEY : return fieldDeliverToLocationID.offset >= 0 ? buf + fieldDeliverToLocationID.offset : nullptr;
     case FieldPossDupFlag::KEY : return fieldPossDupFlag.offset >= 0 ? buf + fieldPossDupFlag.offset : nullptr;
     case FieldPossResend::KEY : return fieldPossResend.offset >= 0 ? buf + fieldPossResend.offset : nullptr;
     case FieldSendingTime::KEY : return fieldSendingTime.offset >= 0 ? buf + fieldSendingTime.offset : nullptr;
     case FieldOrigSendingTime::KEY : return fieldOrigSendingTime.offset >= 0 ? buf + fieldOrigSendingTime.offset : nullptr;
     case FieldXmlDataLen::KEY : return fieldXmlDataLen.offset >= 0 ? buf + fieldXmlDataLen.offset : nullptr;
     case FieldXmlData::KEY : return fieldXmlData.offset >= 0 ? buf + fieldXmlData.offset : nullptr;
     case FieldMessageEncoding::KEY : return fieldMessageEncoding.offset >= 0 ? buf + fieldMessageEncoding.offset : nullptr;
     case FieldLastMsgSeqNumProcessed::KEY : return fieldLastMsgSeqNumProcessed.offset >= 0 ? buf + fieldLastMsgSeqNumProcessed.offset : nullptr;
     case FieldNoHops::KEY : return fieldNoHops.offset >= 0 ? buf + fieldNoHops.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageHeartbeat::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldTestReqID::KEY : return fieldTestReqID.offset >= 0 ? buf + fieldTestReqID.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTestRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldTestReqID::KEY : return fieldTestReqID.offset >= 0 ? buf + fieldTestReqID.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageResendRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldBeginSeqNo::KEY : return fieldBeginSeqNo.offset >= 0 ? buf + fieldBeginSeqNo.offset : nullptr;
     case FieldEndSeqNo::KEY : return fieldEndSeqNo.offset >= 0 ? buf + fieldEndSeqNo.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageReject::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldRefSeqNum::KEY : return fieldRefSeqNum.offset >= 0 ? buf + fieldRefSeqNum.offset : nullptr;
     case FieldRefTagID::KEY : return fieldRefTagID.offset >= 0 ? buf + fieldRefTagID.offset : nullptr;
     case FieldRefMsgType::KEY : return fieldRefMsgType.offset >= 0 ? buf + fieldRefMsgType.offset : nullptr;
     case FieldSessionRejectReason::KEY : return fieldSessionRejectReason.offset >= 0 ? buf + fieldSessionRejectReason.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSequenceReset::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldGapFillFlag::KEY : return fieldGapFillFlag.offset >= 0 ? buf + fieldGapFillFlag.offset : nullptr;
     case FieldNewSeqNo::KEY : return fieldNewSeqNo.offset >= 0 ? buf + fieldNewSeqNo.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageLogout::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageIOI::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldIOIID::KEY : return fieldIOIID.offset >= 0 ? buf + fieldIOIID.offset : nullptr;
     case FieldIOITransType::KEY : return fieldIOITransType.offset >= 0 ? buf + fieldIOITransType.offset : nullptr;
     case FieldIOIRefID::KEY : return fieldIOIRefID.offset >= 0 ? buf + fieldIOIRefID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldIOIQty::KEY : return fieldIOIQty.offset >= 0 ? buf + fieldIOIQty.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldValidUntilTime::KEY : return fieldValidUntilTime.offset >= 0 ? buf + fieldValidUntilTime.offset : nullptr;
     case FieldIOIQltyInd::KEY : return fieldIOIQltyInd.offset >= 0 ? buf + fieldIOIQltyInd.offset : nullptr;
     case FieldIOINaturalFlag::KEY : return fieldIOINaturalFlag.offset >= 0 ? buf + fieldIOINaturalFlag.offset : nullptr;
     case FieldNoIOIQualifiers::KEY : return fieldNoIOIQualifiers.offset >= 0 ? buf + fieldNoIOIQualifiers.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldURLLink::KEY : return fieldURLLink.offset >= 0 ? buf + fieldURLLink.offset : nullptr;
     case FieldNoRoutingIDs::KEY : return fieldNoRoutingIDs.offset >= 0 ? buf + fieldNoRoutingIDs.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAdvertisement::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldAdvId::KEY : return fieldAdvId.offset >= 0 ? buf + fieldAdvId.offset : nullptr;
     case FieldAdvTransType::KEY : return fieldAdvTransType.offset >= 0 ? buf + fieldAdvTransType.offset : nullptr;
     case FieldAdvRefID::KEY : return fieldAdvRefID.offset >= 0 ? buf + fieldAdvRefID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldAdvSide::KEY : return fieldAdvSide.offset >= 0 ? buf + fieldAdvSide.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldURLLink::KEY : return fieldURLLink.offset >= 0 ? buf + fieldURLLink.offset : nullptr;
     case FieldLastMkt::KEY : return fieldLastMkt.offset >= 0 ? buf + fieldLastMkt.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageExecutionReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldSecondaryExecID::KEY : return fieldSecondaryExecID.offset >= 0 ? buf + fieldSecondaryExecID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrigClOrdID::KEY : return fieldOrigClOrdID.offset >= 0 ? buf + fieldOrigClOrdID.offset : nullptr;
     case FieldClOrdLinkID::KEY : return fieldClOrdLinkID.offset >= 0 ? buf + fieldClOrdLinkID.offset : nullptr;
     case FieldQuoteRespID::KEY : return fieldQuoteRespID.offset >= 0 ? buf + fieldQuoteRespID.offset : nullptr;
     case FieldOrdStatusReqID::KEY : return fieldOrdStatusReqID.offset >= 0 ? buf + fieldOrdStatusReqID.offset : nullptr;
     case FieldMassStatusReqID::KEY : return fieldMassStatusReqID.offset >= 0 ? buf + fieldMassStatusReqID.offset : nullptr;
     case FieldTotNumReports::KEY : return fieldTotNumReports.offset >= 0 ? buf + fieldTotNumReports.offset : nullptr;
     case FieldLastRptRequested::KEY : return fieldLastRptRequested.offset >= 0 ? buf + fieldLastRptRequested.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldNoContraBrokers::KEY : return fieldNoContraBrokers.offset >= 0 ? buf + fieldNoContraBrokers.offset : nullptr;
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldCrossID::KEY : return fieldCrossID.offset >= 0 ? buf + fieldCrossID.offset : nullptr;
     case FieldOrigCrossID::KEY : return fieldOrigCrossID.offset >= 0 ? buf + fieldOrigCrossID.offset : nullptr;
     case FieldCrossType::KEY : return fieldCrossType.offset >= 0 ? buf + fieldCrossType.offset : nullptr;
     case FieldExecID::KEY : return fieldExecID.offset >= 0 ? buf + fieldExecID.offset : nullptr;
     case FieldExecRefID::KEY : return fieldExecRefID.offset >= 0 ? buf + fieldExecRefID.offset : nullptr;
     case FieldExecType::KEY : return fieldExecType.offset >= 0 ? buf + fieldExecType.offset : nullptr;
     case FieldOrdStatus::KEY : return fieldOrdStatus.offset >= 0 ? buf + fieldOrdStatus.offset : nullptr;
     case FieldWorkingIndicator::KEY : return fieldWorkingIndicator.offset >= 0 ? buf + fieldWorkingIndicator.offset : nullptr;
     case FieldOrdRejReason::KEY : return fieldOrdRejReason.offset >= 0 ? buf + fieldOrdRejReason.offset : nullptr;
     case FieldExecRestatementReason::KEY : return fieldExecRestatementReason.offset >= 0 ? buf + fieldExecRestatementReason.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::KEY : return fieldDayBookingInst.offset >= 0 ? buf + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::KEY : return fieldBookingUnit.offset >= 0 ? buf + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::KEY : return fieldPreallocMethod.offset >= 0 ? buf + fieldPreallocMethod.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::KEY : return fieldCashMargin.offset >= 0 ? buf + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::KEY : return fieldClearingFeeIndicator.offset >= 0 ? buf + fieldClearingFeeIndicator.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldStopPx::KEY : return fieldStopPx.offset >= 0 ? buf + fieldStopPx.offset : nullptr;
     case FieldPegOffsetValue::KEY : return fieldPegOffsetValue.offset >= 0 ? buf + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::KEY : return fieldPegMoveType.offset >= 0 ? buf + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::KEY : return fieldPegOffsetType.offset >= 0 ? buf + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::KEY : return fieldPegLimitType.offset >= 0 ? buf + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::KEY : return fieldPegRoundDirection.offset >= 0 ? buf + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::KEY : return fieldPegScope.offset >= 0 ? buf + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::KEY : return fieldDiscretionInst.offset >= 0 ? buf + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::KEY : return fieldDiscretionOffsetValue.offset >= 0 ? buf + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::KEY : return fieldDiscretionMoveType.offset >= 0 ? buf + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::KEY : return fieldDiscretionOffsetType.offset >= 0 ? buf + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::KEY : return fieldDiscretionLimitType.offset >= 0 ? buf + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::KEY : return fieldDiscretionRoundDirection.offset >= 0 ? buf + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::KEY : return fieldDiscretionScope.offset >= 0 ? buf + fieldDiscretionScope.offset : nullptr;
     case FieldPeggedPrice::KEY : return fieldPeggedPrice.offset >= 0 ? buf + fieldPeggedPrice.offset : nullptr;
     case FieldDiscretionPrice::KEY : return fieldDiscretionPrice.offset >= 0 ? buf + fieldDiscretionPrice.offset : nullptr;
     case FieldTargetStrategy::KEY : return fieldTargetStrategy.offset >= 0 ? buf + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::KEY : return fieldTargetStrategyParameters.offset >= 0 ? buf + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::KEY : return fieldParticipationRate.offset >= 0 ? buf + fieldParticipationRate.offset : nullptr;
     case FieldTargetStrategyPerformance::KEY : return fieldTargetStrategyPerformance.offset >= 0 ? buf + fieldTargetStrategyPerformance.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldComplianceID::KEY : return fieldComplianceID.offset >= 0 ? buf + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::KEY : return fieldSolicitedFlag.offset >= 0 ? buf + fieldSolicitedFlag.offset : nullptr;
     case FieldTimeInForce::KEY : return fieldTimeInForce.offset >= 0 ? buf + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::KEY : return fieldEffectiveTime.offset >= 0 ? buf + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::KEY : return fieldExpireDate.offset >= 0 ? buf + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldExecInst::KEY : return fieldExecInst.offset >= 0 ? buf + fieldExecInst.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::KEY : return fieldOrderRestrictions.offset >= 0 ? buf + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldLastQty::KEY : return fieldLastQty.offset >= 0 ? buf + fieldLastQty.offset : nullptr;
     case FieldUnderlyingLastQty::KEY : return fieldUnderlyingLastQty.offset >= 0 ? buf + fieldUnderlyingLastQty.offset : nullptr;
     case FieldLastPx::KEY : return fieldLastPx.offset >= 0 ? buf + fieldLastPx.offset : nullptr;
     case FieldUnderlyingLastPx::KEY : return fieldUnderlyingLastPx.offset >= 0 ? buf + fieldUnderlyingLastPx.offset : nullptr;
     case FieldLastParPx::KEY : return fieldLastParPx.offset >= 0 ? buf + fieldLastParPx.offset : nullptr;
     case FieldLastSpotRate::KEY : return fieldLastSpotRate.offset >= 0 ? buf + fieldLastSpotRate.offset : nullptr;
     case FieldLastForwardPoints::KEY : return fieldLastForwardPoints.offset >= 0 ? buf + fieldLastForwardPoints.offset : nullptr;
     case FieldLastMkt::KEY : return fieldLastMkt.offset >= 0 ? buf + fieldLastMkt.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldTimeBracket::KEY : return fieldTimeBracket.offset >= 0 ? buf + fieldTimeBracket.offset : nullptr;
     case FieldLastCapacity::KEY : return fieldLastCapacity.offset >= 0 ? buf + fieldLastCapacity.offset : nullptr;
     case FieldLeavesQty::KEY : return fieldLeavesQty.offset >= 0 ? buf + fieldLeavesQty.offset : nullptr;
     case FieldCumQty::KEY : return fieldCumQty.offset >= 0 ? buf + fieldCumQty.offset : nullptr;
     case FieldAvgPx::KEY : return fieldAvgPx.offset >= 0 ? buf + fieldAvgPx.offset : nullptr;
     case FieldDayOrderQty::KEY : return fieldDayOrderQty.offset >= 0 ? buf + fieldDayOrderQty.offset : nullptr;
     case FieldDayCumQty::KEY : return fieldDayCumQty.offset >= 0 ? buf + fieldDayCumQty.offset : nullptr;
     case FieldDayAvgPx::KEY : return fieldDayAvgPx.offset >= 0 ? buf + fieldDayAvgPx.offset : nullptr;
     case FieldGTBookingInst::KEY : return fieldGTBookingInst.offset >= 0 ? buf + fieldGTBookingInst.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldReportToExch::KEY : return fieldReportToExch.offset >= 0 ? buf + fieldReportToExch.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCommCurrency::KEY : return fieldCommCurrency.offset >= 0 ? buf + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::KEY : return fieldFundRenewWaiv.offset >= 0 ? buf + fieldFundRenewWaiv.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldGrossTradeAmt::KEY : return fieldGrossTradeAmt.offset >= 0 ? buf + fieldGrossTradeAmt.offset : nullptr;
     case FieldNumDaysInterest::KEY : return fieldNumDaysInterest.offset >= 0 ? buf + fieldNumDaysInterest.offset : nullptr;
     case FieldExDate::KEY : return fieldExDate.offset >= 0 ? buf + fieldExDate.offset : nullptr;
     case FieldAccruedInterestRate::KEY : return fieldAccruedInterestRate.offset >= 0 ? buf + fieldAccruedInterestRate.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldInterestAtMaturity::KEY : return fieldInterestAtMaturity.offset >= 0 ? buf + fieldInterestAtMaturity.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldTradedFlatSwitch::KEY : return fieldTradedFlatSwitch.offset >= 0 ? buf + fieldTradedFlatSwitch.offset : nullptr;
     case FieldBasisFeatureDate::KEY : return fieldBasisFeatureDate.offset >= 0 ? buf + fieldBasisFeatureDate.offset : nullptr;
     case FieldBasisFeaturePrice::KEY : return fieldBasisFeaturePrice.offset >= 0 ? buf + fieldBasisFeaturePrice.offset : nullptr;
     case FieldConcession::KEY : return fieldConcession.offset >= 0 ? buf + fieldConcession.offset : nullptr;
     case FieldTotalTakedown::KEY : return fieldTotalTakedown.offset >= 0 ? buf + fieldTotalTakedown.offset : nullptr;
     case FieldNetMoney::KEY : return fieldNetMoney.offset >= 0 ? buf + fieldNetMoney.offset : nullptr;
     case FieldSettlCurrAmt::KEY : return fieldSettlCurrAmt.offset >= 0 ? buf + fieldSettlCurrAmt.offset : nullptr;
     case FieldSettlCurrency::KEY : return fieldSettlCurrency.offset >= 0 ? buf + fieldSettlCurrency.offset : nullptr;
     case FieldSettlCurrFxRate::KEY : return fieldSettlCurrFxRate.offset >= 0 ? buf + fieldSettlCurrFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::KEY : return fieldSettlCurrFxRateCalc.offset >= 0 ? buf + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldHandlInst::KEY : return fieldHandlInst.offset >= 0 ? buf + fieldHandlInst.offset : nullptr;
     case FieldMinQty::KEY : return fieldMinQty.offset >= 0 ? buf + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::KEY : return fieldMaxFloor.offset >= 0 ? buf + fieldMaxFloor.offset : nullptr;
     case FieldPositionEffect::KEY : return fieldPositionEffect.offset >= 0 ? buf + fieldPositionEffect.offset : nullptr;
     case FieldMaxShow::KEY : return fieldMaxShow.offset >= 0 ? buf + fieldMaxShow.offset : nullptr;
     case FieldBookingType::KEY : return fieldBookingType.offset >= 0 ? buf + fieldBookingType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldSettlDate2::KEY : return fieldSettlDate2.offset >= 0 ? buf + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::KEY : return fieldOrderQty2.offset >= 0 ? buf + fieldOrderQty2.offset : nullptr;
     case FieldLastForwardPoints2::KEY : return fieldLastForwardPoints2.offset >= 0 ? buf + fieldLastForwardPoints2.offset : nullptr;
     case FieldMultiLegReportingType::KEY : return fieldMultiLegReportingType.offset >= 0 ? buf + fieldMultiLegReportingType.offset : nullptr;
     case FieldCancellationRights::KEY : return fieldCancellationRights.offset >= 0 ? buf + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::KEY : return fieldMoneyLaunderingStatus.offset >= 0 ? buf + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldDesignation::KEY : return fieldDesignation.offset >= 0 ? buf + fieldDesignation.offset : nullptr;
     case FieldTransBkdTime::KEY : return fieldTransBkdTime.offset >= 0 ? buf + fieldTransBkdTime.offset : nullptr;
     case FieldExecValuationPoint::KEY : return fieldExecValuationPoint.offset >= 0 ? buf + fieldExecValuationPoint.offset : nullptr;
     case FieldExecPriceType::KEY : return fieldExecPriceType.offset >= 0 ? buf + fieldExecPriceType.offset : nullptr;
     case FieldExecPriceAdjustment::KEY : return fieldExecPriceAdjustment.offset >= 0 ? buf + fieldExecPriceAdjustment.offset : nullptr;
     case FieldPriorityIndicator::KEY : return fieldPriorityIndicator.offset >= 0 ? buf + fieldPriorityIndicator.offset : nullptr;
     case FieldPriceImprovement::KEY : return fieldPriceImprovement.offset >= 0 ? buf + fieldPriceImprovement.offset : nullptr;
     case FieldLastLiquidityInd::KEY : return fieldLastLiquidityInd.offset >= 0 ? buf + fieldLastLiquidityInd.offset : nullptr;
     case FieldNoContAmts::KEY : return fieldNoContAmts.offset >= 0 ? buf + fieldNoContAmts.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldCopyMsgIndicator::KEY : return fieldCopyMsgIndicator.offset >= 0 ? buf + fieldCopyMsgIndicator.offset : nullptr;
     case FieldNoMiscFees::KEY : return fieldNoMiscFees.offset >= 0 ? buf + fieldNoMiscFees.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderCancelReject::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldClOrdLinkID::KEY : return fieldClOrdLinkID.offset >= 0 ? buf + fieldClOrdLinkID.offset : nullptr;
     case FieldOrigClOrdID::KEY : return fieldOrigClOrdID.offset >= 0 ? buf + fieldOrigClOrdID.offset : nullptr;
     case FieldOrdStatus::KEY : return fieldOrdStatus.offset >= 0 ? buf + fieldOrdStatus.offset : nullptr;
     case FieldWorkingIndicator::KEY : return fieldWorkingIndicator.offset >= 0 ? buf + fieldWorkingIndicator.offset : nullptr;
     case FieldOrigOrdModTime::KEY : return fieldOrigOrdModTime.offset >= 0 ? buf + fieldOrigOrdModTime.offset : nullptr;
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldCxlRejResponseTo::KEY : return fieldCxlRejResponseTo.offset >= 0 ? buf + fieldCxlRejResponseTo.offset : nullptr;
     case FieldCxlRejReason::KEY : return fieldCxlRejReason.offset >= 0 ? buf + fieldCxlRejReason.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageLogon::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldEncryptMethod::KEY : return fieldEncryptMethod.offset >= 0 ? buf + fieldEncryptMethod.offset : nullptr;
     case FieldHeartBtInt::KEY : return fieldHeartBtInt.offset >= 0 ? buf + fieldHeartBtInt.offset : nullptr;
     case FieldRawDataLength::KEY : return fieldRawDataLength.offset >= 0 ? buf + fieldRawDataLength.offset : nullptr;
     case FieldRawData::KEY : return fieldRawData.offset >= 0 ? buf + fieldRawData.offset : nullptr;
     case FieldResetSeqNumFlag::KEY : return fieldResetSeqNumFlag.offset >= 0 ? buf + fieldResetSeqNumFlag.offset : nullptr;
     case FieldNextExpectedMsgSeqNum::KEY : return fieldNextExpectedMsgSeqNum.offset >= 0 ? buf + fieldNextExpectedMsgSeqNum.offset : nullptr;
     case FieldMaxMessageSize::KEY : return fieldMaxMessageSize.offset >= 0 ? buf + fieldMaxMessageSize.offset : nullptr;
     case FieldNoMsgTypes::KEY : return fieldNoMsgTypes.offset >= 0 ? buf + fieldNoMsgTypes.offset : nullptr;
     case FieldTestMessageIndicator::KEY : return fieldTestMessageIndicator.offset >= 0 ? buf + fieldTestMessageIndicator.offset : nullptr;
     case FieldUsername::KEY : return fieldUsername.offset >= 0 ? buf + fieldUsername.offset : nullptr;
     case FieldPassword::KEY : return fieldPassword.offset >= 0 ? buf + fieldPassword.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNews::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrigTime::KEY : return fieldOrigTime.offset >= 0 ? buf + fieldOrigTime.offset : nullptr;
     case FieldUrgency::KEY : return fieldUrgency.offset >= 0 ? buf + fieldUrgency.offset : nullptr;
     case FieldHeadline::KEY : return fieldHeadline.offset >= 0 ? buf + fieldHeadline.offset : nullptr;
     case FieldEncodedHeadlineLen::KEY : return fieldEncodedHeadlineLen.offset >= 0 ? buf + fieldEncodedHeadlineLen.offset : nullptr;
     case FieldEncodedHeadline::KEY : return fieldEncodedHeadline.offset >= 0 ? buf + fieldEncodedHeadline.offset : nullptr;
     case FieldNoRoutingIDs::KEY : return fieldNoRoutingIDs.offset >= 0 ? buf + fieldNoRoutingIDs.offset : nullptr;
     case FieldNoRelatedSym::KEY : return fieldNoRelatedSym.offset >= 0 ? buf + fieldNoRelatedSym.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLinesOfText::KEY : return fieldNoLinesOfText.offset >= 0 ? buf + fieldNoLinesOfText.offset : nullptr;
     case FieldURLLink::KEY : return fieldURLLink.offset >= 0 ? buf + fieldURLLink.offset : nullptr;
     case FieldRawDataLength::KEY : return fieldRawDataLength.offset >= 0 ? buf + fieldRawDataLength.offset : nullptr;
     case FieldRawData::KEY : return fieldRawData.offset >= 0 ? buf + fieldRawData.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageEmail::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldEmailThreadID::KEY : return fieldEmailThreadID.offset >= 0 ? buf + fieldEmailThreadID.offset : nullptr;
     case FieldEmailType::KEY : return fieldEmailType.offset >= 0 ? buf + fieldEmailType.offset : nullptr;
     case FieldOrigTime::KEY : return fieldOrigTime.offset >= 0 ? buf + fieldOrigTime.offset : nullptr;
     case FieldSubject::KEY : return fieldSubject.offset >= 0 ? buf + fieldSubject.offset : nullptr;
     case FieldEncodedSubjectLen::KEY : return fieldEncodedSubjectLen.offset >= 0 ? buf + fieldEncodedSubjectLen.offset : nullptr;
     case FieldEncodedSubject::KEY : return fieldEncodedSubject.offset >= 0 ? buf + fieldEncodedSubject.offset : nullptr;
     case FieldNoRoutingIDs::KEY : return fieldNoRoutingIDs.offset >= 0 ? buf + fieldNoRoutingIDs.offset : nullptr;
     case FieldNoRelatedSym::KEY : return fieldNoRelatedSym.offset >= 0 ? buf + fieldNoRelatedSym.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldNoLinesOfText::KEY : return fieldNoLinesOfText.offset >= 0 ? buf + fieldNoLinesOfText.offset : nullptr;
     case FieldRawDataLength::KEY : return fieldRawDataLength.offset >= 0 ? buf + fieldRawDataLength.offset : nullptr;
     case FieldRawData::KEY : return fieldRawData.offset >= 0 ? buf + fieldRawData.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNewOrderSingle::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::KEY : return fieldClOrdLinkID.offset >= 0 ? buf + fieldClOrdLinkID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::KEY : return fieldDayBookingInst.offset >= 0 ? buf + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::KEY : return fieldBookingUnit.offset >= 0 ? buf + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::KEY : return fieldPreallocMethod.offset >= 0 ? buf + fieldPreallocMethod.offset : nullptr;
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::KEY : return fieldCashMargin.offset >= 0 ? buf + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::KEY : return fieldClearingFeeIndicator.offset >= 0 ? buf + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::KEY : return fieldHandlInst.offset >= 0 ? buf + fieldHandlInst.offset : nullptr;
     case FieldExecInst::KEY : return fieldExecInst.offset >= 0 ? buf + fieldExecInst.offset : nullptr;
     case FieldMinQty::KEY : return fieldMinQty.offset >= 0 ? buf + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::KEY : return fieldMaxFloor.offset >= 0 ? buf + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::KEY : return fieldProcessCode.offset >= 0 ? buf + fieldProcessCode.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldPrevClosePx::KEY : return fieldPrevClosePx.offset >= 0 ? buf + fieldPrevClosePx.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldLocateReqd::KEY : return fieldLocateReqd.offset >= 0 ? buf + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldStopPx::KEY : return fieldStopPx.offset >= 0 ? buf + fieldStopPx.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldComplianceID::KEY : return fieldComplianceID.offset >= 0 ? buf + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::KEY : return fieldSolicitedFlag.offset >= 0 ? buf + fieldSolicitedFlag.offset : nullptr;
     case FieldIOIID::KEY : return fieldIOIID.offset >= 0 ? buf + fieldIOIID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::KEY : return fieldTimeInForce.offset >= 0 ? buf + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::KEY : return fieldEffectiveTime.offset >= 0 ? buf + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::KEY : return fieldExpireDate.offset >= 0 ? buf + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::KEY : return fieldGTBookingInst.offset >= 0 ? buf + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCommCurrency::KEY : return fieldCommCurrency.offset >= 0 ? buf + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::KEY : return fieldFundRenewWaiv.offset >= 0 ? buf + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::KEY : return fieldOrderRestrictions.offset >= 0 ? buf + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::KEY : return fieldForexReq.offset >= 0 ? buf + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::KEY : return fieldSettlCurrency.offset >= 0 ? buf + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::KEY : return fieldBookingType.offset >= 0 ? buf + fieldBookingType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldSettlDate2::KEY : return fieldSettlDate2.offset >= 0 ? buf + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::KEY : return fieldOrderQty2.offset >= 0 ? buf + fieldOrderQty2.offset : nullptr;
     case FieldPrice2::KEY : return fieldPrice2.offset >= 0 ? buf + fieldPrice2.offset : nullptr;
     case FieldPositionEffect::KEY : return fieldPositionEffect.offset >= 0 ? buf + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::KEY : return fieldCoveredOrUncovered.offset >= 0 ? buf + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::KEY : return fieldMaxShow.offset >= 0 ? buf + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::KEY : return fieldPegOffsetValue.offset >= 0 ? buf + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::KEY : return fieldPegMoveType.offset >= 0 ? buf + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::KEY : return fieldPegOffsetType.offset >= 0 ? buf + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::KEY : return fieldPegLimitType.offset >= 0 ? buf + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::KEY : return fieldPegRoundDirection.offset >= 0 ? buf + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::KEY : return fieldPegScope.offset >= 0 ? buf + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::KEY : return fieldDiscretionInst.offset >= 0 ? buf + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::KEY : return fieldDiscretionOffsetValue.offset >= 0 ? buf + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::KEY : return fieldDiscretionMoveType.offset >= 0 ? buf + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::KEY : return fieldDiscretionOffsetType.offset >= 0 ? buf + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::KEY : return fieldDiscretionLimitType.offset >= 0 ? buf + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::KEY : return fieldDiscretionRoundDirection.offset >= 0 ? buf + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::KEY : return fieldDiscretionScope.offset >= 0 ? buf + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::KEY : return fieldTargetStrategy.offset >= 0 ? buf + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::KEY : return fieldTargetStrategyParameters.offset >= 0 ? buf + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::KEY : return fieldParticipationRate.offset >= 0 ? buf + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::KEY : return fieldCancellationRights.offset >= 0 ? buf + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::KEY : return fieldMoneyLaunderingStatus.offset >= 0 ? buf + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldDesignation::KEY : return fieldDesignation.offset >= 0 ? buf + fieldDesignation.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNewOrderList::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldBidID::KEY : return fieldBidID.offset >= 0 ? buf + fieldBidID.offset : nullptr;
     case FieldClientBidID::KEY : return fieldClientBidID.offset >= 0 ? buf + fieldClientBidID.offset : nullptr;
     case FieldProgRptReqs::KEY : return fieldProgRptReqs.offset >= 0 ? buf + fieldProgRptReqs.offset : nullptr;
     case FieldBidType::KEY : return fieldBidType.offset >= 0 ? buf + fieldBidType.offset : nullptr;
     case FieldProgPeriodInterval::KEY : return fieldProgPeriodInterval.offset >= 0 ? buf + fieldProgPeriodInterval.offset : nullptr;
     case FieldCancellationRights::KEY : return fieldCancellationRights.offset >= 0 ? buf + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::KEY : return fieldMoneyLaunderingStatus.offset >= 0 ? buf + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldListExecInstType::KEY : return fieldListExecInstType.offset >= 0 ? buf + fieldListExecInstType.offset : nullptr;
     case FieldListExecInst::KEY : return fieldListExecInst.offset >= 0 ? buf + fieldListExecInst.offset : nullptr;
     case FieldEncodedListExecInstLen::KEY : return fieldEncodedListExecInstLen.offset >= 0 ? buf + fieldEncodedListExecInstLen.offset : nullptr;
     case FieldEncodedListExecInst::KEY : return fieldEncodedListExecInst.offset >= 0 ? buf + fieldEncodedListExecInst.offset : nullptr;
     case FieldAllowableOneSidednessPct::KEY : return fieldAllowableOneSidednessPct.offset >= 0 ? buf + fieldAllowableOneSidednessPct.offset : nullptr;
     case FieldAllowableOneSidednessValue::KEY : return fieldAllowableOneSidednessValue.offset >= 0 ? buf + fieldAllowableOneSidednessValue.offset : nullptr;
     case FieldAllowableOneSidednessCurr::KEY : return fieldAllowableOneSidednessCurr.offset >= 0 ? buf + fieldAllowableOneSidednessCurr.offset : nullptr;
     case FieldTotNoOrders::KEY : return fieldTotNoOrders.offset >= 0 ? buf + fieldTotNoOrders.offset : nullptr;
     case FieldLastFragment::KEY : return fieldLastFragment.offset >= 0 ? buf + fieldLastFragment.offset : nullptr;
     case FieldNoOrders::KEY : return fieldNoOrders.offset >= 0 ? buf + fieldNoOrders.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderCancelRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrigClOrdID::KEY : return fieldOrigClOrdID.offset >= 0 ? buf + fieldOrigClOrdID.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::KEY : return fieldClOrdLinkID.offset >= 0 ? buf + fieldClOrdLinkID.offset : nullptr;
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldOrigOrdModTime::KEY : return fieldOrigOrdModTime.offset >= 0 ? buf + fieldOrigOrdModTime.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldComplianceID::KEY : return fieldComplianceID.offset >= 0 ? buf + fieldComplianceID.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderCancelReplaceRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldOrigClOrdID::KEY : return fieldOrigClOrdID.offset >= 0 ? buf + fieldOrigClOrdID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::KEY : return fieldClOrdLinkID.offset >= 0 ? buf + fieldClOrdLinkID.offset : nullptr;
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldOrigOrdModTime::KEY : return fieldOrigOrdModTime.offset >= 0 ? buf + fieldOrigOrdModTime.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::KEY : return fieldDayBookingInst.offset >= 0 ? buf + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::KEY : return fieldBookingUnit.offset >= 0 ? buf + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::KEY : return fieldPreallocMethod.offset >= 0 ? buf + fieldPreallocMethod.offset : nullptr;
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::KEY : return fieldCashMargin.offset >= 0 ? buf + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::KEY : return fieldClearingFeeIndicator.offset >= 0 ? buf + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::KEY : return fieldHandlInst.offset >= 0 ? buf + fieldHandlInst.offset : nullptr;
     case FieldExecInst::KEY : return fieldExecInst.offset >= 0 ? buf + fieldExecInst.offset : nullptr;
     case FieldMinQty::KEY : return fieldMinQty.offset >= 0 ? buf + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::KEY : return fieldMaxFloor.offset >= 0 ? buf + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldStopPx::KEY : return fieldStopPx.offset >= 0 ? buf + fieldStopPx.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldPegOffsetValue::KEY : return fieldPegOffsetValue.offset >= 0 ? buf + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::KEY : return fieldPegMoveType.offset >= 0 ? buf + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::KEY : return fieldPegOffsetType.offset >= 0 ? buf + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::KEY : return fieldPegLimitType.offset >= 0 ? buf + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::KEY : return fieldPegRoundDirection.offset >= 0 ? buf + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::KEY : return fieldPegScope.offset >= 0 ? buf + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::KEY : return fieldDiscretionInst.offset >= 0 ? buf + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::KEY : return fieldDiscretionOffsetValue.offset >= 0 ? buf + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::KEY : return fieldDiscretionMoveType.offset >= 0 ? buf + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::KEY : return fieldDiscretionOffsetType.offset >= 0 ? buf + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::KEY : return fieldDiscretionLimitType.offset >= 0 ? buf + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::KEY : return fieldDiscretionRoundDirection.offset >= 0 ? buf + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::KEY : return fieldDiscretionScope.offset >= 0 ? buf + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::KEY : return fieldTargetStrategy.offset >= 0 ? buf + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::KEY : return fieldTargetStrategyParameters.offset >= 0 ? buf + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::KEY : return fieldParticipationRate.offset >= 0 ? buf + fieldParticipationRate.offset : nullptr;
     case FieldComplianceID::KEY : return fieldComplianceID.offset >= 0 ? buf + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::KEY : return fieldSolicitedFlag.offset >= 0 ? buf + fieldSolicitedFlag.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldTimeInForce::KEY : return fieldTimeInForce.offset >= 0 ? buf + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::KEY : return fieldEffectiveTime.offset >= 0 ? buf + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::KEY : return fieldExpireDate.offset >= 0 ? buf + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::KEY : return fieldGTBookingInst.offset >= 0 ? buf + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCommCurrency::KEY : return fieldCommCurrency.offset >= 0 ? buf + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::KEY : return fieldFundRenewWaiv.offset >= 0 ? buf + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::KEY : return fieldOrderRestrictions.offset >= 0 ? buf + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::KEY : return fieldForexReq.offset >= 0 ? buf + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::KEY : return fieldSettlCurrency.offset >= 0 ? buf + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::KEY : return fieldBookingType.offset >= 0 ? buf + fieldBookingType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldSettlDate2::KEY : return fieldSettlDate2.offset >= 0 ? buf + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::KEY : return fieldOrderQty2.offset >= 0 ? buf + fieldOrderQty2.offset : nullptr;
     case FieldPrice2::KEY : return fieldPrice2.offset >= 0 ? buf + fieldPrice2.offset : nullptr;
     case FieldPositionEffect::KEY : return fieldPositionEffect.offset >= 0 ? buf + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::KEY : return fieldCoveredOrUncovered.offset >= 0 ? buf + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::KEY : return fieldMaxShow.offset >= 0 ? buf + fieldMaxShow.offset : nullptr;
     case FieldLocateReqd::KEY : return fieldLocateReqd.offset >= 0 ? buf + fieldLocateReqd.offset : nullptr;
     case FieldCancellationRights::KEY : return fieldCancellationRights.offset >= 0 ? buf + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::KEY : return fieldMoneyLaunderingStatus.offset >= 0 ? buf + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldDesignation::KEY : return fieldDesignation.offset >= 0 ? buf + fieldDesignation.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderStatusRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::KEY : return fieldClOrdLinkID.offset >= 0 ? buf + fieldClOrdLinkID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldOrdStatusReqID::KEY : return fieldOrdStatusReqID.offset >= 0 ? buf + fieldOrdStatusReqID.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAllocationInstruction::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldAllocTransType::KEY : return fieldAllocTransType.offset >= 0 ? buf + fieldAllocTransType.offset : nullptr;
     case FieldAllocType::KEY : return fieldAllocType.offset >= 0 ? buf + fieldAllocType.offset : nullptr;
     case FieldSecondaryAllocID::KEY : return fieldSecondaryAllocID.offset >= 0 ? buf + fieldSecondaryAllocID.offset : nullptr;
     case FieldRefAllocID::KEY : return fieldRefAllocID.offset >= 0 ? buf + fieldRefAllocID.offset : nullptr;
     case FieldAllocCancReplaceReason::KEY : return fieldAllocCancReplaceReason.offset >= 0 ? buf + fieldAllocCancReplaceReason.offset : nullptr;
     case FieldAllocIntermedReqType::KEY : return fieldAllocIntermedReqType.offset >= 0 ? buf + fieldAllocIntermedReqType.offset : nullptr;
     case FieldAllocLinkID::KEY : return fieldAllocLinkID.offset >= 0 ? buf + fieldAllocLinkID.offset : nullptr;
     case FieldAllocLinkType::KEY : return fieldAllocLinkType.offset >= 0 ? buf + fieldAllocLinkType.offset : nullptr;
     case FieldBookingRefID::KEY : return fieldBookingRefID.offset >= 0 ? buf + fieldBookingRefID.offset : nullptr;
     case FieldAllocNoOrdersType::KEY : return fieldAllocNoOrdersType.offset >= 0 ? buf + fieldAllocNoOrdersType.offset : nullptr;
     case FieldNoOrders::KEY : return fieldNoOrders.offset >= 0 ? buf + fieldNoOrders.offset : nullptr;
     case FieldNoExecs::KEY : return fieldNoExecs.offset >= 0 ? buf + fieldNoExecs.offset : nullptr;
     case FieldPreviouslyReported::KEY : return fieldPreviouslyReported.offset >= 0 ? buf + fieldPreviouslyReported.offset : nullptr;
     case FieldReversalIndicator::KEY : return fieldReversalIndicator.offset >= 0 ? buf + fieldReversalIndicator.offset : nullptr;
     case FieldMatchType::KEY : return fieldMatchType.offset >= 0 ? buf + fieldMatchType.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldLastMkt::KEY : return fieldLastMkt.offset >= 0 ? buf + fieldLastMkt.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldAvgPx::KEY : return fieldAvgPx.offset >= 0 ? buf + fieldAvgPx.offset : nullptr;
     case FieldAvgParPx::KEY : return fieldAvgParPx.offset >= 0 ? buf + fieldAvgParPx.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldAvgPxPrecision::KEY : return fieldAvgPxPrecision.offset >= 0 ? buf + fieldAvgPxPrecision.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldBookingType::KEY : return fieldBookingType.offset >= 0 ? buf + fieldBookingType.offset : nullptr;
     case FieldGrossTradeAmt::KEY : return fieldGrossTradeAmt.offset >= 0 ? buf + fieldGrossTradeAmt.offset : nullptr;
     case FieldConcession::KEY : return fieldConcession.offset >= 0 ? buf + fieldConcession.offset : nullptr;
     case FieldTotalTakedown::KEY : return fieldTotalTakedown.offset >= 0 ? buf + fieldTotalTakedown.offset : nullptr;
     case FieldNetMoney::KEY : return fieldNetMoney.offset >= 0 ? buf + fieldNetMoney.offset : nullptr;
     case FieldPositionEffect::KEY : return fieldPositionEffect.offset >= 0 ? buf + fieldPositionEffect.offset : nullptr;
     case FieldAutoAcceptIndicator::KEY : return fieldAutoAcceptIndicator.offset >= 0 ? buf + fieldAutoAcceptIndicator.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldNumDaysInterest::KEY : return fieldNumDaysInterest.offset >= 0 ? buf + fieldNumDaysInterest.offset : nullptr;
     case FieldAccruedInterestRate::KEY : return fieldAccruedInterestRate.offset >= 0 ? buf + fieldAccruedInterestRate.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldTotalAccruedInterestAmt::KEY : return fieldTotalAccruedInterestAmt.offset >= 0 ? buf + fieldTotalAccruedInterestAmt.offset : nullptr;
     case FieldInterestAtMaturity::KEY : return fieldInterestAtMaturity.offset >= 0 ? buf + fieldInterestAtMaturity.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldLegalConfirm::KEY : return fieldLegalConfirm.offset >= 0 ? buf + fieldLegalConfirm.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldTotNoAllocs::KEY : return fieldTotNoAllocs.offset >= 0 ? buf + fieldTotNoAllocs.offset : nullptr;
     case FieldLastFragment::KEY : return fieldLastFragment.offset >= 0 ? buf + fieldLastFragment.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListCancelRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListExecute::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldClientBidID::KEY : return fieldClientBidID.offset >= 0 ? buf + fieldClientBidID.offset : nullptr;
     case FieldBidID::KEY : return fieldBidID.offset >= 0 ? buf + fieldBidID.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListStatusRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListStatus::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldListStatusType::KEY : return fieldListStatusType.offset >= 0 ? buf + fieldListStatusType.offset : nullptr;
     case FieldNoRpts::KEY : return fieldNoRpts.offset >= 0 ? buf + fieldNoRpts.offset : nullptr;
     case FieldListOrderStatus::KEY : return fieldListOrderStatus.offset >= 0 ? buf + fieldListOrderStatus.offset : nullptr;
     case FieldRptSeq::KEY : return fieldRptSeq.offset >= 0 ? buf + fieldRptSeq.offset : nullptr;
     case FieldListStatusText::KEY : return fieldListStatusText.offset >= 0 ? buf + fieldListStatusText.offset : nullptr;
     case FieldEncodedListStatusTextLen::KEY : return fieldEncodedListStatusTextLen.offset >= 0 ? buf + fieldEncodedListStatusTextLen.offset : nullptr;
     case FieldEncodedListStatusText::KEY : return fieldEncodedListStatusText.offset >= 0 ? buf + fieldEncodedListStatusText.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldTotNoOrders::KEY : return fieldTotNoOrders.offset >= 0 ? buf + fieldTotNoOrders.offset : nullptr;
     case FieldLastFragment::KEY : return fieldLastFragment.offset >= 0 ? buf + fieldLastFragment.offset : nullptr;
     case FieldNoOrders::KEY : return fieldNoOrders.offset >= 0 ? buf + fieldNoOrders.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAllocationInstructionAck::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldSecondaryAllocID::KEY : return fieldSecondaryAllocID.offset >= 0 ? buf + fieldSecondaryAllocID.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldAllocStatus::KEY : return fieldAllocStatus.offset >= 0 ? buf + fieldAllocStatus.offset : nullptr;
     case FieldAllocRejCode::KEY : return fieldAllocRejCode.offset >= 0 ? buf + fieldAllocRejCode.offset : nullptr;
     case FieldAllocType::KEY : return fieldAllocType.offset >= 0 ? buf + fieldAllocType.offset : nullptr;
     case FieldAllocIntermedReqType::KEY : return fieldAllocIntermedReqType.offset >= 0 ? buf + fieldAllocIntermedReqType.offset : nullptr;
     case FieldMatchStatus::KEY : return fieldMatchStatus.offset >= 0 ? buf + fieldMatchStatus.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageDontKnowTrade::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldExecID::KEY : return fieldExecID.offset >= 0 ? buf + fieldExecID.offset : nullptr;
     case FieldDKReason::KEY : return fieldDKReason.offset >= 0 ? buf + fieldDKReason.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldLastQty::KEY : return fieldLastQty.offset >= 0 ? buf + fieldLastQty.offset : nullptr;
     case FieldLastPx::KEY : return fieldLastPx.offset >= 0 ? buf + fieldLastPx.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::KEY : return fieldQuoteReqID.offset >= 0 ? buf + fieldQuoteReqID.offset : nullptr;
     case FieldRFQReqID::KEY : return fieldRFQReqID.offset >= 0 ? buf + fieldRFQReqID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldNoRelatedSym::KEY : return fieldNoRelatedSym.offset >= 0 ? buf + fieldNoRelatedSym.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuote::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::KEY : return fieldQuoteReqID.offset >= 0 ? buf + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldQuoteRespID::KEY : return fieldQuoteRespID.offset >= 0 ? buf + fieldQuoteRespID.offset : nullptr;
     case FieldQuoteType::KEY : return fieldQuoteType.offset >= 0 ? buf + fieldQuoteType.offset : nullptr;
     case FieldNoQuoteQualifiers::KEY : return fieldNoQuoteQualifiers.offset >= 0 ? buf + fieldNoQuoteQualifiers.offset : nullptr;
     case FieldQuoteResponseLevel::KEY : return fieldQuoteResponseLevel.offset >= 0 ? buf + fieldQuoteResponseLevel.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldSettlDate2::KEY : return fieldSettlDate2.offset >= 0 ? buf + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::KEY : return fieldOrderQty2.offset >= 0 ? buf + fieldOrderQty2.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldBidPx::KEY : return fieldBidPx.offset >= 0 ? buf + fieldBidPx.offset : nullptr;
     case FieldOfferPx::KEY : return fieldOfferPx.offset >= 0 ? buf + fieldOfferPx.offset : nullptr;
     case FieldMktBidPx::KEY : return fieldMktBidPx.offset >= 0 ? buf + fieldMktBidPx.offset : nullptr;
     case FieldMktOfferPx::KEY : return fieldMktOfferPx.offset >= 0 ? buf + fieldMktOfferPx.offset : nullptr;
     case FieldMinBidSize::KEY : return fieldMinBidSize.offset >= 0 ? buf + fieldMinBidSize.offset : nullptr;
     case FieldBidSize::KEY : return fieldBidSize.offset >= 0 ? buf + fieldBidSize.offset : nullptr;
     case FieldMinOfferSize::KEY : return fieldMinOfferSize.offset >= 0 ? buf + fieldMinOfferSize.offset : nullptr;
     case FieldOfferSize::KEY : return fieldOfferSize.offset >= 0 ? buf + fieldOfferSize.offset : nullptr;
     case FieldValidUntilTime::KEY : return fieldValidUntilTime.offset >= 0 ? buf + fieldValidUntilTime.offset : nullptr;
     case FieldBidSpotRate::KEY : return fieldBidSpotRate.offset >= 0 ? buf + fieldBidSpotRate.offset : nullptr;
     case FieldOfferSpotRate::KEY : return fieldOfferSpotRate.offset >= 0 ? buf + fieldOfferSpotRate.offset : nullptr;
     case FieldBidForwardPoints::KEY : return fieldBidForwardPoints.offset >= 0 ? buf + fieldBidForwardPoints.offset : nullptr;
     case FieldOfferForwardPoints::KEY : return fieldOfferForwardPoints.offset >= 0 ? buf + fieldOfferForwardPoints.offset : nullptr;
     case FieldMidPx::KEY : return fieldMidPx.offset >= 0 ? buf + fieldMidPx.offset : nullptr;
     case FieldBidYield::KEY : return fieldBidYield.offset >= 0 ? buf + fieldBidYield.offset : nullptr;
     case FieldMidYield::KEY : return fieldMidYield.offset >= 0 ? buf + fieldMidYield.offset : nullptr;
     case FieldOfferYield::KEY : return fieldOfferYield.offset >= 0 ? buf + fieldOfferYield.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldBidForwardPoints2::KEY : return fieldBidForwardPoints2.offset >= 0 ? buf + fieldBidForwardPoints2.offset : nullptr;
     case FieldOfferForwardPoints2::KEY : return fieldOfferForwardPoints2.offset >= 0 ? buf + fieldOfferForwardPoints2.offset : nullptr;
     case FieldSettlCurrBidFxRate::KEY : return fieldSettlCurrBidFxRate.offset >= 0 ? buf + fieldSettlCurrBidFxRate.offset : nullptr;
     case FieldSettlCurrOfferFxRate::KEY : return fieldSettlCurrOfferFxRate.offset >= 0 ? buf + fieldSettlCurrOfferFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::KEY : return fieldSettlCurrFxRateCalc.offset >= 0 ? buf + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSettlementInstructions::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSettlInstMsgID::KEY : return fieldSettlInstMsgID.offset >= 0 ? buf + fieldSettlInstMsgID.offset : nullptr;
     case FieldSettlInstReqID::KEY : return fieldSettlInstReqID.offset >= 0 ? buf + fieldSettlInstReqID.offset : nullptr;
     case FieldSettlInstMode::KEY : return fieldSettlInstMode.offset >= 0 ? buf + fieldSettlInstMode.offset : nullptr;
     case FieldSettlInstReqRejCode::KEY : return fieldSettlInstReqRejCode.offset >= 0 ? buf + fieldSettlInstReqRejCode.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoSettlInst::KEY : return fieldNoSettlInst.offset >= 0 ? buf + fieldNoSettlInst.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMarketDataRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDReqID::KEY : return fieldMDReqID.offset >= 0 ? buf + fieldMDReqID.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldMarketDepth::KEY : return fieldMarketDepth.offset >= 0 ? buf + fieldMarketDepth.offset : nullptr;
     case FieldMDUpdateType::KEY : return fieldMDUpdateType.offset >= 0 ? buf + fieldMDUpdateType.offset : nullptr;
     case FieldAggregatedBook::KEY : return fieldAggregatedBook.offset >= 0 ? buf + fieldAggregatedBook.offset : nullptr;
     case FieldOpenCloseSettlFlag::KEY : return fieldOpenCloseSettlFlag.offset >= 0 ? buf + fieldOpenCloseSettlFlag.offset : nullptr;
     case FieldScope::KEY : return fieldScope.offset >= 0 ? buf + fieldScope.offset : nullptr;
     case FieldMDImplicitDelete::KEY : return fieldMDImplicitDelete.offset >= 0 ? buf + fieldMDImplicitDelete.offset : nullptr;
     case FieldNoMDEntryTypes::KEY : return fieldNoMDEntryTypes.offset >= 0 ? buf + fieldNoMDEntryTypes.offset : nullptr;
     case FieldNoRelatedSym::KEY : return fieldNoRelatedSym.offset >= 0 ? buf + fieldNoRelatedSym.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldApplQueueAction::KEY : return fieldApplQueueAction.offset >= 0 ? buf + fieldApplQueueAction.offset : nullptr;
     case FieldApplQueueMax::KEY : return fieldApplQueueMax.offset >= 0 ? buf + fieldApplQueueMax.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMarketDataSnapshotFullRefresh::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDReqID::KEY : return fieldMDReqID.offset >= 0 ? buf + fieldMDReqID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldFinancialStatus::KEY : return fieldFinancialStatus.offset >= 0 ? buf + fieldFinancialStatus.offset : nullptr;
     case FieldCorporateAction::KEY : return fieldCorporateAction.offset >= 0 ? buf + fieldCorporateAction.offset : nullptr;
     case FieldNetChgPrevDay::KEY : return fieldNetChgPrevDay.offset >= 0 ? buf + fieldNetChgPrevDay.offset : nullptr;
     case FieldNoMDEntries::KEY : return fieldNoMDEntries.offset >= 0 ? buf + fieldNoMDEntries.offset : nullptr;
     case FieldApplQueueDepth::KEY : return fieldApplQueueDepth.offset >= 0 ? buf + fieldApplQueueDepth.offset : nullptr;
     case FieldApplQueueResolution::KEY : return fieldApplQueueResolution.offset >= 0 ? buf + fieldApplQueueResolution.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMarketDataIncrementalRefresh::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDReqID::KEY : return fieldMDReqID.offset >= 0 ? buf + fieldMDReqID.offset : nullptr;
     case FieldNoMDEntries::KEY : return fieldNoMDEntries.offset >= 0 ? buf + fieldNoMDEntries.offset : nullptr;
     case FieldApplQueueDepth::KEY : return fieldApplQueueDepth.offset >= 0 ? buf + fieldApplQueueDepth.offset : nullptr;
     case FieldApplQueueResolution::KEY : return fieldApplQueueResolution.offset >= 0 ? buf + fieldApplQueueResolution.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMarketDataRequestReject::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldMDReqID::KEY : return fieldMDReqID.offset >= 0 ? buf + fieldMDReqID.offset : nullptr;
     case FieldMDReqRejReason::KEY : return fieldMDReqRejReason.offset >= 0 ? buf + fieldMDReqRejReason.offset : nullptr;
     case FieldNoAltMDSource::KEY : return fieldNoAltMDSource.offset >= 0 ? buf + fieldNoAltMDSource.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteCancel::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::KEY : return fieldQuoteReqID.offset >= 0 ? buf + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldQuoteCancelType::KEY : return fieldQuoteCancelType.offset >= 0 ? buf + fieldQuoteCancelType.offset : nullptr;
     case FieldQuoteResponseLevel::KEY : return fieldQuoteResponseLevel.offset >= 0 ? buf + fieldQuoteResponseLevel.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldNoQuoteEntries::KEY : return fieldNoQuoteEntries.offset >= 0 ? buf + fieldNoQuoteEntries.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteStatusRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteStatusReqID::KEY : return fieldQuoteStatusReqID.offset >= 0 ? buf + fieldQuoteStatusReqID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMassQuoteAcknowledgement::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::KEY : return fieldQuoteReqID.offset >= 0 ? buf + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldQuoteStatus::KEY : return fieldQuoteStatus.offset >= 0 ? buf + fieldQuoteStatus.offset : nullptr;
     case FieldQuoteRejectReason::KEY : return fieldQuoteRejectReason.offset >= 0 ? buf + fieldQuoteRejectReason.offset : nullptr;
     case FieldQuoteResponseLevel::KEY : return fieldQuoteResponseLevel.offset >= 0 ? buf + fieldQuoteResponseLevel.offset : nullptr;
     case FieldQuoteType::KEY : return fieldQuoteType.offset >= 0 ? buf + fieldQuoteType.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldNoQuoteSets::KEY : return fieldNoQuoteSets.offset >= 0 ? buf + fieldNoQuoteSets.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityDefinitionRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::KEY : return fieldSecurityReqID.offset >= 0 ? buf + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityRequestType::KEY : return fieldSecurityRequestType.offset >= 0 ? buf + fieldSecurityRequestType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldExpirationCycle::KEY : return fieldExpirationCycle.offset >= 0 ? buf + fieldExpirationCycle.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityDefinition::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::KEY : return fieldSecurityReqID.offset >= 0 ? buf + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityResponseID::KEY : return fieldSecurityResponseID.offset >= 0 ? buf + fieldSecurityResponseID.offset : nullptr;
     case FieldSecurityResponseType::KEY : return fieldSecurityResponseType.offset >= 0 ? buf + fieldSecurityResponseType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldExpirationCycle::KEY : return fieldExpirationCycle.offset >= 0 ? buf + fieldExpirationCycle.offset : nullptr;
     case FieldRoundLot::KEY : return fieldRoundLot.offset >= 0 ? buf + fieldRoundLot.offset : nullptr;
     case FieldMinTradeVol::KEY : return fieldMinTradeVol.offset >= 0 ? buf + fieldMinTradeVol.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityStatusRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityStatusReqID::KEY : return fieldSecurityStatusReqID.offset >= 0 ? buf + fieldSecurityStatusReqID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityStatus::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityStatusReqID::KEY : return fieldSecurityStatusReqID.offset >= 0 ? buf + fieldSecurityStatusReqID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldUnsolicitedIndicator::KEY : return fieldUnsolicitedIndicator.offset >= 0 ? buf + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldSecurityTradingStatus::KEY : return fieldSecurityTradingStatus.offset >= 0 ? buf + fieldSecurityTradingStatus.offset : nullptr;
     case FieldFinancialStatus::KEY : return fieldFinancialStatus.offset >= 0 ? buf + fieldFinancialStatus.offset : nullptr;
     case FieldCorporateAction::KEY : return fieldCorporateAction.offset >= 0 ? buf + fieldCorporateAction.offset : nullptr;
     case FieldHaltReasonChar::KEY : return fieldHaltReasonChar.offset >= 0 ? buf + fieldHaltReasonChar.offset : nullptr;
     case FieldInViewOfCommon::KEY : return fieldInViewOfCommon.offset >= 0 ? buf + fieldInViewOfCommon.offset : nullptr;
     case FieldDueToRelated::KEY : return fieldDueToRelated.offset >= 0 ? buf + fieldDueToRelated.offset : nullptr;
     case FieldBuyVolume::KEY : return fieldBuyVolume.offset >= 0 ? buf + fieldBuyVolume.offset : nullptr;
     case FieldSellVolume::KEY : return fieldSellVolume.offset >= 0 ? buf + fieldSellVolume.offset : nullptr;
     case FieldHighPx::KEY : return fieldHighPx.offset >= 0 ? buf + fieldHighPx.offset : nullptr;
     case FieldLowPx::KEY : return fieldLowPx.offset >= 0 ? buf + fieldLowPx.offset : nullptr;
     case FieldLastPx::KEY : return fieldLastPx.offset >= 0 ? buf + fieldLastPx.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldAdjustment::KEY : return fieldAdjustment.offset >= 0 ? buf + fieldAdjustment.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradingSessionStatusRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradSesReqID::KEY : return fieldTradSesReqID.offset >= 0 ? buf + fieldTradSesReqID.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldTradSesMethod::KEY : return fieldTradSesMethod.offset >= 0 ? buf + fieldTradSesMethod.offset : nullptr;
     case FieldTradSesMode::KEY : return fieldTradSesMode.offset >= 0 ? buf + fieldTradSesMode.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradingSessionStatus::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradSesReqID::KEY : return fieldTradSesReqID.offset >= 0 ? buf + fieldTradSesReqID.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldTradSesMethod::KEY : return fieldTradSesMethod.offset >= 0 ? buf + fieldTradSesMethod.offset : nullptr;
     case FieldTradSesMode::KEY : return fieldTradSesMode.offset >= 0 ? buf + fieldTradSesMode.offset : nullptr;
     case FieldUnsolicitedIndicator::KEY : return fieldUnsolicitedIndicator.offset >= 0 ? buf + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldTradSesStatus::KEY : return fieldTradSesStatus.offset >= 0 ? buf + fieldTradSesStatus.offset : nullptr;
     case FieldTradSesStatusRejReason::KEY : return fieldTradSesStatusRejReason.offset >= 0 ? buf + fieldTradSesStatusRejReason.offset : nullptr;
     case FieldTradSesStartTime::KEY : return fieldTradSesStartTime.offset >= 0 ? buf + fieldTradSesStartTime.offset : nullptr;
     case FieldTradSesOpenTime::KEY : return fieldTradSesOpenTime.offset >= 0 ? buf + fieldTradSesOpenTime.offset : nullptr;
     case FieldTradSesPreCloseTime::KEY : return fieldTradSesPreCloseTime.offset >= 0 ? buf + fieldTradSesPreCloseTime.offset : nullptr;
     case FieldTradSesCloseTime::KEY : return fieldTradSesCloseTime.offset >= 0 ? buf + fieldTradSesCloseTime.offset : nullptr;
     case FieldTradSesEndTime::KEY : return fieldTradSesEndTime.offset >= 0 ? buf + fieldTradSesEndTime.offset : nullptr;
     case FieldTotalVolumeTraded::KEY : return fieldTotalVolumeTraded.offset >= 0 ? buf + fieldTotalVolumeTraded.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMassQuote::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::KEY : return fieldQuoteReqID.offset >= 0 ? buf + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldQuoteType::KEY : return fieldQuoteType.offset >= 0 ? buf + fieldQuoteType.offset : nullptr;
     case FieldQuoteResponseLevel::KEY : return fieldQuoteResponseLevel.offset >= 0 ? buf + fieldQuoteResponseLevel.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldDefBidSize::KEY : return fieldDefBidSize.offset >= 0 ? buf + fieldDefBidSize.offset : nullptr;
     case FieldDefOfferSize::KEY : return fieldDefOfferSize.offset >= 0 ? buf + fieldDefOfferSize.offset : nullptr;
     case FieldNoQuoteSets::KEY : return fieldNoQuoteSets.offset >= 0 ? buf + fieldNoQuoteSets.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageBusinessMessageReject::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldRefSeqNum::KEY : return fieldRefSeqNum.offset >= 0 ? buf + fieldRefSeqNum.offset : nullptr;
     case FieldRefMsgType::KEY : return fieldRefMsgType.offset >= 0 ? buf + fieldRefMsgType.offset : nullptr;
     case FieldBusinessRejectRefID::KEY : return fieldBusinessRejectRefID.offset >= 0 ? buf + fieldBusinessRejectRefID.offset : nullptr;
     case FieldBusinessRejectReason::KEY : return fieldBusinessRejectReason.offset >= 0 ? buf + fieldBusinessRejectReason.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageBidRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldBidID::KEY : return fieldBidID.offset >= 0 ? buf + fieldBidID.offset : nullptr;
     case FieldClientBidID::KEY : return fieldClientBidID.offset >= 0 ? buf + fieldClientBidID.offset : nullptr;
     case FieldBidRequestTransType::KEY : return fieldBidRequestTransType.offset >= 0 ? buf + fieldBidRequestTransType.offset : nullptr;
     case FieldListName::KEY : return fieldListName.offset >= 0 ? buf + fieldListName.offset : nullptr;
     case FieldTotNoRelatedSym::KEY : return fieldTotNoRelatedSym.offset >= 0 ? buf + fieldTotNoRelatedSym.offset : nullptr;
     case FieldBidType::KEY : return fieldBidType.offset >= 0 ? buf + fieldBidType.offset : nullptr;
     case FieldNumTickets::KEY : return fieldNumTickets.offset >= 0 ? buf + fieldNumTickets.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldSideValue1::KEY : return fieldSideValue1.offset >= 0 ? buf + fieldSideValue1.offset : nullptr;
     case FieldSideValue2::KEY : return fieldSideValue2.offset >= 0 ? buf + fieldSideValue2.offset : nullptr;
     case FieldNoBidDescriptors::KEY : return fieldNoBidDescriptors.offset >= 0 ? buf + fieldNoBidDescriptors.offset : nullptr;
     case FieldNoBidComponents::KEY : return fieldNoBidComponents.offset >= 0 ? buf + fieldNoBidComponents.offset : nullptr;
     case FieldLiquidityIndType::KEY : return fieldLiquidityIndType.offset >= 0 ? buf + fieldLiquidityIndType.offset : nullptr;
     case FieldWtAverageLiquidity::KEY : return fieldWtAverageLiquidity.offset >= 0 ? buf + fieldWtAverageLiquidity.offset : nullptr;
     case FieldExchangeForPhysical::KEY : return fieldExchangeForPhysical.offset >= 0 ? buf + fieldExchangeForPhysical.offset : nullptr;
     case FieldOutMainCntryUIndex::KEY : return fieldOutMainCntryUIndex.offset >= 0 ? buf + fieldOutMainCntryUIndex.offset : nullptr;
     case FieldCrossPercent::KEY : return fieldCrossPercent.offset >= 0 ? buf + fieldCrossPercent.offset : nullptr;
     case FieldProgRptReqs::KEY : return fieldProgRptReqs.offset >= 0 ? buf + fieldProgRptReqs.offset : nullptr;
     case FieldProgPeriodInterval::KEY : return fieldProgPeriodInterval.offset >= 0 ? buf + fieldProgPeriodInterval.offset : nullptr;
     case FieldIncTaxInd::KEY : return fieldIncTaxInd.offset >= 0 ? buf + fieldIncTaxInd.offset : nullptr;
     case FieldForexReq::KEY : return fieldForexReq.offset >= 0 ? buf + fieldForexReq.offset : nullptr;
     case FieldNumBidders::KEY : return fieldNumBidders.offset >= 0 ? buf + fieldNumBidders.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldBidTradeType::KEY : return fieldBidTradeType.offset >= 0 ? buf + fieldBidTradeType.offset : nullptr;
     case FieldBasisPxType::KEY : return fieldBasisPxType.offset >= 0 ? buf + fieldBasisPxType.offset : nullptr;
     case FieldStrikeTime::KEY : return fieldStrikeTime.offset >= 0 ? buf + fieldStrikeTime.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageBidResponse::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldBidID::KEY : return fieldBidID.offset >= 0 ? buf + fieldBidID.offset : nullptr;
     case FieldClientBidID::KEY : return fieldClientBidID.offset >= 0 ? buf + fieldClientBidID.offset : nullptr;
     case FieldNoBidComponents::KEY : return fieldNoBidComponents.offset >= 0 ? buf + fieldNoBidComponents.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageListStrikePrice::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldListID::KEY : return fieldListID.offset >= 0 ? buf + fieldListID.offset : nullptr;
     case FieldTotNoStrikes::KEY : return fieldTotNoStrikes.offset >= 0 ? buf + fieldTotNoStrikes.offset : nullptr;
     case FieldLastFragment::KEY : return fieldLastFragment.offset >= 0 ? buf + fieldLastFragment.offset : nullptr;
     case FieldNoStrikes::KEY : return fieldNoStrikes.offset >= 0 ? buf + fieldNoStrikes.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageXMLnonFIX::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRegistrationInstructions::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldRegistTransType::KEY : return fieldRegistTransType.offset >= 0 ? buf + fieldRegistTransType.offset : nullptr;
     case FieldRegistRefID::KEY : return fieldRegistRefID.offset >= 0 ? buf + fieldRegistRefID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldRegistAcctType::KEY : return fieldRegistAcctType.offset >= 0 ? buf + fieldRegistAcctType.offset : nullptr;
     case FieldTaxAdvantageType::KEY : return fieldTaxAdvantageType.offset >= 0 ? buf + fieldTaxAdvantageType.offset : nullptr;
     case FieldOwnershipType::KEY : return fieldOwnershipType.offset >= 0 ? buf + fieldOwnershipType.offset : nullptr;
     case FieldNoRegistDtls::KEY : return fieldNoRegistDtls.offset >= 0 ? buf + fieldNoRegistDtls.offset : nullptr;
     case FieldNoDistribInsts::KEY : return fieldNoDistribInsts.offset >= 0 ? buf + fieldNoDistribInsts.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRegistrationInstructionsResponse::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldRegistTransType::KEY : return fieldRegistTransType.offset >= 0 ? buf + fieldRegistTransType.offset : nullptr;
     case FieldRegistRefID::KEY : return fieldRegistRefID.offset >= 0 ? buf + fieldRegistRefID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldRegistStatus::KEY : return fieldRegistStatus.offset >= 0 ? buf + fieldRegistStatus.offset : nullptr;
     case FieldRegistRejReasonCode::KEY : return fieldRegistRejReasonCode.offset >= 0 ? buf + fieldRegistRejReasonCode.offset : nullptr;
     case FieldRegistRejReasonText::KEY : return fieldRegistRejReasonText.offset >= 0 ? buf + fieldRegistRejReasonText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderMassCancelRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldMassCancelRequestType::KEY : return fieldMassCancelRequestType.offset >= 0 ? buf + fieldMassCancelRequestType.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldUnderlyingSymbol::KEY : return fieldUnderlyingSymbol.offset >= 0 ? buf + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::KEY : return fieldUnderlyingSymbolSfx.offset >= 0 ? buf + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::KEY : return fieldUnderlyingSecurityID.offset >= 0 ? buf + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::KEY : return fieldUnderlyingSecurityIDSource.offset >= 0 ? buf + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::KEY : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? buf + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::KEY : return fieldUnderlyingProduct.offset >= 0 ? buf + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::KEY : return fieldUnderlyingCFICode.offset >= 0 ? buf + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::KEY : return fieldUnderlyingSecurityType.offset >= 0 ? buf + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::KEY : return fieldUnderlyingSecuritySubType.offset >= 0 ? buf + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::KEY : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? buf + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::KEY : return fieldUnderlyingMaturityDate.offset >= 0 ? buf + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::KEY : return fieldUnderlyingPutOrCall.offset >= 0 ? buf + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::KEY : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? buf + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::KEY : return fieldUnderlyingIssueDate.offset >= 0 ? buf + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::KEY : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? buf + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::KEY : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? buf + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::KEY : return fieldUnderlyingRepurchaseRate.offset >= 0 ? buf + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::KEY : return fieldUnderlyingFactor.offset >= 0 ? buf + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::KEY : return fieldUnderlyingCreditRating.offset >= 0 ? buf + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::KEY : return fieldUnderlyingInstrRegistry.offset >= 0 ? buf + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::KEY : return fieldUnderlyingCountryOfIssue.offset >= 0 ? buf + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::KEY : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? buf + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::KEY : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? buf + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::KEY : return fieldUnderlyingRedemptionDate.offset >= 0 ? buf + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::KEY : return fieldUnderlyingStrikePrice.offset >= 0 ? buf + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::KEY : return fieldUnderlyingStrikeCurrency.offset >= 0 ? buf + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::KEY : return fieldUnderlyingOptAttribute.offset >= 0 ? buf + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::KEY : return fieldUnderlyingContractMultiplier.offset >= 0 ? buf + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::KEY : return fieldUnderlyingCouponRate.offset >= 0 ? buf + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::KEY : return fieldUnderlyingSecurityExchange.offset >= 0 ? buf + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::KEY : return fieldUnderlyingIssuer.offset >= 0 ? buf + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::KEY : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? buf + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::KEY : return fieldEncodedUnderlyingIssuer.offset >= 0 ? buf + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::KEY : return fieldUnderlyingSecurityDesc.offset >= 0 ? buf + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::KEY : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::KEY : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::KEY : return fieldUnderlyingCPProgram.offset >= 0 ? buf + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::KEY : return fieldUnderlyingCPRegType.offset >= 0 ? buf + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::KEY : return fieldUnderlyingCurrency.offset >= 0 ? buf + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::KEY : return fieldUnderlyingQty.offset >= 0 ? buf + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::KEY : return fieldUnderlyingPx.offset >= 0 ? buf + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::KEY : return fieldUnderlyingDirtyPrice.offset >= 0 ? buf + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::KEY : return fieldUnderlyingEndPrice.offset >= 0 ? buf + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::KEY : return fieldUnderlyingStartValue.offset >= 0 ? buf + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::KEY : return fieldUnderlyingCurrentValue.offset >= 0 ? buf + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::KEY : return fieldUnderlyingEndValue.offset >= 0 ? buf + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::KEY : return fieldNoUnderlyingStips.offset >= 0 ? buf + fieldNoUnderlyingStips.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderMassCancelReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldMassCancelRequestType::KEY : return fieldMassCancelRequestType.offset >= 0 ? buf + fieldMassCancelRequestType.offset : nullptr;
     case FieldMassCancelResponse::KEY : return fieldMassCancelResponse.offset >= 0 ? buf + fieldMassCancelResponse.offset : nullptr;
     case FieldMassCancelRejectReason::KEY : return fieldMassCancelRejectReason.offset >= 0 ? buf + fieldMassCancelRejectReason.offset : nullptr;
     case FieldTotalAffectedOrders::KEY : return fieldTotalAffectedOrders.offset >= 0 ? buf + fieldTotalAffectedOrders.offset : nullptr;
     case FieldNoAffectedOrders::KEY : return fieldNoAffectedOrders.offset >= 0 ? buf + fieldNoAffectedOrders.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldUnderlyingSymbol::KEY : return fieldUnderlyingSymbol.offset >= 0 ? buf + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::KEY : return fieldUnderlyingSymbolSfx.offset >= 0 ? buf + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::KEY : return fieldUnderlyingSecurityID.offset >= 0 ? buf + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::KEY : return fieldUnderlyingSecurityIDSource.offset >= 0 ? buf + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::KEY : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? buf + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::KEY : return fieldUnderlyingProduct.offset >= 0 ? buf + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::KEY : return fieldUnderlyingCFICode.offset >= 0 ? buf + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::KEY : return fieldUnderlyingSecurityType.offset >= 0 ? buf + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::KEY : return fieldUnderlyingSecuritySubType.offset >= 0 ? buf + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::KEY : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? buf + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::KEY : return fieldUnderlyingMaturityDate.offset >= 0 ? buf + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::KEY : return fieldUnderlyingPutOrCall.offset >= 0 ? buf + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::KEY : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? buf + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::KEY : return fieldUnderlyingIssueDate.offset >= 0 ? buf + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::KEY : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? buf + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::KEY : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? buf + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::KEY : return fieldUnderlyingRepurchaseRate.offset >= 0 ? buf + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::KEY : return fieldUnderlyingFactor.offset >= 0 ? buf + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::KEY : return fieldUnderlyingCreditRating.offset >= 0 ? buf + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::KEY : return fieldUnderlyingInstrRegistry.offset >= 0 ? buf + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::KEY : return fieldUnderlyingCountryOfIssue.offset >= 0 ? buf + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::KEY : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? buf + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::KEY : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? buf + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::KEY : return fieldUnderlyingRedemptionDate.offset >= 0 ? buf + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::KEY : return fieldUnderlyingStrikePrice.offset >= 0 ? buf + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::KEY : return fieldUnderlyingStrikeCurrency.offset >= 0 ? buf + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::KEY : return fieldUnderlyingOptAttribute.offset >= 0 ? buf + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::KEY : return fieldUnderlyingContractMultiplier.offset >= 0 ? buf + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::KEY : return fieldUnderlyingCouponRate.offset >= 0 ? buf + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::KEY : return fieldUnderlyingSecurityExchange.offset >= 0 ? buf + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::KEY : return fieldUnderlyingIssuer.offset >= 0 ? buf + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::KEY : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? buf + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::KEY : return fieldEncodedUnderlyingIssuer.offset >= 0 ? buf + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::KEY : return fieldUnderlyingSecurityDesc.offset >= 0 ? buf + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::KEY : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::KEY : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::KEY : return fieldUnderlyingCPProgram.offset >= 0 ? buf + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::KEY : return fieldUnderlyingCPRegType.offset >= 0 ? buf + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::KEY : return fieldUnderlyingCurrency.offset >= 0 ? buf + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::KEY : return fieldUnderlyingQty.offset >= 0 ? buf + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::KEY : return fieldUnderlyingPx.offset >= 0 ? buf + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::KEY : return fieldUnderlyingDirtyPrice.offset >= 0 ? buf + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::KEY : return fieldUnderlyingEndPrice.offset >= 0 ? buf + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::KEY : return fieldUnderlyingStartValue.offset >= 0 ? buf + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::KEY : return fieldUnderlyingCurrentValue.offset >= 0 ? buf + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::KEY : return fieldUnderlyingEndValue.offset >= 0 ? buf + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::KEY : return fieldNoUnderlyingStips.offset >= 0 ? buf + fieldNoUnderlyingStips.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNewOrderCross::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldCrossID::KEY : return fieldCrossID.offset >= 0 ? buf + fieldCrossID.offset : nullptr;
     case FieldCrossType::KEY : return fieldCrossType.offset >= 0 ? buf + fieldCrossType.offset : nullptr;
     case FieldCrossPrioritization::KEY : return fieldCrossPrioritization.offset >= 0 ? buf + fieldCrossPrioritization.offset : nullptr;
     case FieldNoSides::KEY : return fieldNoSides.offset >= 0 ? buf + fieldNoSides.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldHandlInst::KEY : return fieldHandlInst.offset >= 0 ? buf + fieldHandlInst.offset : nullptr;
     case FieldExecInst::KEY : return fieldExecInst.offset >= 0 ? buf + fieldExecInst.offset : nullptr;
     case FieldMinQty::KEY : return fieldMinQty.offset >= 0 ? buf + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::KEY : return fieldMaxFloor.offset >= 0 ? buf + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::KEY : return fieldProcessCode.offset >= 0 ? buf + fieldProcessCode.offset : nullptr;
     case FieldPrevClosePx::KEY : return fieldPrevClosePx.offset >= 0 ? buf + fieldPrevClosePx.offset : nullptr;
     case FieldLocateReqd::KEY : return fieldLocateReqd.offset >= 0 ? buf + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldStopPx::KEY : return fieldStopPx.offset >= 0 ? buf + fieldStopPx.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldComplianceID::KEY : return fieldComplianceID.offset >= 0 ? buf + fieldComplianceID.offset : nullptr;
     case FieldIOIID::KEY : return fieldIOIID.offset >= 0 ? buf + fieldIOIID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::KEY : return fieldTimeInForce.offset >= 0 ? buf + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::KEY : return fieldEffectiveTime.offset >= 0 ? buf + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::KEY : return fieldExpireDate.offset >= 0 ? buf + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::KEY : return fieldGTBookingInst.offset >= 0 ? buf + fieldGTBookingInst.offset : nullptr;
     case FieldMaxShow::KEY : return fieldMaxShow.offset >= 0 ? buf + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::KEY : return fieldPegOffsetValue.offset >= 0 ? buf + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::KEY : return fieldPegMoveType.offset >= 0 ? buf + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::KEY : return fieldPegOffsetType.offset >= 0 ? buf + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::KEY : return fieldPegLimitType.offset >= 0 ? buf + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::KEY : return fieldPegRoundDirection.offset >= 0 ? buf + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::KEY : return fieldPegScope.offset >= 0 ? buf + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::KEY : return fieldDiscretionInst.offset >= 0 ? buf + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::KEY : return fieldDiscretionOffsetValue.offset >= 0 ? buf + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::KEY : return fieldDiscretionMoveType.offset >= 0 ? buf + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::KEY : return fieldDiscretionOffsetType.offset >= 0 ? buf + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::KEY : return fieldDiscretionLimitType.offset >= 0 ? buf + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::KEY : return fieldDiscretionRoundDirection.offset >= 0 ? buf + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::KEY : return fieldDiscretionScope.offset >= 0 ? buf + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::KEY : return fieldTargetStrategy.offset >= 0 ? buf + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::KEY : return fieldTargetStrategyParameters.offset >= 0 ? buf + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::KEY : return fieldParticipationRate.offset >= 0 ? buf + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::KEY : return fieldCancellationRights.offset >= 0 ? buf + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::KEY : return fieldMoneyLaunderingStatus.offset >= 0 ? buf + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldDesignation::KEY : return fieldDesignation.offset >= 0 ? buf + fieldDesignation.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCrossOrderCancelReplaceRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldCrossID::KEY : return fieldCrossID.offset >= 0 ? buf + fieldCrossID.offset : nullptr;
     case FieldOrigCrossID::KEY : return fieldOrigCrossID.offset >= 0 ? buf + fieldOrigCrossID.offset : nullptr;
     case FieldCrossType::KEY : return fieldCrossType.offset >= 0 ? buf + fieldCrossType.offset : nullptr;
     case FieldCrossPrioritization::KEY : return fieldCrossPrioritization.offset >= 0 ? buf + fieldCrossPrioritization.offset : nullptr;
     case FieldNoSides::KEY : return fieldNoSides.offset >= 0 ? buf + fieldNoSides.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldHandlInst::KEY : return fieldHandlInst.offset >= 0 ? buf + fieldHandlInst.offset : nullptr;
     case FieldExecInst::KEY : return fieldExecInst.offset >= 0 ? buf + fieldExecInst.offset : nullptr;
     case FieldMinQty::KEY : return fieldMinQty.offset >= 0 ? buf + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::KEY : return fieldMaxFloor.offset >= 0 ? buf + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::KEY : return fieldProcessCode.offset >= 0 ? buf + fieldProcessCode.offset : nullptr;
     case FieldPrevClosePx::KEY : return fieldPrevClosePx.offset >= 0 ? buf + fieldPrevClosePx.offset : nullptr;
     case FieldLocateReqd::KEY : return fieldLocateReqd.offset >= 0 ? buf + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldStopPx::KEY : return fieldStopPx.offset >= 0 ? buf + fieldStopPx.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldComplianceID::KEY : return fieldComplianceID.offset >= 0 ? buf + fieldComplianceID.offset : nullptr;
     case FieldIOIID::KEY : return fieldIOIID.offset >= 0 ? buf + fieldIOIID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::KEY : return fieldTimeInForce.offset >= 0 ? buf + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::KEY : return fieldEffectiveTime.offset >= 0 ? buf + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::KEY : return fieldExpireDate.offset >= 0 ? buf + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::KEY : return fieldGTBookingInst.offset >= 0 ? buf + fieldGTBookingInst.offset : nullptr;
     case FieldMaxShow::KEY : return fieldMaxShow.offset >= 0 ? buf + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::KEY : return fieldPegOffsetValue.offset >= 0 ? buf + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::KEY : return fieldPegMoveType.offset >= 0 ? buf + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::KEY : return fieldPegOffsetType.offset >= 0 ? buf + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::KEY : return fieldPegLimitType.offset >= 0 ? buf + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::KEY : return fieldPegRoundDirection.offset >= 0 ? buf + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::KEY : return fieldPegScope.offset >= 0 ? buf + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::KEY : return fieldDiscretionInst.offset >= 0 ? buf + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::KEY : return fieldDiscretionOffsetValue.offset >= 0 ? buf + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::KEY : return fieldDiscretionMoveType.offset >= 0 ? buf + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::KEY : return fieldDiscretionOffsetType.offset >= 0 ? buf + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::KEY : return fieldDiscretionLimitType.offset >= 0 ? buf + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::KEY : return fieldDiscretionRoundDirection.offset >= 0 ? buf + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::KEY : return fieldDiscretionScope.offset >= 0 ? buf + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::KEY : return fieldTargetStrategy.offset >= 0 ? buf + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::KEY : return fieldTargetStrategyParameters.offset >= 0 ? buf + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::KEY : return fieldParticipationRate.offset >= 0 ? buf + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::KEY : return fieldCancellationRights.offset >= 0 ? buf + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::KEY : return fieldMoneyLaunderingStatus.offset >= 0 ? buf + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldDesignation::KEY : return fieldDesignation.offset >= 0 ? buf + fieldDesignation.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCrossOrderCancelRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldCrossID::KEY : return fieldCrossID.offset >= 0 ? buf + fieldCrossID.offset : nullptr;
     case FieldOrigCrossID::KEY : return fieldOrigCrossID.offset >= 0 ? buf + fieldOrigCrossID.offset : nullptr;
     case FieldCrossType::KEY : return fieldCrossType.offset >= 0 ? buf + fieldCrossType.offset : nullptr;
     case FieldCrossPrioritization::KEY : return fieldCrossPrioritization.offset >= 0 ? buf + fieldCrossPrioritization.offset : nullptr;
     case FieldNoSides::KEY : return fieldNoSides.offset >= 0 ? buf + fieldNoSides.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityTypeRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::KEY : return fieldSecurityReqID.offset >= 0 ? buf + fieldSecurityReqID.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityTypes::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::KEY : return fieldSecurityReqID.offset >= 0 ? buf + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityResponseID::KEY : return fieldSecurityResponseID.offset >= 0 ? buf + fieldSecurityResponseID.offset : nullptr;
     case FieldSecurityResponseType::KEY : return fieldSecurityResponseType.offset >= 0 ? buf + fieldSecurityResponseType.offset : nullptr;
     case FieldTotNoSecurityTypes::KEY : return fieldTotNoSecurityTypes.offset >= 0 ? buf + fieldTotNoSecurityTypes.offset : nullptr;
     case FieldLastFragment::KEY : return fieldLastFragment.offset >= 0 ? buf + fieldLastFragment.offset : nullptr;
     case FieldNoSecurityTypes::KEY : return fieldNoSecurityTypes.offset >= 0 ? buf + fieldNoSecurityTypes.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityListRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::KEY : return fieldSecurityReqID.offset >= 0 ? buf + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityListRequestType::KEY : return fieldSecurityListRequestType.offset >= 0 ? buf + fieldSecurityListRequestType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSecurityList::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::KEY : return fieldSecurityReqID.offset >= 0 ? buf + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityResponseID::KEY : return fieldSecurityResponseID.offset >= 0 ? buf + fieldSecurityResponseID.offset : nullptr;
     case FieldSecurityRequestResult::KEY : return fieldSecurityRequestResult.offset >= 0 ? buf + fieldSecurityRequestResult.offset : nullptr;
     case FieldTotNoRelatedSym::KEY : return fieldTotNoRelatedSym.offset >= 0 ? buf + fieldTotNoRelatedSym.offset : nullptr;
     case FieldLastFragment::KEY : return fieldLastFragment.offset >= 0 ? buf + fieldLastFragment.offset : nullptr;
     case FieldNoRelatedSym::KEY : return fieldNoRelatedSym.offset >= 0 ? buf + fieldNoRelatedSym.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageDerivativeSecurityListRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::KEY : return fieldSecurityReqID.offset >= 0 ? buf + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityListRequestType::KEY : return fieldSecurityListRequestType.offset >= 0 ? buf + fieldSecurityListRequestType.offset : nullptr;
     case FieldUnderlyingSymbol::KEY : return fieldUnderlyingSymbol.offset >= 0 ? buf + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::KEY : return fieldUnderlyingSymbolSfx.offset >= 0 ? buf + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::KEY : return fieldUnderlyingSecurityID.offset >= 0 ? buf + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::KEY : return fieldUnderlyingSecurityIDSource.offset >= 0 ? buf + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::KEY : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? buf + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::KEY : return fieldUnderlyingProduct.offset >= 0 ? buf + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::KEY : return fieldUnderlyingCFICode.offset >= 0 ? buf + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::KEY : return fieldUnderlyingSecurityType.offset >= 0 ? buf + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::KEY : return fieldUnderlyingSecuritySubType.offset >= 0 ? buf + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::KEY : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? buf + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::KEY : return fieldUnderlyingMaturityDate.offset >= 0 ? buf + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::KEY : return fieldUnderlyingPutOrCall.offset >= 0 ? buf + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::KEY : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? buf + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::KEY : return fieldUnderlyingIssueDate.offset >= 0 ? buf + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::KEY : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? buf + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::KEY : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? buf + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::KEY : return fieldUnderlyingRepurchaseRate.offset >= 0 ? buf + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::KEY : return fieldUnderlyingFactor.offset >= 0 ? buf + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::KEY : return fieldUnderlyingCreditRating.offset >= 0 ? buf + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::KEY : return fieldUnderlyingInstrRegistry.offset >= 0 ? buf + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::KEY : return fieldUnderlyingCountryOfIssue.offset >= 0 ? buf + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::KEY : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? buf + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::KEY : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? buf + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::KEY : return fieldUnderlyingRedemptionDate.offset >= 0 ? buf + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::KEY : return fieldUnderlyingStrikePrice.offset >= 0 ? buf + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::KEY : return fieldUnderlyingStrikeCurrency.offset >= 0 ? buf + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::KEY : return fieldUnderlyingOptAttribute.offset >= 0 ? buf + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::KEY : return fieldUnderlyingContractMultiplier.offset >= 0 ? buf + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::KEY : return fieldUnderlyingCouponRate.offset >= 0 ? buf + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::KEY : return fieldUnderlyingSecurityExchange.offset >= 0 ? buf + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::KEY : return fieldUnderlyingIssuer.offset >= 0 ? buf + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::KEY : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? buf + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::KEY : return fieldEncodedUnderlyingIssuer.offset >= 0 ? buf + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::KEY : return fieldUnderlyingSecurityDesc.offset >= 0 ? buf + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::KEY : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::KEY : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::KEY : return fieldUnderlyingCPProgram.offset >= 0 ? buf + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::KEY : return fieldUnderlyingCPRegType.offset >= 0 ? buf + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::KEY : return fieldUnderlyingCurrency.offset >= 0 ? buf + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::KEY : return fieldUnderlyingQty.offset >= 0 ? buf + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::KEY : return fieldUnderlyingPx.offset >= 0 ? buf + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::KEY : return fieldUnderlyingDirtyPrice.offset >= 0 ? buf + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::KEY : return fieldUnderlyingEndPrice.offset >= 0 ? buf + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::KEY : return fieldUnderlyingStartValue.offset >= 0 ? buf + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::KEY : return fieldUnderlyingCurrentValue.offset >= 0 ? buf + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::KEY : return fieldUnderlyingEndValue.offset >= 0 ? buf + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::KEY : return fieldNoUnderlyingStips.offset >= 0 ? buf + fieldNoUnderlyingStips.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageDerivativeSecurityList::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSecurityReqID::KEY : return fieldSecurityReqID.offset >= 0 ? buf + fieldSecurityReqID.offset : nullptr;
     case FieldSecurityResponseID::KEY : return fieldSecurityResponseID.offset >= 0 ? buf + fieldSecurityResponseID.offset : nullptr;
     case FieldSecurityRequestResult::KEY : return fieldSecurityRequestResult.offset >= 0 ? buf + fieldSecurityRequestResult.offset : nullptr;
     case FieldUnderlyingSymbol::KEY : return fieldUnderlyingSymbol.offset >= 0 ? buf + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::KEY : return fieldUnderlyingSymbolSfx.offset >= 0 ? buf + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::KEY : return fieldUnderlyingSecurityID.offset >= 0 ? buf + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::KEY : return fieldUnderlyingSecurityIDSource.offset >= 0 ? buf + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::KEY : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? buf + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::KEY : return fieldUnderlyingProduct.offset >= 0 ? buf + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::KEY : return fieldUnderlyingCFICode.offset >= 0 ? buf + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::KEY : return fieldUnderlyingSecurityType.offset >= 0 ? buf + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::KEY : return fieldUnderlyingSecuritySubType.offset >= 0 ? buf + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::KEY : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? buf + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::KEY : return fieldUnderlyingMaturityDate.offset >= 0 ? buf + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::KEY : return fieldUnderlyingPutOrCall.offset >= 0 ? buf + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::KEY : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? buf + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::KEY : return fieldUnderlyingIssueDate.offset >= 0 ? buf + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::KEY : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? buf + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::KEY : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? buf + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::KEY : return fieldUnderlyingRepurchaseRate.offset >= 0 ? buf + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::KEY : return fieldUnderlyingFactor.offset >= 0 ? buf + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::KEY : return fieldUnderlyingCreditRating.offset >= 0 ? buf + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::KEY : return fieldUnderlyingInstrRegistry.offset >= 0 ? buf + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::KEY : return fieldUnderlyingCountryOfIssue.offset >= 0 ? buf + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::KEY : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? buf + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::KEY : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? buf + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::KEY : return fieldUnderlyingRedemptionDate.offset >= 0 ? buf + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::KEY : return fieldUnderlyingStrikePrice.offset >= 0 ? buf + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::KEY : return fieldUnderlyingStrikeCurrency.offset >= 0 ? buf + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::KEY : return fieldUnderlyingOptAttribute.offset >= 0 ? buf + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::KEY : return fieldUnderlyingContractMultiplier.offset >= 0 ? buf + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::KEY : return fieldUnderlyingCouponRate.offset >= 0 ? buf + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::KEY : return fieldUnderlyingSecurityExchange.offset >= 0 ? buf + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::KEY : return fieldUnderlyingIssuer.offset >= 0 ? buf + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::KEY : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? buf + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::KEY : return fieldEncodedUnderlyingIssuer.offset >= 0 ? buf + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::KEY : return fieldUnderlyingSecurityDesc.offset >= 0 ? buf + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::KEY : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::KEY : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::KEY : return fieldUnderlyingCPProgram.offset >= 0 ? buf + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::KEY : return fieldUnderlyingCPRegType.offset >= 0 ? buf + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::KEY : return fieldUnderlyingCurrency.offset >= 0 ? buf + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::KEY : return fieldUnderlyingQty.offset >= 0 ? buf + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::KEY : return fieldUnderlyingPx.offset >= 0 ? buf + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::KEY : return fieldUnderlyingDirtyPrice.offset >= 0 ? buf + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::KEY : return fieldUnderlyingEndPrice.offset >= 0 ? buf + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::KEY : return fieldUnderlyingStartValue.offset >= 0 ? buf + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::KEY : return fieldUnderlyingCurrentValue.offset >= 0 ? buf + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::KEY : return fieldUnderlyingEndValue.offset >= 0 ? buf + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::KEY : return fieldNoUnderlyingStips.offset >= 0 ? buf + fieldNoUnderlyingStips.offset : nullptr;
     case FieldTotNoRelatedSym::KEY : return fieldTotNoRelatedSym.offset >= 0 ? buf + fieldTotNoRelatedSym.offset : nullptr;
     case FieldLastFragment::KEY : return fieldLastFragment.offset >= 0 ? buf + fieldLastFragment.offset : nullptr;
     case FieldNoRelatedSym::KEY : return fieldNoRelatedSym.offset >= 0 ? buf + fieldNoRelatedSym.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNewOrderMultileg::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::KEY : return fieldClOrdLinkID.offset >= 0 ? buf + fieldClOrdLinkID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::KEY : return fieldDayBookingInst.offset >= 0 ? buf + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::KEY : return fieldBookingUnit.offset >= 0 ? buf + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::KEY : return fieldPreallocMethod.offset >= 0 ? buf + fieldPreallocMethod.offset : nullptr;
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::KEY : return fieldCashMargin.offset >= 0 ? buf + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::KEY : return fieldClearingFeeIndicator.offset >= 0 ? buf + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::KEY : return fieldHandlInst.offset >= 0 ? buf + fieldHandlInst.offset : nullptr;
     case FieldExecInst::KEY : return fieldExecInst.offset >= 0 ? buf + fieldExecInst.offset : nullptr;
     case FieldMinQty::KEY : return fieldMinQty.offset >= 0 ? buf + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::KEY : return fieldMaxFloor.offset >= 0 ? buf + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::KEY : return fieldProcessCode.offset >= 0 ? buf + fieldProcessCode.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldPrevClosePx::KEY : return fieldPrevClosePx.offset >= 0 ? buf + fieldPrevClosePx.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldLocateReqd::KEY : return fieldLocateReqd.offset >= 0 ? buf + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldStopPx::KEY : return fieldStopPx.offset >= 0 ? buf + fieldStopPx.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldComplianceID::KEY : return fieldComplianceID.offset >= 0 ? buf + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::KEY : return fieldSolicitedFlag.offset >= 0 ? buf + fieldSolicitedFlag.offset : nullptr;
     case FieldIOIID::KEY : return fieldIOIID.offset >= 0 ? buf + fieldIOIID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::KEY : return fieldTimeInForce.offset >= 0 ? buf + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::KEY : return fieldEffectiveTime.offset >= 0 ? buf + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::KEY : return fieldExpireDate.offset >= 0 ? buf + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::KEY : return fieldGTBookingInst.offset >= 0 ? buf + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCommCurrency::KEY : return fieldCommCurrency.offset >= 0 ? buf + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::KEY : return fieldFundRenewWaiv.offset >= 0 ? buf + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::KEY : return fieldOrderRestrictions.offset >= 0 ? buf + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::KEY : return fieldForexReq.offset >= 0 ? buf + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::KEY : return fieldSettlCurrency.offset >= 0 ? buf + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::KEY : return fieldBookingType.offset >= 0 ? buf + fieldBookingType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldPositionEffect::KEY : return fieldPositionEffect.offset >= 0 ? buf + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::KEY : return fieldCoveredOrUncovered.offset >= 0 ? buf + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::KEY : return fieldMaxShow.offset >= 0 ? buf + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::KEY : return fieldPegOffsetValue.offset >= 0 ? buf + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::KEY : return fieldPegMoveType.offset >= 0 ? buf + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::KEY : return fieldPegOffsetType.offset >= 0 ? buf + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::KEY : return fieldPegLimitType.offset >= 0 ? buf + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::KEY : return fieldPegRoundDirection.offset >= 0 ? buf + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::KEY : return fieldPegScope.offset >= 0 ? buf + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::KEY : return fieldDiscretionInst.offset >= 0 ? buf + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::KEY : return fieldDiscretionOffsetValue.offset >= 0 ? buf + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::KEY : return fieldDiscretionMoveType.offset >= 0 ? buf + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::KEY : return fieldDiscretionOffsetType.offset >= 0 ? buf + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::KEY : return fieldDiscretionLimitType.offset >= 0 ? buf + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::KEY : return fieldDiscretionRoundDirection.offset >= 0 ? buf + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::KEY : return fieldDiscretionScope.offset >= 0 ? buf + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::KEY : return fieldTargetStrategy.offset >= 0 ? buf + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::KEY : return fieldTargetStrategyParameters.offset >= 0 ? buf + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::KEY : return fieldParticipationRate.offset >= 0 ? buf + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::KEY : return fieldCancellationRights.offset >= 0 ? buf + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::KEY : return fieldMoneyLaunderingStatus.offset >= 0 ? buf + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldDesignation::KEY : return fieldDesignation.offset >= 0 ? buf + fieldDesignation.offset : nullptr;
     case FieldMultiLegRptTypeReq::KEY : return fieldMultiLegRptTypeReq.offset >= 0 ? buf + fieldMultiLegRptTypeReq.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageMultilegOrderCancelReplace::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldOrigClOrdID::KEY : return fieldOrigClOrdID.offset >= 0 ? buf + fieldOrigClOrdID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldClOrdLinkID::KEY : return fieldClOrdLinkID.offset >= 0 ? buf + fieldClOrdLinkID.offset : nullptr;
     case FieldOrigOrdModTime::KEY : return fieldOrigOrdModTime.offset >= 0 ? buf + fieldOrigOrdModTime.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldDayBookingInst::KEY : return fieldDayBookingInst.offset >= 0 ? buf + fieldDayBookingInst.offset : nullptr;
     case FieldBookingUnit::KEY : return fieldBookingUnit.offset >= 0 ? buf + fieldBookingUnit.offset : nullptr;
     case FieldPreallocMethod::KEY : return fieldPreallocMethod.offset >= 0 ? buf + fieldPreallocMethod.offset : nullptr;
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldCashMargin::KEY : return fieldCashMargin.offset >= 0 ? buf + fieldCashMargin.offset : nullptr;
     case FieldClearingFeeIndicator::KEY : return fieldClearingFeeIndicator.offset >= 0 ? buf + fieldClearingFeeIndicator.offset : nullptr;
     case FieldHandlInst::KEY : return fieldHandlInst.offset >= 0 ? buf + fieldHandlInst.offset : nullptr;
     case FieldExecInst::KEY : return fieldExecInst.offset >= 0 ? buf + fieldExecInst.offset : nullptr;
     case FieldMinQty::KEY : return fieldMinQty.offset >= 0 ? buf + fieldMinQty.offset : nullptr;
     case FieldMaxFloor::KEY : return fieldMaxFloor.offset >= 0 ? buf + fieldMaxFloor.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldProcessCode::KEY : return fieldProcessCode.offset >= 0 ? buf + fieldProcessCode.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldPrevClosePx::KEY : return fieldPrevClosePx.offset >= 0 ? buf + fieldPrevClosePx.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldLocateReqd::KEY : return fieldLocateReqd.offset >= 0 ? buf + fieldLocateReqd.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldStopPx::KEY : return fieldStopPx.offset >= 0 ? buf + fieldStopPx.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldComplianceID::KEY : return fieldComplianceID.offset >= 0 ? buf + fieldComplianceID.offset : nullptr;
     case FieldSolicitedFlag::KEY : return fieldSolicitedFlag.offset >= 0 ? buf + fieldSolicitedFlag.offset : nullptr;
     case FieldIOIID::KEY : return fieldIOIID.offset >= 0 ? buf + fieldIOIID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldTimeInForce::KEY : return fieldTimeInForce.offset >= 0 ? buf + fieldTimeInForce.offset : nullptr;
     case FieldEffectiveTime::KEY : return fieldEffectiveTime.offset >= 0 ? buf + fieldEffectiveTime.offset : nullptr;
     case FieldExpireDate::KEY : return fieldExpireDate.offset >= 0 ? buf + fieldExpireDate.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldGTBookingInst::KEY : return fieldGTBookingInst.offset >= 0 ? buf + fieldGTBookingInst.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCommCurrency::KEY : return fieldCommCurrency.offset >= 0 ? buf + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::KEY : return fieldFundRenewWaiv.offset >= 0 ? buf + fieldFundRenewWaiv.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::KEY : return fieldOrderRestrictions.offset >= 0 ? buf + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldForexReq::KEY : return fieldForexReq.offset >= 0 ? buf + fieldForexReq.offset : nullptr;
     case FieldSettlCurrency::KEY : return fieldSettlCurrency.offset >= 0 ? buf + fieldSettlCurrency.offset : nullptr;
     case FieldBookingType::KEY : return fieldBookingType.offset >= 0 ? buf + fieldBookingType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldPositionEffect::KEY : return fieldPositionEffect.offset >= 0 ? buf + fieldPositionEffect.offset : nullptr;
     case FieldCoveredOrUncovered::KEY : return fieldCoveredOrUncovered.offset >= 0 ? buf + fieldCoveredOrUncovered.offset : nullptr;
     case FieldMaxShow::KEY : return fieldMaxShow.offset >= 0 ? buf + fieldMaxShow.offset : nullptr;
     case FieldPegOffsetValue::KEY : return fieldPegOffsetValue.offset >= 0 ? buf + fieldPegOffsetValue.offset : nullptr;
     case FieldPegMoveType::KEY : return fieldPegMoveType.offset >= 0 ? buf + fieldPegMoveType.offset : nullptr;
     case FieldPegOffsetType::KEY : return fieldPegOffsetType.offset >= 0 ? buf + fieldPegOffsetType.offset : nullptr;
     case FieldPegLimitType::KEY : return fieldPegLimitType.offset >= 0 ? buf + fieldPegLimitType.offset : nullptr;
     case FieldPegRoundDirection::KEY : return fieldPegRoundDirection.offset >= 0 ? buf + fieldPegRoundDirection.offset : nullptr;
     case FieldPegScope::KEY : return fieldPegScope.offset >= 0 ? buf + fieldPegScope.offset : nullptr;
     case FieldDiscretionInst::KEY : return fieldDiscretionInst.offset >= 0 ? buf + fieldDiscretionInst.offset : nullptr;
     case FieldDiscretionOffsetValue::KEY : return fieldDiscretionOffsetValue.offset >= 0 ? buf + fieldDiscretionOffsetValue.offset : nullptr;
     case FieldDiscretionMoveType::KEY : return fieldDiscretionMoveType.offset >= 0 ? buf + fieldDiscretionMoveType.offset : nullptr;
     case FieldDiscretionOffsetType::KEY : return fieldDiscretionOffsetType.offset >= 0 ? buf + fieldDiscretionOffsetType.offset : nullptr;
     case FieldDiscretionLimitType::KEY : return fieldDiscretionLimitType.offset >= 0 ? buf + fieldDiscretionLimitType.offset : nullptr;
     case FieldDiscretionRoundDirection::KEY : return fieldDiscretionRoundDirection.offset >= 0 ? buf + fieldDiscretionRoundDirection.offset : nullptr;
     case FieldDiscretionScope::KEY : return fieldDiscretionScope.offset >= 0 ? buf + fieldDiscretionScope.offset : nullptr;
     case FieldTargetStrategy::KEY : return fieldTargetStrategy.offset >= 0 ? buf + fieldTargetStrategy.offset : nullptr;
     case FieldTargetStrategyParameters::KEY : return fieldTargetStrategyParameters.offset >= 0 ? buf + fieldTargetStrategyParameters.offset : nullptr;
     case FieldParticipationRate::KEY : return fieldParticipationRate.offset >= 0 ? buf + fieldParticipationRate.offset : nullptr;
     case FieldCancellationRights::KEY : return fieldCancellationRights.offset >= 0 ? buf + fieldCancellationRights.offset : nullptr;
     case FieldMoneyLaunderingStatus::KEY : return fieldMoneyLaunderingStatus.offset >= 0 ? buf + fieldMoneyLaunderingStatus.offset : nullptr;
     case FieldRegistID::KEY : return fieldRegistID.offset >= 0 ? buf + fieldRegistID.offset : nullptr;
     case FieldDesignation::KEY : return fieldDesignation.offset >= 0 ? buf + fieldDesignation.offset : nullptr;
     case FieldMultiLegRptTypeReq::KEY : return fieldMultiLegRptTypeReq.offset >= 0 ? buf + fieldMultiLegRptTypeReq.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeRequestID::KEY : return fieldTradeRequestID.offset >= 0 ? buf + fieldTradeRequestID.offset : nullptr;
     case FieldTradeRequestType::KEY : return fieldTradeRequestType.offset >= 0 ? buf + fieldTradeRequestType.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTradeReportID::KEY : return fieldTradeReportID.offset >= 0 ? buf + fieldTradeReportID.offset : nullptr;
     case FieldSecondaryTradeReportID::KEY : return fieldSecondaryTradeReportID.offset >= 0 ? buf + fieldSecondaryTradeReportID.offset : nullptr;
     case FieldExecID::KEY : return fieldExecID.offset >= 0 ? buf + fieldExecID.offset : nullptr;
     case FieldExecType::KEY : return fieldExecType.offset >= 0 ? buf + fieldExecType.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldMatchStatus::KEY : return fieldMatchStatus.offset >= 0 ? buf + fieldMatchStatus.offset : nullptr;
     case FieldTrdType::KEY : return fieldTrdType.offset >= 0 ? buf + fieldTrdType.offset : nullptr;
     case FieldTrdSubType::KEY : return fieldTrdSubType.offset >= 0 ? buf + fieldTrdSubType.offset : nullptr;
     case FieldTransferReason::KEY : return fieldTransferReason.offset >= 0 ? buf + fieldTransferReason.offset : nullptr;
     case FieldSecondaryTrdType::KEY : return fieldSecondaryTrdType.offset >= 0 ? buf + fieldSecondaryTrdType.offset : nullptr;
     case FieldTradeLinkID::KEY : return fieldTradeLinkID.offset >= 0 ? buf + fieldTradeLinkID.offset : nullptr;
     case FieldTrdMatchID::KEY : return fieldTrdMatchID.offset >= 0 ? buf + fieldTrdMatchID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoDates::KEY : return fieldNoDates.offset >= 0 ? buf + fieldNoDates.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldTimeBracket::KEY : return fieldTimeBracket.offset >= 0 ? buf + fieldTimeBracket.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldMultiLegReportingType::KEY : return fieldMultiLegReportingType.offset >= 0 ? buf + fieldMultiLegReportingType.offset : nullptr;
     case FieldTradeInputSource::KEY : return fieldTradeInputSource.offset >= 0 ? buf + fieldTradeInputSource.offset : nullptr;
     case FieldTradeInputDevice::KEY : return fieldTradeInputDevice.offset >= 0 ? buf + fieldTradeInputDevice.offset : nullptr;
     case FieldResponseTransportType::KEY : return fieldResponseTransportType.offset >= 0 ? buf + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::KEY : return fieldResponseDestination.offset >= 0 ? buf + fieldResponseDestination.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradeCaptureReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeReportID::KEY : return fieldTradeReportID.offset >= 0 ? buf + fieldTradeReportID.offset : nullptr;
     case FieldTradeReportTransType::KEY : return fieldTradeReportTransType.offset >= 0 ? buf + fieldTradeReportTransType.offset : nullptr;
     case FieldTradeReportType::KEY : return fieldTradeReportType.offset >= 0 ? buf + fieldTradeReportType.offset : nullptr;
     case FieldTradeRequestID::KEY : return fieldTradeRequestID.offset >= 0 ? buf + fieldTradeRequestID.offset : nullptr;
     case FieldTrdType::KEY : return fieldTrdType.offset >= 0 ? buf + fieldTrdType.offset : nullptr;
     case FieldTrdSubType::KEY : return fieldTrdSubType.offset >= 0 ? buf + fieldTrdSubType.offset : nullptr;
     case FieldSecondaryTrdType::KEY : return fieldSecondaryTrdType.offset >= 0 ? buf + fieldSecondaryTrdType.offset : nullptr;
     case FieldTransferReason::KEY : return fieldTransferReason.offset >= 0 ? buf + fieldTransferReason.offset : nullptr;
     case FieldExecType::KEY : return fieldExecType.offset >= 0 ? buf + fieldExecType.offset : nullptr;
     case FieldTotNumTradeReports::KEY : return fieldTotNumTradeReports.offset >= 0 ? buf + fieldTotNumTradeReports.offset : nullptr;
     case FieldLastRptRequested::KEY : return fieldLastRptRequested.offset >= 0 ? buf + fieldLastRptRequested.offset : nullptr;
     case FieldUnsolicitedIndicator::KEY : return fieldUnsolicitedIndicator.offset >= 0 ? buf + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTradeReportRefID::KEY : return fieldTradeReportRefID.offset >= 0 ? buf + fieldTradeReportRefID.offset : nullptr;
     case FieldSecondaryTradeReportRefID::KEY : return fieldSecondaryTradeReportRefID.offset >= 0 ? buf + fieldSecondaryTradeReportRefID.offset : nullptr;
     case FieldSecondaryTradeReportID::KEY : return fieldSecondaryTradeReportID.offset >= 0 ? buf + fieldSecondaryTradeReportID.offset : nullptr;
     case FieldTradeLinkID::KEY : return fieldTradeLinkID.offset >= 0 ? buf + fieldTradeLinkID.offset : nullptr;
     case FieldTrdMatchID::KEY : return fieldTrdMatchID.offset >= 0 ? buf + fieldTrdMatchID.offset : nullptr;
     case FieldExecID::KEY : return fieldExecID.offset >= 0 ? buf + fieldExecID.offset : nullptr;
     case FieldOrdStatus::KEY : return fieldOrdStatus.offset >= 0 ? buf + fieldOrdStatus.offset : nullptr;
     case FieldSecondaryExecID::KEY : return fieldSecondaryExecID.offset >= 0 ? buf + fieldSecondaryExecID.offset : nullptr;
     case FieldExecRestatementReason::KEY : return fieldExecRestatementReason.offset >= 0 ? buf + fieldExecRestatementReason.offset : nullptr;
     case FieldPreviouslyReported::KEY : return fieldPreviouslyReported.offset >= 0 ? buf + fieldPreviouslyReported.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldUnderlyingTradingSessionID::KEY : return fieldUnderlyingTradingSessionID.offset >= 0 ? buf + fieldUnderlyingTradingSessionID.offset : nullptr;
     case FieldUnderlyingTradingSessionSubID::KEY : return fieldUnderlyingTradingSessionSubID.offset >= 0 ? buf + fieldUnderlyingTradingSessionSubID.offset : nullptr;
     case FieldLastQty::KEY : return fieldLastQty.offset >= 0 ? buf + fieldLastQty.offset : nullptr;
     case FieldLastPx::KEY : return fieldLastPx.offset >= 0 ? buf + fieldLastPx.offset : nullptr;
     case FieldLastParPx::KEY : return fieldLastParPx.offset >= 0 ? buf + fieldLastParPx.offset : nullptr;
     case FieldLastSpotRate::KEY : return fieldLastSpotRate.offset >= 0 ? buf + fieldLastSpotRate.offset : nullptr;
     case FieldLastForwardPoints::KEY : return fieldLastForwardPoints.offset >= 0 ? buf + fieldLastForwardPoints.offset : nullptr;
     case FieldLastMkt::KEY : return fieldLastMkt.offset >= 0 ? buf + fieldLastMkt.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldAvgPx::KEY : return fieldAvgPx.offset >= 0 ? buf + fieldAvgPx.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldAvgPxIndicator::KEY : return fieldAvgPxIndicator.offset >= 0 ? buf + fieldAvgPxIndicator.offset : nullptr;
     case FieldNoPosAmt::KEY : return fieldNoPosAmt.offset >= 0 ? buf + fieldNoPosAmt.offset : nullptr;
     case FieldMultiLegReportingType::KEY : return fieldMultiLegReportingType.offset >= 0 ? buf + fieldMultiLegReportingType.offset : nullptr;
     case FieldTradeLegRefID::KEY : return fieldTradeLegRefID.offset >= 0 ? buf + fieldTradeLegRefID.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoTrdRegTimestamps::KEY : return fieldNoTrdRegTimestamps.offset >= 0 ? buf + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldMatchStatus::KEY : return fieldMatchStatus.offset >= 0 ? buf + fieldMatchStatus.offset : nullptr;
     case FieldMatchType::KEY : return fieldMatchType.offset >= 0 ? buf + fieldMatchType.offset : nullptr;
     case FieldNoSides::KEY : return fieldNoSides.offset >= 0 ? buf + fieldNoSides.offset : nullptr;
     case FieldCopyMsgIndicator::KEY : return fieldCopyMsgIndicator.offset >= 0 ? buf + fieldCopyMsgIndicator.offset : nullptr;
     case FieldPublishTrdIndicator::KEY : return fieldPublishTrdIndicator.offset >= 0 ? buf + fieldPublishTrdIndicator.offset : nullptr;
     case FieldShortSaleReason::KEY : return fieldShortSaleReason.offset >= 0 ? buf + fieldShortSaleReason.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageOrderMassStatusRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldMassStatusReqID::KEY : return fieldMassStatusReqID.offset >= 0 ? buf + fieldMassStatusReqID.offset : nullptr;
     case FieldMassStatusReqType::KEY : return fieldMassStatusReqType.offset >= 0 ? buf + fieldMassStatusReqType.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldUnderlyingSymbol::KEY : return fieldUnderlyingSymbol.offset >= 0 ? buf + fieldUnderlyingSymbol.offset : nullptr;
     case FieldUnderlyingSymbolSfx::KEY : return fieldUnderlyingSymbolSfx.offset >= 0 ? buf + fieldUnderlyingSymbolSfx.offset : nullptr;
     case FieldUnderlyingSecurityID::KEY : return fieldUnderlyingSecurityID.offset >= 0 ? buf + fieldUnderlyingSecurityID.offset : nullptr;
     case FieldUnderlyingSecurityIDSource::KEY : return fieldUnderlyingSecurityIDSource.offset >= 0 ? buf + fieldUnderlyingSecurityIDSource.offset : nullptr;
     case FieldNoUnderlyingSecurityAltID::KEY : return fieldNoUnderlyingSecurityAltID.offset >= 0 ? buf + fieldNoUnderlyingSecurityAltID.offset : nullptr;
     case FieldUnderlyingProduct::KEY : return fieldUnderlyingProduct.offset >= 0 ? buf + fieldUnderlyingProduct.offset : nullptr;
     case FieldUnderlyingCFICode::KEY : return fieldUnderlyingCFICode.offset >= 0 ? buf + fieldUnderlyingCFICode.offset : nullptr;
     case FieldUnderlyingSecurityType::KEY : return fieldUnderlyingSecurityType.offset >= 0 ? buf + fieldUnderlyingSecurityType.offset : nullptr;
     case FieldUnderlyingSecuritySubType::KEY : return fieldUnderlyingSecuritySubType.offset >= 0 ? buf + fieldUnderlyingSecuritySubType.offset : nullptr;
     case FieldUnderlyingMaturityMonthYear::KEY : return fieldUnderlyingMaturityMonthYear.offset >= 0 ? buf + fieldUnderlyingMaturityMonthYear.offset : nullptr;
     case FieldUnderlyingMaturityDate::KEY : return fieldUnderlyingMaturityDate.offset >= 0 ? buf + fieldUnderlyingMaturityDate.offset : nullptr;
     case FieldUnderlyingPutOrCall::KEY : return fieldUnderlyingPutOrCall.offset >= 0 ? buf + fieldUnderlyingPutOrCall.offset : nullptr;
     case FieldUnderlyingCouponPaymentDate::KEY : return fieldUnderlyingCouponPaymentDate.offset >= 0 ? buf + fieldUnderlyingCouponPaymentDate.offset : nullptr;
     case FieldUnderlyingIssueDate::KEY : return fieldUnderlyingIssueDate.offset >= 0 ? buf + fieldUnderlyingIssueDate.offset : nullptr;
     case FieldUnderlyingRepoCollateralSecurityType::KEY : return fieldUnderlyingRepoCollateralSecurityType.offset >= 0 ? buf + fieldUnderlyingRepoCollateralSecurityType.offset : nullptr;
     case FieldUnderlyingRepurchaseTerm::KEY : return fieldUnderlyingRepurchaseTerm.offset >= 0 ? buf + fieldUnderlyingRepurchaseTerm.offset : nullptr;
     case FieldUnderlyingRepurchaseRate::KEY : return fieldUnderlyingRepurchaseRate.offset >= 0 ? buf + fieldUnderlyingRepurchaseRate.offset : nullptr;
     case FieldUnderlyingFactor::KEY : return fieldUnderlyingFactor.offset >= 0 ? buf + fieldUnderlyingFactor.offset : nullptr;
     case FieldUnderlyingCreditRating::KEY : return fieldUnderlyingCreditRating.offset >= 0 ? buf + fieldUnderlyingCreditRating.offset : nullptr;
     case FieldUnderlyingInstrRegistry::KEY : return fieldUnderlyingInstrRegistry.offset >= 0 ? buf + fieldUnderlyingInstrRegistry.offset : nullptr;
     case FieldUnderlyingCountryOfIssue::KEY : return fieldUnderlyingCountryOfIssue.offset >= 0 ? buf + fieldUnderlyingCountryOfIssue.offset : nullptr;
     case FieldUnderlyingStateOrProvinceOfIssue::KEY : return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0 ? buf + fieldUnderlyingStateOrProvinceOfIssue.offset : nullptr;
     case FieldUnderlyingLocaleOfIssue::KEY : return fieldUnderlyingLocaleOfIssue.offset >= 0 ? buf + fieldUnderlyingLocaleOfIssue.offset : nullptr;
     case FieldUnderlyingRedemptionDate::KEY : return fieldUnderlyingRedemptionDate.offset >= 0 ? buf + fieldUnderlyingRedemptionDate.offset : nullptr;
     case FieldUnderlyingStrikePrice::KEY : return fieldUnderlyingStrikePrice.offset >= 0 ? buf + fieldUnderlyingStrikePrice.offset : nullptr;
     case FieldUnderlyingStrikeCurrency::KEY : return fieldUnderlyingStrikeCurrency.offset >= 0 ? buf + fieldUnderlyingStrikeCurrency.offset : nullptr;
     case FieldUnderlyingOptAttribute::KEY : return fieldUnderlyingOptAttribute.offset >= 0 ? buf + fieldUnderlyingOptAttribute.offset : nullptr;
     case FieldUnderlyingContractMultiplier::KEY : return fieldUnderlyingContractMultiplier.offset >= 0 ? buf + fieldUnderlyingContractMultiplier.offset : nullptr;
     case FieldUnderlyingCouponRate::KEY : return fieldUnderlyingCouponRate.offset >= 0 ? buf + fieldUnderlyingCouponRate.offset : nullptr;
     case FieldUnderlyingSecurityExchange::KEY : return fieldUnderlyingSecurityExchange.offset >= 0 ? buf + fieldUnderlyingSecurityExchange.offset : nullptr;
     case FieldUnderlyingIssuer::KEY : return fieldUnderlyingIssuer.offset >= 0 ? buf + fieldUnderlyingIssuer.offset : nullptr;
     case FieldEncodedUnderlyingIssuerLen::KEY : return fieldEncodedUnderlyingIssuerLen.offset >= 0 ? buf + fieldEncodedUnderlyingIssuerLen.offset : nullptr;
     case FieldEncodedUnderlyingIssuer::KEY : return fieldEncodedUnderlyingIssuer.offset >= 0 ? buf + fieldEncodedUnderlyingIssuer.offset : nullptr;
     case FieldUnderlyingSecurityDesc::KEY : return fieldUnderlyingSecurityDesc.offset >= 0 ? buf + fieldUnderlyingSecurityDesc.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDescLen::KEY : return fieldEncodedUnderlyingSecurityDescLen.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDescLen.offset : nullptr;
     case FieldEncodedUnderlyingSecurityDesc::KEY : return fieldEncodedUnderlyingSecurityDesc.offset >= 0 ? buf + fieldEncodedUnderlyingSecurityDesc.offset : nullptr;
     case FieldUnderlyingCPProgram::KEY : return fieldUnderlyingCPProgram.offset >= 0 ? buf + fieldUnderlyingCPProgram.offset : nullptr;
     case FieldUnderlyingCPRegType::KEY : return fieldUnderlyingCPRegType.offset >= 0 ? buf + fieldUnderlyingCPRegType.offset : nullptr;
     case FieldUnderlyingCurrency::KEY : return fieldUnderlyingCurrency.offset >= 0 ? buf + fieldUnderlyingCurrency.offset : nullptr;
     case FieldUnderlyingQty::KEY : return fieldUnderlyingQty.offset >= 0 ? buf + fieldUnderlyingQty.offset : nullptr;
     case FieldUnderlyingPx::KEY : return fieldUnderlyingPx.offset >= 0 ? buf + fieldUnderlyingPx.offset : nullptr;
     case FieldUnderlyingDirtyPrice::KEY : return fieldUnderlyingDirtyPrice.offset >= 0 ? buf + fieldUnderlyingDirtyPrice.offset : nullptr;
     case FieldUnderlyingEndPrice::KEY : return fieldUnderlyingEndPrice.offset >= 0 ? buf + fieldUnderlyingEndPrice.offset : nullptr;
     case FieldUnderlyingStartValue::KEY : return fieldUnderlyingStartValue.offset >= 0 ? buf + fieldUnderlyingStartValue.offset : nullptr;
     case FieldUnderlyingCurrentValue::KEY : return fieldUnderlyingCurrentValue.offset >= 0 ? buf + fieldUnderlyingCurrentValue.offset : nullptr;
     case FieldUnderlyingEndValue::KEY : return fieldUnderlyingEndValue.offset >= 0 ? buf + fieldUnderlyingEndValue.offset : nullptr;
     case FieldNoUnderlyingStips::KEY : return fieldNoUnderlyingStips.offset >= 0 ? buf + fieldNoUnderlyingStips.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteRequestReject::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteReqID::KEY : return fieldQuoteReqID.offset >= 0 ? buf + fieldQuoteReqID.offset : nullptr;
     case FieldRFQReqID::KEY : return fieldRFQReqID.offset >= 0 ? buf + fieldRFQReqID.offset : nullptr;
     case FieldQuoteRequestRejectReason::KEY : return fieldQuoteRequestRejectReason.offset >= 0 ? buf + fieldQuoteRequestRejectReason.offset : nullptr;
     case FieldNoRelatedSym::KEY : return fieldNoRelatedSym.offset >= 0 ? buf + fieldNoRelatedSym.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRFQRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldRFQReqID::KEY : return fieldRFQReqID.offset >= 0 ? buf + fieldRFQReqID.offset : nullptr;
     case FieldNoRelatedSym::KEY : return fieldNoRelatedSym.offset >= 0 ? buf + fieldNoRelatedSym.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteStatusReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteStatusReqID::KEY : return fieldQuoteStatusReqID.offset >= 0 ? buf + fieldQuoteStatusReqID.offset : nullptr;
     case FieldQuoteReqID::KEY : return fieldQuoteReqID.offset >= 0 ? buf + fieldQuoteReqID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldQuoteRespID::KEY : return fieldQuoteRespID.offset >= 0 ? buf + fieldQuoteRespID.offset : nullptr;
     case FieldQuoteType::KEY : return fieldQuoteType.offset >= 0 ? buf + fieldQuoteType.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldSettlDate2::KEY : return fieldSettlDate2.offset >= 0 ? buf + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::KEY : return fieldOrderQty2.offset >= 0 ? buf + fieldOrderQty2.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoQuoteQualifiers::KEY : return fieldNoQuoteQualifiers.offset >= 0 ? buf + fieldNoQuoteQualifiers.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldBidPx::KEY : return fieldBidPx.offset >= 0 ? buf + fieldBidPx.offset : nullptr;
     case FieldOfferPx::KEY : return fieldOfferPx.offset >= 0 ? buf + fieldOfferPx.offset : nullptr;
     case FieldMktBidPx::KEY : return fieldMktBidPx.offset >= 0 ? buf + fieldMktBidPx.offset : nullptr;
     case FieldMktOfferPx::KEY : return fieldMktOfferPx.offset >= 0 ? buf + fieldMktOfferPx.offset : nullptr;
     case FieldMinBidSize::KEY : return fieldMinBidSize.offset >= 0 ? buf + fieldMinBidSize.offset : nullptr;
     case FieldBidSize::KEY : return fieldBidSize.offset >= 0 ? buf + fieldBidSize.offset : nullptr;
     case FieldMinOfferSize::KEY : return fieldMinOfferSize.offset >= 0 ? buf + fieldMinOfferSize.offset : nullptr;
     case FieldOfferSize::KEY : return fieldOfferSize.offset >= 0 ? buf + fieldOfferSize.offset : nullptr;
     case FieldValidUntilTime::KEY : return fieldValidUntilTime.offset >= 0 ? buf + fieldValidUntilTime.offset : nullptr;
     case FieldBidSpotRate::KEY : return fieldBidSpotRate.offset >= 0 ? buf + fieldBidSpotRate.offset : nullptr;
     case FieldOfferSpotRate::KEY : return fieldOfferSpotRate.offset >= 0 ? buf + fieldOfferSpotRate.offset : nullptr;
     case FieldBidForwardPoints::KEY : return fieldBidForwardPoints.offset >= 0 ? buf + fieldBidForwardPoints.offset : nullptr;
     case FieldOfferForwardPoints::KEY : return fieldOfferForwardPoints.offset >= 0 ? buf + fieldOfferForwardPoints.offset : nullptr;
     case FieldMidPx::KEY : return fieldMidPx.offset >= 0 ? buf + fieldMidPx.offset : nullptr;
     case FieldBidYield::KEY : return fieldBidYield.offset >= 0 ? buf + fieldBidYield.offset : nullptr;
     case FieldMidYield::KEY : return fieldMidYield.offset >= 0 ? buf + fieldMidYield.offset : nullptr;
     case FieldOfferYield::KEY : return fieldOfferYield.offset >= 0 ? buf + fieldOfferYield.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldBidForwardPoints2::KEY : return fieldBidForwardPoints2.offset >= 0 ? buf + fieldBidForwardPoints2.offset : nullptr;
     case FieldOfferForwardPoints2::KEY : return fieldOfferForwardPoints2.offset >= 0 ? buf + fieldOfferForwardPoints2.offset : nullptr;
     case FieldSettlCurrBidFxRate::KEY : return fieldSettlCurrBidFxRate.offset >= 0 ? buf + fieldSettlCurrBidFxRate.offset : nullptr;
     case FieldSettlCurrOfferFxRate::KEY : return fieldSettlCurrOfferFxRate.offset >= 0 ? buf + fieldSettlCurrOfferFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::KEY : return fieldSettlCurrFxRateCalc.offset >= 0 ? buf + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldQuoteStatus::KEY : return fieldQuoteStatus.offset >= 0 ? buf + fieldQuoteStatus.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageQuoteResponse::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldQuoteRespID::KEY : return fieldQuoteRespID.offset >= 0 ? buf + fieldQuoteRespID.offset : nullptr;
     case FieldQuoteID::KEY : return fieldQuoteID.offset >= 0 ? buf + fieldQuoteID.offset : nullptr;
     case FieldQuoteRespType::KEY : return fieldQuoteRespType.offset >= 0 ? buf + fieldQuoteRespType.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldIOIID::KEY : return fieldIOIID.offset >= 0 ? buf + fieldIOIID.offset : nullptr;
     case FieldQuoteType::KEY : return fieldQuoteType.offset >= 0 ? buf + fieldQuoteType.offset : nullptr;
     case FieldNoQuoteQualifiers::KEY : return fieldNoQuoteQualifiers.offset >= 0 ? buf + fieldNoQuoteQualifiers.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldOrderQty::KEY : return fieldOrderQty.offset >= 0 ? buf + fieldOrderQty.offset : nullptr;
     case FieldCashOrderQty::KEY : return fieldCashOrderQty.offset >= 0 ? buf + fieldCashOrderQty.offset : nullptr;
     case FieldOrderPercent::KEY : return fieldOrderPercent.offset >= 0 ? buf + fieldOrderPercent.offset : nullptr;
     case FieldRoundingDirection::KEY : return fieldRoundingDirection.offset >= 0 ? buf + fieldRoundingDirection.offset : nullptr;
     case FieldRoundingModulus::KEY : return fieldRoundingModulus.offset >= 0 ? buf + fieldRoundingModulus.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldSettlDate2::KEY : return fieldSettlDate2.offset >= 0 ? buf + fieldSettlDate2.offset : nullptr;
     case FieldOrderQty2::KEY : return fieldOrderQty2.offset >= 0 ? buf + fieldOrderQty2.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldBidPx::KEY : return fieldBidPx.offset >= 0 ? buf + fieldBidPx.offset : nullptr;
     case FieldOfferPx::KEY : return fieldOfferPx.offset >= 0 ? buf + fieldOfferPx.offset : nullptr;
     case FieldMktBidPx::KEY : return fieldMktBidPx.offset >= 0 ? buf + fieldMktBidPx.offset : nullptr;
     case FieldMktOfferPx::KEY : return fieldMktOfferPx.offset >= 0 ? buf + fieldMktOfferPx.offset : nullptr;
     case FieldMinBidSize::KEY : return fieldMinBidSize.offset >= 0 ? buf + fieldMinBidSize.offset : nullptr;
     case FieldBidSize::KEY : return fieldBidSize.offset >= 0 ? buf + fieldBidSize.offset : nullptr;
     case FieldMinOfferSize::KEY : return fieldMinOfferSize.offset >= 0 ? buf + fieldMinOfferSize.offset : nullptr;
     case FieldOfferSize::KEY : return fieldOfferSize.offset >= 0 ? buf + fieldOfferSize.offset : nullptr;
     case FieldValidUntilTime::KEY : return fieldValidUntilTime.offset >= 0 ? buf + fieldValidUntilTime.offset : nullptr;
     case FieldBidSpotRate::KEY : return fieldBidSpotRate.offset >= 0 ? buf + fieldBidSpotRate.offset : nullptr;
     case FieldOfferSpotRate::KEY : return fieldOfferSpotRate.offset >= 0 ? buf + fieldOfferSpotRate.offset : nullptr;
     case FieldBidForwardPoints::KEY : return fieldBidForwardPoints.offset >= 0 ? buf + fieldBidForwardPoints.offset : nullptr;
     case FieldOfferForwardPoints::KEY : return fieldOfferForwardPoints.offset >= 0 ? buf + fieldOfferForwardPoints.offset : nullptr;
     case FieldMidPx::KEY : return fieldMidPx.offset >= 0 ? buf + fieldMidPx.offset : nullptr;
     case FieldBidYield::KEY : return fieldBidYield.offset >= 0 ? buf + fieldBidYield.offset : nullptr;
     case FieldMidYield::KEY : return fieldMidYield.offset >= 0 ? buf + fieldMidYield.offset : nullptr;
     case FieldOfferYield::KEY : return fieldOfferYield.offset >= 0 ? buf + fieldOfferYield.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldOrdType::KEY : return fieldOrdType.offset >= 0 ? buf + fieldOrdType.offset : nullptr;
     case FieldBidForwardPoints2::KEY : return fieldBidForwardPoints2.offset >= 0 ? buf + fieldBidForwardPoints2.offset : nullptr;
     case FieldOfferForwardPoints2::KEY : return fieldOfferForwardPoints2.offset >= 0 ? buf + fieldOfferForwardPoints2.offset : nullptr;
     case FieldSettlCurrBidFxRate::KEY : return fieldSettlCurrBidFxRate.offset >= 0 ? buf + fieldSettlCurrBidFxRate.offset : nullptr;
     case FieldSettlCurrOfferFxRate::KEY : return fieldSettlCurrOfferFxRate.offset >= 0 ? buf + fieldSettlCurrOfferFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::KEY : return fieldSettlCurrFxRateCalc.offset >= 0 ? buf + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldExDestination::KEY : return fieldExDestination.offset >= 0 ? buf + fieldExDestination.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageConfirmation::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldConfirmID::KEY : return fieldConfirmID.offset >= 0 ? buf + fieldConfirmID.offset : nullptr;
     case FieldConfirmRefID::KEY : return fieldConfirmRefID.offset >= 0 ? buf + fieldConfirmRefID.offset : nullptr;
     case FieldConfirmReqID::KEY : return fieldConfirmReqID.offset >= 0 ? buf + fieldConfirmReqID.offset : nullptr;
     case FieldConfirmTransType::KEY : return fieldConfirmTransType.offset >= 0 ? buf + fieldConfirmTransType.offset : nullptr;
     case FieldConfirmType::KEY : return fieldConfirmType.offset >= 0 ? buf + fieldConfirmType.offset : nullptr;
     case FieldCopyMsgIndicator::KEY : return fieldCopyMsgIndicator.offset >= 0 ? buf + fieldCopyMsgIndicator.offset : nullptr;
     case FieldLegalConfirm::KEY : return fieldLegalConfirm.offset >= 0 ? buf + fieldLegalConfirm.offset : nullptr;
     case FieldConfirmStatus::KEY : return fieldConfirmStatus.offset >= 0 ? buf + fieldConfirmStatus.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldNoOrders::KEY : return fieldNoOrders.offset >= 0 ? buf + fieldNoOrders.offset : nullptr;
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldSecondaryAllocID::KEY : return fieldSecondaryAllocID.offset >= 0 ? buf + fieldSecondaryAllocID.offset : nullptr;
     case FieldIndividualAllocID::KEY : return fieldIndividualAllocID.offset >= 0 ? buf + fieldIndividualAllocID.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldNoTrdRegTimestamps::KEY : return fieldNoTrdRegTimestamps.offset >= 0 ? buf + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldAllocQty::KEY : return fieldAllocQty.offset >= 0 ? buf + fieldAllocQty.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldLastMkt::KEY : return fieldLastMkt.offset >= 0 ? buf + fieldLastMkt.offset : nullptr;
     case FieldNoCapacities::KEY : return fieldNoCapacities.offset >= 0 ? buf + fieldNoCapacities.offset : nullptr;
     case FieldAllocAccount::KEY : return fieldAllocAccount.offset >= 0 ? buf + fieldAllocAccount.offset : nullptr;
     case FieldAllocAcctIDSource::KEY : return fieldAllocAcctIDSource.offset >= 0 ? buf + fieldAllocAcctIDSource.offset : nullptr;
     case FieldAllocAccountType::KEY : return fieldAllocAccountType.offset >= 0 ? buf + fieldAllocAccountType.offset : nullptr;
     case FieldAvgPx::KEY : return fieldAvgPx.offset >= 0 ? buf + fieldAvgPx.offset : nullptr;
     case FieldAvgPxPrecision::KEY : return fieldAvgPxPrecision.offset >= 0 ? buf + fieldAvgPxPrecision.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldAvgParPx::KEY : return fieldAvgParPx.offset >= 0 ? buf + fieldAvgParPx.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldReportedPx::KEY : return fieldReportedPx.offset >= 0 ? buf + fieldReportedPx.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldProcessCode::KEY : return fieldProcessCode.offset >= 0 ? buf + fieldProcessCode.offset : nullptr;
     case FieldGrossTradeAmt::KEY : return fieldGrossTradeAmt.offset >= 0 ? buf + fieldGrossTradeAmt.offset : nullptr;
     case FieldNumDaysInterest::KEY : return fieldNumDaysInterest.offset >= 0 ? buf + fieldNumDaysInterest.offset : nullptr;
     case FieldExDate::KEY : return fieldExDate.offset >= 0 ? buf + fieldExDate.offset : nullptr;
     case FieldAccruedInterestRate::KEY : return fieldAccruedInterestRate.offset >= 0 ? buf + fieldAccruedInterestRate.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldInterestAtMaturity::KEY : return fieldInterestAtMaturity.offset >= 0 ? buf + fieldInterestAtMaturity.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldConcession::KEY : return fieldConcession.offset >= 0 ? buf + fieldConcession.offset : nullptr;
     case FieldTotalTakedown::KEY : return fieldTotalTakedown.offset >= 0 ? buf + fieldTotalTakedown.offset : nullptr;
     case FieldNetMoney::KEY : return fieldNetMoney.offset >= 0 ? buf + fieldNetMoney.offset : nullptr;
     case FieldMaturityNetMoney::KEY : return fieldMaturityNetMoney.offset >= 0 ? buf + fieldMaturityNetMoney.offset : nullptr;
     case FieldSettlCurrAmt::KEY : return fieldSettlCurrAmt.offset >= 0 ? buf + fieldSettlCurrAmt.offset : nullptr;
     case FieldSettlCurrency::KEY : return fieldSettlCurrency.offset >= 0 ? buf + fieldSettlCurrency.offset : nullptr;
     case FieldSettlCurrFxRate::KEY : return fieldSettlCurrFxRate.offset >= 0 ? buf + fieldSettlCurrFxRate.offset : nullptr;
     case FieldSettlCurrFxRateCalc::KEY : return fieldSettlCurrFxRateCalc.offset >= 0 ? buf + fieldSettlCurrFxRateCalc.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldSettlDeliveryType::KEY : return fieldSettlDeliveryType.offset >= 0 ? buf + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::KEY : return fieldStandInstDbType.offset >= 0 ? buf + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::KEY : return fieldStandInstDbName.offset >= 0 ? buf + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::KEY : return fieldStandInstDbID.offset >= 0 ? buf + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::KEY : return fieldNoDlvyInst.offset >= 0 ? buf + fieldNoDlvyInst.offset : nullptr;
     case FieldCommission::KEY : return fieldCommission.offset >= 0 ? buf + fieldCommission.offset : nullptr;
     case FieldCommType::KEY : return fieldCommType.offset >= 0 ? buf + fieldCommType.offset : nullptr;
     case FieldCommCurrency::KEY : return fieldCommCurrency.offset >= 0 ? buf + fieldCommCurrency.offset : nullptr;
     case FieldFundRenewWaiv::KEY : return fieldFundRenewWaiv.offset >= 0 ? buf + fieldFundRenewWaiv.offset : nullptr;
     case FieldSharedCommission::KEY : return fieldSharedCommission.offset >= 0 ? buf + fieldSharedCommission.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldNoMiscFees::KEY : return fieldNoMiscFees.offset >= 0 ? buf + fieldNoMiscFees.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessagePositionMaintenanceRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosReqID::KEY : return fieldPosReqID.offset >= 0 ? buf + fieldPosReqID.offset : nullptr;
     case FieldPosTransType::KEY : return fieldPosTransType.offset >= 0 ? buf + fieldPosTransType.offset : nullptr;
     case FieldPosMaintAction::KEY : return fieldPosMaintAction.offset >= 0 ? buf + fieldPosMaintAction.offset : nullptr;
     case FieldOrigPosReqRefID::KEY : return fieldOrigPosReqRefID.offset >= 0 ? buf + fieldOrigPosReqRefID.offset : nullptr;
     case FieldPosMaintRptRefID::KEY : return fieldPosMaintRptRefID.offset >= 0 ? buf + fieldPosMaintRptRefID.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoPositions::KEY : return fieldNoPositions.offset >= 0 ? buf + fieldNoPositions.offset : nullptr;
     case FieldAdjustmentType::KEY : return fieldAdjustmentType.offset >= 0 ? buf + fieldAdjustmentType.offset : nullptr;
     case FieldContraryInstructionIndicator::KEY : return fieldContraryInstructionIndicator.offset >= 0 ? buf + fieldContraryInstructionIndicator.offset : nullptr;
     case FieldPriorSpreadIndicator::KEY : return fieldPriorSpreadIndicator.offset >= 0 ? buf + fieldPriorSpreadIndicator.offset : nullptr;
     case FieldThresholdAmount::KEY : return fieldThresholdAmount.offset >= 0 ? buf + fieldThresholdAmount.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessagePositionMaintenanceReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosMaintRptID::KEY : return fieldPosMaintRptID.offset >= 0 ? buf + fieldPosMaintRptID.offset : nullptr;
     case FieldPosTransType::KEY : return fieldPosTransType.offset >= 0 ? buf + fieldPosTransType.offset : nullptr;
     case FieldPosReqID::KEY : return fieldPosReqID.offset >= 0 ? buf + fieldPosReqID.offset : nullptr;
     case FieldPosMaintAction::KEY : return fieldPosMaintAction.offset >= 0 ? buf + fieldPosMaintAction.offset : nullptr;
     case FieldOrigPosReqRefID::KEY : return fieldOrigPosReqRefID.offset >= 0 ? buf + fieldOrigPosReqRefID.offset : nullptr;
     case FieldPosMaintStatus::KEY : return fieldPosMaintStatus.offset >= 0 ? buf + fieldPosMaintStatus.offset : nullptr;
     case FieldPosMaintResult::KEY : return fieldPosMaintResult.offset >= 0 ? buf + fieldPosMaintResult.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoPositions::KEY : return fieldNoPositions.offset >= 0 ? buf + fieldNoPositions.offset : nullptr;
     case FieldNoPosAmt::KEY : return fieldNoPosAmt.offset >= 0 ? buf + fieldNoPosAmt.offset : nullptr;
     case FieldAdjustmentType::KEY : return fieldAdjustmentType.offset >= 0 ? buf + fieldAdjustmentType.offset : nullptr;
     case FieldThresholdAmount::KEY : return fieldThresholdAmount.offset >= 0 ? buf + fieldThresholdAmount.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRequestForPositions::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosReqID::KEY : return fieldPosReqID.offset >= 0 ? buf + fieldPosReqID.offset : nullptr;
     case FieldPosReqType::KEY : return fieldPosReqType.offset >= 0 ? buf + fieldPosReqType.offset : nullptr;
     case FieldMatchStatus::KEY : return fieldMatchStatus.offset >= 0 ? buf + fieldMatchStatus.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldNoTradingSessions::KEY : return fieldNoTradingSessions.offset >= 0 ? buf + fieldNoTradingSessions.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldResponseTransportType::KEY : return fieldResponseTransportType.offset >= 0 ? buf + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::KEY : return fieldResponseDestination.offset >= 0 ? buf + fieldResponseDestination.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageRequestForPositionsAck::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosMaintRptID::KEY : return fieldPosMaintRptID.offset >= 0 ? buf + fieldPosMaintRptID.offset : nullptr;
     case FieldPosReqID::KEY : return fieldPosReqID.offset >= 0 ? buf + fieldPosReqID.offset : nullptr;
     case FieldTotalNumPosReports::KEY : return fieldTotalNumPosReports.offset >= 0 ? buf + fieldTotalNumPosReports.offset : nullptr;
     case FieldUnsolicitedIndicator::KEY : return fieldUnsolicitedIndicator.offset >= 0 ? buf + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldPosReqResult::KEY : return fieldPosReqResult.offset >= 0 ? buf + fieldPosReqResult.offset : nullptr;
     case FieldPosReqStatus::KEY : return fieldPosReqStatus.offset >= 0 ? buf + fieldPosReqStatus.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldResponseTransportType::KEY : return fieldResponseTransportType.offset >= 0 ? buf + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::KEY : return fieldResponseDestination.offset >= 0 ? buf + fieldResponseDestination.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessagePositionReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldPosMaintRptID::KEY : return fieldPosMaintRptID.offset >= 0 ? buf + fieldPosMaintRptID.offset : nullptr;
     case FieldPosReqID::KEY : return fieldPosReqID.offset >= 0 ? buf + fieldPosReqID.offset : nullptr;
     case FieldPosReqType::KEY : return fieldPosReqType.offset >= 0 ? buf + fieldPosReqType.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTotalNumPosReports::KEY : return fieldTotalNumPosReports.offset >= 0 ? buf + fieldTotalNumPosReports.offset : nullptr;
     case FieldUnsolicitedIndicator::KEY : return fieldUnsolicitedIndicator.offset >= 0 ? buf + fieldUnsolicitedIndicator.offset : nullptr;
     case FieldPosReqResult::KEY : return fieldPosReqResult.offset >= 0 ? buf + fieldPosReqResult.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldSettlPrice::KEY : return fieldSettlPrice.offset >= 0 ? buf + fieldSettlPrice.offset : nullptr;
     case FieldSettlPriceType::KEY : return fieldSettlPriceType.offset >= 0 ? buf + fieldSettlPriceType.offset : nullptr;
     case FieldPriorSettlPrice::KEY : return fieldPriorSettlPrice.offset >= 0 ? buf + fieldPriorSettlPrice.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoPositions::KEY : return fieldNoPositions.offset >= 0 ? buf + fieldNoPositions.offset : nullptr;
     case FieldNoPosAmt::KEY : return fieldNoPosAmt.offset >= 0 ? buf + fieldNoPosAmt.offset : nullptr;
     case FieldRegistStatus::KEY : return fieldRegistStatus.offset >= 0 ? buf + fieldRegistStatus.offset : nullptr;
     case FieldDeliveryDate::KEY : return fieldDeliveryDate.offset >= 0 ? buf + fieldDeliveryDate.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradeCaptureReportRequestAck::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeRequestID::KEY : return fieldTradeRequestID.offset >= 0 ? buf + fieldTradeRequestID.offset : nullptr;
     case FieldTradeRequestType::KEY : return fieldTradeRequestType.offset >= 0 ? buf + fieldTradeRequestType.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTotNumTradeReports::KEY : return fieldTotNumTradeReports.offset >= 0 ? buf + fieldTotNumTradeReports.offset : nullptr;
     case FieldTradeRequestResult::KEY : return fieldTradeRequestResult.offset >= 0 ? buf + fieldTradeRequestResult.offset : nullptr;
     case FieldTradeRequestStatus::KEY : return fieldTradeRequestStatus.offset >= 0 ? buf + fieldTradeRequestStatus.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldMultiLegReportingType::KEY : return fieldMultiLegReportingType.offset >= 0 ? buf + fieldMultiLegReportingType.offset : nullptr;
     case FieldResponseTransportType::KEY : return fieldResponseTransportType.offset >= 0 ? buf + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::KEY : return fieldResponseDestination.offset >= 0 ? buf + fieldResponseDestination.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageTradeCaptureReportAck::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldTradeReportID::KEY : return fieldTradeReportID.offset >= 0 ? buf + fieldTradeReportID.offset : nullptr;
     case FieldTradeReportTransType::KEY : return fieldTradeReportTransType.offset >= 0 ? buf + fieldTradeReportTransType.offset : nullptr;
     case FieldTradeReportType::KEY : return fieldTradeReportType.offset >= 0 ? buf + fieldTradeReportType.offset : nullptr;
     case FieldTrdType::KEY : return fieldTrdType.offset >= 0 ? buf + fieldTrdType.offset : nullptr;
     case FieldTrdSubType::KEY : return fieldTrdSubType.offset >= 0 ? buf + fieldTrdSubType.offset : nullptr;
     case FieldSecondaryTrdType::KEY : return fieldSecondaryTrdType.offset >= 0 ? buf + fieldSecondaryTrdType.offset : nullptr;
     case FieldTransferReason::KEY : return fieldTransferReason.offset >= 0 ? buf + fieldTransferReason.offset : nullptr;
     case FieldExecType::KEY : return fieldExecType.offset >= 0 ? buf + fieldExecType.offset : nullptr;
     case FieldTradeReportRefID::KEY : return fieldTradeReportRefID.offset >= 0 ? buf + fieldTradeReportRefID.offset : nullptr;
     case FieldSecondaryTradeReportRefID::KEY : return fieldSecondaryTradeReportRefID.offset >= 0 ? buf + fieldSecondaryTradeReportRefID.offset : nullptr;
     case FieldTrdRptStatus::KEY : return fieldTrdRptStatus.offset >= 0 ? buf + fieldTrdRptStatus.offset : nullptr;
     case FieldTradeReportRejectReason::KEY : return fieldTradeReportRejectReason.offset >= 0 ? buf + fieldTradeReportRejectReason.offset : nullptr;
     case FieldSecondaryTradeReportID::KEY : return fieldSecondaryTradeReportID.offset >= 0 ? buf + fieldSecondaryTradeReportID.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldTradeLinkID::KEY : return fieldTradeLinkID.offset >= 0 ? buf + fieldTradeLinkID.offset : nullptr;
     case FieldTrdMatchID::KEY : return fieldTrdMatchID.offset >= 0 ? buf + fieldTrdMatchID.offset : nullptr;
     case FieldExecID::KEY : return fieldExecID.offset >= 0 ? buf + fieldExecID.offset : nullptr;
     case FieldSecondaryExecID::KEY : return fieldSecondaryExecID.offset >= 0 ? buf + fieldSecondaryExecID.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoTrdRegTimestamps::KEY : return fieldNoTrdRegTimestamps.offset >= 0 ? buf + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldResponseTransportType::KEY : return fieldResponseTransportType.offset >= 0 ? buf + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::KEY : return fieldResponseDestination.offset >= 0 ? buf + fieldResponseDestination.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldClearingFeeIndicator::KEY : return fieldClearingFeeIndicator.offset >= 0 ? buf + fieldClearingFeeIndicator.offset : nullptr;
     case FieldOrderCapacity::KEY : return fieldOrderCapacity.offset >= 0 ? buf + fieldOrderCapacity.offset : nullptr;
     case FieldOrderRestrictions::KEY : return fieldOrderRestrictions.offset >= 0 ? buf + fieldOrderRestrictions.offset : nullptr;
     case FieldCustOrderCapacity::KEY : return fieldCustOrderCapacity.offset >= 0 ? buf + fieldCustOrderCapacity.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAcctIDSource::KEY : return fieldAcctIDSource.offset >= 0 ? buf + fieldAcctIDSource.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldPositionEffect::KEY : return fieldPositionEffect.offset >= 0 ? buf + fieldPositionEffect.offset : nullptr;
     case FieldPreallocMethod::KEY : return fieldPreallocMethod.offset >= 0 ? buf + fieldPreallocMethod.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAllocationReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocReportID::KEY : return fieldAllocReportID.offset >= 0 ? buf + fieldAllocReportID.offset : nullptr;
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldAllocTransType::KEY : return fieldAllocTransType.offset >= 0 ? buf + fieldAllocTransType.offset : nullptr;
     case FieldAllocReportRefID::KEY : return fieldAllocReportRefID.offset >= 0 ? buf + fieldAllocReportRefID.offset : nullptr;
     case FieldAllocCancReplaceReason::KEY : return fieldAllocCancReplaceReason.offset >= 0 ? buf + fieldAllocCancReplaceReason.offset : nullptr;
     case FieldSecondaryAllocID::KEY : return fieldSecondaryAllocID.offset >= 0 ? buf + fieldSecondaryAllocID.offset : nullptr;
     case FieldAllocReportType::KEY : return fieldAllocReportType.offset >= 0 ? buf + fieldAllocReportType.offset : nullptr;
     case FieldAllocStatus::KEY : return fieldAllocStatus.offset >= 0 ? buf + fieldAllocStatus.offset : nullptr;
     case FieldAllocRejCode::KEY : return fieldAllocRejCode.offset >= 0 ? buf + fieldAllocRejCode.offset : nullptr;
     case FieldRefAllocID::KEY : return fieldRefAllocID.offset >= 0 ? buf + fieldRefAllocID.offset : nullptr;
     case FieldAllocIntermedReqType::KEY : return fieldAllocIntermedReqType.offset >= 0 ? buf + fieldAllocIntermedReqType.offset : nullptr;
     case FieldAllocLinkID::KEY : return fieldAllocLinkID.offset >= 0 ? buf + fieldAllocLinkID.offset : nullptr;
     case FieldAllocLinkType::KEY : return fieldAllocLinkType.offset >= 0 ? buf + fieldAllocLinkType.offset : nullptr;
     case FieldBookingRefID::KEY : return fieldBookingRefID.offset >= 0 ? buf + fieldBookingRefID.offset : nullptr;
     case FieldAllocNoOrdersType::KEY : return fieldAllocNoOrdersType.offset >= 0 ? buf + fieldAllocNoOrdersType.offset : nullptr;
     case FieldNoOrders::KEY : return fieldNoOrders.offset >= 0 ? buf + fieldNoOrders.offset : nullptr;
     case FieldNoExecs::KEY : return fieldNoExecs.offset >= 0 ? buf + fieldNoExecs.offset : nullptr;
     case FieldPreviouslyReported::KEY : return fieldPreviouslyReported.offset >= 0 ? buf + fieldPreviouslyReported.offset : nullptr;
     case FieldReversalIndicator::KEY : return fieldReversalIndicator.offset >= 0 ? buf + fieldReversalIndicator.offset : nullptr;
     case FieldMatchType::KEY : return fieldMatchType.offset >= 0 ? buf + fieldMatchType.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldDeliveryForm::KEY : return fieldDeliveryForm.offset >= 0 ? buf + fieldDeliveryForm.offset : nullptr;
     case FieldPctAtRisk::KEY : return fieldPctAtRisk.offset >= 0 ? buf + fieldPctAtRisk.offset : nullptr;
     case FieldNoInstrAttrib::KEY : return fieldNoInstrAttrib.offset >= 0 ? buf + fieldNoInstrAttrib.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldLastMkt::KEY : return fieldLastMkt.offset >= 0 ? buf + fieldLastMkt.offset : nullptr;
     case FieldTradeOriginationDate::KEY : return fieldTradeOriginationDate.offset >= 0 ? buf + fieldTradeOriginationDate.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldAvgPx::KEY : return fieldAvgPx.offset >= 0 ? buf + fieldAvgPx.offset : nullptr;
     case FieldAvgParPx::KEY : return fieldAvgParPx.offset >= 0 ? buf + fieldAvgParPx.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldAvgPxPrecision::KEY : return fieldAvgPxPrecision.offset >= 0 ? buf + fieldAvgPxPrecision.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldSettlType::KEY : return fieldSettlType.offset >= 0 ? buf + fieldSettlType.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldBookingType::KEY : return fieldBookingType.offset >= 0 ? buf + fieldBookingType.offset : nullptr;
     case FieldGrossTradeAmt::KEY : return fieldGrossTradeAmt.offset >= 0 ? buf + fieldGrossTradeAmt.offset : nullptr;
     case FieldConcession::KEY : return fieldConcession.offset >= 0 ? buf + fieldConcession.offset : nullptr;
     case FieldTotalTakedown::KEY : return fieldTotalTakedown.offset >= 0 ? buf + fieldTotalTakedown.offset : nullptr;
     case FieldNetMoney::KEY : return fieldNetMoney.offset >= 0 ? buf + fieldNetMoney.offset : nullptr;
     case FieldPositionEffect::KEY : return fieldPositionEffect.offset >= 0 ? buf + fieldPositionEffect.offset : nullptr;
     case FieldAutoAcceptIndicator::KEY : return fieldAutoAcceptIndicator.offset >= 0 ? buf + fieldAutoAcceptIndicator.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldNumDaysInterest::KEY : return fieldNumDaysInterest.offset >= 0 ? buf + fieldNumDaysInterest.offset : nullptr;
     case FieldAccruedInterestRate::KEY : return fieldAccruedInterestRate.offset >= 0 ? buf + fieldAccruedInterestRate.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldTotalAccruedInterestAmt::KEY : return fieldTotalAccruedInterestAmt.offset >= 0 ? buf + fieldTotalAccruedInterestAmt.offset : nullptr;
     case FieldInterestAtMaturity::KEY : return fieldInterestAtMaturity.offset >= 0 ? buf + fieldInterestAtMaturity.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldLegalConfirm::KEY : return fieldLegalConfirm.offset >= 0 ? buf + fieldLegalConfirm.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldYieldType::KEY : return fieldYieldType.offset >= 0 ? buf + fieldYieldType.offset : nullptr;
     case FieldYield::KEY : return fieldYield.offset >= 0 ? buf + fieldYield.offset : nullptr;
     case FieldYieldCalcDate::KEY : return fieldYieldCalcDate.offset >= 0 ? buf + fieldYieldCalcDate.offset : nullptr;
     case FieldYieldRedemptionDate::KEY : return fieldYieldRedemptionDate.offset >= 0 ? buf + fieldYieldRedemptionDate.offset : nullptr;
     case FieldYieldRedemptionPrice::KEY : return fieldYieldRedemptionPrice.offset >= 0 ? buf + fieldYieldRedemptionPrice.offset : nullptr;
     case FieldYieldRedemptionPriceType::KEY : return fieldYieldRedemptionPriceType.offset >= 0 ? buf + fieldYieldRedemptionPriceType.offset : nullptr;
     case FieldTotNoAllocs::KEY : return fieldTotNoAllocs.offset >= 0 ? buf + fieldTotNoAllocs.offset : nullptr;
     case FieldLastFragment::KEY : return fieldLastFragment.offset >= 0 ? buf + fieldLastFragment.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAllocationReportAck::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldAllocReportID::KEY : return fieldAllocReportID.offset >= 0 ? buf + fieldAllocReportID.offset : nullptr;
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldSecondaryAllocID::KEY : return fieldSecondaryAllocID.offset >= 0 ? buf + fieldSecondaryAllocID.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldAllocStatus::KEY : return fieldAllocStatus.offset >= 0 ? buf + fieldAllocStatus.offset : nullptr;
     case FieldAllocRejCode::KEY : return fieldAllocRejCode.offset >= 0 ? buf + fieldAllocRejCode.offset : nullptr;
     case FieldAllocReportType::KEY : return fieldAllocReportType.offset >= 0 ? buf + fieldAllocReportType.offset : nullptr;
     case FieldAllocIntermedReqType::KEY : return fieldAllocIntermedReqType.offset >= 0 ? buf + fieldAllocIntermedReqType.offset : nullptr;
     case FieldMatchStatus::KEY : return fieldMatchStatus.offset >= 0 ? buf + fieldMatchStatus.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldNoAllocs::KEY : return fieldNoAllocs.offset >= 0 ? buf + fieldNoAllocs.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageConfirmationAck::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldConfirmID::KEY : return fieldConfirmID.offset >= 0 ? buf + fieldConfirmID.offset : nullptr;
     case FieldTradeDate::KEY : return fieldTradeDate.offset >= 0 ? buf + fieldTradeDate.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldAffirmStatus::KEY : return fieldAffirmStatus.offset >= 0 ? buf + fieldAffirmStatus.offset : nullptr;
     case FieldConfirmRejReason::KEY : return fieldConfirmRejReason.offset >= 0 ? buf + fieldConfirmRejReason.offset : nullptr;
     case FieldMatchStatus::KEY : return fieldMatchStatus.offset >= 0 ? buf + fieldMatchStatus.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageSettlementInstructionRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldSettlInstReqID::KEY : return fieldSettlInstReqID.offset >= 0 ? buf + fieldSettlInstReqID.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAllocAccount::KEY : return fieldAllocAccount.offset >= 0 ? buf + fieldAllocAccount.offset : nullptr;
     case FieldAllocAcctIDSource::KEY : return fieldAllocAcctIDSource.offset >= 0 ? buf + fieldAllocAcctIDSource.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldEffectiveTime::KEY : return fieldEffectiveTime.offset >= 0 ? buf + fieldEffectiveTime.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldLastUpdateTime::KEY : return fieldLastUpdateTime.offset >= 0 ? buf + fieldLastUpdateTime.offset : nullptr;
     case FieldStandInstDbType::KEY : return fieldStandInstDbType.offset >= 0 ? buf + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::KEY : return fieldStandInstDbName.offset >= 0 ? buf + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::KEY : return fieldStandInstDbID.offset >= 0 ? buf + fieldStandInstDbID.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageAssignmentReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldAsgnRptID::KEY : return fieldAsgnRptID.offset >= 0 ? buf + fieldAsgnRptID.offset : nullptr;
     case FieldTotNumAssignmentReports::KEY : return fieldTotNumAssignmentReports.offset >= 0 ? buf + fieldTotNumAssignmentReports.offset : nullptr;
     case FieldLastRptRequested::KEY : return fieldLastRptRequested.offset >= 0 ? buf + fieldLastRptRequested.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldNoPositions::KEY : return fieldNoPositions.offset >= 0 ? buf + fieldNoPositions.offset : nullptr;
     case FieldNoPosAmt::KEY : return fieldNoPosAmt.offset >= 0 ? buf + fieldNoPosAmt.offset : nullptr;
     case FieldThresholdAmount::KEY : return fieldThresholdAmount.offset >= 0 ? buf + fieldThresholdAmount.offset : nullptr;
     case FieldSettlPrice::KEY : return fieldSettlPrice.offset >= 0 ? buf + fieldSettlPrice.offset : nullptr;
     case FieldSettlPriceType::KEY : return fieldSettlPriceType.offset >= 0 ? buf + fieldSettlPriceType.offset : nullptr;
     case FieldUnderlyingSettlPrice::KEY : return fieldUnderlyingSettlPrice.offset >= 0 ? buf + fieldUnderlyingSettlPrice.offset : nullptr;
     case FieldExpireDate::KEY : return fieldExpireDate.offset >= 0 ? buf + fieldExpireDate.offset : nullptr;
     case FieldAssignmentMethod::KEY : return fieldAssignmentMethod.offset >= 0 ? buf + fieldAssignmentMethod.offset : nullptr;
     case FieldAssignmentUnit::KEY : return fieldAssignmentUnit.offset >= 0 ? buf + fieldAssignmentUnit.offset : nullptr;
     case FieldOpenInterest::KEY : return fieldOpenInterest.offset >= 0 ? buf + fieldOpenInterest.offset : nullptr;
     case FieldExerciseMethod::KEY : return fieldExerciseMethod.offset >= 0 ? buf + fieldExerciseMethod.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollReqID::KEY : return fieldCollReqID.offset >= 0 ? buf + fieldCollReqID.offset : nullptr;
     case FieldCollAsgnReason::KEY : return fieldCollAsgnReason.offset >= 0 ? buf + fieldCollAsgnReason.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::KEY : return fieldNoExecs.offset >= 0 ? buf + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::KEY : return fieldNoTrades.offset >= 0 ? buf + fieldNoTrades.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::KEY : return fieldMarginExcess.offset >= 0 ? buf + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::KEY : return fieldTotalNetValue.offset >= 0 ? buf + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::KEY : return fieldCashOutstanding.offset >= 0 ? buf + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::KEY : return fieldNoTrdRegTimestamps.offset >= 0 ? buf + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldNoMiscFees::KEY : return fieldNoMiscFees.offset >= 0 ? buf + fieldNoMiscFees.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralAssignment::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollAsgnID::KEY : return fieldCollAsgnID.offset >= 0 ? buf + fieldCollAsgnID.offset : nullptr;
     case FieldCollReqID::KEY : return fieldCollReqID.offset >= 0 ? buf + fieldCollReqID.offset : nullptr;
     case FieldCollAsgnReason::KEY : return fieldCollAsgnReason.offset >= 0 ? buf + fieldCollAsgnReason.offset : nullptr;
     case FieldCollAsgnTransType::KEY : return fieldCollAsgnTransType.offset >= 0 ? buf + fieldCollAsgnTransType.offset : nullptr;
     case FieldCollAsgnRefID::KEY : return fieldCollAsgnRefID.offset >= 0 ? buf + fieldCollAsgnRefID.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldExpireTime::KEY : return fieldExpireTime.offset >= 0 ? buf + fieldExpireTime.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::KEY : return fieldNoExecs.offset >= 0 ? buf + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::KEY : return fieldNoTrades.offset >= 0 ? buf + fieldNoTrades.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::KEY : return fieldMarginExcess.offset >= 0 ? buf + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::KEY : return fieldTotalNetValue.offset >= 0 ? buf + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::KEY : return fieldCashOutstanding.offset >= 0 ? buf + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::KEY : return fieldNoTrdRegTimestamps.offset >= 0 ? buf + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldNoMiscFees::KEY : return fieldNoMiscFees.offset >= 0 ? buf + fieldNoMiscFees.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldSettlDeliveryType::KEY : return fieldSettlDeliveryType.offset >= 0 ? buf + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::KEY : return fieldStandInstDbType.offset >= 0 ? buf + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::KEY : return fieldStandInstDbName.offset >= 0 ? buf + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::KEY : return fieldStandInstDbID.offset >= 0 ? buf + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::KEY : return fieldNoDlvyInst.offset >= 0 ? buf + fieldNoDlvyInst.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralResponse::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollRespID::KEY : return fieldCollRespID.offset >= 0 ? buf + fieldCollRespID.offset : nullptr;
     case FieldCollAsgnID::KEY : return fieldCollAsgnID.offset >= 0 ? buf + fieldCollAsgnID.offset : nullptr;
     case FieldCollReqID::KEY : return fieldCollReqID.offset >= 0 ? buf + fieldCollReqID.offset : nullptr;
     case FieldCollAsgnReason::KEY : return fieldCollAsgnReason.offset >= 0 ? buf + fieldCollAsgnReason.offset : nullptr;
     case FieldCollAsgnTransType::KEY : return fieldCollAsgnTransType.offset >= 0 ? buf + fieldCollAsgnTransType.offset : nullptr;
     case FieldCollAsgnRespType::KEY : return fieldCollAsgnRespType.offset >= 0 ? buf + fieldCollAsgnRespType.offset : nullptr;
     case FieldCollAsgnRejectReason::KEY : return fieldCollAsgnRejectReason.offset >= 0 ? buf + fieldCollAsgnRejectReason.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::KEY : return fieldNoExecs.offset >= 0 ? buf + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::KEY : return fieldNoTrades.offset >= 0 ? buf + fieldNoTrades.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::KEY : return fieldMarginExcess.offset >= 0 ? buf + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::KEY : return fieldTotalNetValue.offset >= 0 ? buf + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::KEY : return fieldCashOutstanding.offset >= 0 ? buf + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::KEY : return fieldNoTrdRegTimestamps.offset >= 0 ? buf + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldNoMiscFees::KEY : return fieldNoMiscFees.offset >= 0 ? buf + fieldNoMiscFees.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralReport::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollRptID::KEY : return fieldCollRptID.offset >= 0 ? buf + fieldCollRptID.offset : nullptr;
     case FieldCollInquiryID::KEY : return fieldCollInquiryID.offset >= 0 ? buf + fieldCollInquiryID.offset : nullptr;
     case FieldCollStatus::KEY : return fieldCollStatus.offset >= 0 ? buf + fieldCollStatus.offset : nullptr;
     case FieldTotNumReports::KEY : return fieldTotNumReports.offset >= 0 ? buf + fieldTotNumReports.offset : nullptr;
     case FieldLastRptRequested::KEY : return fieldLastRptRequested.offset >= 0 ? buf + fieldLastRptRequested.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::KEY : return fieldNoExecs.offset >= 0 ? buf + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::KEY : return fieldNoTrades.offset >= 0 ? buf + fieldNoTrades.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::KEY : return fieldMarginExcess.offset >= 0 ? buf + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::KEY : return fieldTotalNetValue.offset >= 0 ? buf + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::KEY : return fieldCashOutstanding.offset >= 0 ? buf + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::KEY : return fieldNoTrdRegTimestamps.offset >= 0 ? buf + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldNoMiscFees::KEY : return fieldNoMiscFees.offset >= 0 ? buf + fieldNoMiscFees.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldSettlDeliveryType::KEY : return fieldSettlDeliveryType.offset >= 0 ? buf + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::KEY : return fieldStandInstDbType.offset >= 0 ? buf + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::KEY : return fieldStandInstDbName.offset >= 0 ? buf + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::KEY : return fieldStandInstDbID.offset >= 0 ? buf + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::KEY : return fieldNoDlvyInst.offset >= 0 ? buf + fieldNoDlvyInst.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralInquiry::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollInquiryID::KEY : return fieldCollInquiryID.offset >= 0 ? buf + fieldCollInquiryID.offset : nullptr;
     case FieldNoCollInquiryQualifier::KEY : return fieldNoCollInquiryQualifier.offset >= 0 ? buf + fieldNoCollInquiryQualifier.offset : nullptr;
     case FieldSubscriptionRequestType::KEY : return fieldSubscriptionRequestType.offset >= 0 ? buf + fieldSubscriptionRequestType.offset : nullptr;
     case FieldResponseTransportType::KEY : return fieldResponseTransportType.offset >= 0 ? buf + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::KEY : return fieldResponseDestination.offset >= 0 ? buf + fieldResponseDestination.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::KEY : return fieldNoExecs.offset >= 0 ? buf + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::KEY : return fieldNoTrades.offset >= 0 ? buf + fieldNoTrades.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldMarginExcess::KEY : return fieldMarginExcess.offset >= 0 ? buf + fieldMarginExcess.offset : nullptr;
     case FieldTotalNetValue::KEY : return fieldTotalNetValue.offset >= 0 ? buf + fieldTotalNetValue.offset : nullptr;
     case FieldCashOutstanding::KEY : return fieldCashOutstanding.offset >= 0 ? buf + fieldCashOutstanding.offset : nullptr;
     case FieldNoTrdRegTimestamps::KEY : return fieldNoTrdRegTimestamps.offset >= 0 ? buf + fieldNoTrdRegTimestamps.offset : nullptr;
     case FieldSide::KEY : return fieldSide.offset >= 0 ? buf + fieldSide.offset : nullptr;
     case FieldPrice::KEY : return fieldPrice.offset >= 0 ? buf + fieldPrice.offset : nullptr;
     case FieldPriceType::KEY : return fieldPriceType.offset >= 0 ? buf + fieldPriceType.offset : nullptr;
     case FieldAccruedInterestAmt::KEY : return fieldAccruedInterestAmt.offset >= 0 ? buf + fieldAccruedInterestAmt.offset : nullptr;
     case FieldEndAccruedInterestAmt::KEY : return fieldEndAccruedInterestAmt.offset >= 0 ? buf + fieldEndAccruedInterestAmt.offset : nullptr;
     case FieldStartCash::KEY : return fieldStartCash.offset >= 0 ? buf + fieldStartCash.offset : nullptr;
     case FieldEndCash::KEY : return fieldEndCash.offset >= 0 ? buf + fieldEndCash.offset : nullptr;
     case FieldSpread::KEY : return fieldSpread.offset >= 0 ? buf + fieldSpread.offset : nullptr;
     case FieldBenchmarkCurveCurrency::KEY : return fieldBenchmarkCurveCurrency.offset >= 0 ? buf + fieldBenchmarkCurveCurrency.offset : nullptr;
     case FieldBenchmarkCurveName::KEY : return fieldBenchmarkCurveName.offset >= 0 ? buf + fieldBenchmarkCurveName.offset : nullptr;
     case FieldBenchmarkCurvePoint::KEY : return fieldBenchmarkCurvePoint.offset >= 0 ? buf + fieldBenchmarkCurvePoint.offset : nullptr;
     case FieldBenchmarkPrice::KEY : return fieldBenchmarkPrice.offset >= 0 ? buf + fieldBenchmarkPrice.offset : nullptr;
     case FieldBenchmarkPriceType::KEY : return fieldBenchmarkPriceType.offset >= 0 ? buf + fieldBenchmarkPriceType.offset : nullptr;
     case FieldBenchmarkSecurityID::KEY : return fieldBenchmarkSecurityID.offset >= 0 ? buf + fieldBenchmarkSecurityID.offset : nullptr;
     case FieldBenchmarkSecurityIDSource::KEY : return fieldBenchmarkSecurityIDSource.offset >= 0 ? buf + fieldBenchmarkSecurityIDSource.offset : nullptr;
     case FieldNoStipulations::KEY : return fieldNoStipulations.offset >= 0 ? buf + fieldNoStipulations.offset : nullptr;
     case FieldSettlDeliveryType::KEY : return fieldSettlDeliveryType.offset >= 0 ? buf + fieldSettlDeliveryType.offset : nullptr;
     case FieldStandInstDbType::KEY : return fieldStandInstDbType.offset >= 0 ? buf + fieldStandInstDbType.offset : nullptr;
     case FieldStandInstDbName::KEY : return fieldStandInstDbName.offset >= 0 ? buf + fieldStandInstDbName.offset : nullptr;
     case FieldStandInstDbID::KEY : return fieldStandInstDbID.offset >= 0 ? buf + fieldStandInstDbID.offset : nullptr;
     case FieldNoDlvyInst::KEY : return fieldNoDlvyInst.offset >= 0 ? buf + fieldNoDlvyInst.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldNetworkRequestType::KEY : return fieldNetworkRequestType.offset >= 0 ? buf + fieldNetworkRequestType.offset : nullptr;
     case FieldNetworkRequestID::KEY : return fieldNetworkRequestID.offset >= 0 ? buf + fieldNetworkRequestID.offset : nullptr;
     case FieldNoCompIDs::KEY : return fieldNoCompIDs.offset >= 0 ? buf + fieldNoCompIDs.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageNetworkCounterpartySystemStatusResponse::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldNetworkStatusResponseType::KEY : return fieldNetworkStatusResponseType.offset >= 0 ? buf + fieldNetworkStatusResponseType.offset : nullptr;
     case FieldNetworkRequestID::KEY : return fieldNetworkRequestID.offset >= 0 ? buf + fieldNetworkRequestID.offset : nullptr;
     case FieldNetworkResponseID::KEY : return fieldNetworkResponseID.offset >= 0 ? buf + fieldNetworkResponseID.offset : nullptr;
     case FieldLastNetworkResponseID::KEY : return fieldLastNetworkResponseID.offset >= 0 ? buf + fieldLastNetworkResponseID.offset : nullptr;
     case FieldNoCompIDs::KEY : return fieldNoCompIDs.offset >= 0 ? buf + fieldNoCompIDs.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageUserRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldUserRequestID::KEY : return fieldUserRequestID.offset >= 0 ? buf + fieldUserRequestID.offset : nullptr;
     case FieldUserRequestType::KEY : return fieldUserRequestType.offset >= 0 ? buf + fieldUserRequestType.offset : nullptr;
     case FieldUsername::KEY : return fieldUsername.offset >= 0 ? buf + fieldUsername.offset : nullptr;
     case FieldPassword::KEY : return fieldPassword.offset >= 0 ? buf + fieldPassword.offset : nullptr;
     case FieldNewPassword::KEY : return fieldNewPassword.offset >= 0 ? buf + fieldNewPassword.offset : nullptr;
     case FieldRawDataLength::KEY : return fieldRawDataLength.offset >= 0 ? buf + fieldRawDataLength.offset : nullptr;
     case FieldRawData::KEY : return fieldRawData.offset >= 0 ? buf + fieldRawData.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageUserResponse::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldUserRequestID::KEY : return fieldUserRequestID.offset >= 0 ? buf + fieldUserRequestID.offset : nullptr;
     case FieldUsername::KEY : return fieldUsername.offset >= 0 ? buf + fieldUsername.offset : nullptr;
     case FieldUserStatus::KEY : return fieldUserStatus.offset >= 0 ? buf + fieldUserStatus.offset : nullptr;
     case FieldUserStatusText::KEY : return fieldUserStatusText.offset >= 0 ? buf + fieldUserStatusText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageCollateralInquiryAck::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldCollInquiryID::KEY : return fieldCollInquiryID.offset >= 0 ? buf + fieldCollInquiryID.offset : nullptr;
     case FieldCollInquiryStatus::KEY : return fieldCollInquiryStatus.offset >= 0 ? buf + fieldCollInquiryStatus.offset : nullptr;
     case FieldCollInquiryResult::KEY : return fieldCollInquiryResult.offset >= 0 ? buf + fieldCollInquiryResult.offset : nullptr;
     case FieldNoCollInquiryQualifier::KEY : return fieldNoCollInquiryQualifier.offset >= 0 ? buf + fieldNoCollInquiryQualifier.offset : nullptr;
     case FieldTotNumReports::KEY : return fieldTotNumReports.offset >= 0 ? buf + fieldTotNumReports.offset : nullptr;
     case FieldNoPartyIDs::KEY : return fieldNoPartyIDs.offset >= 0 ? buf + fieldNoPartyIDs.offset : nullptr;
     case FieldAccount::KEY : return fieldAccount.offset >= 0 ? buf + fieldAccount.offset : nullptr;
     case FieldAccountType::KEY : return fieldAccountType.offset >= 0 ? buf + fieldAccountType.offset : nullptr;
     case FieldClOrdID::KEY : return fieldClOrdID.offset >= 0 ? buf + fieldClOrdID.offset : nullptr;
     case FieldOrderID::KEY : return fieldOrderID.offset >= 0 ? buf + fieldOrderID.offset : nullptr;
     case FieldSecondaryOrderID::KEY : return fieldSecondaryOrderID.offset >= 0 ? buf + fieldSecondaryOrderID.offset : nullptr;
     case FieldSecondaryClOrdID::KEY : return fieldSecondaryClOrdID.offset >= 0 ? buf + fieldSecondaryClOrdID.offset : nullptr;
     case FieldNoExecs::KEY : return fieldNoExecs.offset >= 0 ? buf + fieldNoExecs.offset : nullptr;
     case FieldNoTrades::KEY : return fieldNoTrades.offset >= 0 ? buf + fieldNoTrades.offset : nullptr;
     case FieldSymbol::KEY : return fieldSymbol.offset >= 0 ? buf + fieldSymbol.offset : nullptr;
     case FieldSymbolSfx::KEY : return fieldSymbolSfx.offset >= 0 ? buf + fieldSymbolSfx.offset : nullptr;
     case FieldSecurityID::KEY : return fieldSecurityID.offset >= 0 ? buf + fieldSecurityID.offset : nullptr;
     case FieldSecurityIDSource::KEY : return fieldSecurityIDSource.offset >= 0 ? buf + fieldSecurityIDSource.offset : nullptr;
     case FieldNoSecurityAltID::KEY : return fieldNoSecurityAltID.offset >= 0 ? buf + fieldNoSecurityAltID.offset : nullptr;
     case FieldProduct::KEY : return fieldProduct.offset >= 0 ? buf + fieldProduct.offset : nullptr;
     case FieldCFICode::KEY : return fieldCFICode.offset >= 0 ? buf + fieldCFICode.offset : nullptr;
     case FieldSecurityType::KEY : return fieldSecurityType.offset >= 0 ? buf + fieldSecurityType.offset : nullptr;
     case FieldSecuritySubType::KEY : return fieldSecuritySubType.offset >= 0 ? buf + fieldSecuritySubType.offset : nullptr;
     case FieldMaturityMonthYear::KEY : return fieldMaturityMonthYear.offset >= 0 ? buf + fieldMaturityMonthYear.offset : nullptr;
     case FieldMaturityDate::KEY : return fieldMaturityDate.offset >= 0 ? buf + fieldMaturityDate.offset : nullptr;
     case FieldPutOrCall::KEY : return fieldPutOrCall.offset >= 0 ? buf + fieldPutOrCall.offset : nullptr;
     case FieldCouponPaymentDate::KEY : return fieldCouponPaymentDate.offset >= 0 ? buf + fieldCouponPaymentDate.offset : nullptr;
     case FieldIssueDate::KEY : return fieldIssueDate.offset >= 0 ? buf + fieldIssueDate.offset : nullptr;
     case FieldRepoCollateralSecurityType::KEY : return fieldRepoCollateralSecurityType.offset >= 0 ? buf + fieldRepoCollateralSecurityType.offset : nullptr;
     case FieldRepurchaseTerm::KEY : return fieldRepurchaseTerm.offset >= 0 ? buf + fieldRepurchaseTerm.offset : nullptr;
     case FieldRepurchaseRate::KEY : return fieldRepurchaseRate.offset >= 0 ? buf + fieldRepurchaseRate.offset : nullptr;
     case FieldFactor::KEY : return fieldFactor.offset >= 0 ? buf + fieldFactor.offset : nullptr;
     case FieldCreditRating::KEY : return fieldCreditRating.offset >= 0 ? buf + fieldCreditRating.offset : nullptr;
     case FieldInstrRegistry::KEY : return fieldInstrRegistry.offset >= 0 ? buf + fieldInstrRegistry.offset : nullptr;
     case FieldCountryOfIssue::KEY : return fieldCountryOfIssue.offset >= 0 ? buf + fieldCountryOfIssue.offset : nullptr;
     case FieldStateOrProvinceOfIssue::KEY : return fieldStateOrProvinceOfIssue.offset >= 0 ? buf + fieldStateOrProvinceOfIssue.offset : nullptr;
     case FieldLocaleOfIssue::KEY : return fieldLocaleOfIssue.offset >= 0 ? buf + fieldLocaleOfIssue.offset : nullptr;
     case FieldRedemptionDate::KEY : return fieldRedemptionDate.offset >= 0 ? buf + fieldRedemptionDate.offset : nullptr;
     case FieldStrikePrice::KEY : return fieldStrikePrice.offset >= 0 ? buf + fieldStrikePrice.offset : nullptr;
     case FieldStrikeCurrency::KEY : return fieldStrikeCurrency.offset >= 0 ? buf + fieldStrikeCurrency.offset : nullptr;
     case FieldOptAttribute::KEY : return fieldOptAttribute.offset >= 0 ? buf + fieldOptAttribute.offset : nullptr;
     case FieldContractMultiplier::KEY : return fieldContractMultiplier.offset >= 0 ? buf + fieldContractMultiplier.offset : nullptr;
     case FieldCouponRate::KEY : return fieldCouponRate.offset >= 0 ? buf + fieldCouponRate.offset : nullptr;
     case FieldSecurityExchange::KEY : return fieldSecurityExchange.offset >= 0 ? buf + fieldSecurityExchange.offset : nullptr;
     case FieldIssuer::KEY : return fieldIssuer.offset >= 0 ? buf + fieldIssuer.offset : nullptr;
     case FieldEncodedIssuerLen::KEY : return fieldEncodedIssuerLen.offset >= 0 ? buf + fieldEncodedIssuerLen.offset : nullptr;
     case FieldEncodedIssuer::KEY : return fieldEncodedIssuer.offset >= 0 ? buf + fieldEncodedIssuer.offset : nullptr;
     case FieldSecurityDesc::KEY : return fieldSecurityDesc.offset >= 0 ? buf + fieldSecurityDesc.offset : nullptr;
     case FieldEncodedSecurityDescLen::KEY : return fieldEncodedSecurityDescLen.offset >= 0 ? buf + fieldEncodedSecurityDescLen.offset : nullptr;
     case FieldEncodedSecurityDesc::KEY : return fieldEncodedSecurityDesc.offset >= 0 ? buf + fieldEncodedSecurityDesc.offset : nullptr;
     case FieldPool::KEY : return fieldPool.offset >= 0 ? buf + fieldPool.offset : nullptr;
     case FieldContractSettlMonth::KEY : return fieldContractSettlMonth.offset >= 0 ? buf + fieldContractSettlMonth.offset : nullptr;
     case FieldCPProgram::KEY : return fieldCPProgram.offset >= 0 ? buf + fieldCPProgram.offset : nullptr;
     case FieldCPRegType::KEY : return fieldCPRegType.offset >= 0 ? buf + fieldCPRegType.offset : nullptr;
     case FieldNoEvents::KEY : return fieldNoEvents.offset >= 0 ? buf + fieldNoEvents.offset : nullptr;
     case FieldDatedDate::KEY : return fieldDatedDate.offset >= 0 ? buf + fieldDatedDate.offset : nullptr;
     case FieldInterestAccrualDate::KEY : return fieldInterestAccrualDate.offset >= 0 ? buf + fieldInterestAccrualDate.offset : nullptr;
     case FieldAgreementDesc::KEY : return fieldAgreementDesc.offset >= 0 ? buf + fieldAgreementDesc.offset : nullptr;
     case FieldAgreementID::KEY : return fieldAgreementID.offset >= 0 ? buf + fieldAgreementID.offset : nullptr;
     case FieldAgreementDate::KEY : return fieldAgreementDate.offset >= 0 ? buf + fieldAgreementDate.offset : nullptr;
     case FieldAgreementCurrency::KEY : return fieldAgreementCurrency.offset >= 0 ? buf + fieldAgreementCurrency.offset : nullptr;
     case FieldTerminationType::KEY : return fieldTerminationType.offset >= 0 ? buf + fieldTerminationType.offset : nullptr;
     case FieldStartDate::KEY : return fieldStartDate.offset >= 0 ? buf + fieldStartDate.offset : nullptr;
     case FieldEndDate::KEY : return fieldEndDate.offset >= 0 ? buf + fieldEndDate.offset : nullptr;
     case FieldDeliveryType::KEY : return fieldDeliveryType.offset >= 0 ? buf + fieldDeliveryType.offset : nullptr;
     case FieldMarginRatio::KEY : return fieldMarginRatio.offset >= 0 ? buf + fieldMarginRatio.offset : nullptr;
     case FieldSettlDate::KEY : return fieldSettlDate.offset >= 0 ? buf + fieldSettlDate.offset : nullptr;
     case FieldQuantity::KEY : return fieldQuantity.offset >= 0 ? buf + fieldQuantity.offset : nullptr;
     case FieldQtyType::KEY : return fieldQtyType.offset >= 0 ? buf + fieldQtyType.offset : nullptr;
     case FieldCurrency::KEY : return fieldCurrency.offset >= 0 ? buf + fieldCurrency.offset : nullptr;
     case FieldNoLegs::KEY : return fieldNoLegs.offset >= 0 ? buf + fieldNoLegs.offset : nullptr;
     case FieldNoUnderlyings::KEY : return fieldNoUnderlyings.offset >= 0 ? buf + fieldNoUnderlyings.offset : nullptr;
     case FieldTradingSessionID::KEY : return fieldTradingSessionID.offset >= 0 ? buf + fieldTradingSessionID.offset : nullptr;
     case FieldTradingSessionSubID::KEY : return fieldTradingSessionSubID.offset >= 0 ? buf + fieldTradingSessionSubID.offset : nullptr;
     case FieldSettlSessID::KEY : return fieldSettlSessID.offset >= 0 ? buf + fieldSettlSessID.offset : nullptr;
     case FieldSettlSessSubID::KEY : return fieldSettlSessSubID.offset >= 0 ? buf + fieldSettlSessSubID.offset : nullptr;
     case FieldClearingBusinessDate::KEY : return fieldClearingBusinessDate.offset >= 0 ? buf + fieldClearingBusinessDate.offset : nullptr;
     case FieldResponseTransportType::KEY : return fieldResponseTransportType.offset >= 0 ? buf + fieldResponseTransportType.offset : nullptr;
     case FieldResponseDestination::KEY : return fieldResponseDestination.offset >= 0 ? buf + fieldResponseDestination.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}

const char * MessageConfirmationRequest::getFieldValue( unsigned tag ) const {
   if( buf == nullptr ) return nullptr;
   switch( tag ){
     case FieldConfirmReqID::KEY : return fieldConfirmReqID.offset >= 0 ? buf + fieldConfirmReqID.offset : nullptr;
     case FieldConfirmType::KEY : return fieldConfirmType.offset >= 0 ? buf + fieldConfirmType.offset : nullptr;
     case FieldNoOrders::KEY : return fieldNoOrders.offset >= 0 ? buf + fieldNoOrders.offset : nullptr;
     case FieldAllocID::KEY : return fieldAllocID.offset >= 0 ? buf + fieldAllocID.offset : nullptr;
     case FieldSecondaryAllocID::KEY : return fieldSecondaryAllocID.offset >= 0 ? buf + fieldSecondaryAllocID.offset : nullptr;
     case FieldIndividualAllocID::KEY : return fieldIndividualAllocID.offset >= 0 ? buf + fieldIndividualAllocID.offset : nullptr;
     case FieldTransactTime::KEY : return fieldTransactTime.offset >= 0 ? buf + fieldTransactTime.offset : nullptr;
     case FieldAllocAccount::KEY : return fieldAllocAccount.offset >= 0 ? buf + fieldAllocAccount.offset : nullptr;
     case FieldAllocAcctIDSource::KEY : return fieldAllocAcctIDSource.offset >= 0 ? buf + fieldAllocAcctIDSource.offset : nullptr;
     case FieldAllocAccountType::KEY : return fieldAllocAccountType.offset >= 0 ? buf + fieldAllocAccountType.offset : nullptr;
     case FieldText::KEY : return fieldText.offset >= 0 ? buf + fieldText.offset : nullptr;
     case FieldEncodedTextLen::KEY : return fieldEncodedTextLen.offset >= 0 ? buf + fieldEncodedTextLen.offset : nullptr;
     case FieldEncodedText::KEY : return fieldEncodedText.offset >= 0 ? buf + fieldEncodedText.offset : nullptr;
     case FieldCheckSum::KEY : return fieldCheckSum.offset >= 0 ? buf + fieldCheckSum.offset : nullptr; 
     default : return nullptr; 
   }
   return nullptr;
}


namespace {

const std::vector<tag_t> Header_knownFields = {
FieldBeginString::KEY,
FieldBodyLength::KEY,
FieldMsgType::KEY,
FieldSenderCompID::KEY,
FieldTargetCompID::KEY,
FieldOnBehalfOfCompID::KEY,
FieldDeliverToCompID::KEY,
FieldSecureDataLen::KEY,
FieldSecureData::KEY,
FieldMsgSeqNum::KEY,
FieldSenderSubID::KEY,
FieldSenderLocationID::KEY,
FieldTargetSubID::KEY,
FieldTargetLocationID::KEY,
FieldOnBehalfOfSubID::KEY,
FieldOnBehalfOfLocationID::KEY,
FieldDeliverToSubID::KEY,
FieldDeliverToLocationID::KEY,
FieldPossDupFlag::KEY,
FieldPossResend::KEY,
FieldSendingTime::KEY,
FieldOrigSendingTime::KEY,
FieldXmlDataLen::KEY,
FieldXmlData::KEY,
FieldMessageEncoding::KEY,
FieldLastMsgSeqNumProcessed::KEY,
FieldNoHops::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> Heartbeat_knownFields = {
FieldTestReqID::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> TestRequest_knownFields = {
FieldTestReqID::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ResendRequest_knownFields = {
FieldBeginSeqNo::KEY,
FieldEndSeqNo::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> Reject_knownFields = {
FieldRefSeqNum::KEY,
FieldRefTagID::KEY,
FieldRefMsgType::KEY,
FieldSessionRejectReason::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SequenceReset_knownFields = {
FieldGapFillFlag::KEY,
FieldNewSeqNo::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> Logout_knownFields = {
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> IOI_knownFields = {
FieldIOIID::KEY,
FieldIOITransType::KEY,
FieldIOIRefID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldSide::KEY,
FieldQtyType::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldIOIQty::KEY,
FieldCurrency::KEY,
FieldNoStipulations::KEY,
FieldNoLegs::KEY,
FieldPriceType::KEY,
FieldPrice::KEY,
FieldValidUntilTime::KEY,
FieldIOIQltyInd::KEY,
FieldIOINaturalFlag::KEY,
FieldNoIOIQualifiers::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldTransactTime::KEY,
FieldURLLink::KEY,
FieldNoRoutingIDs::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> Advertisement_knownFields = {
FieldAdvId::KEY,
FieldAdvTransType::KEY,
FieldAdvRefID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldAdvSide::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldPrice::KEY,
FieldCurrency::KEY,
FieldTradeDate::KEY,
FieldTransactTime::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldURLLink::KEY,
FieldLastMkt::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ExecutionReport_knownFields = {
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldSecondaryClOrdID::KEY,
FieldSecondaryExecID::KEY,
FieldClOrdID::KEY,
FieldOrigClOrdID::KEY,
FieldClOrdLinkID::KEY,
FieldQuoteRespID::KEY,
FieldOrdStatusReqID::KEY,
FieldMassStatusReqID::KEY,
FieldTotNumReports::KEY,
FieldLastRptRequested::KEY,
FieldNoPartyIDs::KEY,
FieldTradeOriginationDate::KEY,
FieldNoContraBrokers::KEY,
FieldListID::KEY,
FieldCrossID::KEY,
FieldOrigCrossID::KEY,
FieldCrossType::KEY,
FieldExecID::KEY,
FieldExecRefID::KEY,
FieldExecType::KEY,
FieldOrdStatus::KEY,
FieldWorkingIndicator::KEY,
FieldOrdRejReason::KEY,
FieldExecRestatementReason::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldDayBookingInst::KEY,
FieldBookingUnit::KEY,
FieldPreallocMethod::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldCashMargin::KEY,
FieldClearingFeeIndicator::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldSide::KEY,
FieldNoStipulations::KEY,
FieldQtyType::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldOrdType::KEY,
FieldPriceType::KEY,
FieldPrice::KEY,
FieldStopPx::KEY,
FieldPegOffsetValue::KEY,
FieldPegMoveType::KEY,
FieldPegOffsetType::KEY,
FieldPegLimitType::KEY,
FieldPegRoundDirection::KEY,
FieldPegScope::KEY,
FieldDiscretionInst::KEY,
FieldDiscretionOffsetValue::KEY,
FieldDiscretionMoveType::KEY,
FieldDiscretionOffsetType::KEY,
FieldDiscretionLimitType::KEY,
FieldDiscretionRoundDirection::KEY,
FieldDiscretionScope::KEY,
FieldPeggedPrice::KEY,
FieldDiscretionPrice::KEY,
FieldTargetStrategy::KEY,
FieldTargetStrategyParameters::KEY,
FieldParticipationRate::KEY,
FieldTargetStrategyPerformance::KEY,
FieldCurrency::KEY,
FieldComplianceID::KEY,
FieldSolicitedFlag::KEY,
FieldTimeInForce::KEY,
FieldEffectiveTime::KEY,
FieldExpireDate::KEY,
FieldExpireTime::KEY,
FieldExecInst::KEY,
FieldOrderCapacity::KEY,
FieldOrderRestrictions::KEY,
FieldCustOrderCapacity::KEY,
FieldLastQty::KEY,
FieldUnderlyingLastQty::KEY,
FieldLastPx::KEY,
FieldUnderlyingLastPx::KEY,
FieldLastParPx::KEY,
FieldLastSpotRate::KEY,
FieldLastForwardPoints::KEY,
FieldLastMkt::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldTimeBracket::KEY,
FieldLastCapacity::KEY,
FieldLeavesQty::KEY,
FieldCumQty::KEY,
FieldAvgPx::KEY,
FieldDayOrderQty::KEY,
FieldDayCumQty::KEY,
FieldDayAvgPx::KEY,
FieldGTBookingInst::KEY,
FieldTradeDate::KEY,
FieldTransactTime::KEY,
FieldReportToExch::KEY,
FieldCommission::KEY,
FieldCommType::KEY,
FieldCommCurrency::KEY,
FieldFundRenewWaiv::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldGrossTradeAmt::KEY,
FieldNumDaysInterest::KEY,
FieldExDate::KEY,
FieldAccruedInterestRate::KEY,
FieldAccruedInterestAmt::KEY,
FieldInterestAtMaturity::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldTradedFlatSwitch::KEY,
FieldBasisFeatureDate::KEY,
FieldBasisFeaturePrice::KEY,
FieldConcession::KEY,
FieldTotalTakedown::KEY,
FieldNetMoney::KEY,
FieldSettlCurrAmt::KEY,
FieldSettlCurrency::KEY,
FieldSettlCurrFxRate::KEY,
FieldSettlCurrFxRateCalc::KEY,
FieldHandlInst::KEY,
FieldMinQty::KEY,
FieldMaxFloor::KEY,
FieldPositionEffect::KEY,
FieldMaxShow::KEY,
FieldBookingType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldSettlDate2::KEY,
FieldOrderQty2::KEY,
FieldLastForwardPoints2::KEY,
FieldMultiLegReportingType::KEY,
FieldCancellationRights::KEY,
FieldMoneyLaunderingStatus::KEY,
FieldRegistID::KEY,
FieldDesignation::KEY,
FieldTransBkdTime::KEY,
FieldExecValuationPoint::KEY,
FieldExecPriceType::KEY,
FieldExecPriceAdjustment::KEY,
FieldPriorityIndicator::KEY,
FieldPriceImprovement::KEY,
FieldLastLiquidityInd::KEY,
FieldNoContAmts::KEY,
FieldNoLegs::KEY,
FieldCopyMsgIndicator::KEY,
FieldNoMiscFees::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> OrderCancelReject_knownFields = {
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldSecondaryClOrdID::KEY,
FieldClOrdID::KEY,
FieldClOrdLinkID::KEY,
FieldOrigClOrdID::KEY,
FieldOrdStatus::KEY,
FieldWorkingIndicator::KEY,
FieldOrigOrdModTime::KEY,
FieldListID::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldTradeOriginationDate::KEY,
FieldTradeDate::KEY,
FieldTransactTime::KEY,
FieldCxlRejResponseTo::KEY,
FieldCxlRejReason::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> Logon_knownFields = {
FieldEncryptMethod::KEY,
FieldHeartBtInt::KEY,
FieldRawDataLength::KEY,
FieldRawData::KEY,
FieldResetSeqNumFlag::KEY,
FieldNextExpectedMsgSeqNum::KEY,
FieldMaxMessageSize::KEY,
FieldNoMsgTypes::KEY,
FieldTestMessageIndicator::KEY,
FieldUsername::KEY,
FieldPassword::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> News_knownFields = {
FieldOrigTime::KEY,
FieldUrgency::KEY,
FieldHeadline::KEY,
FieldEncodedHeadlineLen::KEY,
FieldEncodedHeadline::KEY,
FieldNoRoutingIDs::KEY,
FieldNoRelatedSym::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldNoLinesOfText::KEY,
FieldURLLink::KEY,
FieldRawDataLength::KEY,
FieldRawData::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> Email_knownFields = {
FieldEmailThreadID::KEY,
FieldEmailType::KEY,
FieldOrigTime::KEY,
FieldSubject::KEY,
FieldEncodedSubjectLen::KEY,
FieldEncodedSubject::KEY,
FieldNoRoutingIDs::KEY,
FieldNoRelatedSym::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldOrderID::KEY,
FieldClOrdID::KEY,
FieldNoLinesOfText::KEY,
FieldRawDataLength::KEY,
FieldRawData::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> NewOrderSingle_knownFields = {
FieldClOrdID::KEY,
FieldSecondaryClOrdID::KEY,
FieldClOrdLinkID::KEY,
FieldNoPartyIDs::KEY,
FieldTradeOriginationDate::KEY,
FieldTradeDate::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldDayBookingInst::KEY,
FieldBookingUnit::KEY,
FieldPreallocMethod::KEY,
FieldAllocID::KEY,
FieldNoAllocs::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldCashMargin::KEY,
FieldClearingFeeIndicator::KEY,
FieldHandlInst::KEY,
FieldExecInst::KEY,
FieldMinQty::KEY,
FieldMaxFloor::KEY,
FieldExDestination::KEY,
FieldNoTradingSessions::KEY,
FieldProcessCode::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldPrevClosePx::KEY,
FieldSide::KEY,
FieldLocateReqd::KEY,
FieldTransactTime::KEY,
FieldNoStipulations::KEY,
FieldQtyType::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldOrdType::KEY,
FieldPriceType::KEY,
FieldPrice::KEY,
FieldStopPx::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldCurrency::KEY,
FieldComplianceID::KEY,
FieldSolicitedFlag::KEY,
FieldIOIID::KEY,
FieldQuoteID::KEY,
FieldTimeInForce::KEY,
FieldEffectiveTime::KEY,
FieldExpireDate::KEY,
FieldExpireTime::KEY,
FieldGTBookingInst::KEY,
FieldCommission::KEY,
FieldCommType::KEY,
FieldCommCurrency::KEY,
FieldFundRenewWaiv::KEY,
FieldOrderCapacity::KEY,
FieldOrderRestrictions::KEY,
FieldCustOrderCapacity::KEY,
FieldForexReq::KEY,
FieldSettlCurrency::KEY,
FieldBookingType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldSettlDate2::KEY,
FieldOrderQty2::KEY,
FieldPrice2::KEY,
FieldPositionEffect::KEY,
FieldCoveredOrUncovered::KEY,
FieldMaxShow::KEY,
FieldPegOffsetValue::KEY,
FieldPegMoveType::KEY,
FieldPegOffsetType::KEY,
FieldPegLimitType::KEY,
FieldPegRoundDirection::KEY,
FieldPegScope::KEY,
FieldDiscretionInst::KEY,
FieldDiscretionOffsetValue::KEY,
FieldDiscretionMoveType::KEY,
FieldDiscretionOffsetType::KEY,
FieldDiscretionLimitType::KEY,
FieldDiscretionRoundDirection::KEY,
FieldDiscretionScope::KEY,
FieldTargetStrategy::KEY,
FieldTargetStrategyParameters::KEY,
FieldParticipationRate::KEY,
FieldCancellationRights::KEY,
FieldMoneyLaunderingStatus::KEY,
FieldRegistID::KEY,
FieldDesignation::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> NewOrderList_knownFields = {
FieldListID::KEY,
FieldBidID::KEY,
FieldClientBidID::KEY,
FieldProgRptReqs::KEY,
FieldBidType::KEY,
FieldProgPeriodInterval::KEY,
FieldCancellationRights::KEY,
FieldMoneyLaunderingStatus::KEY,
FieldRegistID::KEY,
FieldListExecInstType::KEY,
FieldListExecInst::KEY,
FieldEncodedListExecInstLen::KEY,
FieldEncodedListExecInst::KEY,
FieldAllowableOneSidednessPct::KEY,
FieldAllowableOneSidednessValue::KEY,
FieldAllowableOneSidednessCurr::KEY,
FieldTotNoOrders::KEY,
FieldLastFragment::KEY,
FieldNoOrders::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> OrderCancelRequest_knownFields = {
FieldOrigClOrdID::KEY,
FieldOrderID::KEY,
FieldClOrdID::KEY,
FieldSecondaryClOrdID::KEY,
FieldClOrdLinkID::KEY,
FieldListID::KEY,
FieldOrigOrdModTime::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldNoPartyIDs::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldSide::KEY,
FieldTransactTime::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldComplianceID::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> OrderCancelReplaceRequest_knownFields = {
FieldOrderID::KEY,
FieldNoPartyIDs::KEY,
FieldTradeOriginationDate::KEY,
FieldTradeDate::KEY,
FieldOrigClOrdID::KEY,
FieldClOrdID::KEY,
FieldSecondaryClOrdID::KEY,
FieldClOrdLinkID::KEY,
FieldListID::KEY,
FieldOrigOrdModTime::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldDayBookingInst::KEY,
FieldBookingUnit::KEY,
FieldPreallocMethod::KEY,
FieldAllocID::KEY,
FieldNoAllocs::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldCashMargin::KEY,
FieldClearingFeeIndicator::KEY,
FieldHandlInst::KEY,
FieldExecInst::KEY,
FieldMinQty::KEY,
FieldMaxFloor::KEY,
FieldExDestination::KEY,
FieldNoTradingSessions::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldSide::KEY,
FieldTransactTime::KEY,
FieldQtyType::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldOrdType::KEY,
FieldPriceType::KEY,
FieldPrice::KEY,
FieldStopPx::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldPegOffsetValue::KEY,
FieldPegMoveType::KEY,
FieldPegOffsetType::KEY,
FieldPegLimitType::KEY,
FieldPegRoundDirection::KEY,
FieldPegScope::KEY,
FieldDiscretionInst::KEY,
FieldDiscretionOffsetValue::KEY,
FieldDiscretionMoveType::KEY,
FieldDiscretionOffsetType::KEY,
FieldDiscretionLimitType::KEY,
FieldDiscretionRoundDirection::KEY,
FieldDiscretionScope::KEY,
FieldTargetStrategy::KEY,
FieldTargetStrategyParameters::KEY,
FieldParticipationRate::KEY,
FieldComplianceID::KEY,
FieldSolicitedFlag::KEY,
FieldCurrency::KEY,
FieldTimeInForce::KEY,
FieldEffectiveTime::KEY,
FieldExpireDate::KEY,
FieldExpireTime::KEY,
FieldGTBookingInst::KEY,
FieldCommission::KEY,
FieldCommType::KEY,
FieldCommCurrency::KEY,
FieldFundRenewWaiv::KEY,
FieldOrderCapacity::KEY,
FieldOrderRestrictions::KEY,
FieldCustOrderCapacity::KEY,
FieldForexReq::KEY,
FieldSettlCurrency::KEY,
FieldBookingType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldSettlDate2::KEY,
FieldOrderQty2::KEY,
FieldPrice2::KEY,
FieldPositionEffect::KEY,
FieldCoveredOrUncovered::KEY,
FieldMaxShow::KEY,
FieldLocateReqd::KEY,
FieldCancellationRights::KEY,
FieldMoneyLaunderingStatus::KEY,
FieldRegistID::KEY,
FieldDesignation::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> OrderStatusRequest_knownFields = {
FieldOrderID::KEY,
FieldClOrdID::KEY,
FieldSecondaryClOrdID::KEY,
FieldClOrdLinkID::KEY,
FieldNoPartyIDs::KEY,
FieldOrdStatusReqID::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldSide::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> AllocationInstruction_knownFields = {
FieldAllocID::KEY,
FieldAllocTransType::KEY,
FieldAllocType::KEY,
FieldSecondaryAllocID::KEY,
FieldRefAllocID::KEY,
FieldAllocCancReplaceReason::KEY,
FieldAllocIntermedReqType::KEY,
FieldAllocLinkID::KEY,
FieldAllocLinkType::KEY,
FieldBookingRefID::KEY,
FieldAllocNoOrdersType::KEY,
FieldNoOrders::KEY,
FieldNoExecs::KEY,
FieldPreviouslyReported::KEY,
FieldReversalIndicator::KEY,
FieldMatchType::KEY,
FieldSide::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldLastMkt::KEY,
FieldTradeOriginationDate::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldPriceType::KEY,
FieldAvgPx::KEY,
FieldAvgParPx::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldCurrency::KEY,
FieldAvgPxPrecision::KEY,
FieldNoPartyIDs::KEY,
FieldTradeDate::KEY,
FieldTransactTime::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldBookingType::KEY,
FieldGrossTradeAmt::KEY,
FieldConcession::KEY,
FieldTotalTakedown::KEY,
FieldNetMoney::KEY,
FieldPositionEffect::KEY,
FieldAutoAcceptIndicator::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldNumDaysInterest::KEY,
FieldAccruedInterestRate::KEY,
FieldAccruedInterestAmt::KEY,
FieldTotalAccruedInterestAmt::KEY,
FieldInterestAtMaturity::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldLegalConfirm::KEY,
FieldNoStipulations::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldTotNoAllocs::KEY,
FieldLastFragment::KEY,
FieldNoAllocs::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ListCancelRequest_knownFields = {
FieldListID::KEY,
FieldTransactTime::KEY,
FieldTradeOriginationDate::KEY,
FieldTradeDate::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ListExecute_knownFields = {
FieldListID::KEY,
FieldClientBidID::KEY,
FieldBidID::KEY,
FieldTransactTime::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ListStatusRequest_knownFields = {
FieldListID::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ListStatus_knownFields = {
FieldListID::KEY,
FieldListStatusType::KEY,
FieldNoRpts::KEY,
FieldListOrderStatus::KEY,
FieldRptSeq::KEY,
FieldListStatusText::KEY,
FieldEncodedListStatusTextLen::KEY,
FieldEncodedListStatusText::KEY,
FieldTransactTime::KEY,
FieldTotNoOrders::KEY,
FieldLastFragment::KEY,
FieldNoOrders::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> AllocationInstructionAck_knownFields = {
FieldAllocID::KEY,
FieldNoPartyIDs::KEY,
FieldSecondaryAllocID::KEY,
FieldTradeDate::KEY,
FieldTransactTime::KEY,
FieldAllocStatus::KEY,
FieldAllocRejCode::KEY,
FieldAllocType::KEY,
FieldAllocIntermedReqType::KEY,
FieldMatchStatus::KEY,
FieldProduct::KEY,
FieldSecurityType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldNoAllocs::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> DontKnowTrade_knownFields = {
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldExecID::KEY,
FieldDKReason::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldSide::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldLastQty::KEY,
FieldLastPx::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> QuoteRequest_knownFields = {
FieldQuoteReqID::KEY,
FieldRFQReqID::KEY,
FieldClOrdID::KEY,
FieldOrderCapacity::KEY,
FieldNoRelatedSym::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> Quote_knownFields = {
FieldQuoteReqID::KEY,
FieldQuoteID::KEY,
FieldQuoteRespID::KEY,
FieldQuoteType::KEY,
FieldNoQuoteQualifiers::KEY,
FieldQuoteResponseLevel::KEY,
FieldNoPartyIDs::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldSide::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldSettlDate2::KEY,
FieldOrderQty2::KEY,
FieldCurrency::KEY,
FieldNoStipulations::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldNoLegs::KEY,
FieldBidPx::KEY,
FieldOfferPx::KEY,
FieldMktBidPx::KEY,
FieldMktOfferPx::KEY,
FieldMinBidSize::KEY,
FieldBidSize::KEY,
FieldMinOfferSize::KEY,
FieldOfferSize::KEY,
FieldValidUntilTime::KEY,
FieldBidSpotRate::KEY,
FieldOfferSpotRate::KEY,
FieldBidForwardPoints::KEY,
FieldOfferForwardPoints::KEY,
FieldMidPx::KEY,
FieldBidYield::KEY,
FieldMidYield::KEY,
FieldOfferYield::KEY,
FieldTransactTime::KEY,
FieldOrdType::KEY,
FieldBidForwardPoints2::KEY,
FieldOfferForwardPoints2::KEY,
FieldSettlCurrBidFxRate::KEY,
FieldSettlCurrOfferFxRate::KEY,
FieldSettlCurrFxRateCalc::KEY,
FieldCommType::KEY,
FieldCommission::KEY,
FieldCustOrderCapacity::KEY,
FieldExDestination::KEY,
FieldOrderCapacity::KEY,
FieldPriceType::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SettlementInstructions_knownFields = {
FieldSettlInstMsgID::KEY,
FieldSettlInstReqID::KEY,
FieldSettlInstMode::KEY,
FieldSettlInstReqRejCode::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldClOrdID::KEY,
FieldTransactTime::KEY,
FieldNoSettlInst::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> MarketDataRequest_knownFields = {
FieldMDReqID::KEY,
FieldSubscriptionRequestType::KEY,
FieldMarketDepth::KEY,
FieldMDUpdateType::KEY,
FieldAggregatedBook::KEY,
FieldOpenCloseSettlFlag::KEY,
FieldScope::KEY,
FieldMDImplicitDelete::KEY,
FieldNoMDEntryTypes::KEY,
FieldNoRelatedSym::KEY,
FieldNoTradingSessions::KEY,
FieldApplQueueAction::KEY,
FieldApplQueueMax::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> MarketDataSnapshotFullRefresh_knownFields = {
FieldMDReqID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldFinancialStatus::KEY,
FieldCorporateAction::KEY,
FieldNetChgPrevDay::KEY,
FieldNoMDEntries::KEY,
FieldApplQueueDepth::KEY,
FieldApplQueueResolution::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> MarketDataIncrementalRefresh_knownFields = {
FieldMDReqID::KEY,
FieldNoMDEntries::KEY,
FieldApplQueueDepth::KEY,
FieldApplQueueResolution::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> MarketDataRequestReject_knownFields = {
FieldMDReqID::KEY,
FieldMDReqRejReason::KEY,
FieldNoAltMDSource::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> QuoteCancel_knownFields = {
FieldQuoteReqID::KEY,
FieldQuoteID::KEY,
FieldQuoteCancelType::KEY,
FieldQuoteResponseLevel::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldNoQuoteEntries::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> QuoteStatusRequest_knownFields = {
FieldQuoteStatusReqID::KEY,
FieldQuoteID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSubscriptionRequestType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> MassQuoteAcknowledgement_knownFields = {
FieldQuoteReqID::KEY,
FieldQuoteID::KEY,
FieldQuoteStatus::KEY,
FieldQuoteRejectReason::KEY,
FieldQuoteResponseLevel::KEY,
FieldQuoteType::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldNoQuoteSets::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SecurityDefinitionRequest_knownFields = {
FieldSecurityReqID::KEY,
FieldSecurityRequestType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldNoUnderlyings::KEY,
FieldCurrency::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldNoLegs::KEY,
FieldExpirationCycle::KEY,
FieldSubscriptionRequestType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SecurityDefinition_knownFields = {
FieldSecurityReqID::KEY,
FieldSecurityResponseID::KEY,
FieldSecurityResponseType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldNoUnderlyings::KEY,
FieldCurrency::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldNoLegs::KEY,
FieldExpirationCycle::KEY,
FieldRoundLot::KEY,
FieldMinTradeVol::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SecurityStatusRequest_knownFields = {
FieldSecurityStatusReqID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldCurrency::KEY,
FieldSubscriptionRequestType::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SecurityStatus_knownFields = {
FieldSecurityStatusReqID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldCurrency::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldUnsolicitedIndicator::KEY,
FieldSecurityTradingStatus::KEY,
FieldFinancialStatus::KEY,
FieldCorporateAction::KEY,
FieldHaltReasonChar::KEY,
FieldInViewOfCommon::KEY,
FieldDueToRelated::KEY,
FieldBuyVolume::KEY,
FieldSellVolume::KEY,
FieldHighPx::KEY,
FieldLowPx::KEY,
FieldLastPx::KEY,
FieldTransactTime::KEY,
FieldAdjustment::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> TradingSessionStatusRequest_knownFields = {
FieldTradSesReqID::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldTradSesMethod::KEY,
FieldTradSesMode::KEY,
FieldSubscriptionRequestType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> TradingSessionStatus_knownFields = {
FieldTradSesReqID::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldTradSesMethod::KEY,
FieldTradSesMode::KEY,
FieldUnsolicitedIndicator::KEY,
FieldTradSesStatus::KEY,
FieldTradSesStatusRejReason::KEY,
FieldTradSesStartTime::KEY,
FieldTradSesOpenTime::KEY,
FieldTradSesPreCloseTime::KEY,
FieldTradSesCloseTime::KEY,
FieldTradSesEndTime::KEY,
FieldTotalVolumeTraded::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> MassQuote_knownFields = {
FieldQuoteReqID::KEY,
FieldQuoteID::KEY,
FieldQuoteType::KEY,
FieldQuoteResponseLevel::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldDefBidSize::KEY,
FieldDefOfferSize::KEY,
FieldNoQuoteSets::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> BusinessMessageReject_knownFields = {
FieldRefSeqNum::KEY,
FieldRefMsgType::KEY,
FieldBusinessRejectRefID::KEY,
FieldBusinessRejectReason::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> BidRequest_knownFields = {
FieldBidID::KEY,
FieldClientBidID::KEY,
FieldBidRequestTransType::KEY,
FieldListName::KEY,
FieldTotNoRelatedSym::KEY,
FieldBidType::KEY,
FieldNumTickets::KEY,
FieldCurrency::KEY,
FieldSideValue1::KEY,
FieldSideValue2::KEY,
FieldNoBidDescriptors::KEY,
FieldNoBidComponents::KEY,
FieldLiquidityIndType::KEY,
FieldWtAverageLiquidity::KEY,
FieldExchangeForPhysical::KEY,
FieldOutMainCntryUIndex::KEY,
FieldCrossPercent::KEY,
FieldProgRptReqs::KEY,
FieldProgPeriodInterval::KEY,
FieldIncTaxInd::KEY,
FieldForexReq::KEY,
FieldNumBidders::KEY,
FieldTradeDate::KEY,
FieldBidTradeType::KEY,
FieldBasisPxType::KEY,
FieldStrikeTime::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> BidResponse_knownFields = {
FieldBidID::KEY,
FieldClientBidID::KEY,
FieldNoBidComponents::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ListStrikePrice_knownFields = {
FieldListID::KEY,
FieldTotNoStrikes::KEY,
FieldLastFragment::KEY,
FieldNoStrikes::KEY,
FieldNoUnderlyings::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> XMLnonFIX_knownFields = {
FieldCheckSum::KEY };

const std::vector<tag_t> RegistrationInstructions_knownFields = {
FieldRegistID::KEY,
FieldRegistTransType::KEY,
FieldRegistRefID::KEY,
FieldClOrdID::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldRegistAcctType::KEY,
FieldTaxAdvantageType::KEY,
FieldOwnershipType::KEY,
FieldNoRegistDtls::KEY,
FieldNoDistribInsts::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> RegistrationInstructionsResponse_knownFields = {
FieldRegistID::KEY,
FieldRegistTransType::KEY,
FieldRegistRefID::KEY,
FieldClOrdID::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldRegistStatus::KEY,
FieldRegistRejReasonCode::KEY,
FieldRegistRejReasonText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> OrderMassCancelRequest_knownFields = {
FieldClOrdID::KEY,
FieldSecondaryClOrdID::KEY,
FieldMassCancelRequestType::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldUnderlyingSymbol::KEY,
FieldUnderlyingSymbolSfx::KEY,
FieldUnderlyingSecurityID::KEY,
FieldUnderlyingSecurityIDSource::KEY,
FieldNoUnderlyingSecurityAltID::KEY,
FieldUnderlyingProduct::KEY,
FieldUnderlyingCFICode::KEY,
FieldUnderlyingSecurityType::KEY,
FieldUnderlyingSecuritySubType::KEY,
FieldUnderlyingMaturityMonthYear::KEY,
FieldUnderlyingMaturityDate::KEY,
FieldUnderlyingPutOrCall::KEY,
FieldUnderlyingCouponPaymentDate::KEY,
FieldUnderlyingIssueDate::KEY,
FieldUnderlyingRepoCollateralSecurityType::KEY,
FieldUnderlyingRepurchaseTerm::KEY,
FieldUnderlyingRepurchaseRate::KEY,
FieldUnderlyingFactor::KEY,
FieldUnderlyingCreditRating::KEY,
FieldUnderlyingInstrRegistry::KEY,
FieldUnderlyingCountryOfIssue::KEY,
FieldUnderlyingStateOrProvinceOfIssue::KEY,
FieldUnderlyingLocaleOfIssue::KEY,
FieldUnderlyingRedemptionDate::KEY,
FieldUnderlyingStrikePrice::KEY,
FieldUnderlyingStrikeCurrency::KEY,
FieldUnderlyingOptAttribute::KEY,
FieldUnderlyingContractMultiplier::KEY,
FieldUnderlyingCouponRate::KEY,
FieldUnderlyingSecurityExchange::KEY,
FieldUnderlyingIssuer::KEY,
FieldEncodedUnderlyingIssuerLen::KEY,
FieldEncodedUnderlyingIssuer::KEY,
FieldUnderlyingSecurityDesc::KEY,
FieldEncodedUnderlyingSecurityDescLen::KEY,
FieldEncodedUnderlyingSecurityDesc::KEY,
FieldUnderlyingCPProgram::KEY,
FieldUnderlyingCPRegType::KEY,
FieldUnderlyingCurrency::KEY,
FieldUnderlyingQty::KEY,
FieldUnderlyingPx::KEY,
FieldUnderlyingDirtyPrice::KEY,
FieldUnderlyingEndPrice::KEY,
FieldUnderlyingStartValue::KEY,
FieldUnderlyingCurrentValue::KEY,
FieldUnderlyingEndValue::KEY,
FieldNoUnderlyingStips::KEY,
FieldSide::KEY,
FieldTransactTime::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> OrderMassCancelReport_knownFields = {
FieldClOrdID::KEY,
FieldSecondaryClOrdID::KEY,
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldMassCancelRequestType::KEY,
FieldMassCancelResponse::KEY,
FieldMassCancelRejectReason::KEY,
FieldTotalAffectedOrders::KEY,
FieldNoAffectedOrders::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldUnderlyingSymbol::KEY,
FieldUnderlyingSymbolSfx::KEY,
FieldUnderlyingSecurityID::KEY,
FieldUnderlyingSecurityIDSource::KEY,
FieldNoUnderlyingSecurityAltID::KEY,
FieldUnderlyingProduct::KEY,
FieldUnderlyingCFICode::KEY,
FieldUnderlyingSecurityType::KEY,
FieldUnderlyingSecuritySubType::KEY,
FieldUnderlyingMaturityMonthYear::KEY,
FieldUnderlyingMaturityDate::KEY,
FieldUnderlyingPutOrCall::KEY,
FieldUnderlyingCouponPaymentDate::KEY,
FieldUnderlyingIssueDate::KEY,
FieldUnderlyingRepoCollateralSecurityType::KEY,
FieldUnderlyingRepurchaseTerm::KEY,
FieldUnderlyingRepurchaseRate::KEY,
FieldUnderlyingFactor::KEY,
FieldUnderlyingCreditRating::KEY,
FieldUnderlyingInstrRegistry::KEY,
FieldUnderlyingCountryOfIssue::KEY,
FieldUnderlyingStateOrProvinceOfIssue::KEY,
FieldUnderlyingLocaleOfIssue::KEY,
FieldUnderlyingRedemptionDate::KEY,
FieldUnderlyingStrikePrice::KEY,
FieldUnderlyingStrikeCurrency::KEY,
FieldUnderlyingOptAttribute::KEY,
FieldUnderlyingContractMultiplier::KEY,
FieldUnderlyingCouponRate::KEY,
FieldUnderlyingSecurityExchange::KEY,
FieldUnderlyingIssuer::KEY,
FieldEncodedUnderlyingIssuerLen::KEY,
FieldEncodedUnderlyingIssuer::KEY,
FieldUnderlyingSecurityDesc::KEY,
FieldEncodedUnderlyingSecurityDescLen::KEY,
FieldEncodedUnderlyingSecurityDesc::KEY,
FieldUnderlyingCPProgram::KEY,
FieldUnderlyingCPRegType::KEY,
FieldUnderlyingCurrency::KEY,
FieldUnderlyingQty::KEY,
FieldUnderlyingPx::KEY,
FieldUnderlyingDirtyPrice::KEY,
FieldUnderlyingEndPrice::KEY,
FieldUnderlyingStartValue::KEY,
FieldUnderlyingCurrentValue::KEY,
FieldUnderlyingEndValue::KEY,
FieldNoUnderlyingStips::KEY,
FieldSide::KEY,
FieldTransactTime::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> NewOrderCross_knownFields = {
FieldCrossID::KEY,
FieldCrossType::KEY,
FieldCrossPrioritization::KEY,
FieldNoSides::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldHandlInst::KEY,
FieldExecInst::KEY,
FieldMinQty::KEY,
FieldMaxFloor::KEY,
FieldExDestination::KEY,
FieldNoTradingSessions::KEY,
FieldProcessCode::KEY,
FieldPrevClosePx::KEY,
FieldLocateReqd::KEY,
FieldTransactTime::KEY,
FieldNoStipulations::KEY,
FieldOrdType::KEY,
FieldPriceType::KEY,
FieldPrice::KEY,
FieldStopPx::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldCurrency::KEY,
FieldComplianceID::KEY,
FieldIOIID::KEY,
FieldQuoteID::KEY,
FieldTimeInForce::KEY,
FieldEffectiveTime::KEY,
FieldExpireDate::KEY,
FieldExpireTime::KEY,
FieldGTBookingInst::KEY,
FieldMaxShow::KEY,
FieldPegOffsetValue::KEY,
FieldPegMoveType::KEY,
FieldPegOffsetType::KEY,
FieldPegLimitType::KEY,
FieldPegRoundDirection::KEY,
FieldPegScope::KEY,
FieldDiscretionInst::KEY,
FieldDiscretionOffsetValue::KEY,
FieldDiscretionMoveType::KEY,
FieldDiscretionOffsetType::KEY,
FieldDiscretionLimitType::KEY,
FieldDiscretionRoundDirection::KEY,
FieldDiscretionScope::KEY,
FieldTargetStrategy::KEY,
FieldTargetStrategyParameters::KEY,
FieldParticipationRate::KEY,
FieldCancellationRights::KEY,
FieldMoneyLaunderingStatus::KEY,
FieldRegistID::KEY,
FieldDesignation::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> CrossOrderCancelReplaceRequest_knownFields = {
FieldOrderID::KEY,
FieldCrossID::KEY,
FieldOrigCrossID::KEY,
FieldCrossType::KEY,
FieldCrossPrioritization::KEY,
FieldNoSides::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldHandlInst::KEY,
FieldExecInst::KEY,
FieldMinQty::KEY,
FieldMaxFloor::KEY,
FieldExDestination::KEY,
FieldNoTradingSessions::KEY,
FieldProcessCode::KEY,
FieldPrevClosePx::KEY,
FieldLocateReqd::KEY,
FieldTransactTime::KEY,
FieldNoStipulations::KEY,
FieldOrdType::KEY,
FieldPriceType::KEY,
FieldPrice::KEY,
FieldStopPx::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldCurrency::KEY,
FieldComplianceID::KEY,
FieldIOIID::KEY,
FieldQuoteID::KEY,
FieldTimeInForce::KEY,
FieldEffectiveTime::KEY,
FieldExpireDate::KEY,
FieldExpireTime::KEY,
FieldGTBookingInst::KEY,
FieldMaxShow::KEY,
FieldPegOffsetValue::KEY,
FieldPegMoveType::KEY,
FieldPegOffsetType::KEY,
FieldPegLimitType::KEY,
FieldPegRoundDirection::KEY,
FieldPegScope::KEY,
FieldDiscretionInst::KEY,
FieldDiscretionOffsetValue::KEY,
FieldDiscretionMoveType::KEY,
FieldDiscretionOffsetType::KEY,
FieldDiscretionLimitType::KEY,
FieldDiscretionRoundDirection::KEY,
FieldDiscretionScope::KEY,
FieldTargetStrategy::KEY,
FieldTargetStrategyParameters::KEY,
FieldParticipationRate::KEY,
FieldCancellationRights::KEY,
FieldMoneyLaunderingStatus::KEY,
FieldRegistID::KEY,
FieldDesignation::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> CrossOrderCancelRequest_knownFields = {
FieldOrderID::KEY,
FieldCrossID::KEY,
FieldOrigCrossID::KEY,
FieldCrossType::KEY,
FieldCrossPrioritization::KEY,
FieldNoSides::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldTransactTime::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SecurityTypeRequest_knownFields = {
FieldSecurityReqID::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldProduct::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SecurityTypes_knownFields = {
FieldSecurityReqID::KEY,
FieldSecurityResponseID::KEY,
FieldSecurityResponseType::KEY,
FieldTotNoSecurityTypes::KEY,
FieldLastFragment::KEY,
FieldNoSecurityTypes::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSubscriptionRequestType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SecurityListRequest_knownFields = {
FieldSecurityReqID::KEY,
FieldSecurityListRequestType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldCurrency::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSubscriptionRequestType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SecurityList_knownFields = {
FieldSecurityReqID::KEY,
FieldSecurityResponseID::KEY,
FieldSecurityRequestResult::KEY,
FieldTotNoRelatedSym::KEY,
FieldLastFragment::KEY,
FieldNoRelatedSym::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> DerivativeSecurityListRequest_knownFields = {
FieldSecurityReqID::KEY,
FieldSecurityListRequestType::KEY,
FieldUnderlyingSymbol::KEY,
FieldUnderlyingSymbolSfx::KEY,
FieldUnderlyingSecurityID::KEY,
FieldUnderlyingSecurityIDSource::KEY,
FieldNoUnderlyingSecurityAltID::KEY,
FieldUnderlyingProduct::KEY,
FieldUnderlyingCFICode::KEY,
FieldUnderlyingSecurityType::KEY,
FieldUnderlyingSecuritySubType::KEY,
FieldUnderlyingMaturityMonthYear::KEY,
FieldUnderlyingMaturityDate::KEY,
FieldUnderlyingPutOrCall::KEY,
FieldUnderlyingCouponPaymentDate::KEY,
FieldUnderlyingIssueDate::KEY,
FieldUnderlyingRepoCollateralSecurityType::KEY,
FieldUnderlyingRepurchaseTerm::KEY,
FieldUnderlyingRepurchaseRate::KEY,
FieldUnderlyingFactor::KEY,
FieldUnderlyingCreditRating::KEY,
FieldUnderlyingInstrRegistry::KEY,
FieldUnderlyingCountryOfIssue::KEY,
FieldUnderlyingStateOrProvinceOfIssue::KEY,
FieldUnderlyingLocaleOfIssue::KEY,
FieldUnderlyingRedemptionDate::KEY,
FieldUnderlyingStrikePrice::KEY,
FieldUnderlyingStrikeCurrency::KEY,
FieldUnderlyingOptAttribute::KEY,
FieldUnderlyingContractMultiplier::KEY,
FieldUnderlyingCouponRate::KEY,
FieldUnderlyingSecurityExchange::KEY,
FieldUnderlyingIssuer::KEY,
FieldEncodedUnderlyingIssuerLen::KEY,
FieldEncodedUnderlyingIssuer::KEY,
FieldUnderlyingSecurityDesc::KEY,
FieldEncodedUnderlyingSecurityDescLen::KEY,
FieldEncodedUnderlyingSecurityDesc::KEY,
FieldUnderlyingCPProgram::KEY,
FieldUnderlyingCPRegType::KEY,
FieldUnderlyingCurrency::KEY,
FieldUnderlyingQty::KEY,
FieldUnderlyingPx::KEY,
FieldUnderlyingDirtyPrice::KEY,
FieldUnderlyingEndPrice::KEY,
FieldUnderlyingStartValue::KEY,
FieldUnderlyingCurrentValue::KEY,
FieldUnderlyingEndValue::KEY,
FieldNoUnderlyingStips::KEY,
FieldSecuritySubType::KEY,
FieldCurrency::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSubscriptionRequestType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> DerivativeSecurityList_knownFields = {
FieldSecurityReqID::KEY,
FieldSecurityResponseID::KEY,
FieldSecurityRequestResult::KEY,
FieldUnderlyingSymbol::KEY,
FieldUnderlyingSymbolSfx::KEY,
FieldUnderlyingSecurityID::KEY,
FieldUnderlyingSecurityIDSource::KEY,
FieldNoUnderlyingSecurityAltID::KEY,
FieldUnderlyingProduct::KEY,
FieldUnderlyingCFICode::KEY,
FieldUnderlyingSecurityType::KEY,
FieldUnderlyingSecuritySubType::KEY,
FieldUnderlyingMaturityMonthYear::KEY,
FieldUnderlyingMaturityDate::KEY,
FieldUnderlyingPutOrCall::KEY,
FieldUnderlyingCouponPaymentDate::KEY,
FieldUnderlyingIssueDate::KEY,
FieldUnderlyingRepoCollateralSecurityType::KEY,
FieldUnderlyingRepurchaseTerm::KEY,
FieldUnderlyingRepurchaseRate::KEY,
FieldUnderlyingFactor::KEY,
FieldUnderlyingCreditRating::KEY,
FieldUnderlyingInstrRegistry::KEY,
FieldUnderlyingCountryOfIssue::KEY,
FieldUnderlyingStateOrProvinceOfIssue::KEY,
FieldUnderlyingLocaleOfIssue::KEY,
FieldUnderlyingRedemptionDate::KEY,
FieldUnderlyingStrikePrice::KEY,
FieldUnderlyingStrikeCurrency::KEY,
FieldUnderlyingOptAttribute::KEY,
FieldUnderlyingContractMultiplier::KEY,
FieldUnderlyingCouponRate::KEY,
FieldUnderlyingSecurityExchange::KEY,
FieldUnderlyingIssuer::KEY,
FieldEncodedUnderlyingIssuerLen::KEY,
FieldEncodedUnderlyingIssuer::KEY,
FieldUnderlyingSecurityDesc::KEY,
FieldEncodedUnderlyingSecurityDescLen::KEY,
FieldEncodedUnderlyingSecurityDesc::KEY,
FieldUnderlyingCPProgram::KEY,
FieldUnderlyingCPRegType::KEY,
FieldUnderlyingCurrency::KEY,
FieldUnderlyingQty::KEY,
FieldUnderlyingPx::KEY,
FieldUnderlyingDirtyPrice::KEY,
FieldUnderlyingEndPrice::KEY,
FieldUnderlyingStartValue::KEY,
FieldUnderlyingCurrentValue::KEY,
FieldUnderlyingEndValue::KEY,
FieldNoUnderlyingStips::KEY,
FieldTotNoRelatedSym::KEY,
FieldLastFragment::KEY,
FieldNoRelatedSym::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> NewOrderMultileg_knownFields = {
FieldClOrdID::KEY,
FieldSecondaryClOrdID::KEY,
FieldClOrdLinkID::KEY,
FieldNoPartyIDs::KEY,
FieldTradeOriginationDate::KEY,
FieldTradeDate::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldDayBookingInst::KEY,
FieldBookingUnit::KEY,
FieldPreallocMethod::KEY,
FieldAllocID::KEY,
FieldNoAllocs::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldCashMargin::KEY,
FieldClearingFeeIndicator::KEY,
FieldHandlInst::KEY,
FieldExecInst::KEY,
FieldMinQty::KEY,
FieldMaxFloor::KEY,
FieldExDestination::KEY,
FieldNoTradingSessions::KEY,
FieldProcessCode::KEY,
FieldSide::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoUnderlyings::KEY,
FieldPrevClosePx::KEY,
FieldNoLegs::KEY,
FieldLocateReqd::KEY,
FieldTransactTime::KEY,
FieldQtyType::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldOrdType::KEY,
FieldPriceType::KEY,
FieldPrice::KEY,
FieldStopPx::KEY,
FieldCurrency::KEY,
FieldComplianceID::KEY,
FieldSolicitedFlag::KEY,
FieldIOIID::KEY,
FieldQuoteID::KEY,
FieldTimeInForce::KEY,
FieldEffectiveTime::KEY,
FieldExpireDate::KEY,
FieldExpireTime::KEY,
FieldGTBookingInst::KEY,
FieldCommission::KEY,
FieldCommType::KEY,
FieldCommCurrency::KEY,
FieldFundRenewWaiv::KEY,
FieldOrderCapacity::KEY,
FieldOrderRestrictions::KEY,
FieldCustOrderCapacity::KEY,
FieldForexReq::KEY,
FieldSettlCurrency::KEY,
FieldBookingType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldPositionEffect::KEY,
FieldCoveredOrUncovered::KEY,
FieldMaxShow::KEY,
FieldPegOffsetValue::KEY,
FieldPegMoveType::KEY,
FieldPegOffsetType::KEY,
FieldPegLimitType::KEY,
FieldPegRoundDirection::KEY,
FieldPegScope::KEY,
FieldDiscretionInst::KEY,
FieldDiscretionOffsetValue::KEY,
FieldDiscretionMoveType::KEY,
FieldDiscretionOffsetType::KEY,
FieldDiscretionLimitType::KEY,
FieldDiscretionRoundDirection::KEY,
FieldDiscretionScope::KEY,
FieldTargetStrategy::KEY,
FieldTargetStrategyParameters::KEY,
FieldParticipationRate::KEY,
FieldCancellationRights::KEY,
FieldMoneyLaunderingStatus::KEY,
FieldRegistID::KEY,
FieldDesignation::KEY,
FieldMultiLegRptTypeReq::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> MultilegOrderCancelReplace_knownFields = {
FieldOrderID::KEY,
FieldOrigClOrdID::KEY,
FieldClOrdID::KEY,
FieldSecondaryClOrdID::KEY,
FieldClOrdLinkID::KEY,
FieldOrigOrdModTime::KEY,
FieldNoPartyIDs::KEY,
FieldTradeOriginationDate::KEY,
FieldTradeDate::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldDayBookingInst::KEY,
FieldBookingUnit::KEY,
FieldPreallocMethod::KEY,
FieldAllocID::KEY,
FieldNoAllocs::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldCashMargin::KEY,
FieldClearingFeeIndicator::KEY,
FieldHandlInst::KEY,
FieldExecInst::KEY,
FieldMinQty::KEY,
FieldMaxFloor::KEY,
FieldExDestination::KEY,
FieldNoTradingSessions::KEY,
FieldProcessCode::KEY,
FieldSide::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoUnderlyings::KEY,
FieldPrevClosePx::KEY,
FieldNoLegs::KEY,
FieldLocateReqd::KEY,
FieldTransactTime::KEY,
FieldQtyType::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldOrdType::KEY,
FieldPriceType::KEY,
FieldPrice::KEY,
FieldStopPx::KEY,
FieldCurrency::KEY,
FieldComplianceID::KEY,
FieldSolicitedFlag::KEY,
FieldIOIID::KEY,
FieldQuoteID::KEY,
FieldTimeInForce::KEY,
FieldEffectiveTime::KEY,
FieldExpireDate::KEY,
FieldExpireTime::KEY,
FieldGTBookingInst::KEY,
FieldCommission::KEY,
FieldCommType::KEY,
FieldCommCurrency::KEY,
FieldFundRenewWaiv::KEY,
FieldOrderCapacity::KEY,
FieldOrderRestrictions::KEY,
FieldCustOrderCapacity::KEY,
FieldForexReq::KEY,
FieldSettlCurrency::KEY,
FieldBookingType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldPositionEffect::KEY,
FieldCoveredOrUncovered::KEY,
FieldMaxShow::KEY,
FieldPegOffsetValue::KEY,
FieldPegMoveType::KEY,
FieldPegOffsetType::KEY,
FieldPegLimitType::KEY,
FieldPegRoundDirection::KEY,
FieldPegScope::KEY,
FieldDiscretionInst::KEY,
FieldDiscretionOffsetValue::KEY,
FieldDiscretionMoveType::KEY,
FieldDiscretionOffsetType::KEY,
FieldDiscretionLimitType::KEY,
FieldDiscretionRoundDirection::KEY,
FieldDiscretionScope::KEY,
FieldTargetStrategy::KEY,
FieldTargetStrategyParameters::KEY,
FieldParticipationRate::KEY,
FieldCancellationRights::KEY,
FieldMoneyLaunderingStatus::KEY,
FieldRegistID::KEY,
FieldDesignation::KEY,
FieldMultiLegRptTypeReq::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> TradeCaptureReportRequest_knownFields = {
FieldTradeRequestID::KEY,
FieldTradeRequestType::KEY,
FieldSubscriptionRequestType::KEY,
FieldTradeReportID::KEY,
FieldSecondaryTradeReportID::KEY,
FieldExecID::KEY,
FieldExecType::KEY,
FieldOrderID::KEY,
FieldClOrdID::KEY,
FieldMatchStatus::KEY,
FieldTrdType::KEY,
FieldTrdSubType::KEY,
FieldTransferReason::KEY,
FieldSecondaryTrdType::KEY,
FieldTradeLinkID::KEY,
FieldTrdMatchID::KEY,
FieldNoPartyIDs::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldNoDates::KEY,
FieldClearingBusinessDate::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldTimeBracket::KEY,
FieldSide::KEY,
FieldMultiLegReportingType::KEY,
FieldTradeInputSource::KEY,
FieldTradeInputDevice::KEY,
FieldResponseTransportType::KEY,
FieldResponseDestination::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> TradeCaptureReport_knownFields = {
FieldTradeReportID::KEY,
FieldTradeReportTransType::KEY,
FieldTradeReportType::KEY,
FieldTradeRequestID::KEY,
FieldTrdType::KEY,
FieldTrdSubType::KEY,
FieldSecondaryTrdType::KEY,
FieldTransferReason::KEY,
FieldExecType::KEY,
FieldTotNumTradeReports::KEY,
FieldLastRptRequested::KEY,
FieldUnsolicitedIndicator::KEY,
FieldSubscriptionRequestType::KEY,
FieldTradeReportRefID::KEY,
FieldSecondaryTradeReportRefID::KEY,
FieldSecondaryTradeReportID::KEY,
FieldTradeLinkID::KEY,
FieldTrdMatchID::KEY,
FieldExecID::KEY,
FieldOrdStatus::KEY,
FieldSecondaryExecID::KEY,
FieldExecRestatementReason::KEY,
FieldPreviouslyReported::KEY,
FieldPriceType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldQtyType::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldNoUnderlyings::KEY,
FieldUnderlyingTradingSessionID::KEY,
FieldUnderlyingTradingSessionSubID::KEY,
FieldLastQty::KEY,
FieldLastPx::KEY,
FieldLastParPx::KEY,
FieldLastSpotRate::KEY,
FieldLastForwardPoints::KEY,
FieldLastMkt::KEY,
FieldTradeDate::KEY,
FieldClearingBusinessDate::KEY,
FieldAvgPx::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldAvgPxIndicator::KEY,
FieldNoPosAmt::KEY,
FieldMultiLegReportingType::KEY,
FieldTradeLegRefID::KEY,
FieldNoLegs::KEY,
FieldTransactTime::KEY,
FieldNoTrdRegTimestamps::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldMatchStatus::KEY,
FieldMatchType::KEY,
FieldNoSides::KEY,
FieldCopyMsgIndicator::KEY,
FieldPublishTrdIndicator::KEY,
FieldShortSaleReason::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> OrderMassStatusRequest_knownFields = {
FieldMassStatusReqID::KEY,
FieldMassStatusReqType::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldUnderlyingSymbol::KEY,
FieldUnderlyingSymbolSfx::KEY,
FieldUnderlyingSecurityID::KEY,
FieldUnderlyingSecurityIDSource::KEY,
FieldNoUnderlyingSecurityAltID::KEY,
FieldUnderlyingProduct::KEY,
FieldUnderlyingCFICode::KEY,
FieldUnderlyingSecurityType::KEY,
FieldUnderlyingSecuritySubType::KEY,
FieldUnderlyingMaturityMonthYear::KEY,
FieldUnderlyingMaturityDate::KEY,
FieldUnderlyingPutOrCall::KEY,
FieldUnderlyingCouponPaymentDate::KEY,
FieldUnderlyingIssueDate::KEY,
FieldUnderlyingRepoCollateralSecurityType::KEY,
FieldUnderlyingRepurchaseTerm::KEY,
FieldUnderlyingRepurchaseRate::KEY,
FieldUnderlyingFactor::KEY,
FieldUnderlyingCreditRating::KEY,
FieldUnderlyingInstrRegistry::KEY,
FieldUnderlyingCountryOfIssue::KEY,
FieldUnderlyingStateOrProvinceOfIssue::KEY,
FieldUnderlyingLocaleOfIssue::KEY,
FieldUnderlyingRedemptionDate::KEY,
FieldUnderlyingStrikePrice::KEY,
FieldUnderlyingStrikeCurrency::KEY,
FieldUnderlyingOptAttribute::KEY,
FieldUnderlyingContractMultiplier::KEY,
FieldUnderlyingCouponRate::KEY,
FieldUnderlyingSecurityExchange::KEY,
FieldUnderlyingIssuer::KEY,
FieldEncodedUnderlyingIssuerLen::KEY,
FieldEncodedUnderlyingIssuer::KEY,
FieldUnderlyingSecurityDesc::KEY,
FieldEncodedUnderlyingSecurityDescLen::KEY,
FieldEncodedUnderlyingSecurityDesc::KEY,
FieldUnderlyingCPProgram::KEY,
FieldUnderlyingCPRegType::KEY,
FieldUnderlyingCurrency::KEY,
FieldUnderlyingQty::KEY,
FieldUnderlyingPx::KEY,
FieldUnderlyingDirtyPrice::KEY,
FieldUnderlyingEndPrice::KEY,
FieldUnderlyingStartValue::KEY,
FieldUnderlyingCurrentValue::KEY,
FieldUnderlyingEndValue::KEY,
FieldNoUnderlyingStips::KEY,
FieldSide::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> QuoteRequestReject_knownFields = {
FieldQuoteReqID::KEY,
FieldRFQReqID::KEY,
FieldQuoteRequestRejectReason::KEY,
FieldNoRelatedSym::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> RFQRequest_knownFields = {
FieldRFQReqID::KEY,
FieldNoRelatedSym::KEY,
FieldSubscriptionRequestType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> QuoteStatusReport_knownFields = {
FieldQuoteStatusReqID::KEY,
FieldQuoteReqID::KEY,
FieldQuoteID::KEY,
FieldQuoteRespID::KEY,
FieldQuoteType::KEY,
FieldNoPartyIDs::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldSide::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldSettlDate2::KEY,
FieldOrderQty2::KEY,
FieldCurrency::KEY,
FieldNoStipulations::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldNoLegs::KEY,
FieldNoQuoteQualifiers::KEY,
FieldExpireTime::KEY,
FieldPrice::KEY,
FieldPriceType::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldBidPx::KEY,
FieldOfferPx::KEY,
FieldMktBidPx::KEY,
FieldMktOfferPx::KEY,
FieldMinBidSize::KEY,
FieldBidSize::KEY,
FieldMinOfferSize::KEY,
FieldOfferSize::KEY,
FieldValidUntilTime::KEY,
FieldBidSpotRate::KEY,
FieldOfferSpotRate::KEY,
FieldBidForwardPoints::KEY,
FieldOfferForwardPoints::KEY,
FieldMidPx::KEY,
FieldBidYield::KEY,
FieldMidYield::KEY,
FieldOfferYield::KEY,
FieldTransactTime::KEY,
FieldOrdType::KEY,
FieldBidForwardPoints2::KEY,
FieldOfferForwardPoints2::KEY,
FieldSettlCurrBidFxRate::KEY,
FieldSettlCurrOfferFxRate::KEY,
FieldSettlCurrFxRateCalc::KEY,
FieldCommType::KEY,
FieldCommission::KEY,
FieldCustOrderCapacity::KEY,
FieldExDestination::KEY,
FieldQuoteStatus::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> QuoteResponse_knownFields = {
FieldQuoteRespID::KEY,
FieldQuoteID::KEY,
FieldQuoteRespType::KEY,
FieldClOrdID::KEY,
FieldOrderCapacity::KEY,
FieldIOIID::KEY,
FieldQuoteType::KEY,
FieldNoQuoteQualifiers::KEY,
FieldNoPartyIDs::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldSide::KEY,
FieldOrderQty::KEY,
FieldCashOrderQty::KEY,
FieldOrderPercent::KEY,
FieldRoundingDirection::KEY,
FieldRoundingModulus::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldSettlDate2::KEY,
FieldOrderQty2::KEY,
FieldCurrency::KEY,
FieldNoStipulations::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldNoLegs::KEY,
FieldBidPx::KEY,
FieldOfferPx::KEY,
FieldMktBidPx::KEY,
FieldMktOfferPx::KEY,
FieldMinBidSize::KEY,
FieldBidSize::KEY,
FieldMinOfferSize::KEY,
FieldOfferSize::KEY,
FieldValidUntilTime::KEY,
FieldBidSpotRate::KEY,
FieldOfferSpotRate::KEY,
FieldBidForwardPoints::KEY,
FieldOfferForwardPoints::KEY,
FieldMidPx::KEY,
FieldBidYield::KEY,
FieldMidYield::KEY,
FieldOfferYield::KEY,
FieldTransactTime::KEY,
FieldOrdType::KEY,
FieldBidForwardPoints2::KEY,
FieldOfferForwardPoints2::KEY,
FieldSettlCurrBidFxRate::KEY,
FieldSettlCurrOfferFxRate::KEY,
FieldSettlCurrFxRateCalc::KEY,
FieldCommission::KEY,
FieldCommType::KEY,
FieldCustOrderCapacity::KEY,
FieldExDestination::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldPrice::KEY,
FieldPriceType::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> Confirmation_knownFields = {
FieldConfirmID::KEY,
FieldConfirmRefID::KEY,
FieldConfirmReqID::KEY,
FieldConfirmTransType::KEY,
FieldConfirmType::KEY,
FieldCopyMsgIndicator::KEY,
FieldLegalConfirm::KEY,
FieldConfirmStatus::KEY,
FieldNoPartyIDs::KEY,
FieldNoOrders::KEY,
FieldAllocID::KEY,
FieldSecondaryAllocID::KEY,
FieldIndividualAllocID::KEY,
FieldTransactTime::KEY,
FieldTradeDate::KEY,
FieldNoTrdRegTimestamps::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldAllocQty::KEY,
FieldQtyType::KEY,
FieldSide::KEY,
FieldCurrency::KEY,
FieldLastMkt::KEY,
FieldNoCapacities::KEY,
FieldAllocAccount::KEY,
FieldAllocAcctIDSource::KEY,
FieldAllocAccountType::KEY,
FieldAvgPx::KEY,
FieldAvgPxPrecision::KEY,
FieldPriceType::KEY,
FieldAvgParPx::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldReportedPx::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldProcessCode::KEY,
FieldGrossTradeAmt::KEY,
FieldNumDaysInterest::KEY,
FieldExDate::KEY,
FieldAccruedInterestRate::KEY,
FieldAccruedInterestAmt::KEY,
FieldInterestAtMaturity::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldConcession::KEY,
FieldTotalTakedown::KEY,
FieldNetMoney::KEY,
FieldMaturityNetMoney::KEY,
FieldSettlCurrAmt::KEY,
FieldSettlCurrency::KEY,
FieldSettlCurrFxRate::KEY,
FieldSettlCurrFxRateCalc::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldSettlDeliveryType::KEY,
FieldStandInstDbType::KEY,
FieldStandInstDbName::KEY,
FieldStandInstDbID::KEY,
FieldNoDlvyInst::KEY,
FieldCommission::KEY,
FieldCommType::KEY,
FieldCommCurrency::KEY,
FieldFundRenewWaiv::KEY,
FieldSharedCommission::KEY,
FieldNoStipulations::KEY,
FieldNoMiscFees::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> PositionMaintenanceRequest_knownFields = {
FieldPosReqID::KEY,
FieldPosTransType::KEY,
FieldPosMaintAction::KEY,
FieldOrigPosReqRefID::KEY,
FieldPosMaintRptRefID::KEY,
FieldClearingBusinessDate::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldNoTradingSessions::KEY,
FieldTransactTime::KEY,
FieldNoPositions::KEY,
FieldAdjustmentType::KEY,
FieldContraryInstructionIndicator::KEY,
FieldPriorSpreadIndicator::KEY,
FieldThresholdAmount::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> PositionMaintenanceReport_knownFields = {
FieldPosMaintRptID::KEY,
FieldPosTransType::KEY,
FieldPosReqID::KEY,
FieldPosMaintAction::KEY,
FieldOrigPosReqRefID::KEY,
FieldPosMaintStatus::KEY,
FieldPosMaintResult::KEY,
FieldClearingBusinessDate::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldNoTradingSessions::KEY,
FieldTransactTime::KEY,
FieldNoPositions::KEY,
FieldNoPosAmt::KEY,
FieldAdjustmentType::KEY,
FieldThresholdAmount::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> RequestForPositions_knownFields = {
FieldPosReqID::KEY,
FieldPosReqType::KEY,
FieldMatchStatus::KEY,
FieldSubscriptionRequestType::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldClearingBusinessDate::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldNoTradingSessions::KEY,
FieldTransactTime::KEY,
FieldResponseTransportType::KEY,
FieldResponseDestination::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> RequestForPositionsAck_knownFields = {
FieldPosMaintRptID::KEY,
FieldPosReqID::KEY,
FieldTotalNumPosReports::KEY,
FieldUnsolicitedIndicator::KEY,
FieldPosReqResult::KEY,
FieldPosReqStatus::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldResponseTransportType::KEY,
FieldResponseDestination::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> PositionReport_knownFields = {
FieldPosMaintRptID::KEY,
FieldPosReqID::KEY,
FieldPosReqType::KEY,
FieldSubscriptionRequestType::KEY,
FieldTotalNumPosReports::KEY,
FieldUnsolicitedIndicator::KEY,
FieldPosReqResult::KEY,
FieldClearingBusinessDate::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldCurrency::KEY,
FieldSettlPrice::KEY,
FieldSettlPriceType::KEY,
FieldPriorSettlPrice::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldNoPositions::KEY,
FieldNoPosAmt::KEY,
FieldRegistStatus::KEY,
FieldDeliveryDate::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> TradeCaptureReportRequestAck_knownFields = {
FieldTradeRequestID::KEY,
FieldTradeRequestType::KEY,
FieldSubscriptionRequestType::KEY,
FieldTotNumTradeReports::KEY,
FieldTradeRequestResult::KEY,
FieldTradeRequestStatus::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldMultiLegReportingType::KEY,
FieldResponseTransportType::KEY,
FieldResponseDestination::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> TradeCaptureReportAck_knownFields = {
FieldTradeReportID::KEY,
FieldTradeReportTransType::KEY,
FieldTradeReportType::KEY,
FieldTrdType::KEY,
FieldTrdSubType::KEY,
FieldSecondaryTrdType::KEY,
FieldTransferReason::KEY,
FieldExecType::KEY,
FieldTradeReportRefID::KEY,
FieldSecondaryTradeReportRefID::KEY,
FieldTrdRptStatus::KEY,
FieldTradeReportRejectReason::KEY,
FieldSecondaryTradeReportID::KEY,
FieldSubscriptionRequestType::KEY,
FieldTradeLinkID::KEY,
FieldTrdMatchID::KEY,
FieldExecID::KEY,
FieldSecondaryExecID::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldTransactTime::KEY,
FieldNoTrdRegTimestamps::KEY,
FieldResponseTransportType::KEY,
FieldResponseDestination::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldNoLegs::KEY,
FieldClearingFeeIndicator::KEY,
FieldOrderCapacity::KEY,
FieldOrderRestrictions::KEY,
FieldCustOrderCapacity::KEY,
FieldAccount::KEY,
FieldAcctIDSource::KEY,
FieldAccountType::KEY,
FieldPositionEffect::KEY,
FieldPreallocMethod::KEY,
FieldNoAllocs::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> AllocationReport_knownFields = {
FieldAllocReportID::KEY,
FieldAllocID::KEY,
FieldAllocTransType::KEY,
FieldAllocReportRefID::KEY,
FieldAllocCancReplaceReason::KEY,
FieldSecondaryAllocID::KEY,
FieldAllocReportType::KEY,
FieldAllocStatus::KEY,
FieldAllocRejCode::KEY,
FieldRefAllocID::KEY,
FieldAllocIntermedReqType::KEY,
FieldAllocLinkID::KEY,
FieldAllocLinkType::KEY,
FieldBookingRefID::KEY,
FieldAllocNoOrdersType::KEY,
FieldNoOrders::KEY,
FieldNoExecs::KEY,
FieldPreviouslyReported::KEY,
FieldReversalIndicator::KEY,
FieldMatchType::KEY,
FieldSide::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldDeliveryForm::KEY,
FieldPctAtRisk::KEY,
FieldNoInstrAttrib::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldNoUnderlyings::KEY,
FieldNoLegs::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldLastMkt::KEY,
FieldTradeOriginationDate::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldPriceType::KEY,
FieldAvgPx::KEY,
FieldAvgParPx::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldCurrency::KEY,
FieldAvgPxPrecision::KEY,
FieldNoPartyIDs::KEY,
FieldTradeDate::KEY,
FieldTransactTime::KEY,
FieldSettlType::KEY,
FieldSettlDate::KEY,
FieldBookingType::KEY,
FieldGrossTradeAmt::KEY,
FieldConcession::KEY,
FieldTotalTakedown::KEY,
FieldNetMoney::KEY,
FieldPositionEffect::KEY,
FieldAutoAcceptIndicator::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldNumDaysInterest::KEY,
FieldAccruedInterestRate::KEY,
FieldAccruedInterestAmt::KEY,
FieldTotalAccruedInterestAmt::KEY,
FieldInterestAtMaturity::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldLegalConfirm::KEY,
FieldNoStipulations::KEY,
FieldYieldType::KEY,
FieldYield::KEY,
FieldYieldCalcDate::KEY,
FieldYieldRedemptionDate::KEY,
FieldYieldRedemptionPrice::KEY,
FieldYieldRedemptionPriceType::KEY,
FieldTotNoAllocs::KEY,
FieldLastFragment::KEY,
FieldNoAllocs::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> AllocationReportAck_knownFields = {
FieldAllocReportID::KEY,
FieldAllocID::KEY,
FieldNoPartyIDs::KEY,
FieldSecondaryAllocID::KEY,
FieldTradeDate::KEY,
FieldTransactTime::KEY,
FieldAllocStatus::KEY,
FieldAllocRejCode::KEY,
FieldAllocReportType::KEY,
FieldAllocIntermedReqType::KEY,
FieldMatchStatus::KEY,
FieldProduct::KEY,
FieldSecurityType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldNoAllocs::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ConfirmationAck_knownFields = {
FieldConfirmID::KEY,
FieldTradeDate::KEY,
FieldTransactTime::KEY,
FieldAffirmStatus::KEY,
FieldConfirmRejReason::KEY,
FieldMatchStatus::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> SettlementInstructionRequest_knownFields = {
FieldSettlInstReqID::KEY,
FieldTransactTime::KEY,
FieldNoPartyIDs::KEY,
FieldAllocAccount::KEY,
FieldAllocAcctIDSource::KEY,
FieldSide::KEY,
FieldProduct::KEY,
FieldSecurityType::KEY,
FieldCFICode::KEY,
FieldEffectiveTime::KEY,
FieldExpireTime::KEY,
FieldLastUpdateTime::KEY,
FieldStandInstDbType::KEY,
FieldStandInstDbName::KEY,
FieldStandInstDbID::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> AssignmentReport_knownFields = {
FieldAsgnRptID::KEY,
FieldTotNumAssignmentReports::KEY,
FieldLastRptRequested::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAccountType::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldNoPositions::KEY,
FieldNoPosAmt::KEY,
FieldThresholdAmount::KEY,
FieldSettlPrice::KEY,
FieldSettlPriceType::KEY,
FieldUnderlyingSettlPrice::KEY,
FieldExpireDate::KEY,
FieldAssignmentMethod::KEY,
FieldAssignmentUnit::KEY,
FieldOpenInterest::KEY,
FieldExerciseMethod::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldClearingBusinessDate::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> CollateralRequest_knownFields = {
FieldCollReqID::KEY,
FieldCollAsgnReason::KEY,
FieldTransactTime::KEY,
FieldExpireTime::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAccountType::KEY,
FieldClOrdID::KEY,
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldSecondaryClOrdID::KEY,
FieldNoExecs::KEY,
FieldNoTrades::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldSettlDate::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldMarginExcess::KEY,
FieldTotalNetValue::KEY,
FieldCashOutstanding::KEY,
FieldNoTrdRegTimestamps::KEY,
FieldSide::KEY,
FieldNoMiscFees::KEY,
FieldPrice::KEY,
FieldPriceType::KEY,
FieldAccruedInterestAmt::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldNoStipulations::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldClearingBusinessDate::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> CollateralAssignment_knownFields = {
FieldCollAsgnID::KEY,
FieldCollReqID::KEY,
FieldCollAsgnReason::KEY,
FieldCollAsgnTransType::KEY,
FieldCollAsgnRefID::KEY,
FieldTransactTime::KEY,
FieldExpireTime::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAccountType::KEY,
FieldClOrdID::KEY,
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldSecondaryClOrdID::KEY,
FieldNoExecs::KEY,
FieldNoTrades::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldSettlDate::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldMarginExcess::KEY,
FieldTotalNetValue::KEY,
FieldCashOutstanding::KEY,
FieldNoTrdRegTimestamps::KEY,
FieldSide::KEY,
FieldNoMiscFees::KEY,
FieldPrice::KEY,
FieldPriceType::KEY,
FieldAccruedInterestAmt::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldNoStipulations::KEY,
FieldSettlDeliveryType::KEY,
FieldStandInstDbType::KEY,
FieldStandInstDbName::KEY,
FieldStandInstDbID::KEY,
FieldNoDlvyInst::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldClearingBusinessDate::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> CollateralResponse_knownFields = {
FieldCollRespID::KEY,
FieldCollAsgnID::KEY,
FieldCollReqID::KEY,
FieldCollAsgnReason::KEY,
FieldCollAsgnTransType::KEY,
FieldCollAsgnRespType::KEY,
FieldCollAsgnRejectReason::KEY,
FieldTransactTime::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAccountType::KEY,
FieldClOrdID::KEY,
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldSecondaryClOrdID::KEY,
FieldNoExecs::KEY,
FieldNoTrades::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldSettlDate::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldMarginExcess::KEY,
FieldTotalNetValue::KEY,
FieldCashOutstanding::KEY,
FieldNoTrdRegTimestamps::KEY,
FieldSide::KEY,
FieldNoMiscFees::KEY,
FieldPrice::KEY,
FieldPriceType::KEY,
FieldAccruedInterestAmt::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldNoStipulations::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> CollateralReport_knownFields = {
FieldCollRptID::KEY,
FieldCollInquiryID::KEY,
FieldCollStatus::KEY,
FieldTotNumReports::KEY,
FieldLastRptRequested::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAccountType::KEY,
FieldClOrdID::KEY,
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldSecondaryClOrdID::KEY,
FieldNoExecs::KEY,
FieldNoTrades::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldSettlDate::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldMarginExcess::KEY,
FieldTotalNetValue::KEY,
FieldCashOutstanding::KEY,
FieldNoTrdRegTimestamps::KEY,
FieldSide::KEY,
FieldNoMiscFees::KEY,
FieldPrice::KEY,
FieldPriceType::KEY,
FieldAccruedInterestAmt::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldNoStipulations::KEY,
FieldSettlDeliveryType::KEY,
FieldStandInstDbType::KEY,
FieldStandInstDbName::KEY,
FieldStandInstDbID::KEY,
FieldNoDlvyInst::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldClearingBusinessDate::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> CollateralInquiry_knownFields = {
FieldCollInquiryID::KEY,
FieldNoCollInquiryQualifier::KEY,
FieldSubscriptionRequestType::KEY,
FieldResponseTransportType::KEY,
FieldResponseDestination::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAccountType::KEY,
FieldClOrdID::KEY,
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldSecondaryClOrdID::KEY,
FieldNoExecs::KEY,
FieldNoTrades::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldSettlDate::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldMarginExcess::KEY,
FieldTotalNetValue::KEY,
FieldCashOutstanding::KEY,
FieldNoTrdRegTimestamps::KEY,
FieldSide::KEY,
FieldPrice::KEY,
FieldPriceType::KEY,
FieldAccruedInterestAmt::KEY,
FieldEndAccruedInterestAmt::KEY,
FieldStartCash::KEY,
FieldEndCash::KEY,
FieldSpread::KEY,
FieldBenchmarkCurveCurrency::KEY,
FieldBenchmarkCurveName::KEY,
FieldBenchmarkCurvePoint::KEY,
FieldBenchmarkPrice::KEY,
FieldBenchmarkPriceType::KEY,
FieldBenchmarkSecurityID::KEY,
FieldBenchmarkSecurityIDSource::KEY,
FieldNoStipulations::KEY,
FieldSettlDeliveryType::KEY,
FieldStandInstDbType::KEY,
FieldStandInstDbName::KEY,
FieldStandInstDbID::KEY,
FieldNoDlvyInst::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldClearingBusinessDate::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> NetworkCounterpartySystemStatusRequest_knownFields = {
FieldNetworkRequestType::KEY,
FieldNetworkRequestID::KEY,
FieldNoCompIDs::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> NetworkCounterpartySystemStatusResponse_knownFields = {
FieldNetworkStatusResponseType::KEY,
FieldNetworkRequestID::KEY,
FieldNetworkResponseID::KEY,
FieldLastNetworkResponseID::KEY,
FieldNoCompIDs::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> UserRequest_knownFields = {
FieldUserRequestID::KEY,
FieldUserRequestType::KEY,
FieldUsername::KEY,
FieldPassword::KEY,
FieldNewPassword::KEY,
FieldRawDataLength::KEY,
FieldRawData::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> UserResponse_knownFields = {
FieldUserRequestID::KEY,
FieldUsername::KEY,
FieldUserStatus::KEY,
FieldUserStatusText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> CollateralInquiryAck_knownFields = {
FieldCollInquiryID::KEY,
FieldCollInquiryStatus::KEY,
FieldCollInquiryResult::KEY,
FieldNoCollInquiryQualifier::KEY,
FieldTotNumReports::KEY,
FieldNoPartyIDs::KEY,
FieldAccount::KEY,
FieldAccountType::KEY,
FieldClOrdID::KEY,
FieldOrderID::KEY,
FieldSecondaryOrderID::KEY,
FieldSecondaryClOrdID::KEY,
FieldNoExecs::KEY,
FieldNoTrades::KEY,
FieldSymbol::KEY,
FieldSymbolSfx::KEY,
FieldSecurityID::KEY,
FieldSecurityIDSource::KEY,
FieldNoSecurityAltID::KEY,
FieldProduct::KEY,
FieldCFICode::KEY,
FieldSecurityType::KEY,
FieldSecuritySubType::KEY,
FieldMaturityMonthYear::KEY,
FieldMaturityDate::KEY,
FieldPutOrCall::KEY,
FieldCouponPaymentDate::KEY,
FieldIssueDate::KEY,
FieldRepoCollateralSecurityType::KEY,
FieldRepurchaseTerm::KEY,
FieldRepurchaseRate::KEY,
FieldFactor::KEY,
FieldCreditRating::KEY,
FieldInstrRegistry::KEY,
FieldCountryOfIssue::KEY,
FieldStateOrProvinceOfIssue::KEY,
FieldLocaleOfIssue::KEY,
FieldRedemptionDate::KEY,
FieldStrikePrice::KEY,
FieldStrikeCurrency::KEY,
FieldOptAttribute::KEY,
FieldContractMultiplier::KEY,
FieldCouponRate::KEY,
FieldSecurityExchange::KEY,
FieldIssuer::KEY,
FieldEncodedIssuerLen::KEY,
FieldEncodedIssuer::KEY,
FieldSecurityDesc::KEY,
FieldEncodedSecurityDescLen::KEY,
FieldEncodedSecurityDesc::KEY,
FieldPool::KEY,
FieldContractSettlMonth::KEY,
FieldCPProgram::KEY,
FieldCPRegType::KEY,
FieldNoEvents::KEY,
FieldDatedDate::KEY,
FieldInterestAccrualDate::KEY,
FieldAgreementDesc::KEY,
FieldAgreementID::KEY,
FieldAgreementDate::KEY,
FieldAgreementCurrency::KEY,
FieldTerminationType::KEY,
FieldStartDate::KEY,
FieldEndDate::KEY,
FieldDeliveryType::KEY,
FieldMarginRatio::KEY,
FieldSettlDate::KEY,
FieldQuantity::KEY,
FieldQtyType::KEY,
FieldCurrency::KEY,
FieldNoLegs::KEY,
FieldNoUnderlyings::KEY,
FieldTradingSessionID::KEY,
FieldTradingSessionSubID::KEY,
FieldSettlSessID::KEY,
FieldSettlSessSubID::KEY,
FieldClearingBusinessDate::KEY,
FieldResponseTransportType::KEY,
FieldResponseDestination::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

const std::vector<tag_t> ConfirmationRequest_knownFields = {
FieldConfirmReqID::KEY,
FieldConfirmType::KEY,
FieldNoOrders::KEY,
FieldAllocID::KEY,
FieldSecondaryAllocID::KEY,
FieldIndividualAllocID::KEY,
FieldTransactTime::KEY,
FieldAllocAccount::KEY,
FieldAllocAcctIDSource::KEY,
FieldAllocAccountType::KEY,
FieldText::KEY,
FieldEncodedTextLen::KEY,
FieldEncodedText::KEY,
FieldCheckSum::KEY };

}


const std::vector<tag_t> & MessageHeader::getKnownFields(){ return Header_knownFields; }

const std::vector<tag_t> & MessageHeartbeat::getKnownFields(){ return Heartbeat_knownFields; }

const std::vector<tag_t> & MessageTestRequest::getKnownFields(){ return TestRequest_knownFields; }

const std::vector<tag_t> & MessageResendRequest::getKnownFields(){ return ResendRequest_knownFields; }

const std::vector<tag_t> & MessageReject::getKnownFields(){ return Reject_knownFields; }

const std::vector<tag_t> & MessageSequenceReset::getKnownFields(){ return SequenceReset_knownFields; }

const std::vector<tag_t> & MessageLogout::getKnownFields(){ return Logout_knownFields; }

const std::vector<tag_t> & MessageIOI::getKnownFields(){ return IOI_knownFields; }

const std::vector<tag_t> & MessageAdvertisement::getKnownFields(){ return Advertisement_knownFields; }

const std::vector<tag_t> & MessageExecutionReport::getKnownFields(){ return ExecutionReport_knownFields; }

const std::vector<tag_t> & MessageOrderCancelReject::getKnownFields(){ return OrderCancelReject_knownFields; }

const std::vector<tag_t> & MessageLogon::getKnownFields(){ return Logon_knownFields; }

const std::vector<tag_t> & MessageNews::getKnownFields(){ return News_knownFields; }

const std::vector<tag_t> & MessageEmail::getKnownFields(){ return Email_knownFields; }

const std::vector<tag_t> & MessageNewOrderSingle::getKnownFields(){ return NewOrderSingle_knownFields; }

const std::vector<tag_t> & MessageNewOrderList::getKnownFields(){ return NewOrderList_knownFields; }

const std::vector<tag_t> & MessageOrderCancelRequest::getKnownFields(){ return OrderCancelRequest_knownFields; }

const std::vector<tag_t> & MessageOrderCancelReplaceRequest::getKnownFields(){ return OrderCancelReplaceRequest_knownFields; }

const std::vector<tag_t> & MessageOrderStatusRequest::getKnownFields(){ return OrderStatusRequest_knownFields; }

const std::vector<tag_t> & MessageAllocationInstruction::getKnownFields(){ return AllocationInstruction_knownFields; }

const std::vector<tag_t> & MessageListCancelRequest::getKnownFields(){ return ListCancelRequest_knownFields; }

const std::vector<tag_t> & MessageListExecute::getKnownFields(){ return ListExecute_knownFields; }

const std::vector<tag_t> & MessageListStatusRequest::getKnownFields(){ return ListStatusRequest_knownFields; }

const std::vector<tag_t> & MessageListStatus::getKnownFields(){ return ListStatus_knownFields; }

const std::vector<tag_t> & MessageAllocationInstructionAck::getKnownFields(){ return AllocationInstructionAck_knownFields; }

const std::vector<tag_t> & MessageDontKnowTrade::getKnownFields(){ return DontKnowTrade_knownFields; }

const std::vector<tag_t> & MessageQuoteRequest::getKnownFields(){ return QuoteRequest_knownFields; }

const std::vector<tag_t> & MessageQuote::getKnownFields(){ return Quote_knownFields; }

const std::vector<tag_t> & MessageSettlementInstructions::getKnownFields(){ return SettlementInstructions_knownFields; }

const std::vector<tag_t> & MessageMarketDataRequest::getKnownFields(){ return MarketDataRequest_knownFields; }

const std::vector<tag_t> & MessageMarketDataSnapshotFullRefresh::getKnownFields(){ return MarketDataSnapshotFullRefresh_knownFields; }

const std::vector<tag_t> & MessageMarketDataIncrementalRefresh::getKnownFields(){ return MarketDataIncrementalRefresh_knownFields; }

const std::vector<tag_t> & MessageMarketDataRequestReject::getKnownFields(){ return MarketDataRequestReject_knownFields; }

const std::vector<tag_t> & MessageQuoteCancel::getKnownFields(){ return QuoteCancel_knownFields; }

const std::vector<tag_t> & MessageQuoteStatusRequest::getKnownFields(){ return QuoteStatusRequest_knownFields; }

const std::vector<tag_t> & MessageMassQuoteAcknowledgement::getKnownFields(){ return MassQuoteAcknowledgement_knownFields; }

const std::vector<tag_t> & MessageSecurityDefinitionRequest::getKnownFields(){ return SecurityDefinitionRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityDefinition::getKnownFields(){ return SecurityDefinition_knownFields; }

const std::vector<tag_t> & MessageSecurityStatusRequest::getKnownFields(){ return SecurityStatusRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityStatus::getKnownFields(){ return SecurityStatus_knownFields; }

const std::vector<tag_t> & MessageTradingSessionStatusRequest::getKnownFields(){ return TradingSessionStatusRequest_knownFields; }

const std::vector<tag_t> & MessageTradingSessionStatus::getKnownFields(){ return TradingSessionStatus_knownFields; }

const std::vector<tag_t> & MessageMassQuote::getKnownFields(){ return MassQuote_knownFields; }

const std::vector<tag_t> & MessageBusinessMessageReject::getKnownFields(){ return BusinessMessageReject_knownFields; }

const std::vector<tag_t> & MessageBidRequest::getKnownFields(){ return BidRequest_knownFields; }

const std::vector<tag_t> & MessageBidResponse::getKnownFields(){ return BidResponse_knownFields; }

const std::vector<tag_t> & MessageListStrikePrice::getKnownFields(){ return ListStrikePrice_knownFields; }

const std::vector<tag_t> & MessageXMLnonFIX::getKnownFields(){ return XMLnonFIX_knownFields; }

const std::vector<tag_t> & MessageRegistrationInstructions::getKnownFields(){ return RegistrationInstructions_knownFields; }

const std::vector<tag_t> & MessageRegistrationInstructionsResponse::getKnownFields(){ return RegistrationInstructionsResponse_knownFields; }

const std::vector<tag_t> & MessageOrderMassCancelRequest::getKnownFields(){ return OrderMassCancelRequest_knownFields; }

const std::vector<tag_t> & MessageOrderMassCancelReport::getKnownFields(){ return OrderMassCancelReport_knownFields; }

const std::vector<tag_t> & MessageNewOrderCross::getKnownFields(){ return NewOrderCross_knownFields; }

const std::vector<tag_t> & MessageCrossOrderCancelReplaceRequest::getKnownFields(){ return CrossOrderCancelReplaceRequest_knownFields; }

const std::vector<tag_t> & MessageCrossOrderCancelRequest::getKnownFields(){ return CrossOrderCancelRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityTypeRequest::getKnownFields(){ return SecurityTypeRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityTypes::getKnownFields(){ return SecurityTypes_knownFields; }

const std::vector<tag_t> & MessageSecurityListRequest::getKnownFields(){ return SecurityListRequest_knownFields; }

const std::vector<tag_t> & MessageSecurityList::getKnownFields(){ return SecurityList_knownFields; }

const std::vector<tag_t> & MessageDerivativeSecurityListRequest::getKnownFields(){ return DerivativeSecurityListRequest_knownFields; }

const std::vector<tag_t> & MessageDerivativeSecurityList::getKnownFields(){ return DerivativeSecurityList_knownFields; }

const std::vector<tag_t> & MessageNewOrderMultileg::getKnownFields(){ return NewOrderMultileg_knownFields; }

const std::vector<tag_t> & MessageMultilegOrderCancelReplace::getKnownFields(){ return MultilegOrderCancelReplace_knownFields; }

const std::vector<tag_t> & MessageTradeCaptureReportRequest::getKnownFields(){ return TradeCaptureReportRequest_knownFields; }

const std::vector<tag_t> & MessageTradeCaptureReport::getKnownFields(){ return TradeCaptureReport_knownFields; }

const std::vector<tag_t> & MessageOrderMassStatusRequest::getKnownFields(){ return OrderMassStatusRequest_knownFields; }

const std::vector<tag_t> & MessageQuoteRequestReject::getKnownFields(){ return QuoteRequestReject_knownFields; }

const std::vector<tag_t> & MessageRFQRequest::getKnownFields(){ return RFQRequest_knownFields; }

const std::vector<tag_t> & MessageQuoteStatusReport::getKnownFields(){ return QuoteStatusReport_knownFields; }

const std::vector<tag_t> & MessageQuoteResponse::getKnownFields(){ return QuoteResponse_knownFields; }

const std::vector<tag_t> & MessageConfirmation::getKnownFields(){ return Confirmation_knownFields; }

const std::vector<tag_t> & MessagePositionMaintenanceRequest::getKnownFields(){ return PositionMaintenanceRequest_knownFields; }

const std::vector<tag_t> & MessagePositionMaintenanceReport::getKnownFields(){ return PositionMaintenanceReport_knownFields; }

const std::vector<tag_t> & MessageRequestForPositions::getKnownFields(){ return RequestForPositions_knownFields; }

const std::vector<tag_t> & MessageRequestForPositionsAck::getKnownFields(){ return RequestForPositionsAck_knownFields; }

const std::vector<tag_t> & MessagePositionReport::getKnownFields(){ return PositionReport_knownFields; }

const std::vector<tag_t> & MessageTradeCaptureReportRequestAck::getKnownFields(){ return TradeCaptureReportRequestAck_knownFields; }

const std::vector<tag_t> & MessageTradeCaptureReportAck::getKnownFields(){ return TradeCaptureReportAck_knownFields; }

const std::vector<tag_t> & MessageAllocationReport::getKnownFields(){ return AllocationReport_knownFields; }

const std::vector<tag_t> & MessageAllocationReportAck::getKnownFields(){ return AllocationReportAck_knownFields; }

const std::vector<tag_t> & MessageConfirmationAck::getKnownFields(){ return ConfirmationAck_knownFields; }

const std::vector<tag_t> & MessageSettlementInstructionRequest::getKnownFields(){ return SettlementInstructionRequest_knownFields; }

const std::vector<tag_t> & MessageAssignmentReport::getKnownFields(){ return AssignmentReport_knownFields; }

const std::vector<tag_t> & MessageCollateralRequest::getKnownFields(){ return CollateralRequest_knownFields; }

const std::vector<tag_t> & MessageCollateralAssignment::getKnownFields(){ return CollateralAssignment_knownFields; }

const std::vector<tag_t> & MessageCollateralResponse::getKnownFields(){ return CollateralResponse_knownFields; }

const std::vector<tag_t> & MessageCollateralReport::getKnownFields(){ return CollateralReport_knownFields; }

const std::vector<tag_t> & MessageCollateralInquiry::getKnownFields(){ return CollateralInquiry_knownFields; }

const std::vector<tag_t> & MessageNetworkCounterpartySystemStatusRequest::getKnownFields(){ return NetworkCounterpartySystemStatusRequest_knownFields; }

const std::vector<tag_t> & MessageNetworkCounterpartySystemStatusResponse::getKnownFields(){ return NetworkCounterpartySystemStatusResponse_knownFields; }

const std::vector<tag_t> & MessageUserRequest::getKnownFields(){ return UserRequest_knownFields; }

const std::vector<tag_t> & MessageUserResponse::getKnownFields(){ return UserResponse_knownFields; }

const std::vector<tag_t> & MessageCollateralInquiryAck::getKnownFields(){ return CollateralInquiryAck_knownFields; }

const std::vector<tag_t> & MessageConfirmationRequest::getKnownFields(){ return ConfirmationRequest_knownFields; }


GetDepthMethod getTagDepthMethodByRawMsgType( raw_enum_t rawMsgType ){
  switch( rawMsgType ){

   case MsgTypeRaw__ :
     return MessageHeader::getFieldDepth;

   case MsgTypeRaw_HEARTBEAT :
     return MessageHeartbeat::getFieldDepth;

   case MsgTypeRaw_TEST_REQUEST :
     return MessageTestRequest::getFieldDepth;

   case MsgTypeRaw_RESEND_REQUEST :
     return MessageResendRequest::getFieldDepth;

   case MsgTypeRaw_REJECT :
     return MessageReject::getFieldDepth;

   case MsgTypeRaw_SEQUENCE_RESET :
     return MessageSequenceReset::getFieldDepth;

   case MsgTypeRaw_LOGOUT :
     return MessageLogout::getFieldDepth;

   case MsgTypeRaw_INDICATION_OF_INTEREST :
     return MessageIOI::getFieldDepth;

   case MsgTypeRaw_ADVERTISEMENT :
     return MessageAdvertisement::getFieldDepth;

   case MsgTypeRaw_EXECUTION_REPORT :
     return MessageExecutionReport::getFieldDepth;

   case MsgTypeRaw_ORDER_CANCEL_REJECT :
     return MessageOrderCancelReject::getFieldDepth;

   case MsgTypeRaw_LOGON :
     return MessageLogon::getFieldDepth;

   case MsgTypeRaw_NEWS :
     return MessageNews::getFieldDepth;

   case MsgTypeRaw_EMAIL :
     return MessageEmail::getFieldDepth;

   case MsgTypeRaw_ORDER_SINGLE :
     return MessageNewOrderSingle::getFieldDepth;

   case MsgTypeRaw_ORDER_LIST :
     return MessageNewOrderList::getFieldDepth;

   case MsgTypeRaw_ORDER_CANCEL_REQUEST :
     return MessageOrderCancelRequest::getFieldDepth;

   case MsgTypeRaw_ORDER_CANCEL_REPLACE_REQUEST :
     return MessageOrderCancelReplaceRequest::getFieldDepth;

   case MsgTypeRaw_ORDER_STATUS_REQUEST :
     return MessageOrderStatusRequest::getFieldDepth;

   case MsgTypeRaw_ALLOCATION_INSTRUCTION :
     return MessageAllocationInstruction::getFieldDepth;

   case MsgTypeRaw_LIST_CANCEL_REQUEST :
     return MessageListCancelRequest::getFieldDepth;

   case MsgTypeRaw_LIST_EXECUTE :
     return MessageListExecute::getFieldDepth;

   case MsgTypeRaw_LIST_STATUS_REQUEST :
     return MessageListStatusRequest::getFieldDepth;

   case MsgTypeRaw_LIST_STATUS :
     return MessageListStatus::getFieldDepth;

   case MsgTypeRaw_ALLOCATION_INSTRUCTION_ACK :
     return MessageAllocationInstructionAck::getFieldDepth;

   case MsgTypeRaw_DONT_KNOW_TRADE :
     return MessageDontKnowTrade::getFieldDepth;

   case MsgTypeRaw_QUOTE_REQUEST :
     return MessageQuoteRequest::getFieldDepth;

   case MsgTypeRaw_QUOTE :
     return MessageQuote::getFieldDepth;

   case MsgTypeRaw_SETTLEMENT_INSTRUCTIONS :
     return MessageSettlementInstructions::getFieldDepth;

   case MsgTypeRaw_MARKET_DATA_REQUEST :
     return MessageMarketDataRequest::getFieldDepth;

   case MsgTypeRaw_MARKET_DATA_SNAPSHOT_FULL_REFRESH :
     return MessageMarketDataSnapshotFullRefresh::getFieldDepth;

   case MsgTypeRaw_MARKET_DATA_INCREMENTAL_REFRESH :
     return MessageMarketDataIncrementalRefresh::getFieldDepth;

   case MsgTypeRaw_MARKET_DATA_REQUEST_REJECT :
     return MessageMarketDataRequestReject::getFieldDepth;

   case MsgTypeRaw_QUOTE_CANCEL :
     return MessageQuoteCancel::getFieldDepth;

   case MsgTypeRaw_QUOTE_STATUS_REQUEST :
     return MessageQuoteStatusRequest::getFieldDepth;

   case MsgTypeRaw_MASS_QUOTE_ACKNOWLEDGEMENT :
     return MessageMassQuoteAcknowledgement::getFieldDepth;

   case MsgTypeRaw_SECURITY_DEFINITION_REQUEST :
     return MessageSecurityDefinitionRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_DEFINITION :
     return MessageSecurityDefinition::getFieldDepth;

   case MsgTypeRaw_SECURITY_STATUS_REQUEST :
     return MessageSecurityStatusRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_STATUS :
     return MessageSecurityStatus::getFieldDepth;

   case MsgTypeRaw_TRADING_SESSION_STATUS_REQUEST :
     return MessageTradingSessionStatusRequest::getFieldDepth;

   case MsgTypeRaw_TRADING_SESSION_STATUS :
     return MessageTradingSessionStatus::getFieldDepth;

   case MsgTypeRaw_MASS_QUOTE :
     return MessageMassQuote::getFieldDepth;

   case MsgTypeRaw_BUSINESS_MESSAGE_REJECT :
     return MessageBusinessMessageReject::getFieldDepth;

   case MsgTypeRaw_BID_REQUEST :
     return MessageBidRequest::getFieldDepth;

   case MsgTypeRaw_BID_RESPONSE :
     return MessageBidResponse::getFieldDepth;

   case MsgTypeRaw_LIST_STRIKE_PRICE :
     return MessageListStrikePrice::getFieldDepth;

   case MsgTypeRaw_XML_MESSAGE :
     return MessageXMLnonFIX::getFieldDepth;

   case MsgTypeRaw_REGISTRATION_INSTRUCTIONS :
     return MessageRegistrationInstructions::getFieldDepth;

   case MsgTypeRaw_REGISTRATION_INSTRUCTIONS_RESPONSE :
     return MessageRegistrationInstructionsResponse::getFieldDepth;

   case MsgTypeRaw_ORDER_MASS_CANCEL_REQUEST :
     return MessageOrderMassCancelRequest::getFieldDepth;

   case MsgTypeRaw_ORDER_MASS_CANCEL_REPORT :
     return MessageOrderMassCancelReport::getFieldDepth;

   case MsgTypeRaw_NEW_ORDER_s :
     return MessageNewOrderCross::getFieldDepth;

   case MsgTypeRaw_CROSS_ORDER_CANCEL_REPLACE_REQUEST :
     return MessageCrossOrderCancelReplaceRequest::getFieldDepth;

   case MsgTypeRaw_CROSS_ORDER_CANCEL_REQUEST :
     return MessageCrossOrderCancelRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_TYPE_REQUEST :
     return MessageSecurityTypeRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_TYPES :
     return MessageSecurityTypes::getFieldDepth;

   case MsgTypeRaw_SECURITY_LIST_REQUEST :
     return MessageSecurityListRequest::getFieldDepth;

   case MsgTypeRaw_SECURITY_LIST :
     return MessageSecurityList::getFieldDepth;

   case MsgTypeRaw_DERIVATIVE_SECURITY_LIST_REQUEST :
     return MessageDerivativeSecurityListRequest::getFieldDepth;

   case MsgTypeRaw_DERIVATIVE_SECURITY_LIST :
     return MessageDerivativeSecurityList::getFieldDepth;

   case MsgTypeRaw_NEW_ORDER_AB :
     return MessageNewOrderMultileg::getFieldDepth;

   case MsgTypeRaw_MULTILEG_ORDER_CANCEL_REPLACE :
     return MessageMultilegOrderCancelReplace::getFieldDepth;

   case MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST :
     return MessageTradeCaptureReportRequest::getFieldDepth;

   case MsgTypeRaw_TRADE_CAPTURE_REPORT :
     return MessageTradeCaptureReport::getFieldDepth;

   case MsgTypeRaw_ORDER_MASS_STATUS_REQUEST :
     return MessageOrderMassStatusRequest::getFieldDepth;

   case MsgTypeRaw_QUOTE_REQUEST_REJECT :
     return MessageQuoteRequestReject::getFieldDepth;

   case MsgTypeRaw_RFQ_REQUEST :
     return MessageRFQRequest::getFieldDepth;

   case MsgTypeRaw_QUOTE_STATUS_REPORT :
     return MessageQuoteStatusReport::getFieldDepth;

   case MsgTypeRaw_QUOTE_RESPONSE :
     return MessageQuoteResponse::getFieldDepth;

   case MsgTypeRaw_CONFIRMATION :
     return MessageConfirmation::getFieldDepth;

   case MsgTypeRaw_POSITION_MAINTENANCE_REQUEST :
     return MessagePositionMaintenanceRequest::getFieldDepth;

   case MsgTypeRaw_POSITION_MAINTENANCE_REPORT :
     return MessagePositionMaintenanceReport::getFieldDepth;

   case MsgTypeRaw_REQUEST_FOR_POSITIONS :
     return MessageRequestForPositions::getFieldDepth;

   case MsgTypeRaw_REQUEST_FOR_POSITIONS_ACK :
     return MessageRequestForPositionsAck::getFieldDepth;

   case MsgTypeRaw_POSITION_REPORT :
     return MessagePositionReport::getFieldDepth;

   case MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST_ACK :
     return MessageTradeCaptureReportRequestAck::getFieldDepth;

   case MsgTypeRaw_TRADE_CAPTURE_REPORT_ACK :
     return MessageTradeCaptureReportAck::getFieldDepth;

   case MsgTypeRaw_ALLOCATION_REPORT :
     return MessageAllocationReport::getFieldDepth;

   case MsgTypeRaw_ALLOCATION_REPORT_ACK :
     return MessageAllocationReportAck::getFieldDepth;

   case MsgTypeRaw_CONFIRMATION_ACK :
     return MessageConfirmationAck::getFieldDepth;

   case MsgTypeRaw_SETTLEMENT_INSTRUCTION_REQUEST :
     return MessageSettlementInstructionRequest::getFieldDepth;

   case MsgTypeRaw_ASSIGNMENT_REPORT :
     return MessageAssignmentReport::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_REQUEST :
     return MessageCollateralRequest::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_ASSIGNMENT :
     return MessageCollateralAssignment::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_RESPONSE :
     return MessageCollateralResponse::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_REPORT :
     return MessageCollateralReport::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_INQUIRY :
     return MessageCollateralInquiry::getFieldDepth;

   case MsgTypeRaw_NETWORK_BC :
     return MessageNetworkCounterpartySystemStatusRequest::getFieldDepth;

   case MsgTypeRaw_NETWORK_BD :
     return MessageNetworkCounterpartySystemStatusResponse::getFieldDepth;

   case MsgTypeRaw_USER_REQUEST :
     return MessageUserRequest::getFieldDepth;

   case MsgTypeRaw_USER_RESPONSE :
     return MessageUserResponse::getFieldDepth;

   case MsgTypeRaw_COLLATERAL_INQUIRY_ACK :
     return MessageCollateralInquiryAck::getFieldDepth;

   case MsgTypeRaw_CONFIRMATION_REQUEST :
     return MessageConfirmationRequest::getFieldDepth;
  }
  return nullptr;
}


// -------------------------------------- reset ----------------------------------------

void MessageHeader::reset(){
     buf = nullptr;
     fieldBeginString.offset = -1;
     fieldBodyLength.offset = -1;
     fieldMsgType.offset = -1;
     fieldSenderCompID.offset = -1;
     fieldTargetCompID.offset = -1;
     fieldOnBehalfOfCompID.offset = -1;
     fieldDeliverToCompID.offset = -1;
     fieldSecureDataLen.offset = -1;
     fieldSecureData.offset = -1;
     fieldMsgSeqNum.offset = -1;
     fieldSenderSubID.offset = -1;
     fieldSenderLocationID.offset = -1;
     fieldTargetSubID.offset = -1;
     fieldTargetLocationID.offset = -1;
     fieldOnBehalfOfSubID.offset = -1;
     fieldOnBehalfOfLocationID.offset = -1;
     fieldDeliverToSubID.offset = -1;
     fieldDeliverToLocationID.offset = -1;
     fieldPossDupFlag.offset = -1;
     fieldPossResend.offset = -1;
     fieldSendingTime.offset = -1;
     fieldOrigSendingTime.offset = -1;
     fieldXmlDataLen.offset = -1;
     fieldXmlData.offset = -1;
     fieldMessageEncoding.offset = -1;
     fieldLastMsgSeqNumProcessed.offset = -1;
     for( auto g = groupsHops.begin(); g != groupsHops.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageHeartbeat::reset(){
     buf = nullptr;
     fieldTestReqID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTestRequest::reset(){
     buf = nullptr;
     fieldTestReqID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageResendRequest::reset(){
     buf = nullptr;
     fieldBeginSeqNo.offset = -1;
     fieldEndSeqNo.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageReject::reset(){
     buf = nullptr;
     fieldRefSeqNum.offset = -1;
     fieldRefTagID.offset = -1;
     fieldRefMsgType.offset = -1;
     fieldSessionRejectReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSequenceReset::reset(){
     buf = nullptr;
     fieldGapFillFlag.offset = -1;
     fieldNewSeqNo.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageLogout::reset(){
     buf = nullptr;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageIOI::reset(){
     buf = nullptr;
     fieldIOIID.offset = -1;
     fieldIOITransType.offset = -1;
     fieldIOIRefID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldIOIQty.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldIOIQltyInd.offset = -1;
     fieldIOINaturalFlag.offset = -1;
     for( auto g = groupsIOIQualifiers.begin(); g != groupsIOIQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTransactTime.offset = -1;
     fieldURLLink.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAdvertisement::reset(){
     buf = nullptr;
     fieldAdvId.offset = -1;
     fieldAdvTransType.offset = -1;
     fieldAdvRefID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdvSide.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldPrice.offset = -1;
     fieldCurrency.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldURLLink.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageExecutionReport::reset(){
     buf = nullptr;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldOrdStatusReqID.offset = -1;
     fieldMassStatusReqID.offset = -1;
     fieldTotNumReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     for( auto g = groupsContraBrokers.begin(); g != groupsContraBrokers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldListID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldExecID.offset = -1;
     fieldExecRefID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldWorkingIndicator.offset = -1;
     fieldOrdRejReason.offset = -1;
     fieldExecRestatementReason.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldPeggedPrice.offset = -1;
     fieldDiscretionPrice.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldTargetStrategyPerformance.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldExecInst.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldLastQty.offset = -1;
     fieldUnderlyingLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldUnderlyingLastPx.offset = -1;
     fieldLastParPx.offset = -1;
     fieldLastSpotRate.offset = -1;
     fieldLastForwardPoints.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTimeBracket.offset = -1;
     fieldLastCapacity.offset = -1;
     fieldLeavesQty.offset = -1;
     fieldCumQty.offset = -1;
     fieldAvgPx.offset = -1;
     fieldDayOrderQty.offset = -1;
     fieldDayCumQty.offset = -1;
     fieldDayAvgPx.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldReportToExch.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldExDate.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldTradedFlatSwitch.offset = -1;
     fieldBasisFeatureDate.offset = -1;
     fieldBasisFeaturePrice.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldSettlCurrAmt.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldSettlCurrFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldHandlInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldMaxShow.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldLastForwardPoints2.offset = -1;
     fieldMultiLegReportingType.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldTransBkdTime.offset = -1;
     fieldExecValuationPoint.offset = -1;
     fieldExecPriceType.offset = -1;
     fieldExecPriceAdjustment.offset = -1;
     fieldPriorityIndicator.offset = -1;
     fieldPriceImprovement.offset = -1;
     fieldLastLiquidityInd.offset = -1;
     for( auto g = groupsContAmts.begin(); g != groupsContAmts.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCopyMsgIndicator.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelReject::reset(){
     buf = nullptr;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldWorkingIndicator.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldListID.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldCxlRejResponseTo.offset = -1;
     fieldCxlRejReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageLogon::reset(){
     buf = nullptr;
     fieldEncryptMethod.offset = -1;
     fieldHeartBtInt.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldResetSeqNumFlag.offset = -1;
     fieldNextExpectedMsgSeqNum.offset = -1;
     fieldMaxMessageSize.offset = -1;
     for( auto g = groupsMsgTypes.begin(); g != groupsMsgTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTestMessageIndicator.offset = -1;
     fieldUsername.offset = -1;
     fieldPassword.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNews::reset(){
     buf = nullptr;
     fieldOrigTime.offset = -1;
     fieldUrgency.offset = -1;
     fieldHeadline.offset = -1;
     fieldEncodedHeadlineLen.offset = -1;
     fieldEncodedHeadline.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLinesOfText.begin(); g != groupsLinesOfText.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldURLLink.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageEmail::reset(){
     buf = nullptr;
     fieldEmailThreadID.offset = -1;
     fieldEmailType.offset = -1;
     fieldOrigTime.offset = -1;
     fieldSubject.offset = -1;
     fieldEncodedSubjectLen.offset = -1;
     fieldEncodedSubject.offset = -1;
     for( auto g = groupsRoutingIDs.begin(); g != groupsRoutingIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsLinesOfText.begin(); g != groupsLinesOfText.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderSingle::reset(){
     buf = nullptr;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     fieldSide.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldPrice2.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderList::reset(){
     buf = nullptr;
     fieldListID.offset = -1;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldProgRptReqs.offset = -1;
     fieldBidType.offset = -1;
     fieldProgPeriodInterval.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldListExecInstType.offset = -1;
     fieldListExecInst.offset = -1;
     fieldEncodedListExecInstLen.offset = -1;
     fieldEncodedListExecInst.offset = -1;
     fieldAllowableOneSidednessPct.offset = -1;
     fieldAllowableOneSidednessValue.offset = -1;
     fieldAllowableOneSidednessCurr.offset = -1;
     fieldTotNoOrders.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelRequest::reset(){
     buf = nullptr;
     fieldOrigClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldListID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldComplianceID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderCancelReplaceRequest::reset(){
     buf = nullptr;
     fieldOrderID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldListID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldCurrency.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldPrice2.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderStatusRequest::reset(){
     buf = nullptr;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdStatusReqID.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAllocationInstruction::reset(){
     buf = nullptr;
     fieldAllocID.offset = -1;
     fieldAllocTransType.offset = -1;
     fieldAllocType.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldRefAllocID.offset = -1;
     fieldAllocCancReplaceReason.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldAllocLinkID.offset = -1;
     fieldAllocLinkType.offset = -1;
     fieldBookingRefID.offset = -1;
     fieldAllocNoOrdersType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPreviouslyReported.offset = -1;
     fieldReversalIndicator.offset = -1;
     fieldMatchType.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldCurrency.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldBookingType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldAutoAcceptIndicator.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldTotalAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldLegalConfirm.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldTotNoAllocs.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageListCancelRequest::reset(){
     buf = nullptr;
     fieldListID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListExecute::reset(){
     buf = nullptr;
     fieldListID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldBidID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListStatusRequest::reset(){
     buf = nullptr;
     fieldListID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageListStatus::reset(){
     buf = nullptr;
     fieldListID.offset = -1;
     fieldListStatusType.offset = -1;
     fieldNoRpts.offset = -1;
     fieldListOrderStatus.offset = -1;
     fieldRptSeq.offset = -1;
     fieldListStatusText.offset = -1;
     fieldEncodedListStatusTextLen.offset = -1;
     fieldEncodedListStatusText.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTotNoOrders.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationInstructionAck::reset(){
     buf = nullptr;
     fieldAllocID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecondaryAllocID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldAllocType.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageDontKnowTrade::reset(){
     buf = nullptr;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldExecID.offset = -1;
     fieldDKReason.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteRequest::reset(){
     buf = nullptr;
     fieldQuoteReqID.offset = -1;
     fieldRFQReqID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderCapacity.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuote::reset(){
     buf = nullptr;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommType.offset = -1;
     fieldCommission.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSettlementInstructions::reset(){
     buf = nullptr;
     fieldSettlInstMsgID.offset = -1;
     fieldSettlInstReqID.offset = -1;
     fieldSettlInstMode.offset = -1;
     fieldSettlInstReqRejCode.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldClOrdID.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsSettlInst.begin(); g != groupsSettlInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageMarketDataRequest::reset(){
     buf = nullptr;
     fieldMDReqID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldMarketDepth.offset = -1;
     fieldMDUpdateType.offset = -1;
     fieldAggregatedBook.offset = -1;
     fieldOpenCloseSettlFlag.offset = -1;
     fieldScope.offset = -1;
     fieldMDImplicitDelete.offset = -1;
     for( auto g = groupsMDEntryTypes.begin(); g != groupsMDEntryTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueAction.offset = -1;
     fieldApplQueueMax.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataSnapshotFullRefresh::reset(){
     buf = nullptr;
     fieldMDReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldFinancialStatus.offset = -1;
     fieldCorporateAction.offset = -1;
     fieldNetChgPrevDay.offset = -1;
     for( auto g = groupsMDEntries.begin(); g != groupsMDEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueDepth.offset = -1;
     fieldApplQueueResolution.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataIncrementalRefresh::reset(){
     buf = nullptr;
     fieldMDReqID.offset = -1;
     for( auto g = groupsMDEntries.begin(); g != groupsMDEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldApplQueueDepth.offset = -1;
     fieldApplQueueResolution.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMarketDataRequestReject::reset(){
     buf = nullptr;
     fieldMDReqID.offset = -1;
     fieldMDReqRejReason.offset = -1;
     for( auto g = groupsAltMDSource.begin(); g != groupsAltMDSource.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteCancel::reset(){
     buf = nullptr;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteCancelType.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     for( auto g = groupsQuoteEntries.begin(); g != groupsQuoteEntries.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageQuoteStatusRequest::reset(){
     buf = nullptr;
     fieldQuoteStatusReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMassQuoteAcknowledgement::reset(){
     buf = nullptr;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteStatus.offset = -1;
     fieldQuoteRejectReason.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsQuoteSets.begin(); g != groupsQuoteSets.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageSecurityDefinitionRequest::reset(){
     buf = nullptr;
     fieldSecurityReqID.offset = -1;
     fieldSecurityRequestType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpirationCycle.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityDefinition::reset(){
     buf = nullptr;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityResponseType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpirationCycle.offset = -1;
     fieldRoundLot.offset = -1;
     fieldMinTradeVol.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityStatusRequest::reset(){
     buf = nullptr;
     fieldSecurityStatusReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityStatus::reset(){
     buf = nullptr;
     fieldSecurityStatusReqID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldSecurityTradingStatus.offset = -1;
     fieldFinancialStatus.offset = -1;
     fieldCorporateAction.offset = -1;
     fieldHaltReasonChar.offset = -1;
     fieldInViewOfCommon.offset = -1;
     fieldDueToRelated.offset = -1;
     fieldBuyVolume.offset = -1;
     fieldSellVolume.offset = -1;
     fieldHighPx.offset = -1;
     fieldLowPx.offset = -1;
     fieldLastPx.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAdjustment.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradingSessionStatusRequest::reset(){
     buf = nullptr;
     fieldTradSesReqID.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTradSesMethod.offset = -1;
     fieldTradSesMode.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradingSessionStatus::reset(){
     buf = nullptr;
     fieldTradSesReqID.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTradSesMethod.offset = -1;
     fieldTradSesMode.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldTradSesStatus.offset = -1;
     fieldTradSesStatusRejReason.offset = -1;
     fieldTradSesStartTime.offset = -1;
     fieldTradSesOpenTime.offset = -1;
     fieldTradSesPreCloseTime.offset = -1;
     fieldTradSesCloseTime.offset = -1;
     fieldTradSesEndTime.offset = -1;
     fieldTotalVolumeTraded.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMassQuote::reset(){
     buf = nullptr;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteType.offset = -1;
     fieldQuoteResponseLevel.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDefBidSize.offset = -1;
     fieldDefOfferSize.offset = -1;
     for( auto g = groupsQuoteSets.begin(); g != groupsQuoteSets.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageBusinessMessageReject::reset(){
     buf = nullptr;
     fieldRefSeqNum.offset = -1;
     fieldRefMsgType.offset = -1;
     fieldBusinessRejectRefID.offset = -1;
     fieldBusinessRejectReason.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageBidRequest::reset(){
     buf = nullptr;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     fieldBidRequestTransType.offset = -1;
     fieldListName.offset = -1;
     fieldTotNoRelatedSym.offset = -1;
     fieldBidType.offset = -1;
     fieldNumTickets.offset = -1;
     fieldCurrency.offset = -1;
     fieldSideValue1.offset = -1;
     fieldSideValue2.offset = -1;
     for( auto g = groupsBidDescriptors.begin(); g != groupsBidDescriptors.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsBidComponents.begin(); g != groupsBidComponents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLiquidityIndType.offset = -1;
     fieldWtAverageLiquidity.offset = -1;
     fieldExchangeForPhysical.offset = -1;
     fieldOutMainCntryUIndex.offset = -1;
     fieldCrossPercent.offset = -1;
     fieldProgRptReqs.offset = -1;
     fieldProgPeriodInterval.offset = -1;
     fieldIncTaxInd.offset = -1;
     fieldForexReq.offset = -1;
     fieldNumBidders.offset = -1;
     fieldTradeDate.offset = -1;
     fieldBidTradeType.offset = -1;
     fieldBasisPxType.offset = -1;
     fieldStrikeTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageBidResponse::reset(){
     buf = nullptr;
     fieldBidID.offset = -1;
     fieldClientBidID.offset = -1;
     for( auto g = groupsBidComponents.begin(); g != groupsBidComponents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageListStrikePrice::reset(){
     buf = nullptr;
     fieldListID.offset = -1;
     fieldTotNoStrikes.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsStrikes.begin(); g != groupsStrikes.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageXMLnonFIX::reset(){
     buf = nullptr;
     fieldCheckSum.offset = -1;
}

void MessageRegistrationInstructions::reset(){
     buf = nullptr;
     fieldRegistID.offset = -1;
     fieldRegistTransType.offset = -1;
     fieldRegistRefID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldRegistAcctType.offset = -1;
     fieldTaxAdvantageType.offset = -1;
     fieldOwnershipType.offset = -1;
     for( auto g = groupsRegistDtls.begin(); g != groupsRegistDtls.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsDistribInsts.begin(); g != groupsDistribInsts.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageRegistrationInstructionsResponse::reset(){
     buf = nullptr;
     fieldRegistID.offset = -1;
     fieldRegistTransType.offset = -1;
     fieldRegistRefID.offset = -1;
     fieldClOrdID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldRegistStatus.offset = -1;
     fieldRegistRejReasonCode.offset = -1;
     fieldRegistRejReasonText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassCancelRequest::reset(){
     buf = nullptr;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldMassCancelRequestType.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassCancelReport::reset(){
     buf = nullptr;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldMassCancelRequestType.offset = -1;
     fieldMassCancelResponse.offset = -1;
     fieldMassCancelRejectReason.offset = -1;
     fieldTotalAffectedOrders.offset = -1;
     for( auto g = groupsAffectedOrders.begin(); g != groupsAffectedOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldTransactTime.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNewOrderCross::reset(){
     buf = nullptr;
     fieldCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldPrevClosePx.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCrossOrderCancelReplaceRequest::reset(){
     buf = nullptr;
     fieldOrderID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldPrevClosePx.offset = -1;
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCrossOrderCancelRequest::reset(){
     buf = nullptr;
     fieldOrderID.offset = -1;
     fieldCrossID.offset = -1;
     fieldOrigCrossID.offset = -1;
     fieldCrossType.offset = -1;
     fieldCrossPrioritization.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityTypeRequest::reset(){
     buf = nullptr;
     fieldSecurityReqID.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityTypes::reset(){
     buf = nullptr;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityResponseType.offset = -1;
     fieldTotNoSecurityTypes.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsSecurityTypes.begin(); g != groupsSecurityTypes.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityListRequest::reset(){
     buf = nullptr;
     fieldSecurityReqID.offset = -1;
     fieldSecurityListRequestType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSecurityList::reset(){
     buf = nullptr;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityRequestResult.offset = -1;
     fieldTotNoRelatedSym.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageDerivativeSecurityListRequest::reset(){
     buf = nullptr;
     fieldSecurityReqID.offset = -1;
     fieldSecurityListRequestType.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecuritySubType.offset = -1;
     fieldCurrency.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageDerivativeSecurityList::reset(){
     buf = nullptr;
     fieldSecurityReqID.offset = -1;
     fieldSecurityResponseID.offset = -1;
     fieldSecurityRequestResult.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTotNoRelatedSym.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageNewOrderMultileg::reset(){
     buf = nullptr;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldMultiLegRptTypeReq.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageMultilegOrderCancelReplace::reset(){
     buf = nullptr;
     fieldOrderID.offset = -1;
     fieldOrigClOrdID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     fieldClOrdLinkID.offset = -1;
     fieldOrigOrdModTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeOriginationDate.offset = -1;
     fieldTradeDate.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldDayBookingInst.offset = -1;
     fieldBookingUnit.offset = -1;
     fieldPreallocMethod.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldCashMargin.offset = -1;
     fieldClearingFeeIndicator.offset = -1;
     fieldHandlInst.offset = -1;
     fieldExecInst.offset = -1;
     fieldMinQty.offset = -1;
     fieldMaxFloor.offset = -1;
     fieldExDestination.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProcessCode.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrevClosePx.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldLocateReqd.offset = -1;
     fieldTransactTime.offset = -1;
     fieldQtyType.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldOrdType.offset = -1;
     fieldPriceType.offset = -1;
     fieldPrice.offset = -1;
     fieldStopPx.offset = -1;
     fieldCurrency.offset = -1;
     fieldComplianceID.offset = -1;
     fieldSolicitedFlag.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldTimeInForce.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireDate.offset = -1;
     fieldExpireTime.offset = -1;
     fieldGTBookingInst.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldForexReq.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldBookingType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldCoveredOrUncovered.offset = -1;
     fieldMaxShow.offset = -1;
     fieldPegOffsetValue.offset = -1;
     fieldPegMoveType.offset = -1;
     fieldPegOffsetType.offset = -1;
     fieldPegLimitType.offset = -1;
     fieldPegRoundDirection.offset = -1;
     fieldPegScope.offset = -1;
     fieldDiscretionInst.offset = -1;
     fieldDiscretionOffsetValue.offset = -1;
     fieldDiscretionMoveType.offset = -1;
     fieldDiscretionOffsetType.offset = -1;
     fieldDiscretionLimitType.offset = -1;
     fieldDiscretionRoundDirection.offset = -1;
     fieldDiscretionScope.offset = -1;
     fieldTargetStrategy.offset = -1;
     fieldTargetStrategyParameters.offset = -1;
     fieldParticipationRate.offset = -1;
     fieldCancellationRights.offset = -1;
     fieldMoneyLaunderingStatus.offset = -1;
     fieldRegistID.offset = -1;
     fieldDesignation.offset = -1;
     fieldMultiLegRptTypeReq.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportRequest::reset(){
     buf = nullptr;
     fieldTradeRequestID.offset = -1;
     fieldTradeRequestType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeReportID.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldExecID.offset = -1;
     fieldExecType.offset = -1;
     fieldOrderID.offset = -1;
     fieldClOrdID.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsDates.begin(); g != groupsDates.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingBusinessDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldTimeBracket.offset = -1;
     fieldSide.offset = -1;
     fieldMultiLegReportingType.offset = -1;
     fieldTradeInputSource.offset = -1;
     fieldTradeInputDevice.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReport::reset(){
     buf = nullptr;
     fieldTradeReportID.offset = -1;
     fieldTradeReportTransType.offset = -1;
     fieldTradeReportType.offset = -1;
     fieldTradeRequestID.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldExecType.offset = -1;
     fieldTotNumTradeReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldExecID.offset = -1;
     fieldOrdStatus.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldExecRestatementReason.offset = -1;
     fieldPreviouslyReported.offset = -1;
     fieldPriceType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldQtyType.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingTradingSessionID.offset = -1;
     fieldUnderlyingTradingSessionSubID.offset = -1;
     fieldLastQty.offset = -1;
     fieldLastPx.offset = -1;
     fieldLastParPx.offset = -1;
     fieldLastSpotRate.offset = -1;
     fieldLastForwardPoints.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeDate.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldAvgPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldAvgPxIndicator.offset = -1;
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMultiLegReportingType.offset = -1;
     fieldTradeLegRefID.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldMatchType.offset = -1;
     for( auto g = groupsSides.begin(); g != groupsSides.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCopyMsgIndicator.offset = -1;
     fieldPublishTrdIndicator.offset = -1;
     fieldShortSaleReason.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageOrderMassStatusRequest::reset(){
     buf = nullptr;
     fieldMassStatusReqID.offset = -1;
     fieldMassStatusReqType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldUnderlyingSymbol.offset = -1;
     fieldUnderlyingSymbolSfx.offset = -1;
     fieldUnderlyingSecurityID.offset = -1;
     fieldUnderlyingSecurityIDSource.offset = -1;
     for( auto g = groupsUnderlyingSecurityAltID.begin(); g != groupsUnderlyingSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldUnderlyingProduct.offset = -1;
     fieldUnderlyingCFICode.offset = -1;
     fieldUnderlyingSecurityType.offset = -1;
     fieldUnderlyingSecuritySubType.offset = -1;
     fieldUnderlyingMaturityMonthYear.offset = -1;
     fieldUnderlyingMaturityDate.offset = -1;
     fieldUnderlyingPutOrCall.offset = -1;
     fieldUnderlyingCouponPaymentDate.offset = -1;
     fieldUnderlyingIssueDate.offset = -1;
     fieldUnderlyingRepoCollateralSecurityType.offset = -1;
     fieldUnderlyingRepurchaseTerm.offset = -1;
     fieldUnderlyingRepurchaseRate.offset = -1;
     fieldUnderlyingFactor.offset = -1;
     fieldUnderlyingCreditRating.offset = -1;
     fieldUnderlyingInstrRegistry.offset = -1;
     fieldUnderlyingCountryOfIssue.offset = -1;
     fieldUnderlyingStateOrProvinceOfIssue.offset = -1;
     fieldUnderlyingLocaleOfIssue.offset = -1;
     fieldUnderlyingRedemptionDate.offset = -1;
     fieldUnderlyingStrikePrice.offset = -1;
     fieldUnderlyingStrikeCurrency.offset = -1;
     fieldUnderlyingOptAttribute.offset = -1;
     fieldUnderlyingContractMultiplier.offset = -1;
     fieldUnderlyingCouponRate.offset = -1;
     fieldUnderlyingSecurityExchange.offset = -1;
     fieldUnderlyingIssuer.offset = -1;
     fieldEncodedUnderlyingIssuerLen.offset = -1;
     fieldEncodedUnderlyingIssuer.offset = -1;
     fieldUnderlyingSecurityDesc.offset = -1;
     fieldEncodedUnderlyingSecurityDescLen.offset = -1;
     fieldEncodedUnderlyingSecurityDesc.offset = -1;
     fieldUnderlyingCPProgram.offset = -1;
     fieldUnderlyingCPRegType.offset = -1;
     fieldUnderlyingCurrency.offset = -1;
     fieldUnderlyingQty.offset = -1;
     fieldUnderlyingPx.offset = -1;
     fieldUnderlyingDirtyPrice.offset = -1;
     fieldUnderlyingEndPrice.offset = -1;
     fieldUnderlyingStartValue.offset = -1;
     fieldUnderlyingCurrentValue.offset = -1;
     fieldUnderlyingEndValue.offset = -1;
     for( auto g = groupsUnderlyingStips.begin(); g != groupsUnderlyingStips.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteRequestReject::reset(){
     buf = nullptr;
     fieldQuoteReqID.offset = -1;
     fieldRFQReqID.offset = -1;
     fieldQuoteRequestRejectReason.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRFQRequest::reset(){
     buf = nullptr;
     fieldRFQReqID.offset = -1;
     for( auto g = groupsRelatedSym.begin(); g != groupsRelatedSym.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSubscriptionRequestType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteStatusReport::reset(){
     buf = nullptr;
     fieldQuoteStatusReqID.offset = -1;
     fieldQuoteReqID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldExpireTime.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommType.offset = -1;
     fieldCommission.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldQuoteStatus.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageQuoteResponse::reset(){
     buf = nullptr;
     fieldQuoteRespID.offset = -1;
     fieldQuoteID.offset = -1;
     fieldQuoteRespType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldIOIID.offset = -1;
     fieldQuoteType.offset = -1;
     for( auto g = groupsQuoteQualifiers.begin(); g != groupsQuoteQualifiers.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldOrderQty.offset = -1;
     fieldCashOrderQty.offset = -1;
     fieldOrderPercent.offset = -1;
     fieldRoundingDirection.offset = -1;
     fieldRoundingModulus.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDate2.offset = -1;
     fieldOrderQty2.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldBidPx.offset = -1;
     fieldOfferPx.offset = -1;
     fieldMktBidPx.offset = -1;
     fieldMktOfferPx.offset = -1;
     fieldMinBidSize.offset = -1;
     fieldBidSize.offset = -1;
     fieldMinOfferSize.offset = -1;
     fieldOfferSize.offset = -1;
     fieldValidUntilTime.offset = -1;
     fieldBidSpotRate.offset = -1;
     fieldOfferSpotRate.offset = -1;
     fieldBidForwardPoints.offset = -1;
     fieldOfferForwardPoints.offset = -1;
     fieldMidPx.offset = -1;
     fieldBidYield.offset = -1;
     fieldMidYield.offset = -1;
     fieldOfferYield.offset = -1;
     fieldTransactTime.offset = -1;
     fieldOrdType.offset = -1;
     fieldBidForwardPoints2.offset = -1;
     fieldOfferForwardPoints2.offset = -1;
     fieldSettlCurrBidFxRate.offset = -1;
     fieldSettlCurrOfferFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldExDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageConfirmation::reset(){
     buf = nullptr;
     fieldConfirmID.offset = -1;
     fieldConfirmRefID.offset = -1;
     fieldConfirmReqID.offset = -1;
     fieldConfirmTransType.offset = -1;
     fieldConfirmType.offset = -1;
     fieldCopyMsgIndicator.offset = -1;
     fieldLegalConfirm.offset = -1;
     fieldConfirmStatus.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocID.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldIndividualAllocID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldTradeDate.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldAllocQty.offset = -1;
     fieldQtyType.offset = -1;
     fieldSide.offset = -1;
     fieldCurrency.offset = -1;
     fieldLastMkt.offset = -1;
     for( auto g = groupsCapacities.begin(); g != groupsCapacities.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldAllocAccountType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldReportedPx.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldProcessCode.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldExDate.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldMaturityNetMoney.offset = -1;
     fieldSettlCurrAmt.offset = -1;
     fieldSettlCurrency.offset = -1;
     fieldSettlCurrFxRate.offset = -1;
     fieldSettlCurrFxRateCalc.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCommission.offset = -1;
     fieldCommType.offset = -1;
     fieldCommCurrency.offset = -1;
     fieldFundRenewWaiv.offset = -1;
     fieldSharedCommission.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessagePositionMaintenanceRequest::reset(){
     buf = nullptr;
     fieldPosReqID.offset = -1;
     fieldPosTransType.offset = -1;
     fieldPosMaintAction.offset = -1;
     fieldOrigPosReqRefID.offset = -1;
     fieldPosMaintRptRefID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdjustmentType.offset = -1;
     fieldContraryInstructionIndicator.offset = -1;
     fieldPriorSpreadIndicator.offset = -1;
     fieldThresholdAmount.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessagePositionMaintenanceReport::reset(){
     buf = nullptr;
     fieldPosMaintRptID.offset = -1;
     fieldPosTransType.offset = -1;
     fieldPosReqID.offset = -1;
     fieldPosMaintAction.offset = -1;
     fieldOrigPosReqRefID.offset = -1;
     fieldPosMaintStatus.offset = -1;
     fieldPosMaintResult.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAdjustmentType.offset = -1;
     fieldThresholdAmount.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRequestForPositions::reset(){
     buf = nullptr;
     fieldPosReqID.offset = -1;
     fieldPosReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsTradingSessions.begin(); g != groupsTradingSessions.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTransactTime.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageRequestForPositionsAck::reset(){
     buf = nullptr;
     fieldPosMaintRptID.offset = -1;
     fieldPosReqID.offset = -1;
     fieldTotalNumPosReports.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldPosReqResult.offset = -1;
     fieldPosReqStatus.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessagePositionReport::reset(){
     buf = nullptr;
     fieldPosMaintRptID.offset = -1;
     fieldPosReqID.offset = -1;
     fieldPosReqType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTotalNumPosReports.offset = -1;
     fieldUnsolicitedIndicator.offset = -1;
     fieldPosReqResult.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     fieldSettlPrice.offset = -1;
     fieldSettlPriceType.offset = -1;
     fieldPriorSettlPrice.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldRegistStatus.offset = -1;
     fieldDeliveryDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportRequestAck::reset(){
     buf = nullptr;
     fieldTradeRequestID.offset = -1;
     fieldTradeRequestType.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTotNumTradeReports.offset = -1;
     fieldTradeRequestResult.offset = -1;
     fieldTradeRequestStatus.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMultiLegReportingType.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageTradeCaptureReportAck::reset(){
     buf = nullptr;
     fieldTradeReportID.offset = -1;
     fieldTradeReportTransType.offset = -1;
     fieldTradeReportType.offset = -1;
     fieldTrdType.offset = -1;
     fieldTrdSubType.offset = -1;
     fieldSecondaryTrdType.offset = -1;
     fieldTransferReason.offset = -1;
     fieldExecType.offset = -1;
     fieldTradeReportRefID.offset = -1;
     fieldSecondaryTradeReportRefID.offset = -1;
     fieldTrdRptStatus.offset = -1;
     fieldTradeReportRejectReason.offset = -1;
     fieldSecondaryTradeReportID.offset = -1;
     fieldSubscriptionRequestType.offset = -1;
     fieldTradeLinkID.offset = -1;
     fieldTrdMatchID.offset = -1;
     fieldExecID.offset = -1;
     fieldSecondaryExecID.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldClearingFeeIndicator.offset = -1;
     fieldOrderCapacity.offset = -1;
     fieldOrderRestrictions.offset = -1;
     fieldCustOrderCapacity.offset = -1;
     fieldAccount.offset = -1;
     fieldAcctIDSource.offset = -1;
     fieldAccountType.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldPreallocMethod.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationReport::reset(){
     buf = nullptr;
     fieldAllocReportID.offset = -1;
     fieldAllocID.offset = -1;
     fieldAllocTransType.offset = -1;
     fieldAllocReportRefID.offset = -1;
     fieldAllocCancReplaceReason.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldAllocReportType.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldRefAllocID.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldAllocLinkID.offset = -1;
     fieldAllocLinkType.offset = -1;
     fieldBookingRefID.offset = -1;
     fieldAllocNoOrdersType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPreviouslyReported.offset = -1;
     fieldReversalIndicator.offset = -1;
     fieldMatchType.offset = -1;
     fieldSide.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldDeliveryForm.offset = -1;
     fieldPctAtRisk.offset = -1;
     for( auto g = groupsInstrAttrib.begin(); g != groupsInstrAttrib.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldLastMkt.offset = -1;
     fieldTradeOriginationDate.offset = -1;
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldPriceType.offset = -1;
     fieldAvgPx.offset = -1;
     fieldAvgParPx.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     fieldCurrency.offset = -1;
     fieldAvgPxPrecision.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldSettlType.offset = -1;
     fieldSettlDate.offset = -1;
     fieldBookingType.offset = -1;
     fieldGrossTradeAmt.offset = -1;
     fieldConcession.offset = -1;
     fieldTotalTakedown.offset = -1;
     fieldNetMoney.offset = -1;
     fieldPositionEffect.offset = -1;
     fieldAutoAcceptIndicator.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldNumDaysInterest.offset = -1;
     fieldAccruedInterestRate.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldTotalAccruedInterestAmt.offset = -1;
     fieldInterestAtMaturity.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldLegalConfirm.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldYieldType.offset = -1;
     fieldYield.offset = -1;
     fieldYieldCalcDate.offset = -1;
     fieldYieldRedemptionDate.offset = -1;
     fieldYieldRedemptionPrice.offset = -1;
     fieldYieldRedemptionPriceType.offset = -1;
     fieldTotNoAllocs.offset = -1;
     fieldLastFragment.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageAllocationReportAck::reset(){
     buf = nullptr;
     fieldAllocReportID.offset = -1;
     fieldAllocID.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSecondaryAllocID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocStatus.offset = -1;
     fieldAllocRejCode.offset = -1;
     fieldAllocReportType.offset = -1;
     fieldAllocIntermedReqType.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     for( auto g = groupsAllocs.begin(); g != groupsAllocs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageConfirmationAck::reset(){
     buf = nullptr;
     fieldConfirmID.offset = -1;
     fieldTradeDate.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAffirmStatus.offset = -1;
     fieldConfirmRejReason.offset = -1;
     fieldMatchStatus.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageSettlementInstructionRequest::reset(){
     buf = nullptr;
     fieldSettlInstReqID.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldSide.offset = -1;
     fieldProduct.offset = -1;
     fieldSecurityType.offset = -1;
     fieldCFICode.offset = -1;
     fieldEffectiveTime.offset = -1;
     fieldExpireTime.offset = -1;
     fieldLastUpdateTime.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageAssignmentReport::reset(){
     buf = nullptr;
     fieldAsgnRptID.offset = -1;
     fieldTotNumAssignmentReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPositions.begin(); g != groupsPositions.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsPosAmt.begin(); g != groupsPosAmt.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldThresholdAmount.offset = -1;
     fieldSettlPrice.offset = -1;
     fieldSettlPriceType.offset = -1;
     fieldUnderlyingSettlPrice.offset = -1;
     fieldExpireDate.offset = -1;
     fieldAssignmentMethod.offset = -1;
     fieldAssignmentUnit.offset = -1;
     fieldOpenInterest.offset = -1;
     fieldExerciseMethod.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralRequest::reset(){
     buf = nullptr;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldTransactTime.offset = -1;
     fieldExpireTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralAssignment::reset(){
     buf = nullptr;
     fieldCollAsgnID.offset = -1;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldCollAsgnTransType.offset = -1;
     fieldCollAsgnRefID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldExpireTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralResponse::reset(){
     buf = nullptr;
     fieldCollRespID.offset = -1;
     fieldCollAsgnID.offset = -1;
     fieldCollReqID.offset = -1;
     fieldCollAsgnReason.offset = -1;
     fieldCollAsgnTransType.offset = -1;
     fieldCollAsgnRespType.offset = -1;
     fieldCollAsgnRejectReason.offset = -1;
     fieldTransactTime.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralReport::reset(){
     buf = nullptr;
     fieldCollRptID.offset = -1;
     fieldCollInquiryID.offset = -1;
     fieldCollStatus.offset = -1;
     fieldTotNumReports.offset = -1;
     fieldLastRptRequested.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     for( auto g = groupsMiscFees.begin(); g != groupsMiscFees.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralInquiry::reset(){
     buf = nullptr;
     fieldCollInquiryID.offset = -1;
     for( auto g = groupsCollInquiryQualifier.begin(); g != groupsCollInquiryQualifier.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSubscriptionRequestType.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldMarginExcess.offset = -1;
     fieldTotalNetValue.offset = -1;
     fieldCashOutstanding.offset = -1;
     for( auto g = groupsTrdRegTimestamps.begin(); g != groupsTrdRegTimestamps.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSide.offset = -1;
     fieldPrice.offset = -1;
     fieldPriceType.offset = -1;
     fieldAccruedInterestAmt.offset = -1;
     fieldEndAccruedInterestAmt.offset = -1;
     fieldStartCash.offset = -1;
     fieldEndCash.offset = -1;
     fieldSpread.offset = -1;
     fieldBenchmarkCurveCurrency.offset = -1;
     fieldBenchmarkCurveName.offset = -1;
     fieldBenchmarkCurvePoint.offset = -1;
     fieldBenchmarkPrice.offset = -1;
     fieldBenchmarkPriceType.offset = -1;
     fieldBenchmarkSecurityID.offset = -1;
     fieldBenchmarkSecurityIDSource.offset = -1;
     for( auto g = groupsStipulations.begin(); g != groupsStipulations.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSettlDeliveryType.offset = -1;
     fieldStandInstDbType.offset = -1;
     fieldStandInstDbName.offset = -1;
     fieldStandInstDbID.offset = -1;
     for( auto g = groupsDlvyInst.begin(); g != groupsDlvyInst.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageNetworkCounterpartySystemStatusRequest::reset(){
     buf = nullptr;
     fieldNetworkRequestType.offset = -1;
     fieldNetworkRequestID.offset = -1;
     for( auto g = groupsCompIDs.begin(); g != groupsCompIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageNetworkCounterpartySystemStatusResponse::reset(){
     buf = nullptr;
     fieldNetworkStatusResponseType.offset = -1;
     fieldNetworkRequestID.offset = -1;
     fieldNetworkResponseID.offset = -1;
     fieldLastNetworkResponseID.offset = -1;
     for( auto g = groupsCompIDs.begin(); g != groupsCompIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldCheckSum.offset = -1;
}

void MessageUserRequest::reset(){
     buf = nullptr;
     fieldUserRequestID.offset = -1;
     fieldUserRequestType.offset = -1;
     fieldUsername.offset = -1;
     fieldPassword.offset = -1;
     fieldNewPassword.offset = -1;
     fieldRawDataLength.offset = -1;
     fieldRawData.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageUserResponse::reset(){
     buf = nullptr;
     fieldUserRequestID.offset = -1;
     fieldUsername.offset = -1;
     fieldUserStatus.offset = -1;
     fieldUserStatusText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageCollateralInquiryAck::reset(){
     buf = nullptr;
     fieldCollInquiryID.offset = -1;
     fieldCollInquiryStatus.offset = -1;
     fieldCollInquiryResult.offset = -1;
     for( auto g = groupsCollInquiryQualifier.begin(); g != groupsCollInquiryQualifier.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTotNumReports.offset = -1;
     for( auto g = groupsPartyIDs.begin(); g != groupsPartyIDs.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAccount.offset = -1;
     fieldAccountType.offset = -1;
     fieldClOrdID.offset = -1;
     fieldOrderID.offset = -1;
     fieldSecondaryOrderID.offset = -1;
     fieldSecondaryClOrdID.offset = -1;
     for( auto g = groupsExecs.begin(); g != groupsExecs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsTrades.begin(); g != groupsTrades.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldSymbol.offset = -1;
     fieldSymbolSfx.offset = -1;
     fieldSecurityID.offset = -1;
     fieldSecurityIDSource.offset = -1;
     for( auto g = groupsSecurityAltID.begin(); g != groupsSecurityAltID.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldProduct.offset = -1;
     fieldCFICode.offset = -1;
     fieldSecurityType.offset = -1;
     fieldSecuritySubType.offset = -1;
     fieldMaturityMonthYear.offset = -1;
     fieldMaturityDate.offset = -1;
     fieldPutOrCall.offset = -1;
     fieldCouponPaymentDate.offset = -1;
     fieldIssueDate.offset = -1;
     fieldRepoCollateralSecurityType.offset = -1;
     fieldRepurchaseTerm.offset = -1;
     fieldRepurchaseRate.offset = -1;
     fieldFactor.offset = -1;
     fieldCreditRating.offset = -1;
     fieldInstrRegistry.offset = -1;
     fieldCountryOfIssue.offset = -1;
     fieldStateOrProvinceOfIssue.offset = -1;
     fieldLocaleOfIssue.offset = -1;
     fieldRedemptionDate.offset = -1;
     fieldStrikePrice.offset = -1;
     fieldStrikeCurrency.offset = -1;
     fieldOptAttribute.offset = -1;
     fieldContractMultiplier.offset = -1;
     fieldCouponRate.offset = -1;
     fieldSecurityExchange.offset = -1;
     fieldIssuer.offset = -1;
     fieldEncodedIssuerLen.offset = -1;
     fieldEncodedIssuer.offset = -1;
     fieldSecurityDesc.offset = -1;
     fieldEncodedSecurityDescLen.offset = -1;
     fieldEncodedSecurityDesc.offset = -1;
     fieldPool.offset = -1;
     fieldContractSettlMonth.offset = -1;
     fieldCPProgram.offset = -1;
     fieldCPRegType.offset = -1;
     for( auto g = groupsEvents.begin(); g != groupsEvents.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldDatedDate.offset = -1;
     fieldInterestAccrualDate.offset = -1;
     fieldAgreementDesc.offset = -1;
     fieldAgreementID.offset = -1;
     fieldAgreementDate.offset = -1;
     fieldAgreementCurrency.offset = -1;
     fieldTerminationType.offset = -1;
     fieldStartDate.offset = -1;
     fieldEndDate.offset = -1;
     fieldDeliveryType.offset = -1;
     fieldMarginRatio.offset = -1;
     fieldSettlDate.offset = -1;
     fieldQuantity.offset = -1;
     fieldQtyType.offset = -1;
     fieldCurrency.offset = -1;
     for( auto g = groupsLegs.begin(); g != groupsLegs.end() and g->getMessageBuffer(); ++g ) g->reset();
     for( auto g = groupsUnderlyings.begin(); g != groupsUnderlyings.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldTradingSessionID.offset = -1;
     fieldTradingSessionSubID.offset = -1;
     fieldSettlSessID.offset = -1;
     fieldSettlSessSubID.offset = -1;
     fieldClearingBusinessDate.offset = -1;
     fieldResponseTransportType.offset = -1;
     fieldResponseDestination.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}

void MessageConfirmationRequest::reset(){
     buf = nullptr;
     fieldConfirmReqID.offset = -1;
     fieldConfirmType.offset = -1;
     for( auto g = groupsOrders.begin(); g != groupsOrders.end() and g->getMessageBuffer(); ++g ) g->reset();
     fieldAllocID.offset = -1;
     fieldSecondaryAllocID.offset = -1;
     fieldIndividualAllocID.offset = -1;
     fieldTransactTime.offset = -1;
     fieldAllocAccount.offset = -1;
     fieldAllocAcctIDSource.offset = -1;
     fieldAllocAccountType.offset = -1;
     fieldText.offset = -1;
     fieldEncodedTextLen.offset = -1;
     fieldEncodedText.offset = -1;
     fieldCheckSum.offset = -1;
}


// -------------------------------------- ParserDispatcher ----------------------------------------


const char * ParserDispatcher::parseAndDipatch( const char * buf, unsigned len, bool resetMessage )
{
    if( resetMessage )
    {
        _msgHeader.reset();
    }
    offset_t pos = _msgHeader.scan( buf, len );

    unsigned bodyLength = _msgHeader.getBodyLength();
    const char * endOfMessage = _msgHeader.ptrToMsgType() + bodyLength + 4; // 7 for checkSum - 3 for msg type tag
    if( endOfMessage - buf > len )
    {
        return nullptr;
    }

    const raw_enum_t msgType = toRawEnum( _msgHeader.ptrToMsgType() );
    if( ignoreMessage( msgType ) )
    {
      return endOfMessage;
    }

    buf += pos;
    switch( msgType )
    {


// case-begin-_
      case MsgTypeRaw__ : {
       if( resetMessage ) _msgHeader.reset();
       pos = _msgHeader.scan( buf, len - pos );
       onMessage( _msgHeader );
       break;
      }
// case-end-_


// case-begin-HEARTBEAT
      case MsgTypeRaw_HEARTBEAT : {
       if( resetMessage ) _msgHeartbeat.reset();
       pos = _msgHeartbeat.scan( buf, len - pos );
       onMessage( _msgHeartbeat );
       break;
      }
// case-end-HEARTBEAT


// case-begin-TEST_REQUEST
      case MsgTypeRaw_TEST_REQUEST : {
       if( resetMessage ) _msgTestRequest.reset();
       pos = _msgTestRequest.scan( buf, len - pos );
       onMessage( _msgTestRequest );
       break;
      }
// case-end-TEST_REQUEST


// case-begin-RESEND_REQUEST
      case MsgTypeRaw_RESEND_REQUEST : {
       if( resetMessage ) _msgResendRequest.reset();
       pos = _msgResendRequest.scan( buf, len - pos );
       onMessage( _msgResendRequest );
       break;
      }
// case-end-RESEND_REQUEST


// case-begin-REJECT
      case MsgTypeRaw_REJECT : {
       if( resetMessage ) _msgReject.reset();
       pos = _msgReject.scan( buf, len - pos );
       onMessage( _msgReject );
       break;
      }
// case-end-REJECT


// case-begin-SEQUENCE_RESET
      case MsgTypeRaw_SEQUENCE_RESET : {
       if( resetMessage ) _msgSequenceReset.reset();
       pos = _msgSequenceReset.scan( buf, len - pos );
       onMessage( _msgSequenceReset );
       break;
      }
// case-end-SEQUENCE_RESET


// case-begin-LOGOUT
      case MsgTypeRaw_LOGOUT : {
       if( resetMessage ) _msgLogout.reset();
       pos = _msgLogout.scan( buf, len - pos );
       onMessage( _msgLogout );
       break;
      }
// case-end-LOGOUT


// case-begin-INDICATION_OF_INTEREST
      case MsgTypeRaw_INDICATION_OF_INTEREST : {
       if( resetMessage ) _msgIOI.reset();
       pos = _msgIOI.scan( buf, len - pos );
       onMessage( _msgIOI );
       break;
      }
// case-end-INDICATION_OF_INTEREST


// case-begin-ADVERTISEMENT
      case MsgTypeRaw_ADVERTISEMENT : {
       if( resetMessage ) _msgAdvertisement.reset();
       pos = _msgAdvertisement.scan( buf, len - pos );
       onMessage( _msgAdvertisement );
       break;
      }
// case-end-ADVERTISEMENT


// case-begin-EXECUTION_REPORT
      case MsgTypeRaw_EXECUTION_REPORT : {
       if( resetMessage ) _msgExecutionReport.reset();
       pos = _msgExecutionReport.scan( buf, len - pos );
       onMessage( _msgExecutionReport );
       break;
      }
// case-end-EXECUTION_REPORT


// case-begin-ORDER_CANCEL_REJECT
      case MsgTypeRaw_ORDER_CANCEL_REJECT : {
       if( resetMessage ) _msgOrderCancelReject.reset();
       pos = _msgOrderCancelReject.scan( buf, len - pos );
       onMessage( _msgOrderCancelReject );
       break;
      }
// case-end-ORDER_CANCEL_REJECT


// case-begin-LOGON
      case MsgTypeRaw_LOGON : {
       if( resetMessage ) _msgLogon.reset();
       pos = _msgLogon.scan( buf, len - pos );
       onMessage( _msgLogon );
       break;
      }
// case-end-LOGON


// case-begin-NEWS
      case MsgTypeRaw_NEWS : {
       if( resetMessage ) _msgNews.reset();
       pos = _msgNews.scan( buf, len - pos );
       onMessage( _msgNews );
       break;
      }
// case-end-NEWS


// case-begin-EMAIL
      case MsgTypeRaw_EMAIL : {
       if( resetMessage ) _msgEmail.reset();
       pos = _msgEmail.scan( buf, len - pos );
       onMessage( _msgEmail );
       break;
      }
// case-end-EMAIL


// case-begin-ORDER_SINGLE
      case MsgTypeRaw_ORDER_SINGLE : {
       if( resetMessage ) _msgNewOrderSingle.reset();
       pos = _msgNewOrderSingle.scan( buf, len - pos );
       onMessage( _msgNewOrderSingle );
       break;
      }
// case-end-ORDER_SINGLE


// case-begin-ORDER_LIST
      case MsgTypeRaw_ORDER_LIST : {
       if( resetMessage ) _msgNewOrderList.reset();
       pos = _msgNewOrderList.scan( buf, len - pos );
       onMessage( _msgNewOrderList );
       break;
      }
// case-end-ORDER_LIST


// case-begin-ORDER_CANCEL_REQUEST
      case MsgTypeRaw_ORDER_CANCEL_REQUEST : {
       if( resetMessage ) _msgOrderCancelRequest.reset();
       pos = _msgOrderCancelRequest.scan( buf, len - pos );
       onMessage( _msgOrderCancelRequest );
       break;
      }
// case-end-ORDER_CANCEL_REQUEST


// case-begin-ORDER_CANCEL_REPLACE_REQUEST
      case MsgTypeRaw_ORDER_CANCEL_REPLACE_REQUEST : {
       if( resetMessage ) _msgOrderCancelReplaceRequest.reset();
       pos = _msgOrderCancelReplaceRequest.scan( buf, len - pos );
       onMessage( _msgOrderCancelReplaceRequest );
       break;
      }
// case-end-ORDER_CANCEL_REPLACE_REQUEST


// case-begin-ORDER_STATUS_REQUEST
      case MsgTypeRaw_ORDER_STATUS_REQUEST : {
       if( resetMessage ) _msgOrderStatusRequest.reset();
       pos = _msgOrderStatusRequest.scan( buf, len - pos );
       onMessage( _msgOrderStatusRequest );
       break;
      }
// case-end-ORDER_STATUS_REQUEST


// case-begin-ALLOCATION_INSTRUCTION
      case MsgTypeRaw_ALLOCATION_INSTRUCTION : {
       if( resetMessage ) _msgAllocationInstruction.reset();
       pos = _msgAllocationInstruction.scan( buf, len - pos );
       onMessage( _msgAllocationInstruction );
       break;
      }
// case-end-ALLOCATION_INSTRUCTION


// case-begin-LIST_CANCEL_REQUEST
      case MsgTypeRaw_LIST_CANCEL_REQUEST : {
       if( resetMessage ) _msgListCancelRequest.reset();
       pos = _msgListCancelRequest.scan( buf, len - pos );
       onMessage( _msgListCancelRequest );
       break;
      }
// case-end-LIST_CANCEL_REQUEST


// case-begin-LIST_EXECUTE
      case MsgTypeRaw_LIST_EXECUTE : {
       if( resetMessage ) _msgListExecute.reset();
       pos = _msgListExecute.scan( buf, len - pos );
       onMessage( _msgListExecute );
       break;
      }
// case-end-LIST_EXECUTE


// case-begin-LIST_STATUS_REQUEST
      case MsgTypeRaw_LIST_STATUS_REQUEST : {
       if( resetMessage ) _msgListStatusRequest.reset();
       pos = _msgListStatusRequest.scan( buf, len - pos );
       onMessage( _msgListStatusRequest );
       break;
      }
// case-end-LIST_STATUS_REQUEST


// case-begin-LIST_STATUS
      case MsgTypeRaw_LIST_STATUS : {
       if( resetMessage ) _msgListStatus.reset();
       pos = _msgListStatus.scan( buf, len - pos );
       onMessage( _msgListStatus );
       break;
      }
// case-end-LIST_STATUS


// case-begin-ALLOCATION_INSTRUCTION_ACK
      case MsgTypeRaw_ALLOCATION_INSTRUCTION_ACK : {
       if( resetMessage ) _msgAllocationInstructionAck.reset();
       pos = _msgAllocationInstructionAck.scan( buf, len - pos );
       onMessage( _msgAllocationInstructionAck );
       break;
      }
// case-end-ALLOCATION_INSTRUCTION_ACK


// case-begin-DONT_KNOW_TRADE
      case MsgTypeRaw_DONT_KNOW_TRADE : {
       if( resetMessage ) _msgDontKnowTrade.reset();
       pos = _msgDontKnowTrade.scan( buf, len - pos );
       onMessage( _msgDontKnowTrade );
       break;
      }
// case-end-DONT_KNOW_TRADE


// case-begin-QUOTE_REQUEST
      case MsgTypeRaw_QUOTE_REQUEST : {
       if( resetMessage ) _msgQuoteRequest.reset();
       pos = _msgQuoteRequest.scan( buf, len - pos );
       onMessage( _msgQuoteRequest );
       break;
      }
// case-end-QUOTE_REQUEST


// case-begin-QUOTE
      case MsgTypeRaw_QUOTE : {
       if( resetMessage ) _msgQuote.reset();
       pos = _msgQuote.scan( buf, len - pos );
       onMessage( _msgQuote );
       break;
      }
// case-end-QUOTE


// case-begin-SETTLEMENT_INSTRUCTIONS
      case MsgTypeRaw_SETTLEMENT_INSTRUCTIONS : {
       if( resetMessage ) _msgSettlementInstructions.reset();
       pos = _msgSettlementInstructions.scan( buf, len - pos );
       onMessage( _msgSettlementInstructions );
       break;
      }
// case-end-SETTLEMENT_INSTRUCTIONS


// case-begin-MARKET_DATA_REQUEST
      case MsgTypeRaw_MARKET_DATA_REQUEST : {
       if( resetMessage ) _msgMarketDataRequest.reset();
       pos = _msgMarketDataRequest.scan( buf, len - pos );
       onMessage( _msgMarketDataRequest );
       break;
      }
// case-end-MARKET_DATA_REQUEST


// case-begin-MARKET_DATA_SNAPSHOT_FULL_REFRESH
      case MsgTypeRaw_MARKET_DATA_SNAPSHOT_FULL_REFRESH : {
       if( resetMessage ) _msgMarketDataSnapshotFullRefresh.reset();
       pos = _msgMarketDataSnapshotFullRefresh.scan( buf, len - pos );
       onMessage( _msgMarketDataSnapshotFullRefresh );
       break;
      }
// case-end-MARKET_DATA_SNAPSHOT_FULL_REFRESH


// case-begin-MARKET_DATA_INCREMENTAL_REFRESH
      case MsgTypeRaw_MARKET_DATA_INCREMENTAL_REFRESH : {
       if( resetMessage ) _msgMarketDataIncrementalRefresh.reset();
       pos = _msgMarketDataIncrementalRefresh.scan( buf, len - pos );
       onMessage( _msgMarketDataIncrementalRefresh );
       break;
      }
// case-end-MARKET_DATA_INCREMENTAL_REFRESH


// case-begin-MARKET_DATA_REQUEST_REJECT
      case MsgTypeRaw_MARKET_DATA_REQUEST_REJECT : {
       if( resetMessage ) _msgMarketDataRequestReject.reset();
       pos = _msgMarketDataRequestReject.scan( buf, len - pos );
       onMessage( _msgMarketDataRequestReject );
       break;
      }
// case-end-MARKET_DATA_REQUEST_REJECT


// case-begin-QUOTE_CANCEL
      case MsgTypeRaw_QUOTE_CANCEL : {
       if( resetMessage ) _msgQuoteCancel.reset();
       pos = _msgQuoteCancel.scan( buf, len - pos );
       onMessage( _msgQuoteCancel );
       break;
      }
// case-end-QUOTE_CANCEL


// case-begin-QUOTE_STATUS_REQUEST
      case MsgTypeRaw_QUOTE_STATUS_REQUEST : {
       if( resetMessage ) _msgQuoteStatusRequest.reset();
       pos = _msgQuoteStatusRequest.scan( buf, len - pos );
       onMessage( _msgQuoteStatusRequest );
       break;
      }
// case-end-QUOTE_STATUS_REQUEST


// case-begin-MASS_QUOTE_ACKNOWLEDGEMENT
      case MsgTypeRaw_MASS_QUOTE_ACKNOWLEDGEMENT : {
       if( resetMessage ) _msgMassQuoteAcknowledgement.reset();
       pos = _msgMassQuoteAcknowledgement.scan( buf, len - pos );
       onMessage( _msgMassQuoteAcknowledgement );
       break;
      }
// case-end-MASS_QUOTE_ACKNOWLEDGEMENT


// case-begin-SECURITY_DEFINITION_REQUEST
      case MsgTypeRaw_SECURITY_DEFINITION_REQUEST : {
       if( resetMessage ) _msgSecurityDefinitionRequest.reset();
       pos = _msgSecurityDefinitionRequest.scan( buf, len - pos );
       onMessage( _msgSecurityDefinitionRequest );
       break;
      }
// case-end-SECURITY_DEFINITION_REQUEST


// case-begin-SECURITY_DEFINITION
      case MsgTypeRaw_SECURITY_DEFINITION : {
       if( resetMessage ) _msgSecurityDefinition.reset();
       pos = _msgSecurityDefinition.scan( buf, len - pos );
       onMessage( _msgSecurityDefinition );
       break;
      }
// case-end-SECURITY_DEFINITION


// case-begin-SECURITY_STATUS_REQUEST
      case MsgTypeRaw_SECURITY_STATUS_REQUEST : {
       if( resetMessage ) _msgSecurityStatusRequest.reset();
       pos = _msgSecurityStatusRequest.scan( buf, len - pos );
       onMessage( _msgSecurityStatusRequest );
       break;
      }
// case-end-SECURITY_STATUS_REQUEST


// case-begin-SECURITY_STATUS
      case MsgTypeRaw_SECURITY_STATUS : {
       if( resetMessage ) _msgSecurityStatus.reset();
       pos = _msgSecurityStatus.scan( buf, len - pos );
       onMessage( _msgSecurityStatus );
       break;
      }
// case-end-SECURITY_STATUS


// case-begin-TRADING_SESSION_STATUS_REQUEST
      case MsgTypeRaw_TRADING_SESSION_STATUS_REQUEST : {
       if( resetMessage ) _msgTradingSessionStatusRequest.reset();
       pos = _msgTradingSessionStatusRequest.scan( buf, len - pos );
       onMessage( _msgTradingSessionStatusRequest );
       break;
      }
// case-end-TRADING_SESSION_STATUS_REQUEST


// case-begin-TRADING_SESSION_STATUS
      case MsgTypeRaw_TRADING_SESSION_STATUS : {
       if( resetMessage ) _msgTradingSessionStatus.reset();
       pos = _msgTradingSessionStatus.scan( buf, len - pos );
       onMessage( _msgTradingSessionStatus );
       break;
      }
// case-end-TRADING_SESSION_STATUS


// case-begin-MASS_QUOTE
      case MsgTypeRaw_MASS_QUOTE : {
       if( resetMessage ) _msgMassQuote.reset();
       pos = _msgMassQuote.scan( buf, len - pos );
       onMessage( _msgMassQuote );
       break;
      }
// case-end-MASS_QUOTE


// case-begin-BUSINESS_MESSAGE_REJECT
      case MsgTypeRaw_BUSINESS_MESSAGE_REJECT : {
       if( resetMessage ) _msgBusinessMessageReject.reset();
       pos = _msgBusinessMessageReject.scan( buf, len - pos );
       onMessage( _msgBusinessMessageReject );
       break;
      }
// case-end-BUSINESS_MESSAGE_REJECT


// case-begin-BID_REQUEST
      case MsgTypeRaw_BID_REQUEST : {
       if( resetMessage ) _msgBidRequest.reset();
       pos = _msgBidRequest.scan( buf, len - pos );
       onMessage( _msgBidRequest );
       break;
      }
// case-end-BID_REQUEST


// case-begin-BID_RESPONSE
      case MsgTypeRaw_BID_RESPONSE : {
       if( resetMessage ) _msgBidResponse.reset();
       pos = _msgBidResponse.scan( buf, len - pos );
       onMessage( _msgBidResponse );
       break;
      }
// case-end-BID_RESPONSE


// case-begin-LIST_STRIKE_PRICE
      case MsgTypeRaw_LIST_STRIKE_PRICE : {
       if( resetMessage ) _msgListStrikePrice.reset();
       pos = _msgListStrikePrice.scan( buf, len - pos );
       onMessage( _msgListStrikePrice );
       break;
      }
// case-end-LIST_STRIKE_PRICE


// case-begin-XML_MESSAGE
      case MsgTypeRaw_XML_MESSAGE : {
       if( resetMessage ) _msgXMLnonFIX.reset();
       pos = _msgXMLnonFIX.scan( buf, len - pos );
       onMessage( _msgXMLnonFIX );
       break;
      }
// case-end-XML_MESSAGE


// case-begin-REGISTRATION_INSTRUCTIONS
      case MsgTypeRaw_REGISTRATION_INSTRUCTIONS : {
       if( resetMessage ) _msgRegistrationInstructions.reset();
       pos = _msgRegistrationInstructions.scan( buf, len - pos );
       onMessage( _msgRegistrationInstructions );
       break;
      }
// case-end-REGISTRATION_INSTRUCTIONS


// case-begin-REGISTRATION_INSTRUCTIONS_RESPONSE
      case MsgTypeRaw_REGISTRATION_INSTRUCTIONS_RESPONSE : {
       if( resetMessage ) _msgRegistrationInstructionsResponse.reset();
       pos = _msgRegistrationInstructionsResponse.scan( buf, len - pos );
       onMessage( _msgRegistrationInstructionsResponse );
       break;
      }
// case-end-REGISTRATION_INSTRUCTIONS_RESPONSE


// case-begin-ORDER_MASS_CANCEL_REQUEST
      case MsgTypeRaw_ORDER_MASS_CANCEL_REQUEST : {
       if( resetMessage ) _msgOrderMassCancelRequest.reset();
       pos = _msgOrderMassCancelRequest.scan( buf, len - pos );
       onMessage( _msgOrderMassCancelRequest );
       break;
      }
// case-end-ORDER_MASS_CANCEL_REQUEST


// case-begin-ORDER_MASS_CANCEL_REPORT
      case MsgTypeRaw_ORDER_MASS_CANCEL_REPORT : {
       if( resetMessage ) _msgOrderMassCancelReport.reset();
       pos = _msgOrderMassCancelReport.scan( buf, len - pos );
       onMessage( _msgOrderMassCancelReport );
       break;
      }
// case-end-ORDER_MASS_CANCEL_REPORT


// case-begin-NEW_ORDER_s
      case MsgTypeRaw_NEW_ORDER_s : {
       if( resetMessage ) _msgNewOrderCross.reset();
       pos = _msgNewOrderCross.scan( buf, len - pos );
       onMessage( _msgNewOrderCross );
       break;
      }
// case-end-NEW_ORDER_s


// case-begin-CROSS_ORDER_CANCEL_REPLACE_REQUEST
      case MsgTypeRaw_CROSS_ORDER_CANCEL_REPLACE_REQUEST : {
       if( resetMessage ) _msgCrossOrderCancelReplaceRequest.reset();
       pos = _msgCrossOrderCancelReplaceRequest.scan( buf, len - pos );
       onMessage( _msgCrossOrderCancelReplaceRequest );
       break;
      }
// case-end-CROSS_ORDER_CANCEL_REPLACE_REQUEST


// case-begin-CROSS_ORDER_CANCEL_REQUEST
      case MsgTypeRaw_CROSS_ORDER_CANCEL_REQUEST : {
       if( resetMessage ) _msgCrossOrderCancelRequest.reset();
       pos = _msgCrossOrderCancelRequest.scan( buf, len - pos );
       onMessage( _msgCrossOrderCancelRequest );
       break;
      }
// case-end-CROSS_ORDER_CANCEL_REQUEST


// case-begin-SECURITY_TYPE_REQUEST
      case MsgTypeRaw_SECURITY_TYPE_REQUEST : {
       if( resetMessage ) _msgSecurityTypeRequest.reset();
       pos = _msgSecurityTypeRequest.scan( buf, len - pos );
       onMessage( _msgSecurityTypeRequest );
       break;
      }
// case-end-SECURITY_TYPE_REQUEST


// case-begin-SECURITY_TYPES
      case MsgTypeRaw_SECURITY_TYPES : {
       if( resetMessage ) _msgSecurityTypes.reset();
       pos = _msgSecurityTypes.scan( buf, len - pos );
       onMessage( _msgSecurityTypes );
       break;
      }
// case-end-SECURITY_TYPES


// case-begin-SECURITY_LIST_REQUEST
      case MsgTypeRaw_SECURITY_LIST_REQUEST : {
       if( resetMessage ) _msgSecurityListRequest.reset();
       pos = _msgSecurityListRequest.scan( buf, len - pos );
       onMessage( _msgSecurityListRequest );
       break;
      }
// case-end-SECURITY_LIST_REQUEST


// case-begin-SECURITY_LIST
      case MsgTypeRaw_SECURITY_LIST : {
       if( resetMessage ) _msgSecurityList.reset();
       pos = _msgSecurityList.scan( buf, len - pos );
       onMessage( _msgSecurityList );
       break;
      }
// case-end-SECURITY_LIST


// case-begin-DERIVATIVE_SECURITY_LIST_REQUEST
      case MsgTypeRaw_DERIVATIVE_SECURITY_LIST_REQUEST : {
       if( resetMessage ) _msgDerivativeSecurityListRequest.reset();
       pos = _msgDerivativeSecurityListRequest.scan( buf, len - pos );
       onMessage( _msgDerivativeSecurityListRequest );
       break;
      }
// case-end-DERIVATIVE_SECURITY_LIST_REQUEST


// case-begin-DERIVATIVE_SECURITY_LIST
      case MsgTypeRaw_DERIVATIVE_SECURITY_LIST : {
       if( resetMessage ) _msgDerivativeSecurityList.reset();
       pos = _msgDerivativeSecurityList.scan( buf, len - pos );
       onMessage( _msgDerivativeSecurityList );
       break;
      }
// case-end-DERIVATIVE_SECURITY_LIST


// case-begin-NEW_ORDER_AB
      case MsgTypeRaw_NEW_ORDER_AB : {
       if( resetMessage ) _msgNewOrderMultileg.reset();
       pos = _msgNewOrderMultileg.scan( buf, len - pos );
       onMessage( _msgNewOrderMultileg );
       break;
      }
// case-end-NEW_ORDER_AB


// case-begin-MULTILEG_ORDER_CANCEL_REPLACE
      case MsgTypeRaw_MULTILEG_ORDER_CANCEL_REPLACE : {
       if( resetMessage ) _msgMultilegOrderCancelReplace.reset();
       pos = _msgMultilegOrderCancelReplace.scan( buf, len - pos );
       onMessage( _msgMultilegOrderCancelReplace );
       break;
      }
// case-end-MULTILEG_ORDER_CANCEL_REPLACE


// case-begin-TRADE_CAPTURE_REPORT_REQUEST
      case MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST : {
       if( resetMessage ) _msgTradeCaptureReportRequest.reset();
       pos = _msgTradeCaptureReportRequest.scan( buf, len - pos );
       onMessage( _msgTradeCaptureReportRequest );
       break;
      }
// case-end-TRADE_CAPTURE_REPORT_REQUEST


// case-begin-TRADE_CAPTURE_REPORT
      case MsgTypeRaw_TRADE_CAPTURE_REPORT : {
       if( resetMessage ) _msgTradeCaptureReport.reset();
       pos = _msgTradeCaptureReport.scan( buf, len - pos );
       onMessage( _msgTradeCaptureReport );
       break;
      }
// case-end-TRADE_CAPTURE_REPORT


// case-begin-ORDER_MASS_STATUS_REQUEST
      case MsgTypeRaw_ORDER_MASS_STATUS_REQUEST : {
       if( resetMessage ) _msgOrderMassStatusRequest.reset();
       pos = _msgOrderMassStatusRequest.scan( buf, len - pos );
       onMessage( _msgOrderMassStatusRequest );
       break;
      }
// case-end-ORDER_MASS_STATUS_REQUEST


// case-begin-QUOTE_REQUEST_REJECT
      case MsgTypeRaw_QUOTE_REQUEST_REJECT : {
       if( resetMessage ) _msgQuoteRequestReject.reset();
       pos = _msgQuoteRequestReject.scan( buf, len - pos );
       onMessage( _msgQuoteRequestReject );
       break;
      }
// case-end-QUOTE_REQUEST_REJECT


// case-begin-RFQ_REQUEST
      case MsgTypeRaw_RFQ_REQUEST : {
       if( resetMessage ) _msgRFQRequest.reset();
       pos = _msgRFQRequest.scan( buf, len - pos );
       onMessage( _msgRFQRequest );
       break;
      }
// case-end-RFQ_REQUEST


// case-begin-QUOTE_STATUS_REPORT
      case MsgTypeRaw_QUOTE_STATUS_REPORT : {
       if( resetMessage ) _msgQuoteStatusReport.reset();
       pos = _msgQuoteStatusReport.scan( buf, len - pos );
       onMessage( _msgQuoteStatusReport );
       break;
      }
// case-end-QUOTE_STATUS_REPORT


// case-begin-QUOTE_RESPONSE
      case MsgTypeRaw_QUOTE_RESPONSE : {
       if( resetMessage ) _msgQuoteResponse.reset();
       pos = _msgQuoteResponse.scan( buf, len - pos );
       onMessage( _msgQuoteResponse );
       break;
      }
// case-end-QUOTE_RESPONSE


// case-begin-CONFIRMATION
      case MsgTypeRaw_CONFIRMATION : {
       if( resetMessage ) _msgConfirmation.reset();
       pos = _msgConfirmation.scan( buf, len - pos );
       onMessage( _msgConfirmation );
       break;
      }
// case-end-CONFIRMATION


// case-begin-POSITION_MAINTENANCE_REQUEST
      case MsgTypeRaw_POSITION_MAINTENANCE_REQUEST : {
       if( resetMessage ) _msgPositionMaintenanceRequest.reset();
       pos = _msgPositionMaintenanceRequest.scan( buf, len - pos );
       onMessage( _msgPositionMaintenanceRequest );
       break;
      }
// case-end-POSITION_MAINTENANCE_REQUEST


// case-begin-POSITION_MAINTENANCE_REPORT
      case MsgTypeRaw_POSITION_MAINTENANCE_REPORT : {
       if( resetMessage ) _msgPositionMaintenanceReport.reset();
       pos = _msgPositionMaintenanceReport.scan( buf, len - pos );
       onMessage( _msgPositionMaintenanceReport );
       break;
      }
// case-end-POSITION_MAINTENANCE_REPORT


// case-begin-REQUEST_FOR_POSITIONS
      case MsgTypeRaw_REQUEST_FOR_POSITIONS : {
       if( resetMessage ) _msgRequestForPositions.reset();
       pos = _msgRequestForPositions.scan( buf, len - pos );
       onMessage( _msgRequestForPositions );
       break;
      }
// case-end-REQUEST_FOR_POSITIONS


// case-begin-REQUEST_FOR_POSITIONS_ACK
      case MsgTypeRaw_REQUEST_FOR_POSITIONS_ACK : {
       if( resetMessage ) _msgRequestForPositionsAck.reset();
       pos = _msgRequestForPositionsAck.scan( buf, len - pos );
       onMessage( _msgRequestForPositionsAck );
       break;
      }
// case-end-REQUEST_FOR_POSITIONS_ACK


// case-begin-POSITION_REPORT
      case MsgTypeRaw_POSITION_REPORT : {
       if( resetMessage ) _msgPositionReport.reset();
       pos = _msgPositionReport.scan( buf, len - pos );
       onMessage( _msgPositionReport );
       break;
      }
// case-end-POSITION_REPORT


// case-begin-TRADE_CAPTURE_REPORT_REQUEST_ACK
      case MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST_ACK : {
       if( resetMessage ) _msgTradeCaptureReportRequestAck.reset();
       pos = _msgTradeCaptureReportRequestAck.scan( buf, len - pos );
       onMessage( _msgTradeCaptureReportRequestAck );
       break;
      }
// case-end-TRADE_CAPTURE_REPORT_REQUEST_ACK


// case-begin-TRADE_CAPTURE_REPORT_ACK
      case MsgTypeRaw_TRADE_CAPTURE_REPORT_ACK : {
       if( resetMessage ) _msgTradeCaptureReportAck.reset();
       pos = _msgTradeCaptureReportAck.scan( buf, len - pos );
       onMessage( _msgTradeCaptureReportAck );
       break;
      }
// case-end-TRADE_CAPTURE_REPORT_ACK


// case-begin-ALLOCATION_REPORT
      case MsgTypeRaw_ALLOCATION_REPORT : {
       if( resetMessage ) _msgAllocationReport.reset();
       pos = _msgAllocationReport.scan( buf, len - pos );
       onMessage( _msgAllocationReport );
       break;
      }
// case-end-ALLOCATION_REPORT


// case-begin-ALLOCATION_REPORT_ACK
      case MsgTypeRaw_ALLOCATION_REPORT_ACK : {
       if( resetMessage ) _msgAllocationReportAck.reset();
       pos = _msgAllocationReportAck.scan( buf, len - pos );
       onMessage( _msgAllocationReportAck );
       break;
      }
// case-end-ALLOCATION_REPORT_ACK


// case-begin-CONFIRMATION_ACK
      case MsgTypeRaw_CONFIRMATION_ACK : {
       if( resetMessage ) _msgConfirmationAck.reset();
       pos = _msgConfirmationAck.scan( buf, len - pos );
       onMessage( _msgConfirmationAck );
       break;
      }
// case-end-CONFIRMATION_ACK


// case-begin-SETTLEMENT_INSTRUCTION_REQUEST
      case MsgTypeRaw_SETTLEMENT_INSTRUCTION_REQUEST : {
       if( resetMessage ) _msgSettlementInstructionRequest.reset();
       pos = _msgSettlementInstructionRequest.scan( buf, len - pos );
       onMessage( _msgSettlementInstructionRequest );
       break;
      }
// case-end-SETTLEMENT_INSTRUCTION_REQUEST


// case-begin-ASSIGNMENT_REPORT
      case MsgTypeRaw_ASSIGNMENT_REPORT : {
       if( resetMessage ) _msgAssignmentReport.reset();
       pos = _msgAssignmentReport.scan( buf, len - pos );
       onMessage( _msgAssignmentReport );
       break;
      }
// case-end-ASSIGNMENT_REPORT


// case-begin-COLLATERAL_REQUEST
      case MsgTypeRaw_COLLATERAL_REQUEST : {
       if( resetMessage ) _msgCollateralRequest.reset();
       pos = _msgCollateralRequest.scan( buf, len - pos );
       onMessage( _msgCollateralRequest );
       break;
      }
// case-end-COLLATERAL_REQUEST


// case-begin-COLLATERAL_ASSIGNMENT
      case MsgTypeRaw_COLLATERAL_ASSIGNMENT : {
       if( resetMessage ) _msgCollateralAssignment.reset();
       pos = _msgCollateralAssignment.scan( buf, len - pos );
       onMessage( _msgCollateralAssignment );
       break;
      }
// case-end-COLLATERAL_ASSIGNMENT


// case-begin-COLLATERAL_RESPONSE
      case MsgTypeRaw_COLLATERAL_RESPONSE : {
       if( resetMessage ) _msgCollateralResponse.reset();
       pos = _msgCollateralResponse.scan( buf, len - pos );
       onMessage( _msgCollateralResponse );
       break;
      }
// case-end-COLLATERAL_RESPONSE


// case-begin-COLLATERAL_REPORT
      case MsgTypeRaw_COLLATERAL_REPORT : {
       if( resetMessage ) _msgCollateralReport.reset();
       pos = _msgCollateralReport.scan( buf, len - pos );
       onMessage( _msgCollateralReport );
       break;
      }
// case-end-COLLATERAL_REPORT


// case-begin-COLLATERAL_INQUIRY
      case MsgTypeRaw_COLLATERAL_INQUIRY : {
       if( resetMessage ) _msgCollateralInquiry.reset();
       pos = _msgCollateralInquiry.scan( buf, len - pos );
       onMessage( _msgCollateralInquiry );
       break;
      }
// case-end-COLLATERAL_INQUIRY


// case-begin-NETWORK_BC
      case MsgTypeRaw_NETWORK_BC : {
       if( resetMessage ) _msgNetworkCounterpartySystemStatusRequest.reset();
       pos = _msgNetworkCounterpartySystemStatusRequest.scan( buf, len - pos );
       onMessage( _msgNetworkCounterpartySystemStatusRequest );
       break;
      }
// case-end-NETWORK_BC


// case-begin-NETWORK_BD
      case MsgTypeRaw_NETWORK_BD : {
       if( resetMessage ) _msgNetworkCounterpartySystemStatusResponse.reset();
       pos = _msgNetworkCounterpartySystemStatusResponse.scan( buf, len - pos );
       onMessage( _msgNetworkCounterpartySystemStatusResponse );
       break;
      }
// case-end-NETWORK_BD


// case-begin-USER_REQUEST
      case MsgTypeRaw_USER_REQUEST : {
       if( resetMessage ) _msgUserRequest.reset();
       pos = _msgUserRequest.scan( buf, len - pos );
       onMessage( _msgUserRequest );
       break;
      }
// case-end-USER_REQUEST


// case-begin-USER_RESPONSE
      case MsgTypeRaw_USER_RESPONSE : {
       if( resetMessage ) _msgUserResponse.reset();
       pos = _msgUserResponse.scan( buf, len - pos );
       onMessage( _msgUserResponse );
       break;
      }
// case-end-USER_RESPONSE


// case-begin-COLLATERAL_INQUIRY_ACK
      case MsgTypeRaw_COLLATERAL_INQUIRY_ACK : {
       if( resetMessage ) _msgCollateralInquiryAck.reset();
       pos = _msgCollateralInquiryAck.scan( buf, len - pos );
       onMessage( _msgCollateralInquiryAck );
       break;
      }
// case-end-COLLATERAL_INQUIRY_ACK


// case-begin-CONFIRMATION_REQUEST
      case MsgTypeRaw_CONFIRMATION_REQUEST : {
       if( resetMessage ) _msgConfirmationRequest.reset();
       pos = _msgConfirmationRequest.scan( buf, len - pos );
       onMessage( _msgConfirmationRequest );
       break;
      }
// case-end-CONFIRMATION_REQUEST


      default:
        onUnknownMessage( msgType );
        return endOfMessage;
    }
    return buf + pos;
}

void ParserDispatcher::onMessage( MessageHeader & msg )
{
   unprocessedMessage( MsgTypeRaw__, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageHeartbeat & msg )
{
   unprocessedMessage( MsgTypeRaw_HEARTBEAT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTestRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_TEST_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageResendRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_RESEND_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageReject & msg )
{
   unprocessedMessage( MsgTypeRaw_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSequenceReset & msg )
{
   unprocessedMessage( MsgTypeRaw_SEQUENCE_RESET, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageLogout & msg )
{
   unprocessedMessage( MsgTypeRaw_LOGOUT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageIOI & msg )
{
   unprocessedMessage( MsgTypeRaw_INDICATION_OF_INTEREST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAdvertisement & msg )
{
   unprocessedMessage( MsgTypeRaw_ADVERTISEMENT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageExecutionReport & msg )
{
   unprocessedMessage( MsgTypeRaw_EXECUTION_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderCancelReject & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_CANCEL_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageLogon & msg )
{
   unprocessedMessage( MsgTypeRaw_LOGON, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNews & msg )
{
   unprocessedMessage( MsgTypeRaw_NEWS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageEmail & msg )
{
   unprocessedMessage( MsgTypeRaw_EMAIL, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNewOrderSingle & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_SINGLE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNewOrderList & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_LIST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderCancelRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_CANCEL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderCancelReplaceRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_CANCEL_REPLACE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAllocationInstruction & msg )
{
   unprocessedMessage( MsgTypeRaw_ALLOCATION_INSTRUCTION, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListCancelRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_CANCEL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListExecute & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_EXECUTE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListStatus & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_STATUS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAllocationInstructionAck & msg )
{
   unprocessedMessage( MsgTypeRaw_ALLOCATION_INSTRUCTION_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageDontKnowTrade & msg )
{
   unprocessedMessage( MsgTypeRaw_DONT_KNOW_TRADE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuote & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSettlementInstructions & msg )
{
   unprocessedMessage( MsgTypeRaw_SETTLEMENT_INSTRUCTIONS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMarketDataRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_MARKET_DATA_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMarketDataSnapshotFullRefresh & msg )
{
   unprocessedMessage( MsgTypeRaw_MARKET_DATA_SNAPSHOT_FULL_REFRESH, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMarketDataIncrementalRefresh & msg )
{
   unprocessedMessage( MsgTypeRaw_MARKET_DATA_INCREMENTAL_REFRESH, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMarketDataRequestReject & msg )
{
   unprocessedMessage( MsgTypeRaw_MARKET_DATA_REQUEST_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteCancel & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_CANCEL, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMassQuoteAcknowledgement & msg )
{
   unprocessedMessage( MsgTypeRaw_MASS_QUOTE_ACKNOWLEDGEMENT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityDefinitionRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_DEFINITION_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityDefinition & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_DEFINITION, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityStatus & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_STATUS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradingSessionStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADING_SESSION_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradingSessionStatus & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADING_SESSION_STATUS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMassQuote & msg )
{
   unprocessedMessage( MsgTypeRaw_MASS_QUOTE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageBusinessMessageReject & msg )
{
   unprocessedMessage( MsgTypeRaw_BUSINESS_MESSAGE_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageBidRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_BID_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageBidResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_BID_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageListStrikePrice & msg )
{
   unprocessedMessage( MsgTypeRaw_LIST_STRIKE_PRICE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageXMLnonFIX & msg )
{
   unprocessedMessage( MsgTypeRaw_XML_MESSAGE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRegistrationInstructions & msg )
{
   unprocessedMessage( MsgTypeRaw_REGISTRATION_INSTRUCTIONS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRegistrationInstructionsResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_REGISTRATION_INSTRUCTIONS_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderMassCancelRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_MASS_CANCEL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderMassCancelReport & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_MASS_CANCEL_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNewOrderCross & msg )
{
   unprocessedMessage( MsgTypeRaw_NEW_ORDER_s, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCrossOrderCancelReplaceRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_CROSS_ORDER_CANCEL_REPLACE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCrossOrderCancelRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_CROSS_ORDER_CANCEL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityTypeRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_TYPE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityTypes & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_TYPES, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityListRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_LIST_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSecurityList & msg )
{
   unprocessedMessage( MsgTypeRaw_SECURITY_LIST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageDerivativeSecurityListRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_DERIVATIVE_SECURITY_LIST_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageDerivativeSecurityList & msg )
{
   unprocessedMessage( MsgTypeRaw_DERIVATIVE_SECURITY_LIST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNewOrderMultileg & msg )
{
   unprocessedMessage( MsgTypeRaw_NEW_ORDER_AB, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageMultilegOrderCancelReplace & msg )
{
   unprocessedMessage( MsgTypeRaw_MULTILEG_ORDER_CANCEL_REPLACE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradeCaptureReportRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradeCaptureReport & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADE_CAPTURE_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageOrderMassStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_ORDER_MASS_STATUS_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteRequestReject & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_REQUEST_REJECT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRFQRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_RFQ_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteStatusReport & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_STATUS_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageQuoteResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_QUOTE_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageConfirmation & msg )
{
   unprocessedMessage( MsgTypeRaw_CONFIRMATION, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessagePositionMaintenanceRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_POSITION_MAINTENANCE_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessagePositionMaintenanceReport & msg )
{
   unprocessedMessage( MsgTypeRaw_POSITION_MAINTENANCE_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRequestForPositions & msg )
{
   unprocessedMessage( MsgTypeRaw_REQUEST_FOR_POSITIONS, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageRequestForPositionsAck & msg )
{
   unprocessedMessage( MsgTypeRaw_REQUEST_FOR_POSITIONS_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessagePositionReport & msg )
{
   unprocessedMessage( MsgTypeRaw_POSITION_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradeCaptureReportRequestAck & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADE_CAPTURE_REPORT_REQUEST_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageTradeCaptureReportAck & msg )
{
   unprocessedMessage( MsgTypeRaw_TRADE_CAPTURE_REPORT_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAllocationReport & msg )
{
   unprocessedMessage( MsgTypeRaw_ALLOCATION_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAllocationReportAck & msg )
{
   unprocessedMessage( MsgTypeRaw_ALLOCATION_REPORT_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageConfirmationAck & msg )
{
   unprocessedMessage( MsgTypeRaw_CONFIRMATION_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageSettlementInstructionRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_SETTLEMENT_INSTRUCTION_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageAssignmentReport & msg )
{
   unprocessedMessage( MsgTypeRaw_ASSIGNMENT_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralAssignment & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_ASSIGNMENT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralReport & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_REPORT, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralInquiry & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_INQUIRY, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNetworkCounterpartySystemStatusRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_NETWORK_BC, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageNetworkCounterpartySystemStatusResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_NETWORK_BD, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageUserRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_USER_REQUEST, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageUserResponse & msg )
{
   unprocessedMessage( MsgTypeRaw_USER_RESPONSE, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageCollateralInquiryAck & msg )
{
   unprocessedMessage( MsgTypeRaw_COLLATERAL_INQUIRY_ACK, msg ); 
   msg.reset(); 
}


void ParserDispatcher::onMessage( MessageConfirmationRequest & msg )
{
   unprocessedMessage( MsgTypeRaw_CONFIRMATION_REQUEST, msg ); 
   msg.reset(); 
}


// end of Messages.cxx


ParserDispatcher::ParserDispatcher()
{
}

ParserDispatcher::~ParserDispatcher()
{
}

void ParserDispatcher::onUnknownMessage( raw_enum_t msgType )
{
}

bool ParserDispatcher::ignoreMessage( raw_enum_t msgType ) const
{
    return false;
}

void ParserDispatcher::unprocessedMessage( raw_enum_t msgType, MessageBase & msg )
{
}

std::set< raw_tag_t > headerFields =
{
// start of Header.cxx
 FieldBeginString::RAW,
 FieldBodyLength::RAW,
 FieldMsgType::RAW,
 FieldSenderCompID::RAW,
 FieldTargetCompID::RAW,
 FieldOnBehalfOfCompID::RAW,
 FieldDeliverToCompID::RAW,
 FieldSecureDataLen::RAW,
 FieldSecureData::RAW,
 FieldMsgSeqNum::RAW,
 FieldSenderSubID::RAW,
 FieldSenderLocationID::RAW,
 FieldTargetSubID::RAW,
 FieldTargetLocationID::RAW,
 FieldOnBehalfOfSubID::RAW,
 FieldOnBehalfOfLocationID::RAW,
 FieldDeliverToSubID::RAW,
 FieldDeliverToLocationID::RAW,
 FieldPossDupFlag::RAW,
 FieldPossResend::RAW,
 FieldSendingTime::RAW,
 FieldOrigSendingTime::RAW,
 FieldXmlDataLen::RAW,
 FieldXmlData::RAW,
 FieldMessageEncoding::RAW,
 FieldLastMsgSeqNumProcessed::RAW,
// end of Header.cxx
};

const FixFormatStyle defaultStyle = 
{
    "",  //  messageBegin 
    "",  //  messageEnd   
    "",  //  indent
    "",  //  groupFirstField;
    "",  //  fieldBegin   
    " ", //  fieldEnd     
    "",  //  headerTagNameStart 
    "",  //  headerTagNameStop  
    "",  //  tagNameStart 
    "",  //  tagNameStop  
    "(", //  tagValueStart
    ")", //  tagValueStop 
    "=", //  equal        
    "",  //  valueStart   
    "",  //  valueStop    
    "<", //  enumStart    
    ">", //  enumStop     
    "",  //  unknownStart
    ""   //  unknownStop
};

const FixFormatStyle defaultVerticalStyle = 
{
    "",  //  messageBegin 
    "",  //  messageEnd   
    "  ",//  indent
    " *",//  groupFirstField;
    " ", //  fieldBegin   
    "\n",//  fieldEnd     
    "",  //  headerTagNameStart 
    "",  //  headerTagNameStop  
    "",  //  tagNameStart 
    "",  //  tagNameStop  
    "(", //  tagValueStart
    ")", //  tagValueStop 
    "=", //  equal        
    "",  //  valueStart   
    "",  //  valueStop    
    "<", //  enumStart    
    ">", //  enumStop     
    "",  //  unknownStart
    ""   //  unknownStop
};

const FixFormatStyle ttyStyle = 
{
    "",  //  messageBegin 
    "",  //  messageEnd   
    "  ",//  indent
    " \u2022",//  groupFirstField;
    " ", //  fieldBegin   
    "\n",//  fieldEnd     
    "",  //  headerTagNameStart 
    "",  //  headerTagNameStop  
    "\e[1m",  //  tagNameStart 
    "\e[0m",  //  tagNameStop  
    "(", //  tagValueStart
    ")", //  tagValueStop 
    "=", //  equal        
    "",  //  valueStart   
    "",  //  valueStop    
    "<", //  enumStart    
    ">",  //  enumStop     
    "\e[31;1m",  //  unknownStart
    "\e[0m"      //  unknownStop
};

const FixFormatStyle ttyRgbStyle =
{
    "",  //  messageBegin 
    "",  //  messageEnd   
    "  ",//  indent
    " \u2022",//  groupFirstField;
    " ", //  fieldBegin   
    "\n",//  fieldEnd     
    "\e[33m",  //  headerTagNameStart 
    "\e[0m",  //  headerTagNameStop  
    "\e[33;1m",  //  tagNameStart 
    "\e[0m",  //  tagNameStop  
    "(\e[37;1m", //  tagValueStart
    "\e[0m)", //  tagValueStop 
    " = ", //  equal        
    "\e[34;1m",  //  valueStart   
    "\e[0m",  //  valueStop    
    " \e[32m", //  enumStart    
    "\e[0m",  //  enumStop     
    "\e[31;1m",  //  unknownStart
    "\e[0m"      //  unknownStop
};

const FixFormatStyle ttyRgbSingleLineStyle =
{
    "",  //  messageBegin 
    "",  //  messageEnd   
    "",//  indent
    "",//  groupFirstField;
    "", //  fieldBegin   
    "  ",//  fieldEnd     
    "\e[33m",  //  headerTagNameStart 
    "\e[0m",  //  headerTagNameStop  
    "\e[33;1m",  //  tagNameStart 
    "\e[0m",  //  tagNameStop  
    "<\e[37;1m", //  tagValueStart
    "\e[0m>", //  tagValueStop 
    "=", //  equal        
    "\e[34;1m",  //  valueStart   
    "\e[0m",  //  valueStop    
    "/\e[32m", //  enumStart    
    "\e[0m",  //  enumStop     
    "\e[31;1m",  //  unknownStart
    "\e[0m"      //  unknownStop
};

// msgTypePos = offset of 35=
unsigned parseMessageLength( const char * fix, unsigned & msgTypePos )
{
    unsigned bodyLengthPos = msgTypePos = FixBeginStringValue.size() + 5; // 8=| + 9=|
    return parseUInt( fix + bodyLengthPos, ++msgTypePos );
}


unsigned computeChecksum( const char * begin, const char * end )
{
    unsigned sum = 0;
    while( begin < end )
    {
        sum += (unsigned)*begin++;
    }
    return sum & 0xff;
}

const char * getEnumName( const char * fix, int valueOffset )
{
    if( valueOffset < 0 )
    {
        return nullptr;
    }

    offset_t pos = (offset_t)valueOffset;
    while( pos > 0 and fix[pos-1] != FIXPP_SOH )
    {
        --pos;
    }

    const raw_tag_t tag = nextRawTag( fix+pos, pos );
    if( tag == 0 )
    {
        return nullptr;
    }

    auto eit = rawToEnum.find( tag );
    if( eit == rawToEnum.end() )
    {
        return nullptr;
    }    
    const FieldEnumsBase * enums = eit->second;
    raw_enum_t rawEnum = toRawEnum( fix + valueOffset );
    const char * enumName = enums->getEnumNameByRaw( rawEnum );
    return enumName;
}

std::ostream & fixToHuman( const char * fix, offset_t & pos, std::ostream & os, const FixFormatStyle & style, GetDepthMethod indentator )
{
    os << style.messageBegin;
    
    while( fix[pos] )
    {
        offset_t prev = pos;
        const raw_tag_t tag = nextRawTag( fix+pos, pos );

        if( tag == 0 )
        {
            os << style.unknownStart << "[bad tag at " << pos << "]" << style.unknownStop << style.messageEnd;
            return os;
        }

        os << style.fieldBegin;
        
        auto it = rawToTagName.find( tag );
        const FieldEnumsBase * enums = nullptr;
        if( it != rawToTagName.end() )
        {
            if( headerFields.find( tag ) != headerFields.end() )
            {
                if( style.headerTagNameStart )
                {
                    os << style.headerTagNameStart << it->second << style.headerTagNameStop;
                }
            }
            else
            {
                if( indentator and indentator != autoIndentFields )
                {
                    FieldDepth fd = (*indentator)( tag );
                    if( fd.isFirstInGroup )
                    {
                        for( int d = 1; d < fd.depth; ++d ) os << style.indent;
                        os << style.groupFirstField;
                    }
                    else
                    {
                        for( int d = 0; d < fd.depth; ++d ) os << style.indent;
                    }
                }
                if( style.tagNameStart )
                {
                    os << style.tagNameStart << it->second << style.tagNameStop;
                }
            }
            
            auto eit = rawToEnum.find( tag );
            if( eit != rawToEnum.end() )
            {
                enums = eit->second;
            }
        }
        else
        {
            os << style.unknownStart << "Unknown" << style.unknownStop;
        }
        
        // tag
        os << style.tagValueStart;
        while( fix[prev] != '=' )
        {
            os << fix[prev++];
        }
        os << style.tagValueStop << style.equal << style.valueStart;
        
        raw_enum_t rawEnum = toRawEnum( fix + pos );
        
        // value as is
        while( fix[pos] and fix[pos] != FIXPP_SOH )
        {
            os << fix[pos++];
        }
        
        os << style.valueStop;
        
        // enum
        if( enums and style.enumStart )
        {
            const char * enumName = enums->getEnumNameByRaw( rawEnum );
            if( enumName )
            {
                os << style.enumStart << enumName << style.enumStop;
            }
            else
            {
                os << style.unknownStart << " UNKNOWN" << style.unknownStop;
            }

            if( tag == FieldMsgType::RAW and indentator == autoIndentFields )
            {
                indentator = getTagDepthMethodByRawMsgType( rawEnum );
            }

        }

        os << style.fieldEnd;
        os.flush();
        
        ++pos;
        if( tag == FieldCheckSum::RAW )
        {
            break;
        }
        
    }
    os << style.messageEnd;
    return os;
}

} // namespace fix44

// gdb helper
extern "C" const char * fixppGetEnumName( const char * fix, int valueOffset )
{
    return fix44::getEnumName( fix, valueOffset );
}
