#pragma once
#ifndef fix44_MESSAGES_H
#define fix44_MESSAGES_H

#include <fix44/Fields.h>

#include <vector>

namespace fix44
{

GetDepthMethod getTagDepthMethodByRawMsgType( raw_enum_t rawMsgType );

// start of Groups.hxx

// Generated


class GroupLegStipulations : public MessageBase
{
  
// Methods
   public:
   GroupLegStipulations();
   typedef std::vector<GroupLegStipulations> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetLegStipulationType() const { return fieldLegStipulationType.offset >= 0; }
   FieldLegStipulationType::ValueType getLegStipulationType() const { return fieldLegStipulationType.getValue( buf ); }
   const char * ptrToLegStipulationType() const { return buf + fieldLegStipulationType.offset; }
   private: FieldLegStipulationType fieldLegStipulationType;

   public:
   bool isSetLegStipulationValue() const { return fieldLegStipulationValue.offset >= 0; }
   FieldLegStipulationValue::ValueType getLegStipulationValue() const { return fieldLegStipulationValue.getValue( buf ); }
   const char * ptrToLegStipulationValue() const { return buf + fieldLegStipulationValue.offset; }
   private: FieldLegStipulationValue fieldLegStipulationValue;

};

class GroupEvents : public MessageBase
{
  
// Methods
   public:
   GroupEvents();
   typedef std::vector<GroupEvents> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetEventType() const { return fieldEventType.offset >= 0; }
   FieldEventType::ValueType getEventType() const { return fieldEventType.getValue( buf ); }
   const char * ptrToEventType() const { return buf + fieldEventType.offset; }
   private: FieldEventType fieldEventType;

   public:
   bool isSetEventDate() const { return fieldEventDate.offset >= 0; }
   FieldEventDate::ValueType getEventDate() const { return fieldEventDate.getValue( buf ); }
   const char * ptrToEventDate() const { return buf + fieldEventDate.offset; }
   private: FieldEventDate fieldEventDate;

   public:
   bool isSetEventPx() const { return fieldEventPx.offset >= 0; }
   FieldEventPx::ValueType getEventPx() const { return fieldEventPx.getValue( buf ); }
   const char * ptrToEventPx() const { return buf + fieldEventPx.offset; }
   private: FieldEventPx fieldEventPx;

   public:
   bool isSetEventText() const { return fieldEventText.offset >= 0; }
   FieldEventText::ValueType getEventText() const { return fieldEventText.getValue( buf ); }
   const char * ptrToEventText() const { return buf + fieldEventText.offset; }
   private: FieldEventText fieldEventText;

};

class GroupLegSecurityAltID : public MessageBase
{
  
// Methods
   public:
   GroupLegSecurityAltID();
   typedef std::vector<GroupLegSecurityAltID> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetLegSecurityAltID() const { return fieldLegSecurityAltID.offset >= 0; }
   FieldLegSecurityAltID::ValueType getLegSecurityAltID() const { return fieldLegSecurityAltID.getValue( buf ); }
   const char * ptrToLegSecurityAltID() const { return buf + fieldLegSecurityAltID.offset; }
   private: FieldLegSecurityAltID fieldLegSecurityAltID;

   public:
   bool isSetLegSecurityAltIDSource() const { return fieldLegSecurityAltIDSource.offset >= 0; }
   FieldLegSecurityAltIDSource::ValueType getLegSecurityAltIDSource() const { return fieldLegSecurityAltIDSource.getValue( buf ); }
   const char * ptrToLegSecurityAltIDSource() const { return buf + fieldLegSecurityAltIDSource.offset; }
   private: FieldLegSecurityAltIDSource fieldLegSecurityAltIDSource;

};

class GroupCapacities : public MessageBase
{
  
// Methods
   public:
   GroupCapacities();
   typedef std::vector<GroupCapacities> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetOrderRestrictions() const { return fieldOrderRestrictions.offset >= 0; }
   FieldOrderRestrictions::ValueType getOrderRestrictions() const { return fieldOrderRestrictions.getValue( buf ); }
   const char * ptrToOrderRestrictions() const { return buf + fieldOrderRestrictions.offset; }
   private: FieldOrderRestrictions fieldOrderRestrictions;

   public:
   bool isSetOrderCapacityQty() const { return fieldOrderCapacityQty.offset >= 0; }
   FieldOrderCapacityQty::ValueType getOrderCapacityQty() const { return fieldOrderCapacityQty.getValue( buf ); }
   const char * ptrToOrderCapacityQty() const { return buf + fieldOrderCapacityQty.offset; }
   private: FieldOrderCapacityQty fieldOrderCapacityQty;

};

class GroupNested3PartySubIDs : public MessageBase
{
  
// Methods
   public:
   GroupNested3PartySubIDs();
   typedef std::vector<GroupNested3PartySubIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetNested3PartySubID() const { return fieldNested3PartySubID.offset >= 0; }
   FieldNested3PartySubID::ValueType getNested3PartySubID() const { return fieldNested3PartySubID.getValue( buf ); }
   const char * ptrToNested3PartySubID() const { return buf + fieldNested3PartySubID.offset; }
   private: FieldNested3PartySubID fieldNested3PartySubID;

   public:
   bool isSetNested3PartySubIDType() const { return fieldNested3PartySubIDType.offset >= 0; }
   FieldNested3PartySubIDType::ValueType getNested3PartySubIDType() const { return fieldNested3PartySubIDType.getValue( buf ); }
   const char * ptrToNested3PartySubIDType() const { return buf + fieldNested3PartySubIDType.offset; }
   private: FieldNested3PartySubIDType fieldNested3PartySubIDType;

};

class GroupPartySubIDs : public MessageBase
{
  
// Methods
   public:
   GroupPartySubIDs();
   typedef std::vector<GroupPartySubIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetPartySubID() const { return fieldPartySubID.offset >= 0; }
   FieldPartySubID::ValueType getPartySubID() const { return fieldPartySubID.getValue( buf ); }
   const char * ptrToPartySubID() const { return buf + fieldPartySubID.offset; }
   private: FieldPartySubID fieldPartySubID;

   public:
   bool isSetPartySubIDType() const { return fieldPartySubIDType.offset >= 0; }
   FieldPartySubIDType::ValueType getPartySubIDType() const { return fieldPartySubIDType.getValue( buf ); }
   const char * ptrToPartySubIDType() const { return buf + fieldPartySubIDType.offset; }
   private: FieldPartySubIDType fieldPartySubIDType;

};

class GroupNested2PartySubIDs : public MessageBase
{
  
// Methods
   public:
   GroupNested2PartySubIDs();
   typedef std::vector<GroupNested2PartySubIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetNested2PartySubID() const { return fieldNested2PartySubID.offset >= 0; }
   FieldNested2PartySubID::ValueType getNested2PartySubID() const { return fieldNested2PartySubID.getValue( buf ); }
   const char * ptrToNested2PartySubID() const { return buf + fieldNested2PartySubID.offset; }
   private: FieldNested2PartySubID fieldNested2PartySubID;

   public:
   bool isSetNested2PartySubIDType() const { return fieldNested2PartySubIDType.offset >= 0; }
   FieldNested2PartySubIDType::ValueType getNested2PartySubIDType() const { return fieldNested2PartySubIDType.getValue( buf ); }
   const char * ptrToNested2PartySubIDType() const { return buf + fieldNested2PartySubIDType.offset; }
   private: FieldNested2PartySubIDType fieldNested2PartySubIDType;

};

class GroupNested2PartyIDs : public MessageBase
{
  
// Methods
   public:
   GroupNested2PartyIDs();
   typedef std::vector<GroupNested2PartyIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetNested2PartyID() const { return fieldNested2PartyID.offset >= 0; }
   FieldNested2PartyID::ValueType getNested2PartyID() const { return fieldNested2PartyID.getValue( buf ); }
   const char * ptrToNested2PartyID() const { return buf + fieldNested2PartyID.offset; }
   private: FieldNested2PartyID fieldNested2PartyID;

   public:
   bool isSetNested2PartyIDSource() const { return fieldNested2PartyIDSource.offset >= 0; }
   FieldNested2PartyIDSource::ValueType getNested2PartyIDSource() const { return fieldNested2PartyIDSource.getValue( buf ); }
   const char * ptrToNested2PartyIDSource() const { return buf + fieldNested2PartyIDSource.offset; }
   private: FieldNested2PartyIDSource fieldNested2PartyIDSource;

   public:
   bool isSetNested2PartyRole() const { return fieldNested2PartyRole.offset >= 0; }
   FieldNested2PartyRole::ValueType getNested2PartyRole() const { return fieldNested2PartyRole.getValue( buf ); }
   const char * ptrToNested2PartyRole() const { return buf + fieldNested2PartyRole.offset; }
   private: FieldNested2PartyRole fieldNested2PartyRole;

   public:
   bool isSetNoNested2PartySubIDs() const { return fieldNoNested2PartySubIDs.offset >= 0; }
   FieldNoNested2PartySubIDs::ValueType getNoNested2PartySubIDs() const { return fieldNoNested2PartySubIDs.getValue( buf ); }
   const char * ptrToNoNested2PartySubIDs() const { return buf + fieldNoNested2PartySubIDs.offset; }
   private: FieldNoNested2PartySubIDs fieldNoNested2PartySubIDs;
  
   public:
   std::size_t getGroupCountNested2PartySubIDs() const { return groupsNested2PartySubIDs.size(); } 
   const GroupNested2PartySubIDs & getGroupNested2PartySubIDs( std::size_t idx ) const { return groupsNested2PartySubIDs[ idx ]; } 
   private: GroupNested2PartySubIDs::Array groupsNested2PartySubIDs{ 10 };

};

class GroupHops : public MessageBase
{
  
// Methods
   public:
   GroupHops();
   typedef std::vector<GroupHops> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetHopCompID() const { return fieldHopCompID.offset >= 0; }
   FieldHopCompID::ValueType getHopCompID() const { return fieldHopCompID.getValue( buf ); }
   const char * ptrToHopCompID() const { return buf + fieldHopCompID.offset; }
   private: FieldHopCompID fieldHopCompID;

   public:
   bool isSetHopSendingTime() const { return fieldHopSendingTime.offset >= 0; }
   FieldHopSendingTime::ValueType getHopSendingTime() const { return fieldHopSendingTime.getValue( buf ); }
   const char * ptrToHopSendingTime() const { return buf + fieldHopSendingTime.offset; }
   private: FieldHopSendingTime fieldHopSendingTime;

   public:
   bool isSetHopRefID() const { return fieldHopRefID.offset >= 0; }
   FieldHopRefID::ValueType getHopRefID() const { return fieldHopRefID.getValue( buf ); }
   const char * ptrToHopRefID() const { return buf + fieldHopRefID.offset; }
   private: FieldHopRefID fieldHopRefID;

};

class GroupCollInquiryQualifier : public MessageBase
{
  
// Methods
   public:
   GroupCollInquiryQualifier();
   typedef std::vector<GroupCollInquiryQualifier> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetCollInquiryQualifier() const { return fieldCollInquiryQualifier.offset >= 0; }
   FieldCollInquiryQualifier::ValueType getCollInquiryQualifier() const { return fieldCollInquiryQualifier.getValue( buf ); }
   const char * ptrToCollInquiryQualifier() const { return buf + fieldCollInquiryQualifier.offset; }
   private: FieldCollInquiryQualifier fieldCollInquiryQualifier;

};

class GroupPartyIDs : public MessageBase
{
  
// Methods
   public:
   GroupPartyIDs();
   typedef std::vector<GroupPartyIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetPartyID() const { return fieldPartyID.offset >= 0; }
   FieldPartyID::ValueType getPartyID() const { return fieldPartyID.getValue( buf ); }
   const char * ptrToPartyID() const { return buf + fieldPartyID.offset; }
   private: FieldPartyID fieldPartyID;

   public:
   bool isSetPartyIDSource() const { return fieldPartyIDSource.offset >= 0; }
   FieldPartyIDSource::ValueType getPartyIDSource() const { return fieldPartyIDSource.getValue( buf ); }
   const char * ptrToPartyIDSource() const { return buf + fieldPartyIDSource.offset; }
   private: FieldPartyIDSource fieldPartyIDSource;

   public:
   bool isSetPartyRole() const { return fieldPartyRole.offset >= 0; }
   FieldPartyRole::ValueType getPartyRole() const { return fieldPartyRole.getValue( buf ); }
   const char * ptrToPartyRole() const { return buf + fieldPartyRole.offset; }
   private: FieldPartyRole fieldPartyRole;

   public:
   bool isSetNoPartySubIDs() const { return fieldNoPartySubIDs.offset >= 0; }
   FieldNoPartySubIDs::ValueType getNoPartySubIDs() const { return fieldNoPartySubIDs.getValue( buf ); }
   const char * ptrToNoPartySubIDs() const { return buf + fieldNoPartySubIDs.offset; }
   private: FieldNoPartySubIDs fieldNoPartySubIDs;
  
   public:
   std::size_t getGroupCountPartySubIDs() const { return groupsPartySubIDs.size(); } 
   const GroupPartySubIDs & getGroupPartySubIDs( std::size_t idx ) const { return groupsPartySubIDs[ idx ]; } 
   private: GroupPartySubIDs::Array groupsPartySubIDs{ 10 };

};

class GroupAllocs : public MessageBase
{
  
// Methods
   public:
   GroupAllocs();
   typedef std::vector<GroupAllocs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetAllocAccount() const { return fieldAllocAccount.offset >= 0; }
   FieldAllocAccount::ValueType getAllocAccount() const { return fieldAllocAccount.getValue( buf ); }
   const char * ptrToAllocAccount() const { return buf + fieldAllocAccount.offset; }
   private: FieldAllocAccount fieldAllocAccount;

   public:
   bool isSetAllocAcctIDSource() const { return fieldAllocAcctIDSource.offset >= 0; }
   FieldAllocAcctIDSource::ValueType getAllocAcctIDSource() const { return fieldAllocAcctIDSource.getValue( buf ); }
   const char * ptrToAllocAcctIDSource() const { return buf + fieldAllocAcctIDSource.offset; }
   private: FieldAllocAcctIDSource fieldAllocAcctIDSource;

   public:
   bool isSetAllocPrice() const { return fieldAllocPrice.offset >= 0; }
   FieldAllocPrice::ValueType getAllocPrice() const { return fieldAllocPrice.getValue( buf ); }
   const char * ptrToAllocPrice() const { return buf + fieldAllocPrice.offset; }
   private: FieldAllocPrice fieldAllocPrice;

   public:
   bool isSetIndividualAllocID() const { return fieldIndividualAllocID.offset >= 0; }
   FieldIndividualAllocID::ValueType getIndividualAllocID() const { return fieldIndividualAllocID.getValue( buf ); }
   const char * ptrToIndividualAllocID() const { return buf + fieldIndividualAllocID.offset; }
   private: FieldIndividualAllocID fieldIndividualAllocID;

   public:
   bool isSetIndividualAllocRejCode() const { return fieldIndividualAllocRejCode.offset >= 0; }
   FieldIndividualAllocRejCode::ValueType getIndividualAllocRejCode() const { return fieldIndividualAllocRejCode.getValue( buf ); }
   const char * ptrToIndividualAllocRejCode() const { return buf + fieldIndividualAllocRejCode.offset; }
   private: FieldIndividualAllocRejCode fieldIndividualAllocRejCode;

   public:
   bool isSetAllocText() const { return fieldAllocText.offset >= 0; }
   FieldAllocText::ValueType getAllocText() const { return fieldAllocText.getValue( buf ); }
   const char * ptrToAllocText() const { return buf + fieldAllocText.offset; }
   private: FieldAllocText fieldAllocText;

   public:
   bool isSetEncodedAllocTextLen() const { return fieldEncodedAllocTextLen.offset >= 0; }
   FieldEncodedAllocTextLen::ValueType getEncodedAllocTextLen() const { return fieldEncodedAllocTextLen.getValue( buf ); }
   const char * ptrToEncodedAllocTextLen() const { return buf + fieldEncodedAllocTextLen.offset; }
   private: FieldEncodedAllocTextLen fieldEncodedAllocTextLen;

   public:
   bool isSetEncodedAllocText() const { return fieldEncodedAllocText.offset >= 0; }
   FieldEncodedAllocText::ValueType getEncodedAllocText() const { return fieldEncodedAllocText.getValue( buf ); }
   const char * ptrToEncodedAllocText() const { return buf + fieldEncodedAllocText.offset; }
   private: FieldEncodedAllocText fieldEncodedAllocText;

};

class GroupTradingSessions : public MessageBase
{
  
// Methods
   public:
   GroupTradingSessions();
   typedef std::vector<GroupTradingSessions> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

};

class GroupSecurityAltID : public MessageBase
{
  
// Methods
   public:
   GroupSecurityAltID();
   typedef std::vector<GroupSecurityAltID> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSecurityAltID() const { return fieldSecurityAltID.offset >= 0; }
   FieldSecurityAltID::ValueType getSecurityAltID() const { return fieldSecurityAltID.getValue( buf ); }
   const char * ptrToSecurityAltID() const { return buf + fieldSecurityAltID.offset; }
   private: FieldSecurityAltID fieldSecurityAltID;

   public:
   bool isSetSecurityAltIDSource() const { return fieldSecurityAltIDSource.offset >= 0; }
   FieldSecurityAltIDSource::ValueType getSecurityAltIDSource() const { return fieldSecurityAltIDSource.getValue( buf ); }
   const char * ptrToSecurityAltIDSource() const { return buf + fieldSecurityAltIDSource.offset; }
   private: FieldSecurityAltIDSource fieldSecurityAltIDSource;

};

class GroupUnderlyingSecurityAltID : public MessageBase
{
  
// Methods
   public:
   GroupUnderlyingSecurityAltID();
   typedef std::vector<GroupUnderlyingSecurityAltID> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetUnderlyingSecurityAltID() const { return fieldUnderlyingSecurityAltID.offset >= 0; }
   FieldUnderlyingSecurityAltID::ValueType getUnderlyingSecurityAltID() const { return fieldUnderlyingSecurityAltID.getValue( buf ); }
   const char * ptrToUnderlyingSecurityAltID() const { return buf + fieldUnderlyingSecurityAltID.offset; }
   private: FieldUnderlyingSecurityAltID fieldUnderlyingSecurityAltID;

   public:
   bool isSetUnderlyingSecurityAltIDSource() const { return fieldUnderlyingSecurityAltIDSource.offset >= 0; }
   FieldUnderlyingSecurityAltIDSource::ValueType getUnderlyingSecurityAltIDSource() const { return fieldUnderlyingSecurityAltIDSource.getValue( buf ); }
   const char * ptrToUnderlyingSecurityAltIDSource() const { return buf + fieldUnderlyingSecurityAltIDSource.offset; }
   private: FieldUnderlyingSecurityAltIDSource fieldUnderlyingSecurityAltIDSource;

};

class GroupUnderlyingStips : public MessageBase
{
  
// Methods
   public:
   GroupUnderlyingStips();
   typedef std::vector<GroupUnderlyingStips> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetUnderlyingStipType() const { return fieldUnderlyingStipType.offset >= 0; }
   FieldUnderlyingStipType::ValueType getUnderlyingStipType() const { return fieldUnderlyingStipType.getValue( buf ); }
   const char * ptrToUnderlyingStipType() const { return buf + fieldUnderlyingStipType.offset; }
   private: FieldUnderlyingStipType fieldUnderlyingStipType;

   public:
   bool isSetUnderlyingStipValue() const { return fieldUnderlyingStipValue.offset >= 0; }
   FieldUnderlyingStipValue::ValueType getUnderlyingStipValue() const { return fieldUnderlyingStipValue.getValue( buf ); }
   const char * ptrToUnderlyingStipValue() const { return buf + fieldUnderlyingStipValue.offset; }
   private: FieldUnderlyingStipValue fieldUnderlyingStipValue;

};

class GroupUnderlyings : public MessageBase
{
  
// Methods
   public:
   GroupUnderlyings();
   typedef std::vector<GroupUnderlyings> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetUnderlyingSymbol() const { return fieldUnderlyingSymbol.offset >= 0; }
   FieldUnderlyingSymbol::ValueType getUnderlyingSymbol() const { return fieldUnderlyingSymbol.getValue( buf ); }
   const char * ptrToUnderlyingSymbol() const { return buf + fieldUnderlyingSymbol.offset; }
   private: FieldUnderlyingSymbol fieldUnderlyingSymbol;

   public:
   bool isSetUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.offset >= 0; }
   FieldUnderlyingSymbolSfx::ValueType getUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.getValue( buf ); }
   const char * ptrToUnderlyingSymbolSfx() const { return buf + fieldUnderlyingSymbolSfx.offset; }
   private: FieldUnderlyingSymbolSfx fieldUnderlyingSymbolSfx;

   public:
   bool isSetUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.offset >= 0; }
   FieldUnderlyingSecurityID::ValueType getUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.getValue( buf ); }
   const char * ptrToUnderlyingSecurityID() const { return buf + fieldUnderlyingSecurityID.offset; }
   private: FieldUnderlyingSecurityID fieldUnderlyingSecurityID;

   public:
   bool isSetUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.offset >= 0; }
   FieldUnderlyingSecurityIDSource::ValueType getUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.getValue( buf ); }
   const char * ptrToUnderlyingSecurityIDSource() const { return buf + fieldUnderlyingSecurityIDSource.offset; }
   private: FieldUnderlyingSecurityIDSource fieldUnderlyingSecurityIDSource;

   public:
   bool isSetNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.offset >= 0; }
   FieldNoUnderlyingSecurityAltID::ValueType getNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.getValue( buf ); }
   const char * ptrToNoUnderlyingSecurityAltID() const { return buf + fieldNoUnderlyingSecurityAltID.offset; }
   private: FieldNoUnderlyingSecurityAltID fieldNoUnderlyingSecurityAltID;
  
   public:
   std::size_t getGroupCountUnderlyingSecurityAltID() const { return groupsUnderlyingSecurityAltID.size(); } 
   const GroupUnderlyingSecurityAltID & getGroupUnderlyingSecurityAltID( std::size_t idx ) const { return groupsUnderlyingSecurityAltID[ idx ]; } 
   private: GroupUnderlyingSecurityAltID::Array groupsUnderlyingSecurityAltID{ 10 };

   public:
   bool isSetUnderlyingProduct() const { return fieldUnderlyingProduct.offset >= 0; }
   FieldUnderlyingProduct::ValueType getUnderlyingProduct() const { return fieldUnderlyingProduct.getValue( buf ); }
   const char * ptrToUnderlyingProduct() const { return buf + fieldUnderlyingProduct.offset; }
   private: FieldUnderlyingProduct fieldUnderlyingProduct;

   public:
   bool isSetUnderlyingCFICode() const { return fieldUnderlyingCFICode.offset >= 0; }
   FieldUnderlyingCFICode::ValueType getUnderlyingCFICode() const { return fieldUnderlyingCFICode.getValue( buf ); }
   const char * ptrToUnderlyingCFICode() const { return buf + fieldUnderlyingCFICode.offset; }
   private: FieldUnderlyingCFICode fieldUnderlyingCFICode;

   public:
   bool isSetUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.offset >= 0; }
   FieldUnderlyingSecurityType::ValueType getUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingSecurityType() const { return buf + fieldUnderlyingSecurityType.offset; }
   private: FieldUnderlyingSecurityType fieldUnderlyingSecurityType;

   public:
   bool isSetUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.offset >= 0; }
   FieldUnderlyingSecuritySubType::ValueType getUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.getValue( buf ); }
   const char * ptrToUnderlyingSecuritySubType() const { return buf + fieldUnderlyingSecuritySubType.offset; }
   private: FieldUnderlyingSecuritySubType fieldUnderlyingSecuritySubType;

   public:
   bool isSetUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.offset >= 0; }
   FieldUnderlyingMaturityMonthYear::ValueType getUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.getValue( buf ); }
   const char * ptrToUnderlyingMaturityMonthYear() const { return buf + fieldUnderlyingMaturityMonthYear.offset; }
   private: FieldUnderlyingMaturityMonthYear fieldUnderlyingMaturityMonthYear;

   public:
   bool isSetUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.offset >= 0; }
   FieldUnderlyingMaturityDate::ValueType getUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.getValue( buf ); }
   const char * ptrToUnderlyingMaturityDate() const { return buf + fieldUnderlyingMaturityDate.offset; }
   private: FieldUnderlyingMaturityDate fieldUnderlyingMaturityDate;

   public:
   bool isSetUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.offset >= 0; }
   FieldUnderlyingPutOrCall::ValueType getUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.getValue( buf ); }
   const char * ptrToUnderlyingPutOrCall() const { return buf + fieldUnderlyingPutOrCall.offset; }
   private: FieldUnderlyingPutOrCall fieldUnderlyingPutOrCall;

   public:
   bool isSetUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.offset >= 0; }
   FieldUnderlyingCouponPaymentDate::ValueType getUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.getValue( buf ); }
   const char * ptrToUnderlyingCouponPaymentDate() const { return buf + fieldUnderlyingCouponPaymentDate.offset; }
   private: FieldUnderlyingCouponPaymentDate fieldUnderlyingCouponPaymentDate;

   public:
   bool isSetUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.offset >= 0; }
   FieldUnderlyingIssueDate::ValueType getUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.getValue( buf ); }
   const char * ptrToUnderlyingIssueDate() const { return buf + fieldUnderlyingIssueDate.offset; }
   private: FieldUnderlyingIssueDate fieldUnderlyingIssueDate;

   public:
   bool isSetUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.offset >= 0; }
   FieldUnderlyingRepoCollateralSecurityType::ValueType getUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingRepoCollateralSecurityType() const { return buf + fieldUnderlyingRepoCollateralSecurityType.offset; }
   private: FieldUnderlyingRepoCollateralSecurityType fieldUnderlyingRepoCollateralSecurityType;

   public:
   bool isSetUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.offset >= 0; }
   FieldUnderlyingRepurchaseTerm::ValueType getUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseTerm() const { return buf + fieldUnderlyingRepurchaseTerm.offset; }
   private: FieldUnderlyingRepurchaseTerm fieldUnderlyingRepurchaseTerm;

   public:
   bool isSetUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.offset >= 0; }
   FieldUnderlyingRepurchaseRate::ValueType getUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseRate() const { return buf + fieldUnderlyingRepurchaseRate.offset; }
   private: FieldUnderlyingRepurchaseRate fieldUnderlyingRepurchaseRate;

   public:
   bool isSetUnderlyingFactor() const { return fieldUnderlyingFactor.offset >= 0; }
   FieldUnderlyingFactor::ValueType getUnderlyingFactor() const { return fieldUnderlyingFactor.getValue( buf ); }
   const char * ptrToUnderlyingFactor() const { return buf + fieldUnderlyingFactor.offset; }
   private: FieldUnderlyingFactor fieldUnderlyingFactor;

   public:
   bool isSetUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.offset >= 0; }
   FieldUnderlyingCreditRating::ValueType getUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.getValue( buf ); }
   const char * ptrToUnderlyingCreditRating() const { return buf + fieldUnderlyingCreditRating.offset; }
   private: FieldUnderlyingCreditRating fieldUnderlyingCreditRating;

   public:
   bool isSetUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.offset >= 0; }
   FieldUnderlyingInstrRegistry::ValueType getUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.getValue( buf ); }
   const char * ptrToUnderlyingInstrRegistry() const { return buf + fieldUnderlyingInstrRegistry.offset; }
   private: FieldUnderlyingInstrRegistry fieldUnderlyingInstrRegistry;

   public:
   bool isSetUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.offset >= 0; }
   FieldUnderlyingCountryOfIssue::ValueType getUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingCountryOfIssue() const { return buf + fieldUnderlyingCountryOfIssue.offset; }
   private: FieldUnderlyingCountryOfIssue fieldUnderlyingCountryOfIssue;

   public:
   bool isSetUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0; }
   FieldUnderlyingStateOrProvinceOfIssue::ValueType getUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingStateOrProvinceOfIssue() const { return buf + fieldUnderlyingStateOrProvinceOfIssue.offset; }
   private: FieldUnderlyingStateOrProvinceOfIssue fieldUnderlyingStateOrProvinceOfIssue;

   public:
   bool isSetUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.offset >= 0; }
   FieldUnderlyingLocaleOfIssue::ValueType getUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingLocaleOfIssue() const { return buf + fieldUnderlyingLocaleOfIssue.offset; }
   private: FieldUnderlyingLocaleOfIssue fieldUnderlyingLocaleOfIssue;

   public:
   bool isSetUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.offset >= 0; }
   FieldUnderlyingRedemptionDate::ValueType getUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.getValue( buf ); }
   const char * ptrToUnderlyingRedemptionDate() const { return buf + fieldUnderlyingRedemptionDate.offset; }
   private: FieldUnderlyingRedemptionDate fieldUnderlyingRedemptionDate;

   public:
   bool isSetUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.offset >= 0; }
   FieldUnderlyingStrikePrice::ValueType getUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.getValue( buf ); }
   const char * ptrToUnderlyingStrikePrice() const { return buf + fieldUnderlyingStrikePrice.offset; }
   private: FieldUnderlyingStrikePrice fieldUnderlyingStrikePrice;

   public:
   bool isSetUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.offset >= 0; }
   FieldUnderlyingStrikeCurrency::ValueType getUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.getValue( buf ); }
   const char * ptrToUnderlyingStrikeCurrency() const { return buf + fieldUnderlyingStrikeCurrency.offset; }
   private: FieldUnderlyingStrikeCurrency fieldUnderlyingStrikeCurrency;

   public:
   bool isSetUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.offset >= 0; }
   FieldUnderlyingOptAttribute::ValueType getUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.getValue( buf ); }
   const char * ptrToUnderlyingOptAttribute() const { return buf + fieldUnderlyingOptAttribute.offset; }
   private: FieldUnderlyingOptAttribute fieldUnderlyingOptAttribute;

   public:
   bool isSetUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.offset >= 0; }
   FieldUnderlyingContractMultiplier::ValueType getUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.getValue( buf ); }
   const char * ptrToUnderlyingContractMultiplier() const { return buf + fieldUnderlyingContractMultiplier.offset; }
   private: FieldUnderlyingContractMultiplier fieldUnderlyingContractMultiplier;

   public:
   bool isSetUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.offset >= 0; }
   FieldUnderlyingCouponRate::ValueType getUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.getValue( buf ); }
   const char * ptrToUnderlyingCouponRate() const { return buf + fieldUnderlyingCouponRate.offset; }
   private: FieldUnderlyingCouponRate fieldUnderlyingCouponRate;

   public:
   bool isSetUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.offset >= 0; }
   FieldUnderlyingSecurityExchange::ValueType getUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.getValue( buf ); }
   const char * ptrToUnderlyingSecurityExchange() const { return buf + fieldUnderlyingSecurityExchange.offset; }
   private: FieldUnderlyingSecurityExchange fieldUnderlyingSecurityExchange;

   public:
   bool isSetUnderlyingIssuer() const { return fieldUnderlyingIssuer.offset >= 0; }
   FieldUnderlyingIssuer::ValueType getUnderlyingIssuer() const { return fieldUnderlyingIssuer.getValue( buf ); }
   const char * ptrToUnderlyingIssuer() const { return buf + fieldUnderlyingIssuer.offset; }
   private: FieldUnderlyingIssuer fieldUnderlyingIssuer;

   public:
   bool isSetEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.offset >= 0; }
   FieldEncodedUnderlyingIssuerLen::ValueType getEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuerLen() const { return buf + fieldEncodedUnderlyingIssuerLen.offset; }
   private: FieldEncodedUnderlyingIssuerLen fieldEncodedUnderlyingIssuerLen;

   public:
   bool isSetEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.offset >= 0; }
   FieldEncodedUnderlyingIssuer::ValueType getEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuer() const { return buf + fieldEncodedUnderlyingIssuer.offset; }
   private: FieldEncodedUnderlyingIssuer fieldEncodedUnderlyingIssuer;

   public:
   bool isSetUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.offset >= 0; }
   FieldUnderlyingSecurityDesc::ValueType getUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToUnderlyingSecurityDesc() const { return buf + fieldUnderlyingSecurityDesc.offset; }
   private: FieldUnderlyingSecurityDesc fieldUnderlyingSecurityDesc;

   public:
   bool isSetEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.offset >= 0; }
   FieldEncodedUnderlyingSecurityDescLen::ValueType getEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDescLen() const { return buf + fieldEncodedUnderlyingSecurityDescLen.offset; }
   private: FieldEncodedUnderlyingSecurityDescLen fieldEncodedUnderlyingSecurityDescLen;

   public:
   bool isSetEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.offset >= 0; }
   FieldEncodedUnderlyingSecurityDesc::ValueType getEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDesc() const { return buf + fieldEncodedUnderlyingSecurityDesc.offset; }
   private: FieldEncodedUnderlyingSecurityDesc fieldEncodedUnderlyingSecurityDesc;

   public:
   bool isSetUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.offset >= 0; }
   FieldUnderlyingCPProgram::ValueType getUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.getValue( buf ); }
   const char * ptrToUnderlyingCPProgram() const { return buf + fieldUnderlyingCPProgram.offset; }
   private: FieldUnderlyingCPProgram fieldUnderlyingCPProgram;

   public:
   bool isSetUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.offset >= 0; }
   FieldUnderlyingCPRegType::ValueType getUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.getValue( buf ); }
   const char * ptrToUnderlyingCPRegType() const { return buf + fieldUnderlyingCPRegType.offset; }
   private: FieldUnderlyingCPRegType fieldUnderlyingCPRegType;

   public:
   bool isSetUnderlyingCurrency() const { return fieldUnderlyingCurrency.offset >= 0; }
   FieldUnderlyingCurrency::ValueType getUnderlyingCurrency() const { return fieldUnderlyingCurrency.getValue( buf ); }
   const char * ptrToUnderlyingCurrency() const { return buf + fieldUnderlyingCurrency.offset; }
   private: FieldUnderlyingCurrency fieldUnderlyingCurrency;

   public:
   bool isSetUnderlyingQty() const { return fieldUnderlyingQty.offset >= 0; }
   FieldUnderlyingQty::ValueType getUnderlyingQty() const { return fieldUnderlyingQty.getValue( buf ); }
   const char * ptrToUnderlyingQty() const { return buf + fieldUnderlyingQty.offset; }
   private: FieldUnderlyingQty fieldUnderlyingQty;

   public:
   bool isSetUnderlyingPx() const { return fieldUnderlyingPx.offset >= 0; }
   FieldUnderlyingPx::ValueType getUnderlyingPx() const { return fieldUnderlyingPx.getValue( buf ); }
   const char * ptrToUnderlyingPx() const { return buf + fieldUnderlyingPx.offset; }
   private: FieldUnderlyingPx fieldUnderlyingPx;

   public:
   bool isSetUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.offset >= 0; }
   FieldUnderlyingDirtyPrice::ValueType getUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.getValue( buf ); }
   const char * ptrToUnderlyingDirtyPrice() const { return buf + fieldUnderlyingDirtyPrice.offset; }
   private: FieldUnderlyingDirtyPrice fieldUnderlyingDirtyPrice;

   public:
   bool isSetUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.offset >= 0; }
   FieldUnderlyingEndPrice::ValueType getUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.getValue( buf ); }
   const char * ptrToUnderlyingEndPrice() const { return buf + fieldUnderlyingEndPrice.offset; }
   private: FieldUnderlyingEndPrice fieldUnderlyingEndPrice;

   public:
   bool isSetUnderlyingStartValue() const { return fieldUnderlyingStartValue.offset >= 0; }
   FieldUnderlyingStartValue::ValueType getUnderlyingStartValue() const { return fieldUnderlyingStartValue.getValue( buf ); }
   const char * ptrToUnderlyingStartValue() const { return buf + fieldUnderlyingStartValue.offset; }
   private: FieldUnderlyingStartValue fieldUnderlyingStartValue;

   public:
   bool isSetUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.offset >= 0; }
   FieldUnderlyingCurrentValue::ValueType getUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.getValue( buf ); }
   const char * ptrToUnderlyingCurrentValue() const { return buf + fieldUnderlyingCurrentValue.offset; }
   private: FieldUnderlyingCurrentValue fieldUnderlyingCurrentValue;

   public:
   bool isSetUnderlyingEndValue() const { return fieldUnderlyingEndValue.offset >= 0; }
   FieldUnderlyingEndValue::ValueType getUnderlyingEndValue() const { return fieldUnderlyingEndValue.getValue( buf ); }
   const char * ptrToUnderlyingEndValue() const { return buf + fieldUnderlyingEndValue.offset; }
   private: FieldUnderlyingEndValue fieldUnderlyingEndValue;

   public:
   bool isSetNoUnderlyingStips() const { return fieldNoUnderlyingStips.offset >= 0; }
   FieldNoUnderlyingStips::ValueType getNoUnderlyingStips() const { return fieldNoUnderlyingStips.getValue( buf ); }
   const char * ptrToNoUnderlyingStips() const { return buf + fieldNoUnderlyingStips.offset; }
   private: FieldNoUnderlyingStips fieldNoUnderlyingStips;
  
   public:
   std::size_t getGroupCountUnderlyingStips() const { return groupsUnderlyingStips.size(); } 
   const GroupUnderlyingStips & getGroupUnderlyingStips( std::size_t idx ) const { return groupsUnderlyingStips[ idx ]; } 
   private: GroupUnderlyingStips::Array groupsUnderlyingStips{ 10 };

   public:
   bool isSetUnderlyingSettlPrice() const { return fieldUnderlyingSettlPrice.offset >= 0; }
   FieldUnderlyingSettlPrice::ValueType getUnderlyingSettlPrice() const { return fieldUnderlyingSettlPrice.getValue( buf ); }
   const char * ptrToUnderlyingSettlPrice() const { return buf + fieldUnderlyingSettlPrice.offset; }
   private: FieldUnderlyingSettlPrice fieldUnderlyingSettlPrice;

   public:
   bool isSetUnderlyingSettlPriceType() const { return fieldUnderlyingSettlPriceType.offset >= 0; }
   FieldUnderlyingSettlPriceType::ValueType getUnderlyingSettlPriceType() const { return fieldUnderlyingSettlPriceType.getValue( buf ); }
   const char * ptrToUnderlyingSettlPriceType() const { return buf + fieldUnderlyingSettlPriceType.offset; }
   private: FieldUnderlyingSettlPriceType fieldUnderlyingSettlPriceType;

};

class GroupStipulations : public MessageBase
{
  
// Methods
   public:
   GroupStipulations();
   typedef std::vector<GroupStipulations> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetStipulationType() const { return fieldStipulationType.offset >= 0; }
   FieldStipulationType::ValueType getStipulationType() const { return fieldStipulationType.getValue( buf ); }
   const char * ptrToStipulationType() const { return buf + fieldStipulationType.offset; }
   private: FieldStipulationType fieldStipulationType;

   public:
   bool isSetStipulationValue() const { return fieldStipulationValue.offset >= 0; }
   FieldStipulationValue::ValueType getStipulationValue() const { return fieldStipulationValue.getValue( buf ); }
   const char * ptrToStipulationValue() const { return buf + fieldStipulationValue.offset; }
   private: FieldStipulationValue fieldStipulationValue;

};

class GroupOrders : public MessageBase
{
  
// Methods
   public:
   GroupOrders();
   typedef std::vector<GroupOrders> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetListSeqNo() const { return fieldListSeqNo.offset >= 0; }
   FieldListSeqNo::ValueType getListSeqNo() const { return fieldListSeqNo.getValue( buf ); }
   const char * ptrToListSeqNo() const { return buf + fieldListSeqNo.offset; }
   private: FieldListSeqNo fieldListSeqNo;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetSettlInstMode() const { return fieldSettlInstMode.offset >= 0; }
   FieldSettlInstMode::ValueType getSettlInstMode() const { return fieldSettlInstMode.getValue( buf ); }
   const char * ptrToSettlInstMode() const { return buf + fieldSettlInstMode.offset; }
   private: FieldSettlInstMode fieldSettlInstMode;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetDayBookingInst() const { return fieldDayBookingInst.offset >= 0; }
   FieldDayBookingInst::ValueType getDayBookingInst() const { return fieldDayBookingInst.getValue( buf ); }
   const char * ptrToDayBookingInst() const { return buf + fieldDayBookingInst.offset; }
   private: FieldDayBookingInst fieldDayBookingInst;

   public:
   bool isSetBookingUnit() const { return fieldBookingUnit.offset >= 0; }
   FieldBookingUnit::ValueType getBookingUnit() const { return fieldBookingUnit.getValue( buf ); }
   const char * ptrToBookingUnit() const { return buf + fieldBookingUnit.offset; }
   private: FieldBookingUnit fieldBookingUnit;

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetPreallocMethod() const { return fieldPreallocMethod.offset >= 0; }
   FieldPreallocMethod::ValueType getPreallocMethod() const { return fieldPreallocMethod.getValue( buf ); }
   const char * ptrToPreallocMethod() const { return buf + fieldPreallocMethod.offset; }
   private: FieldPreallocMethod fieldPreallocMethod;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetCashMargin() const { return fieldCashMargin.offset >= 0; }
   FieldCashMargin::ValueType getCashMargin() const { return fieldCashMargin.getValue( buf ); }
   const char * ptrToCashMargin() const { return buf + fieldCashMargin.offset; }
   private: FieldCashMargin fieldCashMargin;

   public:
   bool isSetClearingFeeIndicator() const { return fieldClearingFeeIndicator.offset >= 0; }
   FieldClearingFeeIndicator::ValueType getClearingFeeIndicator() const { return fieldClearingFeeIndicator.getValue( buf ); }
   const char * ptrToClearingFeeIndicator() const { return buf + fieldClearingFeeIndicator.offset; }
   private: FieldClearingFeeIndicator fieldClearingFeeIndicator;

   public:
   bool isSetHandlInst() const { return fieldHandlInst.offset >= 0; }
   FieldHandlInst::ValueType getHandlInst() const { return fieldHandlInst.getValue( buf ); }
   const char * ptrToHandlInst() const { return buf + fieldHandlInst.offset; }
   private: FieldHandlInst fieldHandlInst;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetMaxFloor() const { return fieldMaxFloor.offset >= 0; }
   FieldMaxFloor::ValueType getMaxFloor() const { return fieldMaxFloor.getValue( buf ); }
   const char * ptrToMaxFloor() const { return buf + fieldMaxFloor.offset; }
   private: FieldMaxFloor fieldMaxFloor;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetProcessCode() const { return fieldProcessCode.offset >= 0; }
   FieldProcessCode::ValueType getProcessCode() const { return fieldProcessCode.getValue( buf ); }
   const char * ptrToProcessCode() const { return buf + fieldProcessCode.offset; }
   private: FieldProcessCode fieldProcessCode;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetPrevClosePx() const { return fieldPrevClosePx.offset >= 0; }
   FieldPrevClosePx::ValueType getPrevClosePx() const { return fieldPrevClosePx.getValue( buf ); }
   const char * ptrToPrevClosePx() const { return buf + fieldPrevClosePx.offset; }
   private: FieldPrevClosePx fieldPrevClosePx;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetSideValueInd() const { return fieldSideValueInd.offset >= 0; }
   FieldSideValueInd::ValueType getSideValueInd() const { return fieldSideValueInd.getValue( buf ); }
   const char * ptrToSideValueInd() const { return buf + fieldSideValueInd.offset; }
   private: FieldSideValueInd fieldSideValueInd;

   public:
   bool isSetLocateReqd() const { return fieldLocateReqd.offset >= 0; }
   FieldLocateReqd::ValueType getLocateReqd() const { return fieldLocateReqd.getValue( buf ); }
   const char * ptrToLocateReqd() const { return buf + fieldLocateReqd.offset; }
   private: FieldLocateReqd fieldLocateReqd;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetStopPx() const { return fieldStopPx.offset >= 0; }
   FieldStopPx::ValueType getStopPx() const { return fieldStopPx.getValue( buf ); }
   const char * ptrToStopPx() const { return buf + fieldStopPx.offset; }
   private: FieldStopPx fieldStopPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetSolicitedFlag() const { return fieldSolicitedFlag.offset >= 0; }
   FieldSolicitedFlag::ValueType getSolicitedFlag() const { return fieldSolicitedFlag.getValue( buf ); }
   const char * ptrToSolicitedFlag() const { return buf + fieldSolicitedFlag.offset; }
   private: FieldSolicitedFlag fieldSolicitedFlag;

   public:
   bool isSetIOIID() const { return fieldIOIID.offset >= 0; }
   FieldIOIID::ValueType getIOIID() const { return fieldIOIID.getValue( buf ); }
   const char * ptrToIOIID() const { return buf + fieldIOIID.offset; }
   private: FieldIOIID fieldIOIID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetGTBookingInst() const { return fieldGTBookingInst.offset >= 0; }
   FieldGTBookingInst::ValueType getGTBookingInst() const { return fieldGTBookingInst.getValue( buf ); }
   const char * ptrToGTBookingInst() const { return buf + fieldGTBookingInst.offset; }
   private: FieldGTBookingInst fieldGTBookingInst;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommCurrency() const { return fieldCommCurrency.offset >= 0; }
   FieldCommCurrency::ValueType getCommCurrency() const { return fieldCommCurrency.getValue( buf ); }
   const char * ptrToCommCurrency() const { return buf + fieldCommCurrency.offset; }
   private: FieldCommCurrency fieldCommCurrency;

   public:
   bool isSetFundRenewWaiv() const { return fieldFundRenewWaiv.offset >= 0; }
   FieldFundRenewWaiv::ValueType getFundRenewWaiv() const { return fieldFundRenewWaiv.getValue( buf ); }
   const char * ptrToFundRenewWaiv() const { return buf + fieldFundRenewWaiv.offset; }
   private: FieldFundRenewWaiv fieldFundRenewWaiv;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetOrderRestrictions() const { return fieldOrderRestrictions.offset >= 0; }
   FieldOrderRestrictions::ValueType getOrderRestrictions() const { return fieldOrderRestrictions.getValue( buf ); }
   const char * ptrToOrderRestrictions() const { return buf + fieldOrderRestrictions.offset; }
   private: FieldOrderRestrictions fieldOrderRestrictions;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetForexReq() const { return fieldForexReq.offset >= 0; }
   FieldForexReq::ValueType getForexReq() const { return fieldForexReq.getValue( buf ); }
   const char * ptrToForexReq() const { return buf + fieldForexReq.offset; }
   private: FieldForexReq fieldForexReq;

   public:
   bool isSetSettlCurrency() const { return fieldSettlCurrency.offset >= 0; }
   FieldSettlCurrency::ValueType getSettlCurrency() const { return fieldSettlCurrency.getValue( buf ); }
   const char * ptrToSettlCurrency() const { return buf + fieldSettlCurrency.offset; }
   private: FieldSettlCurrency fieldSettlCurrency;

   public:
   bool isSetBookingType() const { return fieldBookingType.offset >= 0; }
   FieldBookingType::ValueType getBookingType() const { return fieldBookingType.getValue( buf ); }
   const char * ptrToBookingType() const { return buf + fieldBookingType.offset; }
   private: FieldBookingType fieldBookingType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetSettlDate2() const { return fieldSettlDate2.offset >= 0; }
   FieldSettlDate2::ValueType getSettlDate2() const { return fieldSettlDate2.getValue( buf ); }
   const char * ptrToSettlDate2() const { return buf + fieldSettlDate2.offset; }
   private: FieldSettlDate2 fieldSettlDate2;

   public:
   bool isSetOrderQty2() const { return fieldOrderQty2.offset >= 0; }
   FieldOrderQty2::ValueType getOrderQty2() const { return fieldOrderQty2.getValue( buf ); }
   const char * ptrToOrderQty2() const { return buf + fieldOrderQty2.offset; }
   private: FieldOrderQty2 fieldOrderQty2;

   public:
   bool isSetPrice2() const { return fieldPrice2.offset >= 0; }
   FieldPrice2::ValueType getPrice2() const { return fieldPrice2.getValue( buf ); }
   const char * ptrToPrice2() const { return buf + fieldPrice2.offset; }
   private: FieldPrice2 fieldPrice2;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetCoveredOrUncovered() const { return fieldCoveredOrUncovered.offset >= 0; }
   FieldCoveredOrUncovered::ValueType getCoveredOrUncovered() const { return fieldCoveredOrUncovered.getValue( buf ); }
   const char * ptrToCoveredOrUncovered() const { return buf + fieldCoveredOrUncovered.offset; }
   private: FieldCoveredOrUncovered fieldCoveredOrUncovered;

   public:
   bool isSetMaxShow() const { return fieldMaxShow.offset >= 0; }
   FieldMaxShow::ValueType getMaxShow() const { return fieldMaxShow.getValue( buf ); }
   const char * ptrToMaxShow() const { return buf + fieldMaxShow.offset; }
   private: FieldMaxShow fieldMaxShow;

   public:
   bool isSetPegOffsetValue() const { return fieldPegOffsetValue.offset >= 0; }
   FieldPegOffsetValue::ValueType getPegOffsetValue() const { return fieldPegOffsetValue.getValue( buf ); }
   const char * ptrToPegOffsetValue() const { return buf + fieldPegOffsetValue.offset; }
   private: FieldPegOffsetValue fieldPegOffsetValue;

   public:
   bool isSetPegMoveType() const { return fieldPegMoveType.offset >= 0; }
   FieldPegMoveType::ValueType getPegMoveType() const { return fieldPegMoveType.getValue( buf ); }
   const char * ptrToPegMoveType() const { return buf + fieldPegMoveType.offset; }
   private: FieldPegMoveType fieldPegMoveType;

   public:
   bool isSetPegOffsetType() const { return fieldPegOffsetType.offset >= 0; }
   FieldPegOffsetType::ValueType getPegOffsetType() const { return fieldPegOffsetType.getValue( buf ); }
   const char * ptrToPegOffsetType() const { return buf + fieldPegOffsetType.offset; }
   private: FieldPegOffsetType fieldPegOffsetType;

   public:
   bool isSetPegLimitType() const { return fieldPegLimitType.offset >= 0; }
   FieldPegLimitType::ValueType getPegLimitType() const { return fieldPegLimitType.getValue( buf ); }
   const char * ptrToPegLimitType() const { return buf + fieldPegLimitType.offset; }
   private: FieldPegLimitType fieldPegLimitType;

   public:
   bool isSetPegRoundDirection() const { return fieldPegRoundDirection.offset >= 0; }
   FieldPegRoundDirection::ValueType getPegRoundDirection() const { return fieldPegRoundDirection.getValue( buf ); }
   const char * ptrToPegRoundDirection() const { return buf + fieldPegRoundDirection.offset; }
   private: FieldPegRoundDirection fieldPegRoundDirection;

   public:
   bool isSetPegScope() const { return fieldPegScope.offset >= 0; }
   FieldPegScope::ValueType getPegScope() const { return fieldPegScope.getValue( buf ); }
   const char * ptrToPegScope() const { return buf + fieldPegScope.offset; }
   private: FieldPegScope fieldPegScope;

   public:
   bool isSetDiscretionInst() const { return fieldDiscretionInst.offset >= 0; }
   FieldDiscretionInst::ValueType getDiscretionInst() const { return fieldDiscretionInst.getValue( buf ); }
   const char * ptrToDiscretionInst() const { return buf + fieldDiscretionInst.offset; }
   private: FieldDiscretionInst fieldDiscretionInst;

   public:
   bool isSetDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.offset >= 0; }
   FieldDiscretionOffsetValue::ValueType getDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.getValue( buf ); }
   const char * ptrToDiscretionOffsetValue() const { return buf + fieldDiscretionOffsetValue.offset; }
   private: FieldDiscretionOffsetValue fieldDiscretionOffsetValue;

   public:
   bool isSetDiscretionMoveType() const { return fieldDiscretionMoveType.offset >= 0; }
   FieldDiscretionMoveType::ValueType getDiscretionMoveType() const { return fieldDiscretionMoveType.getValue( buf ); }
   const char * ptrToDiscretionMoveType() const { return buf + fieldDiscretionMoveType.offset; }
   private: FieldDiscretionMoveType fieldDiscretionMoveType;

   public:
   bool isSetDiscretionOffsetType() const { return fieldDiscretionOffsetType.offset >= 0; }
   FieldDiscretionOffsetType::ValueType getDiscretionOffsetType() const { return fieldDiscretionOffsetType.getValue( buf ); }
   const char * ptrToDiscretionOffsetType() const { return buf + fieldDiscretionOffsetType.offset; }
   private: FieldDiscretionOffsetType fieldDiscretionOffsetType;

   public:
   bool isSetDiscretionLimitType() const { return fieldDiscretionLimitType.offset >= 0; }
   FieldDiscretionLimitType::ValueType getDiscretionLimitType() const { return fieldDiscretionLimitType.getValue( buf ); }
   const char * ptrToDiscretionLimitType() const { return buf + fieldDiscretionLimitType.offset; }
   private: FieldDiscretionLimitType fieldDiscretionLimitType;

   public:
   bool isSetDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.offset >= 0; }
   FieldDiscretionRoundDirection::ValueType getDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.getValue( buf ); }
   const char * ptrToDiscretionRoundDirection() const { return buf + fieldDiscretionRoundDirection.offset; }
   private: FieldDiscretionRoundDirection fieldDiscretionRoundDirection;

   public:
   bool isSetDiscretionScope() const { return fieldDiscretionScope.offset >= 0; }
   FieldDiscretionScope::ValueType getDiscretionScope() const { return fieldDiscretionScope.getValue( buf ); }
   const char * ptrToDiscretionScope() const { return buf + fieldDiscretionScope.offset; }
   private: FieldDiscretionScope fieldDiscretionScope;

   public:
   bool isSetTargetStrategy() const { return fieldTargetStrategy.offset >= 0; }
   FieldTargetStrategy::ValueType getTargetStrategy() const { return fieldTargetStrategy.getValue( buf ); }
   const char * ptrToTargetStrategy() const { return buf + fieldTargetStrategy.offset; }
   private: FieldTargetStrategy fieldTargetStrategy;

   public:
   bool isSetTargetStrategyParameters() const { return fieldTargetStrategyParameters.offset >= 0; }
   FieldTargetStrategyParameters::ValueType getTargetStrategyParameters() const { return fieldTargetStrategyParameters.getValue( buf ); }
   const char * ptrToTargetStrategyParameters() const { return buf + fieldTargetStrategyParameters.offset; }
   private: FieldTargetStrategyParameters fieldTargetStrategyParameters;

   public:
   bool isSetParticipationRate() const { return fieldParticipationRate.offset >= 0; }
   FieldParticipationRate::ValueType getParticipationRate() const { return fieldParticipationRate.getValue( buf ); }
   const char * ptrToParticipationRate() const { return buf + fieldParticipationRate.offset; }
   private: FieldParticipationRate fieldParticipationRate;

   public:
   bool isSetDesignation() const { return fieldDesignation.offset >= 0; }
   FieldDesignation::ValueType getDesignation() const { return fieldDesignation.getValue( buf ); }
   const char * ptrToDesignation() const { return buf + fieldDesignation.offset; }
   private: FieldDesignation fieldDesignation;

};

class GroupSettlPartySubIDs : public MessageBase
{
  
// Methods
   public:
   GroupSettlPartySubIDs();
   typedef std::vector<GroupSettlPartySubIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSettlPartySubID() const { return fieldSettlPartySubID.offset >= 0; }
   FieldSettlPartySubID::ValueType getSettlPartySubID() const { return fieldSettlPartySubID.getValue( buf ); }
   const char * ptrToSettlPartySubID() const { return buf + fieldSettlPartySubID.offset; }
   private: FieldSettlPartySubID fieldSettlPartySubID;

   public:
   bool isSetSettlPartySubIDType() const { return fieldSettlPartySubIDType.offset >= 0; }
   FieldSettlPartySubIDType::ValueType getSettlPartySubIDType() const { return fieldSettlPartySubIDType.getValue( buf ); }
   const char * ptrToSettlPartySubIDType() const { return buf + fieldSettlPartySubIDType.offset; }
   private: FieldSettlPartySubIDType fieldSettlPartySubIDType;

};

class GroupSettlPartyIDs : public MessageBase
{
  
// Methods
   public:
   GroupSettlPartyIDs();
   typedef std::vector<GroupSettlPartyIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSettlPartyID() const { return fieldSettlPartyID.offset >= 0; }
   FieldSettlPartyID::ValueType getSettlPartyID() const { return fieldSettlPartyID.getValue( buf ); }
   const char * ptrToSettlPartyID() const { return buf + fieldSettlPartyID.offset; }
   private: FieldSettlPartyID fieldSettlPartyID;

   public:
   bool isSetSettlPartyIDSource() const { return fieldSettlPartyIDSource.offset >= 0; }
   FieldSettlPartyIDSource::ValueType getSettlPartyIDSource() const { return fieldSettlPartyIDSource.getValue( buf ); }
   const char * ptrToSettlPartyIDSource() const { return buf + fieldSettlPartyIDSource.offset; }
   private: FieldSettlPartyIDSource fieldSettlPartyIDSource;

   public:
   bool isSetSettlPartyRole() const { return fieldSettlPartyRole.offset >= 0; }
   FieldSettlPartyRole::ValueType getSettlPartyRole() const { return fieldSettlPartyRole.getValue( buf ); }
   const char * ptrToSettlPartyRole() const { return buf + fieldSettlPartyRole.offset; }
   private: FieldSettlPartyRole fieldSettlPartyRole;

   public:
   bool isSetNoSettlPartySubIDs() const { return fieldNoSettlPartySubIDs.offset >= 0; }
   FieldNoSettlPartySubIDs::ValueType getNoSettlPartySubIDs() const { return fieldNoSettlPartySubIDs.getValue( buf ); }
   const char * ptrToNoSettlPartySubIDs() const { return buf + fieldNoSettlPartySubIDs.offset; }
   private: FieldNoSettlPartySubIDs fieldNoSettlPartySubIDs;
  
   public:
   std::size_t getGroupCountSettlPartySubIDs() const { return groupsSettlPartySubIDs.size(); } 
   const GroupSettlPartySubIDs & getGroupSettlPartySubIDs( std::size_t idx ) const { return groupsSettlPartySubIDs[ idx ]; } 
   private: GroupSettlPartySubIDs::Array groupsSettlPartySubIDs{ 10 };

};

class GroupDlvyInst : public MessageBase
{
  
// Methods
   public:
   GroupDlvyInst();
   typedef std::vector<GroupDlvyInst> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSettlInstSource() const { return fieldSettlInstSource.offset >= 0; }
   FieldSettlInstSource::ValueType getSettlInstSource() const { return fieldSettlInstSource.getValue( buf ); }
   const char * ptrToSettlInstSource() const { return buf + fieldSettlInstSource.offset; }
   private: FieldSettlInstSource fieldSettlInstSource;

   public:
   bool isSetDlvyInstType() const { return fieldDlvyInstType.offset >= 0; }
   FieldDlvyInstType::ValueType getDlvyInstType() const { return fieldDlvyInstType.getValue( buf ); }
   const char * ptrToDlvyInstType() const { return buf + fieldDlvyInstType.offset; }
   private: FieldDlvyInstType fieldDlvyInstType;

   public:
   bool isSetNoSettlPartyIDs() const { return fieldNoSettlPartyIDs.offset >= 0; }
   FieldNoSettlPartyIDs::ValueType getNoSettlPartyIDs() const { return fieldNoSettlPartyIDs.getValue( buf ); }
   const char * ptrToNoSettlPartyIDs() const { return buf + fieldNoSettlPartyIDs.offset; }
   private: FieldNoSettlPartyIDs fieldNoSettlPartyIDs;
  
   public:
   std::size_t getGroupCountSettlPartyIDs() const { return groupsSettlPartyIDs.size(); } 
   const GroupSettlPartyIDs & getGroupSettlPartyIDs( std::size_t idx ) const { return groupsSettlPartyIDs[ idx ]; } 
   private: GroupSettlPartyIDs::Array groupsSettlPartyIDs{ 10 };

};

class GroupClearingInstructions : public MessageBase
{
  
// Methods
   public:
   GroupClearingInstructions();
   typedef std::vector<GroupClearingInstructions> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetClearingInstruction() const { return fieldClearingInstruction.offset >= 0; }
   FieldClearingInstruction::ValueType getClearingInstruction() const { return fieldClearingInstruction.getValue( buf ); }
   const char * ptrToClearingInstruction() const { return buf + fieldClearingInstruction.offset; }
   private: FieldClearingInstruction fieldClearingInstruction;

};

class GroupNestedPartySubIDs : public MessageBase
{
  
// Methods
   public:
   GroupNestedPartySubIDs();
   typedef std::vector<GroupNestedPartySubIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetNestedPartySubID() const { return fieldNestedPartySubID.offset >= 0; }
   FieldNestedPartySubID::ValueType getNestedPartySubID() const { return fieldNestedPartySubID.getValue( buf ); }
   const char * ptrToNestedPartySubID() const { return buf + fieldNestedPartySubID.offset; }
   private: FieldNestedPartySubID fieldNestedPartySubID;

   public:
   bool isSetNestedPartySubIDType() const { return fieldNestedPartySubIDType.offset >= 0; }
   FieldNestedPartySubIDType::ValueType getNestedPartySubIDType() const { return fieldNestedPartySubIDType.getValue( buf ); }
   const char * ptrToNestedPartySubIDType() const { return buf + fieldNestedPartySubIDType.offset; }
   private: FieldNestedPartySubIDType fieldNestedPartySubIDType;

};

class GroupNestedPartyIDs : public MessageBase
{
  
// Methods
   public:
   GroupNestedPartyIDs();
   typedef std::vector<GroupNestedPartyIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetNestedPartyID() const { return fieldNestedPartyID.offset >= 0; }
   FieldNestedPartyID::ValueType getNestedPartyID() const { return fieldNestedPartyID.getValue( buf ); }
   const char * ptrToNestedPartyID() const { return buf + fieldNestedPartyID.offset; }
   private: FieldNestedPartyID fieldNestedPartyID;

   public:
   bool isSetNestedPartyIDSource() const { return fieldNestedPartyIDSource.offset >= 0; }
   FieldNestedPartyIDSource::ValueType getNestedPartyIDSource() const { return fieldNestedPartyIDSource.getValue( buf ); }
   const char * ptrToNestedPartyIDSource() const { return buf + fieldNestedPartyIDSource.offset; }
   private: FieldNestedPartyIDSource fieldNestedPartyIDSource;

   public:
   bool isSetNestedPartyRole() const { return fieldNestedPartyRole.offset >= 0; }
   FieldNestedPartyRole::ValueType getNestedPartyRole() const { return fieldNestedPartyRole.getValue( buf ); }
   const char * ptrToNestedPartyRole() const { return buf + fieldNestedPartyRole.offset; }
   private: FieldNestedPartyRole fieldNestedPartyRole;

   public:
   bool isSetNoNestedPartySubIDs() const { return fieldNoNestedPartySubIDs.offset >= 0; }
   FieldNoNestedPartySubIDs::ValueType getNoNestedPartySubIDs() const { return fieldNoNestedPartySubIDs.getValue( buf ); }
   const char * ptrToNoNestedPartySubIDs() const { return buf + fieldNoNestedPartySubIDs.offset; }
   private: FieldNoNestedPartySubIDs fieldNoNestedPartySubIDs;
  
   public:
   std::size_t getGroupCountNestedPartySubIDs() const { return groupsNestedPartySubIDs.size(); } 
   const GroupNestedPartySubIDs & getGroupNestedPartySubIDs( std::size_t idx ) const { return groupsNestedPartySubIDs[ idx ]; } 
   private: GroupNestedPartySubIDs::Array groupsNestedPartySubIDs{ 10 };

};

class GroupLegs : public MessageBase
{
  
// Methods
   public:
   GroupLegs();
   typedef std::vector<GroupLegs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetLegSymbol() const { return fieldLegSymbol.offset >= 0; }
   FieldLegSymbol::ValueType getLegSymbol() const { return fieldLegSymbol.getValue( buf ); }
   const char * ptrToLegSymbol() const { return buf + fieldLegSymbol.offset; }
   private: FieldLegSymbol fieldLegSymbol;

   public:
   bool isSetLegSymbolSfx() const { return fieldLegSymbolSfx.offset >= 0; }
   FieldLegSymbolSfx::ValueType getLegSymbolSfx() const { return fieldLegSymbolSfx.getValue( buf ); }
   const char * ptrToLegSymbolSfx() const { return buf + fieldLegSymbolSfx.offset; }
   private: FieldLegSymbolSfx fieldLegSymbolSfx;

   public:
   bool isSetLegSecurityID() const { return fieldLegSecurityID.offset >= 0; }
   FieldLegSecurityID::ValueType getLegSecurityID() const { return fieldLegSecurityID.getValue( buf ); }
   const char * ptrToLegSecurityID() const { return buf + fieldLegSecurityID.offset; }
   private: FieldLegSecurityID fieldLegSecurityID;

   public:
   bool isSetLegSecurityIDSource() const { return fieldLegSecurityIDSource.offset >= 0; }
   FieldLegSecurityIDSource::ValueType getLegSecurityIDSource() const { return fieldLegSecurityIDSource.getValue( buf ); }
   const char * ptrToLegSecurityIDSource() const { return buf + fieldLegSecurityIDSource.offset; }
   private: FieldLegSecurityIDSource fieldLegSecurityIDSource;

   public:
   bool isSetNoLegSecurityAltID() const { return fieldNoLegSecurityAltID.offset >= 0; }
   FieldNoLegSecurityAltID::ValueType getNoLegSecurityAltID() const { return fieldNoLegSecurityAltID.getValue( buf ); }
   const char * ptrToNoLegSecurityAltID() const { return buf + fieldNoLegSecurityAltID.offset; }
   private: FieldNoLegSecurityAltID fieldNoLegSecurityAltID;
  
   public:
   std::size_t getGroupCountLegSecurityAltID() const { return groupsLegSecurityAltID.size(); } 
   const GroupLegSecurityAltID & getGroupLegSecurityAltID( std::size_t idx ) const { return groupsLegSecurityAltID[ idx ]; } 
   private: GroupLegSecurityAltID::Array groupsLegSecurityAltID{ 10 };

   public:
   bool isSetLegProduct() const { return fieldLegProduct.offset >= 0; }
   FieldLegProduct::ValueType getLegProduct() const { return fieldLegProduct.getValue( buf ); }
   const char * ptrToLegProduct() const { return buf + fieldLegProduct.offset; }
   private: FieldLegProduct fieldLegProduct;

   public:
   bool isSetLegCFICode() const { return fieldLegCFICode.offset >= 0; }
   FieldLegCFICode::ValueType getLegCFICode() const { return fieldLegCFICode.getValue( buf ); }
   const char * ptrToLegCFICode() const { return buf + fieldLegCFICode.offset; }
   private: FieldLegCFICode fieldLegCFICode;

   public:
   bool isSetLegSecurityType() const { return fieldLegSecurityType.offset >= 0; }
   FieldLegSecurityType::ValueType getLegSecurityType() const { return fieldLegSecurityType.getValue( buf ); }
   const char * ptrToLegSecurityType() const { return buf + fieldLegSecurityType.offset; }
   private: FieldLegSecurityType fieldLegSecurityType;

   public:
   bool isSetLegSecuritySubType() const { return fieldLegSecuritySubType.offset >= 0; }
   FieldLegSecuritySubType::ValueType getLegSecuritySubType() const { return fieldLegSecuritySubType.getValue( buf ); }
   const char * ptrToLegSecuritySubType() const { return buf + fieldLegSecuritySubType.offset; }
   private: FieldLegSecuritySubType fieldLegSecuritySubType;

   public:
   bool isSetLegMaturityMonthYear() const { return fieldLegMaturityMonthYear.offset >= 0; }
   FieldLegMaturityMonthYear::ValueType getLegMaturityMonthYear() const { return fieldLegMaturityMonthYear.getValue( buf ); }
   const char * ptrToLegMaturityMonthYear() const { return buf + fieldLegMaturityMonthYear.offset; }
   private: FieldLegMaturityMonthYear fieldLegMaturityMonthYear;

   public:
   bool isSetLegMaturityDate() const { return fieldLegMaturityDate.offset >= 0; }
   FieldLegMaturityDate::ValueType getLegMaturityDate() const { return fieldLegMaturityDate.getValue( buf ); }
   const char * ptrToLegMaturityDate() const { return buf + fieldLegMaturityDate.offset; }
   private: FieldLegMaturityDate fieldLegMaturityDate;

   public:
   bool isSetLegCouponPaymentDate() const { return fieldLegCouponPaymentDate.offset >= 0; }
   FieldLegCouponPaymentDate::ValueType getLegCouponPaymentDate() const { return fieldLegCouponPaymentDate.getValue( buf ); }
   const char * ptrToLegCouponPaymentDate() const { return buf + fieldLegCouponPaymentDate.offset; }
   private: FieldLegCouponPaymentDate fieldLegCouponPaymentDate;

   public:
   bool isSetLegIssueDate() const { return fieldLegIssueDate.offset >= 0; }
   FieldLegIssueDate::ValueType getLegIssueDate() const { return fieldLegIssueDate.getValue( buf ); }
   const char * ptrToLegIssueDate() const { return buf + fieldLegIssueDate.offset; }
   private: FieldLegIssueDate fieldLegIssueDate;

   public:
   bool isSetLegRepoCollateralSecurityType() const { return fieldLegRepoCollateralSecurityType.offset >= 0; }
   FieldLegRepoCollateralSecurityType::ValueType getLegRepoCollateralSecurityType() const { return fieldLegRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToLegRepoCollateralSecurityType() const { return buf + fieldLegRepoCollateralSecurityType.offset; }
   private: FieldLegRepoCollateralSecurityType fieldLegRepoCollateralSecurityType;

   public:
   bool isSetLegRepurchaseTerm() const { return fieldLegRepurchaseTerm.offset >= 0; }
   FieldLegRepurchaseTerm::ValueType getLegRepurchaseTerm() const { return fieldLegRepurchaseTerm.getValue( buf ); }
   const char * ptrToLegRepurchaseTerm() const { return buf + fieldLegRepurchaseTerm.offset; }
   private: FieldLegRepurchaseTerm fieldLegRepurchaseTerm;

   public:
   bool isSetLegRepurchaseRate() const { return fieldLegRepurchaseRate.offset >= 0; }
   FieldLegRepurchaseRate::ValueType getLegRepurchaseRate() const { return fieldLegRepurchaseRate.getValue( buf ); }
   const char * ptrToLegRepurchaseRate() const { return buf + fieldLegRepurchaseRate.offset; }
   private: FieldLegRepurchaseRate fieldLegRepurchaseRate;

   public:
   bool isSetLegFactor() const { return fieldLegFactor.offset >= 0; }
   FieldLegFactor::ValueType getLegFactor() const { return fieldLegFactor.getValue( buf ); }
   const char * ptrToLegFactor() const { return buf + fieldLegFactor.offset; }
   private: FieldLegFactor fieldLegFactor;

   public:
   bool isSetLegCreditRating() const { return fieldLegCreditRating.offset >= 0; }
   FieldLegCreditRating::ValueType getLegCreditRating() const { return fieldLegCreditRating.getValue( buf ); }
   const char * ptrToLegCreditRating() const { return buf + fieldLegCreditRating.offset; }
   private: FieldLegCreditRating fieldLegCreditRating;

   public:
   bool isSetLegInstrRegistry() const { return fieldLegInstrRegistry.offset >= 0; }
   FieldLegInstrRegistry::ValueType getLegInstrRegistry() const { return fieldLegInstrRegistry.getValue( buf ); }
   const char * ptrToLegInstrRegistry() const { return buf + fieldLegInstrRegistry.offset; }
   private: FieldLegInstrRegistry fieldLegInstrRegistry;

   public:
   bool isSetLegCountryOfIssue() const { return fieldLegCountryOfIssue.offset >= 0; }
   FieldLegCountryOfIssue::ValueType getLegCountryOfIssue() const { return fieldLegCountryOfIssue.getValue( buf ); }
   const char * ptrToLegCountryOfIssue() const { return buf + fieldLegCountryOfIssue.offset; }
   private: FieldLegCountryOfIssue fieldLegCountryOfIssue;

   public:
   bool isSetLegStateOrProvinceOfIssue() const { return fieldLegStateOrProvinceOfIssue.offset >= 0; }
   FieldLegStateOrProvinceOfIssue::ValueType getLegStateOrProvinceOfIssue() const { return fieldLegStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToLegStateOrProvinceOfIssue() const { return buf + fieldLegStateOrProvinceOfIssue.offset; }
   private: FieldLegStateOrProvinceOfIssue fieldLegStateOrProvinceOfIssue;

   public:
   bool isSetLegLocaleOfIssue() const { return fieldLegLocaleOfIssue.offset >= 0; }
   FieldLegLocaleOfIssue::ValueType getLegLocaleOfIssue() const { return fieldLegLocaleOfIssue.getValue( buf ); }
   const char * ptrToLegLocaleOfIssue() const { return buf + fieldLegLocaleOfIssue.offset; }
   private: FieldLegLocaleOfIssue fieldLegLocaleOfIssue;

   public:
   bool isSetLegRedemptionDate() const { return fieldLegRedemptionDate.offset >= 0; }
   FieldLegRedemptionDate::ValueType getLegRedemptionDate() const { return fieldLegRedemptionDate.getValue( buf ); }
   const char * ptrToLegRedemptionDate() const { return buf + fieldLegRedemptionDate.offset; }
   private: FieldLegRedemptionDate fieldLegRedemptionDate;

   public:
   bool isSetLegStrikePrice() const { return fieldLegStrikePrice.offset >= 0; }
   FieldLegStrikePrice::ValueType getLegStrikePrice() const { return fieldLegStrikePrice.getValue( buf ); }
   const char * ptrToLegStrikePrice() const { return buf + fieldLegStrikePrice.offset; }
   private: FieldLegStrikePrice fieldLegStrikePrice;

   public:
   bool isSetLegStrikeCurrency() const { return fieldLegStrikeCurrency.offset >= 0; }
   FieldLegStrikeCurrency::ValueType getLegStrikeCurrency() const { return fieldLegStrikeCurrency.getValue( buf ); }
   const char * ptrToLegStrikeCurrency() const { return buf + fieldLegStrikeCurrency.offset; }
   private: FieldLegStrikeCurrency fieldLegStrikeCurrency;

   public:
   bool isSetLegOptAttribute() const { return fieldLegOptAttribute.offset >= 0; }
   FieldLegOptAttribute::ValueType getLegOptAttribute() const { return fieldLegOptAttribute.getValue( buf ); }
   const char * ptrToLegOptAttribute() const { return buf + fieldLegOptAttribute.offset; }
   private: FieldLegOptAttribute fieldLegOptAttribute;

   public:
   bool isSetLegContractMultiplier() const { return fieldLegContractMultiplier.offset >= 0; }
   FieldLegContractMultiplier::ValueType getLegContractMultiplier() const { return fieldLegContractMultiplier.getValue( buf ); }
   const char * ptrToLegContractMultiplier() const { return buf + fieldLegContractMultiplier.offset; }
   private: FieldLegContractMultiplier fieldLegContractMultiplier;

   public:
   bool isSetLegCouponRate() const { return fieldLegCouponRate.offset >= 0; }
   FieldLegCouponRate::ValueType getLegCouponRate() const { return fieldLegCouponRate.getValue( buf ); }
   const char * ptrToLegCouponRate() const { return buf + fieldLegCouponRate.offset; }
   private: FieldLegCouponRate fieldLegCouponRate;

   public:
   bool isSetLegSecurityExchange() const { return fieldLegSecurityExchange.offset >= 0; }
   FieldLegSecurityExchange::ValueType getLegSecurityExchange() const { return fieldLegSecurityExchange.getValue( buf ); }
   const char * ptrToLegSecurityExchange() const { return buf + fieldLegSecurityExchange.offset; }
   private: FieldLegSecurityExchange fieldLegSecurityExchange;

   public:
   bool isSetLegIssuer() const { return fieldLegIssuer.offset >= 0; }
   FieldLegIssuer::ValueType getLegIssuer() const { return fieldLegIssuer.getValue( buf ); }
   const char * ptrToLegIssuer() const { return buf + fieldLegIssuer.offset; }
   private: FieldLegIssuer fieldLegIssuer;

   public:
   bool isSetEncodedLegIssuerLen() const { return fieldEncodedLegIssuerLen.offset >= 0; }
   FieldEncodedLegIssuerLen::ValueType getEncodedLegIssuerLen() const { return fieldEncodedLegIssuerLen.getValue( buf ); }
   const char * ptrToEncodedLegIssuerLen() const { return buf + fieldEncodedLegIssuerLen.offset; }
   private: FieldEncodedLegIssuerLen fieldEncodedLegIssuerLen;

   public:
   bool isSetEncodedLegIssuer() const { return fieldEncodedLegIssuer.offset >= 0; }
   FieldEncodedLegIssuer::ValueType getEncodedLegIssuer() const { return fieldEncodedLegIssuer.getValue( buf ); }
   const char * ptrToEncodedLegIssuer() const { return buf + fieldEncodedLegIssuer.offset; }
   private: FieldEncodedLegIssuer fieldEncodedLegIssuer;

   public:
   bool isSetLegSecurityDesc() const { return fieldLegSecurityDesc.offset >= 0; }
   FieldLegSecurityDesc::ValueType getLegSecurityDesc() const { return fieldLegSecurityDesc.getValue( buf ); }
   const char * ptrToLegSecurityDesc() const { return buf + fieldLegSecurityDesc.offset; }
   private: FieldLegSecurityDesc fieldLegSecurityDesc;

   public:
   bool isSetEncodedLegSecurityDescLen() const { return fieldEncodedLegSecurityDescLen.offset >= 0; }
   FieldEncodedLegSecurityDescLen::ValueType getEncodedLegSecurityDescLen() const { return fieldEncodedLegSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedLegSecurityDescLen() const { return buf + fieldEncodedLegSecurityDescLen.offset; }
   private: FieldEncodedLegSecurityDescLen fieldEncodedLegSecurityDescLen;

   public:
   bool isSetEncodedLegSecurityDesc() const { return fieldEncodedLegSecurityDesc.offset >= 0; }
   FieldEncodedLegSecurityDesc::ValueType getEncodedLegSecurityDesc() const { return fieldEncodedLegSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedLegSecurityDesc() const { return buf + fieldEncodedLegSecurityDesc.offset; }
   private: FieldEncodedLegSecurityDesc fieldEncodedLegSecurityDesc;

   public:
   bool isSetLegRatioQty() const { return fieldLegRatioQty.offset >= 0; }
   FieldLegRatioQty::ValueType getLegRatioQty() const { return fieldLegRatioQty.getValue( buf ); }
   const char * ptrToLegRatioQty() const { return buf + fieldLegRatioQty.offset; }
   private: FieldLegRatioQty fieldLegRatioQty;

   public:
   bool isSetLegSide() const { return fieldLegSide.offset >= 0; }
   FieldLegSide::ValueType getLegSide() const { return fieldLegSide.getValue( buf ); }
   const char * ptrToLegSide() const { return buf + fieldLegSide.offset; }
   private: FieldLegSide fieldLegSide;

   public:
   bool isSetLegCurrency() const { return fieldLegCurrency.offset >= 0; }
   FieldLegCurrency::ValueType getLegCurrency() const { return fieldLegCurrency.getValue( buf ); }
   const char * ptrToLegCurrency() const { return buf + fieldLegCurrency.offset; }
   private: FieldLegCurrency fieldLegCurrency;

   public:
   bool isSetLegPool() const { return fieldLegPool.offset >= 0; }
   FieldLegPool::ValueType getLegPool() const { return fieldLegPool.getValue( buf ); }
   const char * ptrToLegPool() const { return buf + fieldLegPool.offset; }
   private: FieldLegPool fieldLegPool;

   public:
   bool isSetLegDatedDate() const { return fieldLegDatedDate.offset >= 0; }
   FieldLegDatedDate::ValueType getLegDatedDate() const { return fieldLegDatedDate.getValue( buf ); }
   const char * ptrToLegDatedDate() const { return buf + fieldLegDatedDate.offset; }
   private: FieldLegDatedDate fieldLegDatedDate;

   public:
   bool isSetLegContractSettlMonth() const { return fieldLegContractSettlMonth.offset >= 0; }
   FieldLegContractSettlMonth::ValueType getLegContractSettlMonth() const { return fieldLegContractSettlMonth.getValue( buf ); }
   const char * ptrToLegContractSettlMonth() const { return buf + fieldLegContractSettlMonth.offset; }
   private: FieldLegContractSettlMonth fieldLegContractSettlMonth;

   public:
   bool isSetLegInterestAccrualDate() const { return fieldLegInterestAccrualDate.offset >= 0; }
   FieldLegInterestAccrualDate::ValueType getLegInterestAccrualDate() const { return fieldLegInterestAccrualDate.getValue( buf ); }
   const char * ptrToLegInterestAccrualDate() const { return buf + fieldLegInterestAccrualDate.offset; }
   private: FieldLegInterestAccrualDate fieldLegInterestAccrualDate;

   public:
   bool isSetLegQty() const { return fieldLegQty.offset >= 0; }
   FieldLegQty::ValueType getLegQty() const { return fieldLegQty.getValue( buf ); }
   const char * ptrToLegQty() const { return buf + fieldLegQty.offset; }
   private: FieldLegQty fieldLegQty;

   public:
   bool isSetLegSwapType() const { return fieldLegSwapType.offset >= 0; }
   FieldLegSwapType::ValueType getLegSwapType() const { return fieldLegSwapType.getValue( buf ); }
   const char * ptrToLegSwapType() const { return buf + fieldLegSwapType.offset; }
   private: FieldLegSwapType fieldLegSwapType;

   public:
   bool isSetNoLegStipulations() const { return fieldNoLegStipulations.offset >= 0; }
   FieldNoLegStipulations::ValueType getNoLegStipulations() const { return fieldNoLegStipulations.getValue( buf ); }
   const char * ptrToNoLegStipulations() const { return buf + fieldNoLegStipulations.offset; }
   private: FieldNoLegStipulations fieldNoLegStipulations;
  
   public:
   std::size_t getGroupCountLegStipulations() const { return groupsLegStipulations.size(); } 
   const GroupLegStipulations & getGroupLegStipulations( std::size_t idx ) const { return groupsLegStipulations[ idx ]; } 
   private: GroupLegStipulations::Array groupsLegStipulations{ 10 };

   public:
   bool isSetLegPositionEffect() const { return fieldLegPositionEffect.offset >= 0; }
   FieldLegPositionEffect::ValueType getLegPositionEffect() const { return fieldLegPositionEffect.getValue( buf ); }
   const char * ptrToLegPositionEffect() const { return buf + fieldLegPositionEffect.offset; }
   private: FieldLegPositionEffect fieldLegPositionEffect;

   public:
   bool isSetLegCoveredOrUncovered() const { return fieldLegCoveredOrUncovered.offset >= 0; }
   FieldLegCoveredOrUncovered::ValueType getLegCoveredOrUncovered() const { return fieldLegCoveredOrUncovered.getValue( buf ); }
   const char * ptrToLegCoveredOrUncovered() const { return buf + fieldLegCoveredOrUncovered.offset; }
   private: FieldLegCoveredOrUncovered fieldLegCoveredOrUncovered;

   public:
   bool isSetNoNestedPartyIDs() const { return fieldNoNestedPartyIDs.offset >= 0; }
   FieldNoNestedPartyIDs::ValueType getNoNestedPartyIDs() const { return fieldNoNestedPartyIDs.getValue( buf ); }
   const char * ptrToNoNestedPartyIDs() const { return buf + fieldNoNestedPartyIDs.offset; }
   private: FieldNoNestedPartyIDs fieldNoNestedPartyIDs;
  
   public:
   std::size_t getGroupCountNestedPartyIDs() const { return groupsNestedPartyIDs.size(); } 
   const GroupNestedPartyIDs & getGroupNestedPartyIDs( std::size_t idx ) const { return groupsNestedPartyIDs[ idx ]; } 
   private: GroupNestedPartyIDs::Array groupsNestedPartyIDs{ 10 };

   public:
   bool isSetLegRefID() const { return fieldLegRefID.offset >= 0; }
   FieldLegRefID::ValueType getLegRefID() const { return fieldLegRefID.getValue( buf ); }
   const char * ptrToLegRefID() const { return buf + fieldLegRefID.offset; }
   private: FieldLegRefID fieldLegRefID;

   public:
   bool isSetLegPrice() const { return fieldLegPrice.offset >= 0; }
   FieldLegPrice::ValueType getLegPrice() const { return fieldLegPrice.getValue( buf ); }
   const char * ptrToLegPrice() const { return buf + fieldLegPrice.offset; }
   private: FieldLegPrice fieldLegPrice;

   public:
   bool isSetLegSettlType() const { return fieldLegSettlType.offset >= 0; }
   FieldLegSettlType::ValueType getLegSettlType() const { return fieldLegSettlType.getValue( buf ); }
   const char * ptrToLegSettlType() const { return buf + fieldLegSettlType.offset; }
   private: FieldLegSettlType fieldLegSettlType;

   public:
   bool isSetLegSettlDate() const { return fieldLegSettlDate.offset >= 0; }
   FieldLegSettlDate::ValueType getLegSettlDate() const { return fieldLegSettlDate.getValue( buf ); }
   const char * ptrToLegSettlDate() const { return buf + fieldLegSettlDate.offset; }
   private: FieldLegSettlDate fieldLegSettlDate;

   public:
   bool isSetLegLastPx() const { return fieldLegLastPx.offset >= 0; }
   FieldLegLastPx::ValueType getLegLastPx() const { return fieldLegLastPx.getValue( buf ); }
   const char * ptrToLegLastPx() const { return buf + fieldLegLastPx.offset; }
   private: FieldLegLastPx fieldLegLastPx;

};

class GroupQuoteEntries : public MessageBase
{
  
// Methods
   public:
   GroupQuoteEntries();
   typedef std::vector<GroupQuoteEntries> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

};

class GroupQuoteSets : public MessageBase
{
  
// Methods
   public:
   GroupQuoteSets();
   typedef std::vector<GroupQuoteSets> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetQuoteSetID() const { return fieldQuoteSetID.offset >= 0; }
   FieldQuoteSetID::ValueType getQuoteSetID() const { return fieldQuoteSetID.getValue( buf ); }
   const char * ptrToQuoteSetID() const { return buf + fieldQuoteSetID.offset; }
   private: FieldQuoteSetID fieldQuoteSetID;

   public:
   bool isSetUnderlyingSymbol() const { return fieldUnderlyingSymbol.offset >= 0; }
   FieldUnderlyingSymbol::ValueType getUnderlyingSymbol() const { return fieldUnderlyingSymbol.getValue( buf ); }
   const char * ptrToUnderlyingSymbol() const { return buf + fieldUnderlyingSymbol.offset; }
   private: FieldUnderlyingSymbol fieldUnderlyingSymbol;

   public:
   bool isSetUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.offset >= 0; }
   FieldUnderlyingSymbolSfx::ValueType getUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.getValue( buf ); }
   const char * ptrToUnderlyingSymbolSfx() const { return buf + fieldUnderlyingSymbolSfx.offset; }
   private: FieldUnderlyingSymbolSfx fieldUnderlyingSymbolSfx;

   public:
   bool isSetUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.offset >= 0; }
   FieldUnderlyingSecurityID::ValueType getUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.getValue( buf ); }
   const char * ptrToUnderlyingSecurityID() const { return buf + fieldUnderlyingSecurityID.offset; }
   private: FieldUnderlyingSecurityID fieldUnderlyingSecurityID;

   public:
   bool isSetUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.offset >= 0; }
   FieldUnderlyingSecurityIDSource::ValueType getUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.getValue( buf ); }
   const char * ptrToUnderlyingSecurityIDSource() const { return buf + fieldUnderlyingSecurityIDSource.offset; }
   private: FieldUnderlyingSecurityIDSource fieldUnderlyingSecurityIDSource;

   public:
   bool isSetNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.offset >= 0; }
   FieldNoUnderlyingSecurityAltID::ValueType getNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.getValue( buf ); }
   const char * ptrToNoUnderlyingSecurityAltID() const { return buf + fieldNoUnderlyingSecurityAltID.offset; }
   private: FieldNoUnderlyingSecurityAltID fieldNoUnderlyingSecurityAltID;
  
   public:
   std::size_t getGroupCountUnderlyingSecurityAltID() const { return groupsUnderlyingSecurityAltID.size(); } 
   const GroupUnderlyingSecurityAltID & getGroupUnderlyingSecurityAltID( std::size_t idx ) const { return groupsUnderlyingSecurityAltID[ idx ]; } 
   private: GroupUnderlyingSecurityAltID::Array groupsUnderlyingSecurityAltID{ 10 };

   public:
   bool isSetUnderlyingProduct() const { return fieldUnderlyingProduct.offset >= 0; }
   FieldUnderlyingProduct::ValueType getUnderlyingProduct() const { return fieldUnderlyingProduct.getValue( buf ); }
   const char * ptrToUnderlyingProduct() const { return buf + fieldUnderlyingProduct.offset; }
   private: FieldUnderlyingProduct fieldUnderlyingProduct;

   public:
   bool isSetUnderlyingCFICode() const { return fieldUnderlyingCFICode.offset >= 0; }
   FieldUnderlyingCFICode::ValueType getUnderlyingCFICode() const { return fieldUnderlyingCFICode.getValue( buf ); }
   const char * ptrToUnderlyingCFICode() const { return buf + fieldUnderlyingCFICode.offset; }
   private: FieldUnderlyingCFICode fieldUnderlyingCFICode;

   public:
   bool isSetUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.offset >= 0; }
   FieldUnderlyingSecurityType::ValueType getUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingSecurityType() const { return buf + fieldUnderlyingSecurityType.offset; }
   private: FieldUnderlyingSecurityType fieldUnderlyingSecurityType;

   public:
   bool isSetUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.offset >= 0; }
   FieldUnderlyingSecuritySubType::ValueType getUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.getValue( buf ); }
   const char * ptrToUnderlyingSecuritySubType() const { return buf + fieldUnderlyingSecuritySubType.offset; }
   private: FieldUnderlyingSecuritySubType fieldUnderlyingSecuritySubType;

   public:
   bool isSetUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.offset >= 0; }
   FieldUnderlyingMaturityMonthYear::ValueType getUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.getValue( buf ); }
   const char * ptrToUnderlyingMaturityMonthYear() const { return buf + fieldUnderlyingMaturityMonthYear.offset; }
   private: FieldUnderlyingMaturityMonthYear fieldUnderlyingMaturityMonthYear;

   public:
   bool isSetUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.offset >= 0; }
   FieldUnderlyingMaturityDate::ValueType getUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.getValue( buf ); }
   const char * ptrToUnderlyingMaturityDate() const { return buf + fieldUnderlyingMaturityDate.offset; }
   private: FieldUnderlyingMaturityDate fieldUnderlyingMaturityDate;

   public:
   bool isSetUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.offset >= 0; }
   FieldUnderlyingPutOrCall::ValueType getUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.getValue( buf ); }
   const char * ptrToUnderlyingPutOrCall() const { return buf + fieldUnderlyingPutOrCall.offset; }
   private: FieldUnderlyingPutOrCall fieldUnderlyingPutOrCall;

   public:
   bool isSetUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.offset >= 0; }
   FieldUnderlyingCouponPaymentDate::ValueType getUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.getValue( buf ); }
   const char * ptrToUnderlyingCouponPaymentDate() const { return buf + fieldUnderlyingCouponPaymentDate.offset; }
   private: FieldUnderlyingCouponPaymentDate fieldUnderlyingCouponPaymentDate;

   public:
   bool isSetUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.offset >= 0; }
   FieldUnderlyingIssueDate::ValueType getUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.getValue( buf ); }
   const char * ptrToUnderlyingIssueDate() const { return buf + fieldUnderlyingIssueDate.offset; }
   private: FieldUnderlyingIssueDate fieldUnderlyingIssueDate;

   public:
   bool isSetUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.offset >= 0; }
   FieldUnderlyingRepoCollateralSecurityType::ValueType getUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingRepoCollateralSecurityType() const { return buf + fieldUnderlyingRepoCollateralSecurityType.offset; }
   private: FieldUnderlyingRepoCollateralSecurityType fieldUnderlyingRepoCollateralSecurityType;

   public:
   bool isSetUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.offset >= 0; }
   FieldUnderlyingRepurchaseTerm::ValueType getUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseTerm() const { return buf + fieldUnderlyingRepurchaseTerm.offset; }
   private: FieldUnderlyingRepurchaseTerm fieldUnderlyingRepurchaseTerm;

   public:
   bool isSetUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.offset >= 0; }
   FieldUnderlyingRepurchaseRate::ValueType getUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseRate() const { return buf + fieldUnderlyingRepurchaseRate.offset; }
   private: FieldUnderlyingRepurchaseRate fieldUnderlyingRepurchaseRate;

   public:
   bool isSetUnderlyingFactor() const { return fieldUnderlyingFactor.offset >= 0; }
   FieldUnderlyingFactor::ValueType getUnderlyingFactor() const { return fieldUnderlyingFactor.getValue( buf ); }
   const char * ptrToUnderlyingFactor() const { return buf + fieldUnderlyingFactor.offset; }
   private: FieldUnderlyingFactor fieldUnderlyingFactor;

   public:
   bool isSetUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.offset >= 0; }
   FieldUnderlyingCreditRating::ValueType getUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.getValue( buf ); }
   const char * ptrToUnderlyingCreditRating() const { return buf + fieldUnderlyingCreditRating.offset; }
   private: FieldUnderlyingCreditRating fieldUnderlyingCreditRating;

   public:
   bool isSetUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.offset >= 0; }
   FieldUnderlyingInstrRegistry::ValueType getUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.getValue( buf ); }
   const char * ptrToUnderlyingInstrRegistry() const { return buf + fieldUnderlyingInstrRegistry.offset; }
   private: FieldUnderlyingInstrRegistry fieldUnderlyingInstrRegistry;

   public:
   bool isSetUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.offset >= 0; }
   FieldUnderlyingCountryOfIssue::ValueType getUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingCountryOfIssue() const { return buf + fieldUnderlyingCountryOfIssue.offset; }
   private: FieldUnderlyingCountryOfIssue fieldUnderlyingCountryOfIssue;

   public:
   bool isSetUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0; }
   FieldUnderlyingStateOrProvinceOfIssue::ValueType getUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingStateOrProvinceOfIssue() const { return buf + fieldUnderlyingStateOrProvinceOfIssue.offset; }
   private: FieldUnderlyingStateOrProvinceOfIssue fieldUnderlyingStateOrProvinceOfIssue;

   public:
   bool isSetUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.offset >= 0; }
   FieldUnderlyingLocaleOfIssue::ValueType getUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingLocaleOfIssue() const { return buf + fieldUnderlyingLocaleOfIssue.offset; }
   private: FieldUnderlyingLocaleOfIssue fieldUnderlyingLocaleOfIssue;

   public:
   bool isSetUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.offset >= 0; }
   FieldUnderlyingRedemptionDate::ValueType getUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.getValue( buf ); }
   const char * ptrToUnderlyingRedemptionDate() const { return buf + fieldUnderlyingRedemptionDate.offset; }
   private: FieldUnderlyingRedemptionDate fieldUnderlyingRedemptionDate;

   public:
   bool isSetUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.offset >= 0; }
   FieldUnderlyingStrikePrice::ValueType getUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.getValue( buf ); }
   const char * ptrToUnderlyingStrikePrice() const { return buf + fieldUnderlyingStrikePrice.offset; }
   private: FieldUnderlyingStrikePrice fieldUnderlyingStrikePrice;

   public:
   bool isSetUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.offset >= 0; }
   FieldUnderlyingStrikeCurrency::ValueType getUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.getValue( buf ); }
   const char * ptrToUnderlyingStrikeCurrency() const { return buf + fieldUnderlyingStrikeCurrency.offset; }
   private: FieldUnderlyingStrikeCurrency fieldUnderlyingStrikeCurrency;

   public:
   bool isSetUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.offset >= 0; }
   FieldUnderlyingOptAttribute::ValueType getUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.getValue( buf ); }
   const char * ptrToUnderlyingOptAttribute() const { return buf + fieldUnderlyingOptAttribute.offset; }
   private: FieldUnderlyingOptAttribute fieldUnderlyingOptAttribute;

   public:
   bool isSetUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.offset >= 0; }
   FieldUnderlyingContractMultiplier::ValueType getUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.getValue( buf ); }
   const char * ptrToUnderlyingContractMultiplier() const { return buf + fieldUnderlyingContractMultiplier.offset; }
   private: FieldUnderlyingContractMultiplier fieldUnderlyingContractMultiplier;

   public:
   bool isSetUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.offset >= 0; }
   FieldUnderlyingCouponRate::ValueType getUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.getValue( buf ); }
   const char * ptrToUnderlyingCouponRate() const { return buf + fieldUnderlyingCouponRate.offset; }
   private: FieldUnderlyingCouponRate fieldUnderlyingCouponRate;

   public:
   bool isSetUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.offset >= 0; }
   FieldUnderlyingSecurityExchange::ValueType getUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.getValue( buf ); }
   const char * ptrToUnderlyingSecurityExchange() const { return buf + fieldUnderlyingSecurityExchange.offset; }
   private: FieldUnderlyingSecurityExchange fieldUnderlyingSecurityExchange;

   public:
   bool isSetUnderlyingIssuer() const { return fieldUnderlyingIssuer.offset >= 0; }
   FieldUnderlyingIssuer::ValueType getUnderlyingIssuer() const { return fieldUnderlyingIssuer.getValue( buf ); }
   const char * ptrToUnderlyingIssuer() const { return buf + fieldUnderlyingIssuer.offset; }
   private: FieldUnderlyingIssuer fieldUnderlyingIssuer;

   public:
   bool isSetEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.offset >= 0; }
   FieldEncodedUnderlyingIssuerLen::ValueType getEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuerLen() const { return buf + fieldEncodedUnderlyingIssuerLen.offset; }
   private: FieldEncodedUnderlyingIssuerLen fieldEncodedUnderlyingIssuerLen;

   public:
   bool isSetEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.offset >= 0; }
   FieldEncodedUnderlyingIssuer::ValueType getEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuer() const { return buf + fieldEncodedUnderlyingIssuer.offset; }
   private: FieldEncodedUnderlyingIssuer fieldEncodedUnderlyingIssuer;

   public:
   bool isSetUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.offset >= 0; }
   FieldUnderlyingSecurityDesc::ValueType getUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToUnderlyingSecurityDesc() const { return buf + fieldUnderlyingSecurityDesc.offset; }
   private: FieldUnderlyingSecurityDesc fieldUnderlyingSecurityDesc;

   public:
   bool isSetEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.offset >= 0; }
   FieldEncodedUnderlyingSecurityDescLen::ValueType getEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDescLen() const { return buf + fieldEncodedUnderlyingSecurityDescLen.offset; }
   private: FieldEncodedUnderlyingSecurityDescLen fieldEncodedUnderlyingSecurityDescLen;

   public:
   bool isSetEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.offset >= 0; }
   FieldEncodedUnderlyingSecurityDesc::ValueType getEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDesc() const { return buf + fieldEncodedUnderlyingSecurityDesc.offset; }
   private: FieldEncodedUnderlyingSecurityDesc fieldEncodedUnderlyingSecurityDesc;

   public:
   bool isSetUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.offset >= 0; }
   FieldUnderlyingCPProgram::ValueType getUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.getValue( buf ); }
   const char * ptrToUnderlyingCPProgram() const { return buf + fieldUnderlyingCPProgram.offset; }
   private: FieldUnderlyingCPProgram fieldUnderlyingCPProgram;

   public:
   bool isSetUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.offset >= 0; }
   FieldUnderlyingCPRegType::ValueType getUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.getValue( buf ); }
   const char * ptrToUnderlyingCPRegType() const { return buf + fieldUnderlyingCPRegType.offset; }
   private: FieldUnderlyingCPRegType fieldUnderlyingCPRegType;

   public:
   bool isSetUnderlyingCurrency() const { return fieldUnderlyingCurrency.offset >= 0; }
   FieldUnderlyingCurrency::ValueType getUnderlyingCurrency() const { return fieldUnderlyingCurrency.getValue( buf ); }
   const char * ptrToUnderlyingCurrency() const { return buf + fieldUnderlyingCurrency.offset; }
   private: FieldUnderlyingCurrency fieldUnderlyingCurrency;

   public:
   bool isSetUnderlyingQty() const { return fieldUnderlyingQty.offset >= 0; }
   FieldUnderlyingQty::ValueType getUnderlyingQty() const { return fieldUnderlyingQty.getValue( buf ); }
   const char * ptrToUnderlyingQty() const { return buf + fieldUnderlyingQty.offset; }
   private: FieldUnderlyingQty fieldUnderlyingQty;

   public:
   bool isSetUnderlyingPx() const { return fieldUnderlyingPx.offset >= 0; }
   FieldUnderlyingPx::ValueType getUnderlyingPx() const { return fieldUnderlyingPx.getValue( buf ); }
   const char * ptrToUnderlyingPx() const { return buf + fieldUnderlyingPx.offset; }
   private: FieldUnderlyingPx fieldUnderlyingPx;

   public:
   bool isSetUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.offset >= 0; }
   FieldUnderlyingDirtyPrice::ValueType getUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.getValue( buf ); }
   const char * ptrToUnderlyingDirtyPrice() const { return buf + fieldUnderlyingDirtyPrice.offset; }
   private: FieldUnderlyingDirtyPrice fieldUnderlyingDirtyPrice;

   public:
   bool isSetUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.offset >= 0; }
   FieldUnderlyingEndPrice::ValueType getUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.getValue( buf ); }
   const char * ptrToUnderlyingEndPrice() const { return buf + fieldUnderlyingEndPrice.offset; }
   private: FieldUnderlyingEndPrice fieldUnderlyingEndPrice;

   public:
   bool isSetUnderlyingStartValue() const { return fieldUnderlyingStartValue.offset >= 0; }
   FieldUnderlyingStartValue::ValueType getUnderlyingStartValue() const { return fieldUnderlyingStartValue.getValue( buf ); }
   const char * ptrToUnderlyingStartValue() const { return buf + fieldUnderlyingStartValue.offset; }
   private: FieldUnderlyingStartValue fieldUnderlyingStartValue;

   public:
   bool isSetUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.offset >= 0; }
   FieldUnderlyingCurrentValue::ValueType getUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.getValue( buf ); }
   const char * ptrToUnderlyingCurrentValue() const { return buf + fieldUnderlyingCurrentValue.offset; }
   private: FieldUnderlyingCurrentValue fieldUnderlyingCurrentValue;

   public:
   bool isSetUnderlyingEndValue() const { return fieldUnderlyingEndValue.offset >= 0; }
   FieldUnderlyingEndValue::ValueType getUnderlyingEndValue() const { return fieldUnderlyingEndValue.getValue( buf ); }
   const char * ptrToUnderlyingEndValue() const { return buf + fieldUnderlyingEndValue.offset; }
   private: FieldUnderlyingEndValue fieldUnderlyingEndValue;

   public:
   bool isSetNoUnderlyingStips() const { return fieldNoUnderlyingStips.offset >= 0; }
   FieldNoUnderlyingStips::ValueType getNoUnderlyingStips() const { return fieldNoUnderlyingStips.getValue( buf ); }
   const char * ptrToNoUnderlyingStips() const { return buf + fieldNoUnderlyingStips.offset; }
   private: FieldNoUnderlyingStips fieldNoUnderlyingStips;
  
   public:
   std::size_t getGroupCountUnderlyingStips() const { return groupsUnderlyingStips.size(); } 
   const GroupUnderlyingStips & getGroupUnderlyingStips( std::size_t idx ) const { return groupsUnderlyingStips[ idx ]; } 
   private: GroupUnderlyingStips::Array groupsUnderlyingStips{ 10 };

   public:
   bool isSetTotNoQuoteEntries() const { return fieldTotNoQuoteEntries.offset >= 0; }
   FieldTotNoQuoteEntries::ValueType getTotNoQuoteEntries() const { return fieldTotNoQuoteEntries.getValue( buf ); }
   const char * ptrToTotNoQuoteEntries() const { return buf + fieldTotNoQuoteEntries.offset; }
   private: FieldTotNoQuoteEntries fieldTotNoQuoteEntries;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoQuoteEntries() const { return fieldNoQuoteEntries.offset >= 0; }
   FieldNoQuoteEntries::ValueType getNoQuoteEntries() const { return fieldNoQuoteEntries.getValue( buf ); }
   const char * ptrToNoQuoteEntries() const { return buf + fieldNoQuoteEntries.offset; }
   private: FieldNoQuoteEntries fieldNoQuoteEntries;
  
   public:
   std::size_t getGroupCountQuoteEntries() const { return groupsQuoteEntries.size(); } 
   const GroupQuoteEntries & getGroupQuoteEntries( std::size_t idx ) const { return groupsQuoteEntries[ idx ]; } 
   private: GroupQuoteEntries::Array groupsQuoteEntries{ 10 };

};

class GroupSecurityTypes : public MessageBase
{
  
// Methods
   public:
   GroupSecurityTypes();
   typedef std::vector<GroupSecurityTypes> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

};

class GroupNested3PartyIDs : public MessageBase
{
  
// Methods
   public:
   GroupNested3PartyIDs();
   typedef std::vector<GroupNested3PartyIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetNested3PartyID() const { return fieldNested3PartyID.offset >= 0; }
   FieldNested3PartyID::ValueType getNested3PartyID() const { return fieldNested3PartyID.getValue( buf ); }
   const char * ptrToNested3PartyID() const { return buf + fieldNested3PartyID.offset; }
   private: FieldNested3PartyID fieldNested3PartyID;

   public:
   bool isSetNested3PartyIDSource() const { return fieldNested3PartyIDSource.offset >= 0; }
   FieldNested3PartyIDSource::ValueType getNested3PartyIDSource() const { return fieldNested3PartyIDSource.getValue( buf ); }
   const char * ptrToNested3PartyIDSource() const { return buf + fieldNested3PartyIDSource.offset; }
   private: FieldNested3PartyIDSource fieldNested3PartyIDSource;

   public:
   bool isSetNested3PartyRole() const { return fieldNested3PartyRole.offset >= 0; }
   FieldNested3PartyRole::ValueType getNested3PartyRole() const { return fieldNested3PartyRole.getValue( buf ); }
   const char * ptrToNested3PartyRole() const { return buf + fieldNested3PartyRole.offset; }
   private: FieldNested3PartyRole fieldNested3PartyRole;

   public:
   bool isSetNoNested3PartySubIDs() const { return fieldNoNested3PartySubIDs.offset >= 0; }
   FieldNoNested3PartySubIDs::ValueType getNoNested3PartySubIDs() const { return fieldNoNested3PartySubIDs.getValue( buf ); }
   const char * ptrToNoNested3PartySubIDs() const { return buf + fieldNoNested3PartySubIDs.offset; }
   private: FieldNoNested3PartySubIDs fieldNoNested3PartySubIDs;
  
   public:
   std::size_t getGroupCountNested3PartySubIDs() const { return groupsNested3PartySubIDs.size(); } 
   const GroupNested3PartySubIDs & getGroupNested3PartySubIDs( std::size_t idx ) const { return groupsNested3PartySubIDs[ idx ]; } 
   private: GroupNested3PartySubIDs::Array groupsNested3PartySubIDs{ 10 };

};

class GroupPositions : public MessageBase
{
  
// Methods
   public:
   GroupPositions();
   typedef std::vector<GroupPositions> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetPosType() const { return fieldPosType.offset >= 0; }
   FieldPosType::ValueType getPosType() const { return fieldPosType.getValue( buf ); }
   const char * ptrToPosType() const { return buf + fieldPosType.offset; }
   private: FieldPosType fieldPosType;

   public:
   bool isSetLongQty() const { return fieldLongQty.offset >= 0; }
   FieldLongQty::ValueType getLongQty() const { return fieldLongQty.getValue( buf ); }
   const char * ptrToLongQty() const { return buf + fieldLongQty.offset; }
   private: FieldLongQty fieldLongQty;

   public:
   bool isSetShortQty() const { return fieldShortQty.offset >= 0; }
   FieldShortQty::ValueType getShortQty() const { return fieldShortQty.getValue( buf ); }
   const char * ptrToShortQty() const { return buf + fieldShortQty.offset; }
   private: FieldShortQty fieldShortQty;

   public:
   bool isSetPosQtyStatus() const { return fieldPosQtyStatus.offset >= 0; }
   FieldPosQtyStatus::ValueType getPosQtyStatus() const { return fieldPosQtyStatus.getValue( buf ); }
   const char * ptrToPosQtyStatus() const { return buf + fieldPosQtyStatus.offset; }
   private: FieldPosQtyStatus fieldPosQtyStatus;

   public:
   bool isSetNoNestedPartyIDs() const { return fieldNoNestedPartyIDs.offset >= 0; }
   FieldNoNestedPartyIDs::ValueType getNoNestedPartyIDs() const { return fieldNoNestedPartyIDs.getValue( buf ); }
   const char * ptrToNoNestedPartyIDs() const { return buf + fieldNoNestedPartyIDs.offset; }
   private: FieldNoNestedPartyIDs fieldNoNestedPartyIDs;
  
   public:
   std::size_t getGroupCountNestedPartyIDs() const { return groupsNestedPartyIDs.size(); } 
   const GroupNestedPartyIDs & getGroupNestedPartyIDs( std::size_t idx ) const { return groupsNestedPartyIDs[ idx ]; } 
   private: GroupNestedPartyIDs::Array groupsNestedPartyIDs{ 10 };

};

class GroupAffectedOrders : public MessageBase
{
  
// Methods
   public:
   GroupAffectedOrders();
   typedef std::vector<GroupAffectedOrders> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetOrigClOrdID() const { return fieldOrigClOrdID.offset >= 0; }
   FieldOrigClOrdID::ValueType getOrigClOrdID() const { return fieldOrigClOrdID.getValue( buf ); }
   const char * ptrToOrigClOrdID() const { return buf + fieldOrigClOrdID.offset; }
   private: FieldOrigClOrdID fieldOrigClOrdID;

   public:
   bool isSetAffectedOrderID() const { return fieldAffectedOrderID.offset >= 0; }
   FieldAffectedOrderID::ValueType getAffectedOrderID() const { return fieldAffectedOrderID.getValue( buf ); }
   const char * ptrToAffectedOrderID() const { return buf + fieldAffectedOrderID.offset; }
   private: FieldAffectedOrderID fieldAffectedOrderID;

   public:
   bool isSetAffectedSecondaryOrderID() const { return fieldAffectedSecondaryOrderID.offset >= 0; }
   FieldAffectedSecondaryOrderID::ValueType getAffectedSecondaryOrderID() const { return fieldAffectedSecondaryOrderID.getValue( buf ); }
   const char * ptrToAffectedSecondaryOrderID() const { return buf + fieldAffectedSecondaryOrderID.offset; }
   private: FieldAffectedSecondaryOrderID fieldAffectedSecondaryOrderID;

};

class GroupExecs : public MessageBase
{
  
// Methods
   public:
   GroupExecs();
   typedef std::vector<GroupExecs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetLastQty() const { return fieldLastQty.offset >= 0; }
   FieldLastQty::ValueType getLastQty() const { return fieldLastQty.getValue( buf ); }
   const char * ptrToLastQty() const { return buf + fieldLastQty.offset; }
   private: FieldLastQty fieldLastQty;

   public:
   bool isSetExecID() const { return fieldExecID.offset >= 0; }
   FieldExecID::ValueType getExecID() const { return fieldExecID.getValue( buf ); }
   const char * ptrToExecID() const { return buf + fieldExecID.offset; }
   private: FieldExecID fieldExecID;

   public:
   bool isSetSecondaryExecID() const { return fieldSecondaryExecID.offset >= 0; }
   FieldSecondaryExecID::ValueType getSecondaryExecID() const { return fieldSecondaryExecID.getValue( buf ); }
   const char * ptrToSecondaryExecID() const { return buf + fieldSecondaryExecID.offset; }
   private: FieldSecondaryExecID fieldSecondaryExecID;

   public:
   bool isSetLastPx() const { return fieldLastPx.offset >= 0; }
   FieldLastPx::ValueType getLastPx() const { return fieldLastPx.getValue( buf ); }
   const char * ptrToLastPx() const { return buf + fieldLastPx.offset; }
   private: FieldLastPx fieldLastPx;

   public:
   bool isSetLastParPx() const { return fieldLastParPx.offset >= 0; }
   FieldLastParPx::ValueType getLastParPx() const { return fieldLastParPx.getValue( buf ); }
   const char * ptrToLastParPx() const { return buf + fieldLastParPx.offset; }
   private: FieldLastParPx fieldLastParPx;

   public:
   bool isSetLastCapacity() const { return fieldLastCapacity.offset >= 0; }
   FieldLastCapacity::ValueType getLastCapacity() const { return fieldLastCapacity.getValue( buf ); }
   const char * ptrToLastCapacity() const { return buf + fieldLastCapacity.offset; }
   private: FieldLastCapacity fieldLastCapacity;

};

class GroupMsgTypes : public MessageBase
{
  
// Methods
   public:
   GroupMsgTypes();
   typedef std::vector<GroupMsgTypes> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetRefMsgType() const { return fieldRefMsgType.offset >= 0; }
   FieldRefMsgType::ValueType getRefMsgType() const { return fieldRefMsgType.getValue( buf ); }
   const char * ptrToRefMsgType() const { return buf + fieldRefMsgType.offset; }
   private: FieldRefMsgType fieldRefMsgType;

   public:
   bool isSetMsgDirection() const { return fieldMsgDirection.offset >= 0; }
   FieldMsgDirection::ValueType getMsgDirection() const { return fieldMsgDirection.getValue( buf ); }
   const char * ptrToMsgDirection() const { return buf + fieldMsgDirection.offset; }
   private: FieldMsgDirection fieldMsgDirection;

};

class GroupBidComponents : public MessageBase
{
  
// Methods
   public:
   GroupBidComponents();
   typedef std::vector<GroupBidComponents> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetNetGrossInd() const { return fieldNetGrossInd.offset >= 0; }
   FieldNetGrossInd::ValueType getNetGrossInd() const { return fieldNetGrossInd.getValue( buf ); }
   const char * ptrToNetGrossInd() const { return buf + fieldNetGrossInd.offset; }
   private: FieldNetGrossInd fieldNetGrossInd;

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

};

class GroupSettlInst : public MessageBase
{
  
// Methods
   public:
   GroupSettlInst();
   typedef std::vector<GroupSettlInst> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSettlInstID() const { return fieldSettlInstID.offset >= 0; }
   FieldSettlInstID::ValueType getSettlInstID() const { return fieldSettlInstID.getValue( buf ); }
   const char * ptrToSettlInstID() const { return buf + fieldSettlInstID.offset; }
   private: FieldSettlInstID fieldSettlInstID;

   public:
   bool isSetSettlInstTransType() const { return fieldSettlInstTransType.offset >= 0; }
   FieldSettlInstTransType::ValueType getSettlInstTransType() const { return fieldSettlInstTransType.getValue( buf ); }
   const char * ptrToSettlInstTransType() const { return buf + fieldSettlInstTransType.offset; }
   private: FieldSettlInstTransType fieldSettlInstTransType;

   public:
   bool isSetSettlInstRefID() const { return fieldSettlInstRefID.offset >= 0; }
   FieldSettlInstRefID::ValueType getSettlInstRefID() const { return fieldSettlInstRefID.getValue( buf ); }
   const char * ptrToSettlInstRefID() const { return buf + fieldSettlInstRefID.offset; }
   private: FieldSettlInstRefID fieldSettlInstRefID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetLastUpdateTime() const { return fieldLastUpdateTime.offset >= 0; }
   FieldLastUpdateTime::ValueType getLastUpdateTime() const { return fieldLastUpdateTime.getValue( buf ); }
   const char * ptrToLastUpdateTime() const { return buf + fieldLastUpdateTime.offset; }
   private: FieldLastUpdateTime fieldLastUpdateTime;

   public:
   bool isSetSettlDeliveryType() const { return fieldSettlDeliveryType.offset >= 0; }
   FieldSettlDeliveryType::ValueType getSettlDeliveryType() const { return fieldSettlDeliveryType.getValue( buf ); }
   const char * ptrToSettlDeliveryType() const { return buf + fieldSettlDeliveryType.offset; }
   private: FieldSettlDeliveryType fieldSettlDeliveryType;

   public:
   bool isSetStandInstDbType() const { return fieldStandInstDbType.offset >= 0; }
   FieldStandInstDbType::ValueType getStandInstDbType() const { return fieldStandInstDbType.getValue( buf ); }
   const char * ptrToStandInstDbType() const { return buf + fieldStandInstDbType.offset; }
   private: FieldStandInstDbType fieldStandInstDbType;

   public:
   bool isSetStandInstDbName() const { return fieldStandInstDbName.offset >= 0; }
   FieldStandInstDbName::ValueType getStandInstDbName() const { return fieldStandInstDbName.getValue( buf ); }
   const char * ptrToStandInstDbName() const { return buf + fieldStandInstDbName.offset; }
   private: FieldStandInstDbName fieldStandInstDbName;

   public:
   bool isSetStandInstDbID() const { return fieldStandInstDbID.offset >= 0; }
   FieldStandInstDbID::ValueType getStandInstDbID() const { return fieldStandInstDbID.getValue( buf ); }
   const char * ptrToStandInstDbID() const { return buf + fieldStandInstDbID.offset; }
   private: FieldStandInstDbID fieldStandInstDbID;

   public:
   bool isSetNoDlvyInst() const { return fieldNoDlvyInst.offset >= 0; }
   FieldNoDlvyInst::ValueType getNoDlvyInst() const { return fieldNoDlvyInst.getValue( buf ); }
   const char * ptrToNoDlvyInst() const { return buf + fieldNoDlvyInst.offset; }
   private: FieldNoDlvyInst fieldNoDlvyInst;
  
   public:
   std::size_t getGroupCountDlvyInst() const { return groupsDlvyInst.size(); } 
   const GroupDlvyInst & getGroupDlvyInst( std::size_t idx ) const { return groupsDlvyInst[ idx ]; } 
   private: GroupDlvyInst::Array groupsDlvyInst{ 10 };

   public:
   bool isSetPaymentMethod() const { return fieldPaymentMethod.offset >= 0; }
   FieldPaymentMethod::ValueType getPaymentMethod() const { return fieldPaymentMethod.getValue( buf ); }
   const char * ptrToPaymentMethod() const { return buf + fieldPaymentMethod.offset; }
   private: FieldPaymentMethod fieldPaymentMethod;

   public:
   bool isSetPaymentRef() const { return fieldPaymentRef.offset >= 0; }
   FieldPaymentRef::ValueType getPaymentRef() const { return fieldPaymentRef.getValue( buf ); }
   const char * ptrToPaymentRef() const { return buf + fieldPaymentRef.offset; }
   private: FieldPaymentRef fieldPaymentRef;

   public:
   bool isSetCardHolderName() const { return fieldCardHolderName.offset >= 0; }
   FieldCardHolderName::ValueType getCardHolderName() const { return fieldCardHolderName.getValue( buf ); }
   const char * ptrToCardHolderName() const { return buf + fieldCardHolderName.offset; }
   private: FieldCardHolderName fieldCardHolderName;

   public:
   bool isSetCardNumber() const { return fieldCardNumber.offset >= 0; }
   FieldCardNumber::ValueType getCardNumber() const { return fieldCardNumber.getValue( buf ); }
   const char * ptrToCardNumber() const { return buf + fieldCardNumber.offset; }
   private: FieldCardNumber fieldCardNumber;

   public:
   bool isSetCardStartDate() const { return fieldCardStartDate.offset >= 0; }
   FieldCardStartDate::ValueType getCardStartDate() const { return fieldCardStartDate.getValue( buf ); }
   const char * ptrToCardStartDate() const { return buf + fieldCardStartDate.offset; }
   private: FieldCardStartDate fieldCardStartDate;

   public:
   bool isSetCardExpDate() const { return fieldCardExpDate.offset >= 0; }
   FieldCardExpDate::ValueType getCardExpDate() const { return fieldCardExpDate.getValue( buf ); }
   const char * ptrToCardExpDate() const { return buf + fieldCardExpDate.offset; }
   private: FieldCardExpDate fieldCardExpDate;

   public:
   bool isSetCardIssNum() const { return fieldCardIssNum.offset >= 0; }
   FieldCardIssNum::ValueType getCardIssNum() const { return fieldCardIssNum.getValue( buf ); }
   const char * ptrToCardIssNum() const { return buf + fieldCardIssNum.offset; }
   private: FieldCardIssNum fieldCardIssNum;

   public:
   bool isSetPaymentDate() const { return fieldPaymentDate.offset >= 0; }
   FieldPaymentDate::ValueType getPaymentDate() const { return fieldPaymentDate.getValue( buf ); }
   const char * ptrToPaymentDate() const { return buf + fieldPaymentDate.offset; }
   private: FieldPaymentDate fieldPaymentDate;

   public:
   bool isSetPaymentRemitterID() const { return fieldPaymentRemitterID.offset >= 0; }
   FieldPaymentRemitterID::ValueType getPaymentRemitterID() const { return fieldPaymentRemitterID.getValue( buf ); }
   const char * ptrToPaymentRemitterID() const { return buf + fieldPaymentRemitterID.offset; }
   private: FieldPaymentRemitterID fieldPaymentRemitterID;

};

class GroupInstrAttrib : public MessageBase
{
  
// Methods
   public:
   GroupInstrAttrib();
   typedef std::vector<GroupInstrAttrib> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetInstrAttribType() const { return fieldInstrAttribType.offset >= 0; }
   FieldInstrAttribType::ValueType getInstrAttribType() const { return fieldInstrAttribType.getValue( buf ); }
   const char * ptrToInstrAttribType() const { return buf + fieldInstrAttribType.offset; }
   private: FieldInstrAttribType fieldInstrAttribType;

   public:
   bool isSetInstrAttribValue() const { return fieldInstrAttribValue.offset >= 0; }
   FieldInstrAttribValue::ValueType getInstrAttribValue() const { return fieldInstrAttribValue.getValue( buf ); }
   const char * ptrToInstrAttribValue() const { return buf + fieldInstrAttribValue.offset; }
   private: FieldInstrAttribValue fieldInstrAttribValue;

};

class GroupMiscFees : public MessageBase
{
  
// Methods
   public:
   GroupMiscFees();
   typedef std::vector<GroupMiscFees> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetMiscFeeAmt() const { return fieldMiscFeeAmt.offset >= 0; }
   FieldMiscFeeAmt::ValueType getMiscFeeAmt() const { return fieldMiscFeeAmt.getValue( buf ); }
   const char * ptrToMiscFeeAmt() const { return buf + fieldMiscFeeAmt.offset; }
   private: FieldMiscFeeAmt fieldMiscFeeAmt;

   public:
   bool isSetMiscFeeCurr() const { return fieldMiscFeeCurr.offset >= 0; }
   FieldMiscFeeCurr::ValueType getMiscFeeCurr() const { return fieldMiscFeeCurr.getValue( buf ); }
   const char * ptrToMiscFeeCurr() const { return buf + fieldMiscFeeCurr.offset; }
   private: FieldMiscFeeCurr fieldMiscFeeCurr;

   public:
   bool isSetMiscFeeType() const { return fieldMiscFeeType.offset >= 0; }
   FieldMiscFeeType::ValueType getMiscFeeType() const { return fieldMiscFeeType.getValue( buf ); }
   const char * ptrToMiscFeeType() const { return buf + fieldMiscFeeType.offset; }
   private: FieldMiscFeeType fieldMiscFeeType;

   public:
   bool isSetMiscFeeBasis() const { return fieldMiscFeeBasis.offset >= 0; }
   FieldMiscFeeBasis::ValueType getMiscFeeBasis() const { return fieldMiscFeeBasis.getValue( buf ); }
   const char * ptrToMiscFeeBasis() const { return buf + fieldMiscFeeBasis.offset; }
   private: FieldMiscFeeBasis fieldMiscFeeBasis;

};

class GroupQuoteQualifiers : public MessageBase
{
  
// Methods
   public:
   GroupQuoteQualifiers();
   typedef std::vector<GroupQuoteQualifiers> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetQuoteQualifier() const { return fieldQuoteQualifier.offset >= 0; }
   FieldQuoteQualifier::ValueType getQuoteQualifier() const { return fieldQuoteQualifier.getValue( buf ); }
   const char * ptrToQuoteQualifier() const { return buf + fieldQuoteQualifier.offset; }
   private: FieldQuoteQualifier fieldQuoteQualifier;

};

class GroupDistribInsts : public MessageBase
{
  
// Methods
   public:
   GroupDistribInsts();
   typedef std::vector<GroupDistribInsts> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetDistribPaymentMethod() const { return fieldDistribPaymentMethod.offset >= 0; }
   FieldDistribPaymentMethod::ValueType getDistribPaymentMethod() const { return fieldDistribPaymentMethod.getValue( buf ); }
   const char * ptrToDistribPaymentMethod() const { return buf + fieldDistribPaymentMethod.offset; }
   private: FieldDistribPaymentMethod fieldDistribPaymentMethod;

   public:
   bool isSetDistribPercentage() const { return fieldDistribPercentage.offset >= 0; }
   FieldDistribPercentage::ValueType getDistribPercentage() const { return fieldDistribPercentage.getValue( buf ); }
   const char * ptrToDistribPercentage() const { return buf + fieldDistribPercentage.offset; }
   private: FieldDistribPercentage fieldDistribPercentage;

   public:
   bool isSetCashDistribCurr() const { return fieldCashDistribCurr.offset >= 0; }
   FieldCashDistribCurr::ValueType getCashDistribCurr() const { return fieldCashDistribCurr.getValue( buf ); }
   const char * ptrToCashDistribCurr() const { return buf + fieldCashDistribCurr.offset; }
   private: FieldCashDistribCurr fieldCashDistribCurr;

   public:
   bool isSetCashDistribAgentName() const { return fieldCashDistribAgentName.offset >= 0; }
   FieldCashDistribAgentName::ValueType getCashDistribAgentName() const { return fieldCashDistribAgentName.getValue( buf ); }
   const char * ptrToCashDistribAgentName() const { return buf + fieldCashDistribAgentName.offset; }
   private: FieldCashDistribAgentName fieldCashDistribAgentName;

   public:
   bool isSetCashDistribAgentCode() const { return fieldCashDistribAgentCode.offset >= 0; }
   FieldCashDistribAgentCode::ValueType getCashDistribAgentCode() const { return fieldCashDistribAgentCode.getValue( buf ); }
   const char * ptrToCashDistribAgentCode() const { return buf + fieldCashDistribAgentCode.offset; }
   private: FieldCashDistribAgentCode fieldCashDistribAgentCode;

   public:
   bool isSetCashDistribAgentAcctNumber() const { return fieldCashDistribAgentAcctNumber.offset >= 0; }
   FieldCashDistribAgentAcctNumber::ValueType getCashDistribAgentAcctNumber() const { return fieldCashDistribAgentAcctNumber.getValue( buf ); }
   const char * ptrToCashDistribAgentAcctNumber() const { return buf + fieldCashDistribAgentAcctNumber.offset; }
   private: FieldCashDistribAgentAcctNumber fieldCashDistribAgentAcctNumber;

   public:
   bool isSetCashDistribPayRef() const { return fieldCashDistribPayRef.offset >= 0; }
   FieldCashDistribPayRef::ValueType getCashDistribPayRef() const { return fieldCashDistribPayRef.getValue( buf ); }
   const char * ptrToCashDistribPayRef() const { return buf + fieldCashDistribPayRef.offset; }
   private: FieldCashDistribPayRef fieldCashDistribPayRef;

   public:
   bool isSetCashDistribAgentAcctName() const { return fieldCashDistribAgentAcctName.offset >= 0; }
   FieldCashDistribAgentAcctName::ValueType getCashDistribAgentAcctName() const { return fieldCashDistribAgentAcctName.getValue( buf ); }
   const char * ptrToCashDistribAgentAcctName() const { return buf + fieldCashDistribAgentAcctName.offset; }
   private: FieldCashDistribAgentAcctName fieldCashDistribAgentAcctName;

};

class GroupTrdRegTimestamps : public MessageBase
{
  
// Methods
   public:
   GroupTrdRegTimestamps();
   typedef std::vector<GroupTrdRegTimestamps> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetTrdRegTimestamp() const { return fieldTrdRegTimestamp.offset >= 0; }
   FieldTrdRegTimestamp::ValueType getTrdRegTimestamp() const { return fieldTrdRegTimestamp.getValue( buf ); }
   const char * ptrToTrdRegTimestamp() const { return buf + fieldTrdRegTimestamp.offset; }
   private: FieldTrdRegTimestamp fieldTrdRegTimestamp;

   public:
   bool isSetTrdRegTimestampType() const { return fieldTrdRegTimestampType.offset >= 0; }
   FieldTrdRegTimestampType::ValueType getTrdRegTimestampType() const { return fieldTrdRegTimestampType.getValue( buf ); }
   const char * ptrToTrdRegTimestampType() const { return buf + fieldTrdRegTimestampType.offset; }
   private: FieldTrdRegTimestampType fieldTrdRegTimestampType;

   public:
   bool isSetTrdRegTimestampOrigin() const { return fieldTrdRegTimestampOrigin.offset >= 0; }
   FieldTrdRegTimestampOrigin::ValueType getTrdRegTimestampOrigin() const { return fieldTrdRegTimestampOrigin.getValue( buf ); }
   const char * ptrToTrdRegTimestampOrigin() const { return buf + fieldTrdRegTimestampOrigin.offset; }
   private: FieldTrdRegTimestampOrigin fieldTrdRegTimestampOrigin;

};

class GroupAltMDSource : public MessageBase
{
  
// Methods
   public:
   GroupAltMDSource();
   typedef std::vector<GroupAltMDSource> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetAltMDSourceID() const { return fieldAltMDSourceID.offset >= 0; }
   FieldAltMDSourceID::ValueType getAltMDSourceID() const { return fieldAltMDSourceID.getValue( buf ); }
   const char * ptrToAltMDSourceID() const { return buf + fieldAltMDSourceID.offset; }
   private: FieldAltMDSourceID fieldAltMDSourceID;

};

class GroupSides : public MessageBase
{
  
// Methods
   public:
   GroupSides();
   typedef std::vector<GroupSides> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetOrigClOrdID() const { return fieldOrigClOrdID.offset >= 0; }
   FieldOrigClOrdID::ValueType getOrigClOrdID() const { return fieldOrigClOrdID.getValue( buf ); }
   const char * ptrToOrigClOrdID() const { return buf + fieldOrigClOrdID.offset; }
   private: FieldOrigClOrdID fieldOrigClOrdID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetOrigOrdModTime() const { return fieldOrigOrdModTime.offset >= 0; }
   FieldOrigOrdModTime::ValueType getOrigOrdModTime() const { return fieldOrigOrdModTime.getValue( buf ); }
   const char * ptrToOrigOrdModTime() const { return buf + fieldOrigOrdModTime.offset; }
   private: FieldOrigOrdModTime fieldOrigOrdModTime;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

};

class GroupRoutingIDs : public MessageBase
{
  
// Methods
   public:
   GroupRoutingIDs();
   typedef std::vector<GroupRoutingIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetRoutingType() const { return fieldRoutingType.offset >= 0; }
   FieldRoutingType::ValueType getRoutingType() const { return fieldRoutingType.getValue( buf ); }
   const char * ptrToRoutingType() const { return buf + fieldRoutingType.offset; }
   private: FieldRoutingType fieldRoutingType;

   public:
   bool isSetRoutingID() const { return fieldRoutingID.offset >= 0; }
   FieldRoutingID::ValueType getRoutingID() const { return fieldRoutingID.getValue( buf ); }
   const char * ptrToRoutingID() const { return buf + fieldRoutingID.offset; }
   private: FieldRoutingID fieldRoutingID;

};

class GroupPosAmt : public MessageBase
{
  
// Methods
   public:
   GroupPosAmt();
   typedef std::vector<GroupPosAmt> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetPosAmtType() const { return fieldPosAmtType.offset >= 0; }
   FieldPosAmtType::ValueType getPosAmtType() const { return fieldPosAmtType.getValue( buf ); }
   const char * ptrToPosAmtType() const { return buf + fieldPosAmtType.offset; }
   private: FieldPosAmtType fieldPosAmtType;

   public:
   bool isSetPosAmt() const { return fieldPosAmt.offset >= 0; }
   FieldPosAmt::ValueType getPosAmt() const { return fieldPosAmt.getValue( buf ); }
   const char * ptrToPosAmt() const { return buf + fieldPosAmt.offset; }
   private: FieldPosAmt fieldPosAmt;

};

class GroupLinesOfText : public MessageBase
{
  
// Methods
   public:
   GroupLinesOfText();
   typedef std::vector<GroupLinesOfText> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

};

class GroupIOIQualifiers : public MessageBase
{
  
// Methods
   public:
   GroupIOIQualifiers();
   typedef std::vector<GroupIOIQualifiers> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetIOIQualifier() const { return fieldIOIQualifier.offset >= 0; }
   FieldIOIQualifier::ValueType getIOIQualifier() const { return fieldIOIQualifier.getValue( buf ); }
   const char * ptrToIOIQualifier() const { return buf + fieldIOIQualifier.offset; }
   private: FieldIOIQualifier fieldIOIQualifier;

};

class GroupDates : public MessageBase
{
  
// Methods
   public:
   GroupDates();
   typedef std::vector<GroupDates> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

};

class GroupMDEntryTypes : public MessageBase
{
  
// Methods
   public:
   GroupMDEntryTypes();
   typedef std::vector<GroupMDEntryTypes> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetMDEntryType() const { return fieldMDEntryType.offset >= 0; }
   FieldMDEntryType::ValueType getMDEntryType() const { return fieldMDEntryType.getValue( buf ); }
   const char * ptrToMDEntryType() const { return buf + fieldMDEntryType.offset; }
   private: FieldMDEntryType fieldMDEntryType;

};

class GroupRelatedSym : public MessageBase
{
  
// Methods
   public:
   GroupRelatedSym();
   typedef std::vector<GroupRelatedSym> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

};

class GroupContraBrokers : public MessageBase
{
  
// Methods
   public:
   GroupContraBrokers();
   typedef std::vector<GroupContraBrokers> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetContraBroker() const { return fieldContraBroker.offset >= 0; }
   FieldContraBroker::ValueType getContraBroker() const { return fieldContraBroker.getValue( buf ); }
   const char * ptrToContraBroker() const { return buf + fieldContraBroker.offset; }
   private: FieldContraBroker fieldContraBroker;

   public:
   bool isSetContraTrader() const { return fieldContraTrader.offset >= 0; }
   FieldContraTrader::ValueType getContraTrader() const { return fieldContraTrader.getValue( buf ); }
   const char * ptrToContraTrader() const { return buf + fieldContraTrader.offset; }
   private: FieldContraTrader fieldContraTrader;

   public:
   bool isSetContraTradeQty() const { return fieldContraTradeQty.offset >= 0; }
   FieldContraTradeQty::ValueType getContraTradeQty() const { return fieldContraTradeQty.getValue( buf ); }
   const char * ptrToContraTradeQty() const { return buf + fieldContraTradeQty.offset; }
   private: FieldContraTradeQty fieldContraTradeQty;

   public:
   bool isSetContraTradeTime() const { return fieldContraTradeTime.offset >= 0; }
   FieldContraTradeTime::ValueType getContraTradeTime() const { return fieldContraTradeTime.getValue( buf ); }
   const char * ptrToContraTradeTime() const { return buf + fieldContraTradeTime.offset; }
   private: FieldContraTradeTime fieldContraTradeTime;

   public:
   bool isSetContraLegRefID() const { return fieldContraLegRefID.offset >= 0; }
   FieldContraLegRefID::ValueType getContraLegRefID() const { return fieldContraLegRefID.getValue( buf ); }
   const char * ptrToContraLegRefID() const { return buf + fieldContraLegRefID.offset; }
   private: FieldContraLegRefID fieldContraLegRefID;

};

class GroupTrades : public MessageBase
{
  
// Methods
   public:
   GroupTrades();
   typedef std::vector<GroupTrades> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetTradeReportID() const { return fieldTradeReportID.offset >= 0; }
   FieldTradeReportID::ValueType getTradeReportID() const { return fieldTradeReportID.getValue( buf ); }
   const char * ptrToTradeReportID() const { return buf + fieldTradeReportID.offset; }
   private: FieldTradeReportID fieldTradeReportID;

   public:
   bool isSetSecondaryTradeReportID() const { return fieldSecondaryTradeReportID.offset >= 0; }
   FieldSecondaryTradeReportID::ValueType getSecondaryTradeReportID() const { return fieldSecondaryTradeReportID.getValue( buf ); }
   const char * ptrToSecondaryTradeReportID() const { return buf + fieldSecondaryTradeReportID.offset; }
   private: FieldSecondaryTradeReportID fieldSecondaryTradeReportID;

};

class GroupStrikes : public MessageBase
{
  
// Methods
   public:
   GroupStrikes();
   typedef std::vector<GroupStrikes> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

};

class GroupBidDescriptors : public MessageBase
{
  
// Methods
   public:
   GroupBidDescriptors();
   typedef std::vector<GroupBidDescriptors> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetBidDescriptorType() const { return fieldBidDescriptorType.offset >= 0; }
   FieldBidDescriptorType::ValueType getBidDescriptorType() const { return fieldBidDescriptorType.getValue( buf ); }
   const char * ptrToBidDescriptorType() const { return buf + fieldBidDescriptorType.offset; }
   private: FieldBidDescriptorType fieldBidDescriptorType;

   public:
   bool isSetBidDescriptor() const { return fieldBidDescriptor.offset >= 0; }
   FieldBidDescriptor::ValueType getBidDescriptor() const { return fieldBidDescriptor.getValue( buf ); }
   const char * ptrToBidDescriptor() const { return buf + fieldBidDescriptor.offset; }
   private: FieldBidDescriptor fieldBidDescriptor;

   public:
   bool isSetSideValueInd() const { return fieldSideValueInd.offset >= 0; }
   FieldSideValueInd::ValueType getSideValueInd() const { return fieldSideValueInd.getValue( buf ); }
   const char * ptrToSideValueInd() const { return buf + fieldSideValueInd.offset; }
   private: FieldSideValueInd fieldSideValueInd;

   public:
   bool isSetLiquidityValue() const { return fieldLiquidityValue.offset >= 0; }
   FieldLiquidityValue::ValueType getLiquidityValue() const { return fieldLiquidityValue.getValue( buf ); }
   const char * ptrToLiquidityValue() const { return buf + fieldLiquidityValue.offset; }
   private: FieldLiquidityValue fieldLiquidityValue;

   public:
   bool isSetLiquidityNumSecurities() const { return fieldLiquidityNumSecurities.offset >= 0; }
   FieldLiquidityNumSecurities::ValueType getLiquidityNumSecurities() const { return fieldLiquidityNumSecurities.getValue( buf ); }
   const char * ptrToLiquidityNumSecurities() const { return buf + fieldLiquidityNumSecurities.offset; }
   private: FieldLiquidityNumSecurities fieldLiquidityNumSecurities;

   public:
   bool isSetLiquidityPctLow() const { return fieldLiquidityPctLow.offset >= 0; }
   FieldLiquidityPctLow::ValueType getLiquidityPctLow() const { return fieldLiquidityPctLow.getValue( buf ); }
   const char * ptrToLiquidityPctLow() const { return buf + fieldLiquidityPctLow.offset; }
   private: FieldLiquidityPctLow fieldLiquidityPctLow;

   public:
   bool isSetLiquidityPctHigh() const { return fieldLiquidityPctHigh.offset >= 0; }
   FieldLiquidityPctHigh::ValueType getLiquidityPctHigh() const { return fieldLiquidityPctHigh.getValue( buf ); }
   const char * ptrToLiquidityPctHigh() const { return buf + fieldLiquidityPctHigh.offset; }
   private: FieldLiquidityPctHigh fieldLiquidityPctHigh;

   public:
   bool isSetEFPTrackingError() const { return fieldEFPTrackingError.offset >= 0; }
   FieldEFPTrackingError::ValueType getEFPTrackingError() const { return fieldEFPTrackingError.getValue( buf ); }
   const char * ptrToEFPTrackingError() const { return buf + fieldEFPTrackingError.offset; }
   private: FieldEFPTrackingError fieldEFPTrackingError;

   public:
   bool isSetFairValue() const { return fieldFairValue.offset >= 0; }
   FieldFairValue::ValueType getFairValue() const { return fieldFairValue.getValue( buf ); }
   const char * ptrToFairValue() const { return buf + fieldFairValue.offset; }
   private: FieldFairValue fieldFairValue;

   public:
   bool isSetOutsideIndexPct() const { return fieldOutsideIndexPct.offset >= 0; }
   FieldOutsideIndexPct::ValueType getOutsideIndexPct() const { return fieldOutsideIndexPct.getValue( buf ); }
   const char * ptrToOutsideIndexPct() const { return buf + fieldOutsideIndexPct.offset; }
   private: FieldOutsideIndexPct fieldOutsideIndexPct;

   public:
   bool isSetValueOfFutures() const { return fieldValueOfFutures.offset >= 0; }
   FieldValueOfFutures::ValueType getValueOfFutures() const { return fieldValueOfFutures.getValue( buf ); }
   const char * ptrToValueOfFutures() const { return buf + fieldValueOfFutures.offset; }
   private: FieldValueOfFutures fieldValueOfFutures;

};

class GroupCompIDs : public MessageBase
{
  
// Methods
   public:
   GroupCompIDs();
   typedef std::vector<GroupCompIDs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetRefCompID() const { return fieldRefCompID.offset >= 0; }
   FieldRefCompID::ValueType getRefCompID() const { return fieldRefCompID.getValue( buf ); }
   const char * ptrToRefCompID() const { return buf + fieldRefCompID.offset; }
   private: FieldRefCompID fieldRefCompID;

   public:
   bool isSetRefSubID() const { return fieldRefSubID.offset >= 0; }
   FieldRefSubID::ValueType getRefSubID() const { return fieldRefSubID.getValue( buf ); }
   const char * ptrToRefSubID() const { return buf + fieldRefSubID.offset; }
   private: FieldRefSubID fieldRefSubID;

   public:
   bool isSetLocationID() const { return fieldLocationID.offset >= 0; }
   FieldLocationID::ValueType getLocationID() const { return fieldLocationID.getValue( buf ); }
   const char * ptrToLocationID() const { return buf + fieldLocationID.offset; }
   private: FieldLocationID fieldLocationID;

   public:
   bool isSetDeskID() const { return fieldDeskID.offset >= 0; }
   FieldDeskID::ValueType getDeskID() const { return fieldDeskID.getValue( buf ); }
   const char * ptrToDeskID() const { return buf + fieldDeskID.offset; }
   private: FieldDeskID fieldDeskID;

};

class GroupLegAllocs : public MessageBase
{
  
// Methods
   public:
   GroupLegAllocs();
   typedef std::vector<GroupLegAllocs> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetLegAllocAccount() const { return fieldLegAllocAccount.offset >= 0; }
   FieldLegAllocAccount::ValueType getLegAllocAccount() const { return fieldLegAllocAccount.getValue( buf ); }
   const char * ptrToLegAllocAccount() const { return buf + fieldLegAllocAccount.offset; }
   private: FieldLegAllocAccount fieldLegAllocAccount;

   public:
   bool isSetLegIndividualAllocID() const { return fieldLegIndividualAllocID.offset >= 0; }
   FieldLegIndividualAllocID::ValueType getLegIndividualAllocID() const { return fieldLegIndividualAllocID.getValue( buf ); }
   const char * ptrToLegIndividualAllocID() const { return buf + fieldLegIndividualAllocID.offset; }
   private: FieldLegIndividualAllocID fieldLegIndividualAllocID;

   public:
   bool isSetNoNested2PartyIDs() const { return fieldNoNested2PartyIDs.offset >= 0; }
   FieldNoNested2PartyIDs::ValueType getNoNested2PartyIDs() const { return fieldNoNested2PartyIDs.getValue( buf ); }
   const char * ptrToNoNested2PartyIDs() const { return buf + fieldNoNested2PartyIDs.offset; }
   private: FieldNoNested2PartyIDs fieldNoNested2PartyIDs;
  
   public:
   std::size_t getGroupCountNested2PartyIDs() const { return groupsNested2PartyIDs.size(); } 
   const GroupNested2PartyIDs & getGroupNested2PartyIDs( std::size_t idx ) const { return groupsNested2PartyIDs[ idx ]; } 
   private: GroupNested2PartyIDs::Array groupsNested2PartyIDs{ 10 };

   public:
   bool isSetLegAllocQty() const { return fieldLegAllocQty.offset >= 0; }
   FieldLegAllocQty::ValueType getLegAllocQty() const { return fieldLegAllocQty.getValue( buf ); }
   const char * ptrToLegAllocQty() const { return buf + fieldLegAllocQty.offset; }
   private: FieldLegAllocQty fieldLegAllocQty;

   public:
   bool isSetLegAllocAcctIDSource() const { return fieldLegAllocAcctIDSource.offset >= 0; }
   FieldLegAllocAcctIDSource::ValueType getLegAllocAcctIDSource() const { return fieldLegAllocAcctIDSource.getValue( buf ); }
   const char * ptrToLegAllocAcctIDSource() const { return buf + fieldLegAllocAcctIDSource.offset; }
   private: FieldLegAllocAcctIDSource fieldLegAllocAcctIDSource;

   public:
   bool isSetLegSettlCurrency() const { return fieldLegSettlCurrency.offset >= 0; }
   FieldLegSettlCurrency::ValueType getLegSettlCurrency() const { return fieldLegSettlCurrency.getValue( buf ); }
   const char * ptrToLegSettlCurrency() const { return buf + fieldLegSettlCurrency.offset; }
   private: FieldLegSettlCurrency fieldLegSettlCurrency;

};

class GroupRegistDtls : public MessageBase
{
  
// Methods
   public:
   GroupRegistDtls();
   typedef std::vector<GroupRegistDtls> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetRegistDtls() const { return fieldRegistDtls.offset >= 0; }
   FieldRegistDtls::ValueType getRegistDtls() const { return fieldRegistDtls.getValue( buf ); }
   const char * ptrToRegistDtls() const { return buf + fieldRegistDtls.offset; }
   private: FieldRegistDtls fieldRegistDtls;

   public:
   bool isSetRegistEmail() const { return fieldRegistEmail.offset >= 0; }
   FieldRegistEmail::ValueType getRegistEmail() const { return fieldRegistEmail.getValue( buf ); }
   const char * ptrToRegistEmail() const { return buf + fieldRegistEmail.offset; }
   private: FieldRegistEmail fieldRegistEmail;

   public:
   bool isSetMailingDtls() const { return fieldMailingDtls.offset >= 0; }
   FieldMailingDtls::ValueType getMailingDtls() const { return fieldMailingDtls.getValue( buf ); }
   const char * ptrToMailingDtls() const { return buf + fieldMailingDtls.offset; }
   private: FieldMailingDtls fieldMailingDtls;

   public:
   bool isSetMailingInst() const { return fieldMailingInst.offset >= 0; }
   FieldMailingInst::ValueType getMailingInst() const { return fieldMailingInst.getValue( buf ); }
   const char * ptrToMailingInst() const { return buf + fieldMailingInst.offset; }
   private: FieldMailingInst fieldMailingInst;

   public:
   bool isSetNoNestedPartyIDs() const { return fieldNoNestedPartyIDs.offset >= 0; }
   FieldNoNestedPartyIDs::ValueType getNoNestedPartyIDs() const { return fieldNoNestedPartyIDs.getValue( buf ); }
   const char * ptrToNoNestedPartyIDs() const { return buf + fieldNoNestedPartyIDs.offset; }
   private: FieldNoNestedPartyIDs fieldNoNestedPartyIDs;
  
   public:
   std::size_t getGroupCountNestedPartyIDs() const { return groupsNestedPartyIDs.size(); } 
   const GroupNestedPartyIDs & getGroupNestedPartyIDs( std::size_t idx ) const { return groupsNestedPartyIDs[ idx ]; } 
   private: GroupNestedPartyIDs::Array groupsNestedPartyIDs{ 10 };

   public:
   bool isSetOwnerType() const { return fieldOwnerType.offset >= 0; }
   FieldOwnerType::ValueType getOwnerType() const { return fieldOwnerType.getValue( buf ); }
   const char * ptrToOwnerType() const { return buf + fieldOwnerType.offset; }
   private: FieldOwnerType fieldOwnerType;

   public:
   bool isSetDateOfBirth() const { return fieldDateOfBirth.offset >= 0; }
   FieldDateOfBirth::ValueType getDateOfBirth() const { return fieldDateOfBirth.getValue( buf ); }
   const char * ptrToDateOfBirth() const { return buf + fieldDateOfBirth.offset; }
   private: FieldDateOfBirth fieldDateOfBirth;

   public:
   bool isSetInvestorCountryOfResidence() const { return fieldInvestorCountryOfResidence.offset >= 0; }
   FieldInvestorCountryOfResidence::ValueType getInvestorCountryOfResidence() const { return fieldInvestorCountryOfResidence.getValue( buf ); }
   const char * ptrToInvestorCountryOfResidence() const { return buf + fieldInvestorCountryOfResidence.offset; }
   private: FieldInvestorCountryOfResidence fieldInvestorCountryOfResidence;

};

class GroupContAmts : public MessageBase
{
  
// Methods
   public:
   GroupContAmts();
   typedef std::vector<GroupContAmts> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetContAmtType() const { return fieldContAmtType.offset >= 0; }
   FieldContAmtType::ValueType getContAmtType() const { return fieldContAmtType.getValue( buf ); }
   const char * ptrToContAmtType() const { return buf + fieldContAmtType.offset; }
   private: FieldContAmtType fieldContAmtType;

   public:
   bool isSetContAmtValue() const { return fieldContAmtValue.offset >= 0; }
   FieldContAmtValue::ValueType getContAmtValue() const { return fieldContAmtValue.getValue( buf ); }
   const char * ptrToContAmtValue() const { return buf + fieldContAmtValue.offset; }
   private: FieldContAmtValue fieldContAmtValue;

   public:
   bool isSetContAmtCurr() const { return fieldContAmtCurr.offset >= 0; }
   FieldContAmtCurr::ValueType getContAmtCurr() const { return fieldContAmtCurr.getValue( buf ); }
   const char * ptrToContAmtCurr() const { return buf + fieldContAmtCurr.offset; }
   private: FieldContAmtCurr fieldContAmtCurr;

};

class GroupMDEntries : public MessageBase
{
  
// Methods
   public:
   GroupMDEntries();
   typedef std::vector<GroupMDEntries> Array;
   void reset();
   static const char * getMessageName();
   static offset_t scan( Array & arr, const char * fix, unsigned len );
   static offset_t skip( const char * fix, unsigned len );
   const char * getFieldValue( unsigned tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<unsigned> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];
   
   public:
   bool isSetMDEntryType() const { return fieldMDEntryType.offset >= 0; }
   FieldMDEntryType::ValueType getMDEntryType() const { return fieldMDEntryType.getValue( buf ); }
   const char * ptrToMDEntryType() const { return buf + fieldMDEntryType.offset; }
   private: FieldMDEntryType fieldMDEntryType;

   public:
   bool isSetMDEntryPx() const { return fieldMDEntryPx.offset >= 0; }
   FieldMDEntryPx::ValueType getMDEntryPx() const { return fieldMDEntryPx.getValue( buf ); }
   const char * ptrToMDEntryPx() const { return buf + fieldMDEntryPx.offset; }
   private: FieldMDEntryPx fieldMDEntryPx;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetMDEntrySize() const { return fieldMDEntrySize.offset >= 0; }
   FieldMDEntrySize::ValueType getMDEntrySize() const { return fieldMDEntrySize.getValue( buf ); }
   const char * ptrToMDEntrySize() const { return buf + fieldMDEntrySize.offset; }
   private: FieldMDEntrySize fieldMDEntrySize;

   public:
   bool isSetMDEntryDate() const { return fieldMDEntryDate.offset >= 0; }
   FieldMDEntryDate::ValueType getMDEntryDate() const { return fieldMDEntryDate.getValue( buf ); }
   const char * ptrToMDEntryDate() const { return buf + fieldMDEntryDate.offset; }
   private: FieldMDEntryDate fieldMDEntryDate;

   public:
   bool isSetMDEntryTime() const { return fieldMDEntryTime.offset >= 0; }
   FieldMDEntryTime::ValueType getMDEntryTime() const { return fieldMDEntryTime.getValue( buf ); }
   const char * ptrToMDEntryTime() const { return buf + fieldMDEntryTime.offset; }
   private: FieldMDEntryTime fieldMDEntryTime;

   public:
   bool isSetTickDirection() const { return fieldTickDirection.offset >= 0; }
   FieldTickDirection::ValueType getTickDirection() const { return fieldTickDirection.getValue( buf ); }
   const char * ptrToTickDirection() const { return buf + fieldTickDirection.offset; }
   private: FieldTickDirection fieldTickDirection;

   public:
   bool isSetMDMkt() const { return fieldMDMkt.offset >= 0; }
   FieldMDMkt::ValueType getMDMkt() const { return fieldMDMkt.getValue( buf ); }
   const char * ptrToMDMkt() const { return buf + fieldMDMkt.offset; }
   private: FieldMDMkt fieldMDMkt;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetQuoteCondition() const { return fieldQuoteCondition.offset >= 0; }
   FieldQuoteCondition::ValueType getQuoteCondition() const { return fieldQuoteCondition.getValue( buf ); }
   const char * ptrToQuoteCondition() const { return buf + fieldQuoteCondition.offset; }
   private: FieldQuoteCondition fieldQuoteCondition;

   public:
   bool isSetTradeCondition() const { return fieldTradeCondition.offset >= 0; }
   FieldTradeCondition::ValueType getTradeCondition() const { return fieldTradeCondition.getValue( buf ); }
   const char * ptrToTradeCondition() const { return buf + fieldTradeCondition.offset; }
   private: FieldTradeCondition fieldTradeCondition;

   public:
   bool isSetMDEntryOriginator() const { return fieldMDEntryOriginator.offset >= 0; }
   FieldMDEntryOriginator::ValueType getMDEntryOriginator() const { return fieldMDEntryOriginator.getValue( buf ); }
   const char * ptrToMDEntryOriginator() const { return buf + fieldMDEntryOriginator.offset; }
   private: FieldMDEntryOriginator fieldMDEntryOriginator;

   public:
   bool isSetLocationID() const { return fieldLocationID.offset >= 0; }
   FieldLocationID::ValueType getLocationID() const { return fieldLocationID.getValue( buf ); }
   const char * ptrToLocationID() const { return buf + fieldLocationID.offset; }
   private: FieldLocationID fieldLocationID;

   public:
   bool isSetDeskID() const { return fieldDeskID.offset >= 0; }
   FieldDeskID::ValueType getDeskID() const { return fieldDeskID.getValue( buf ); }
   const char * ptrToDeskID() const { return buf + fieldDeskID.offset; }
   private: FieldDeskID fieldDeskID;

   public:
   bool isSetOpenCloseSettlFlag() const { return fieldOpenCloseSettlFlag.offset >= 0; }
   FieldOpenCloseSettlFlag::ValueType getOpenCloseSettlFlag() const { return fieldOpenCloseSettlFlag.getValue( buf ); }
   const char * ptrToOpenCloseSettlFlag() const { return buf + fieldOpenCloseSettlFlag.offset; }
   private: FieldOpenCloseSettlFlag fieldOpenCloseSettlFlag;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetSellerDays() const { return fieldSellerDays.offset >= 0; }
   FieldSellerDays::ValueType getSellerDays() const { return fieldSellerDays.getValue( buf ); }
   const char * ptrToSellerDays() const { return buf + fieldSellerDays.offset; }
   private: FieldSellerDays fieldSellerDays;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetQuoteEntryID() const { return fieldQuoteEntryID.offset >= 0; }
   FieldQuoteEntryID::ValueType getQuoteEntryID() const { return fieldQuoteEntryID.getValue( buf ); }
   const char * ptrToQuoteEntryID() const { return buf + fieldQuoteEntryID.offset; }
   private: FieldQuoteEntryID fieldQuoteEntryID;

   public:
   bool isSetMDEntryBuyer() const { return fieldMDEntryBuyer.offset >= 0; }
   FieldMDEntryBuyer::ValueType getMDEntryBuyer() const { return fieldMDEntryBuyer.getValue( buf ); }
   const char * ptrToMDEntryBuyer() const { return buf + fieldMDEntryBuyer.offset; }
   private: FieldMDEntryBuyer fieldMDEntryBuyer;

   public:
   bool isSetMDEntrySeller() const { return fieldMDEntrySeller.offset >= 0; }
   FieldMDEntrySeller::ValueType getMDEntrySeller() const { return fieldMDEntrySeller.getValue( buf ); }
   const char * ptrToMDEntrySeller() const { return buf + fieldMDEntrySeller.offset; }
   private: FieldMDEntrySeller fieldMDEntrySeller;

   public:
   bool isSetNumberOfOrders() const { return fieldNumberOfOrders.offset >= 0; }
   FieldNumberOfOrders::ValueType getNumberOfOrders() const { return fieldNumberOfOrders.getValue( buf ); }
   const char * ptrToNumberOfOrders() const { return buf + fieldNumberOfOrders.offset; }
   private: FieldNumberOfOrders fieldNumberOfOrders;

   public:
   bool isSetMDEntryPositionNo() const { return fieldMDEntryPositionNo.offset >= 0; }
   FieldMDEntryPositionNo::ValueType getMDEntryPositionNo() const { return fieldMDEntryPositionNo.getValue( buf ); }
   const char * ptrToMDEntryPositionNo() const { return buf + fieldMDEntryPositionNo.offset; }
   private: FieldMDEntryPositionNo fieldMDEntryPositionNo;

   public:
   bool isSetScope() const { return fieldScope.offset >= 0; }
   FieldScope::ValueType getScope() const { return fieldScope.getValue( buf ); }
   const char * ptrToScope() const { return buf + fieldScope.offset; }
   private: FieldScope fieldScope;

   public:
   bool isSetPriceDelta() const { return fieldPriceDelta.offset >= 0; }
   FieldPriceDelta::ValueType getPriceDelta() const { return fieldPriceDelta.getValue( buf ); }
   const char * ptrToPriceDelta() const { return buf + fieldPriceDelta.offset; }
   private: FieldPriceDelta fieldPriceDelta;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

};
// end of Groups.hxx

// start of Messages.hxx

// Generated


class MessageHeader: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetBeginString() const { return fieldBeginString.offset >= 0; }
   FieldBeginString::ValueType getBeginString() const { return fieldBeginString.getValue( buf ); }
   const char * ptrToBeginString() const { return buf + fieldBeginString.offset; }
   private: FieldBeginString fieldBeginString;

   public:
   bool isSetBodyLength() const { return fieldBodyLength.offset >= 0; }
   FieldBodyLength::ValueType getBodyLength() const { return fieldBodyLength.getValue( buf ); }
   const char * ptrToBodyLength() const { return buf + fieldBodyLength.offset; }
   private: FieldBodyLength fieldBodyLength;

   public:
   bool isSetMsgType() const { return fieldMsgType.offset >= 0; }
   FieldMsgType::ValueType getMsgType() const { return fieldMsgType.getValue( buf ); }
   const char * ptrToMsgType() const { return buf + fieldMsgType.offset; }
   private: FieldMsgType fieldMsgType;

   public:
   bool isSetSenderCompID() const { return fieldSenderCompID.offset >= 0; }
   FieldSenderCompID::ValueType getSenderCompID() const { return fieldSenderCompID.getValue( buf ); }
   const char * ptrToSenderCompID() const { return buf + fieldSenderCompID.offset; }
   private: FieldSenderCompID fieldSenderCompID;

   public:
   bool isSetTargetCompID() const { return fieldTargetCompID.offset >= 0; }
   FieldTargetCompID::ValueType getTargetCompID() const { return fieldTargetCompID.getValue( buf ); }
   const char * ptrToTargetCompID() const { return buf + fieldTargetCompID.offset; }
   private: FieldTargetCompID fieldTargetCompID;

   public:
   bool isSetOnBehalfOfCompID() const { return fieldOnBehalfOfCompID.offset >= 0; }
   FieldOnBehalfOfCompID::ValueType getOnBehalfOfCompID() const { return fieldOnBehalfOfCompID.getValue( buf ); }
   const char * ptrToOnBehalfOfCompID() const { return buf + fieldOnBehalfOfCompID.offset; }
   private: FieldOnBehalfOfCompID fieldOnBehalfOfCompID;

   public:
   bool isSetDeliverToCompID() const { return fieldDeliverToCompID.offset >= 0; }
   FieldDeliverToCompID::ValueType getDeliverToCompID() const { return fieldDeliverToCompID.getValue( buf ); }
   const char * ptrToDeliverToCompID() const { return buf + fieldDeliverToCompID.offset; }
   private: FieldDeliverToCompID fieldDeliverToCompID;

   public:
   bool isSetSecureDataLen() const { return fieldSecureDataLen.offset >= 0; }
   FieldSecureDataLen::ValueType getSecureDataLen() const { return fieldSecureDataLen.getValue( buf ); }
   const char * ptrToSecureDataLen() const { return buf + fieldSecureDataLen.offset; }
   private: FieldSecureDataLen fieldSecureDataLen;

   public:
   bool isSetSecureData() const { return fieldSecureData.offset >= 0; }
   FieldSecureData::ValueType getSecureData() const { return fieldSecureData.getValue( buf ); }
   const char * ptrToSecureData() const { return buf + fieldSecureData.offset; }
   private: FieldSecureData fieldSecureData;

   public:
   bool isSetMsgSeqNum() const { return fieldMsgSeqNum.offset >= 0; }
   FieldMsgSeqNum::ValueType getMsgSeqNum() const { return fieldMsgSeqNum.getValue( buf ); }
   const char * ptrToMsgSeqNum() const { return buf + fieldMsgSeqNum.offset; }
   private: FieldMsgSeqNum fieldMsgSeqNum;

   public:
   bool isSetSenderSubID() const { return fieldSenderSubID.offset >= 0; }
   FieldSenderSubID::ValueType getSenderSubID() const { return fieldSenderSubID.getValue( buf ); }
   const char * ptrToSenderSubID() const { return buf + fieldSenderSubID.offset; }
   private: FieldSenderSubID fieldSenderSubID;

   public:
   bool isSetSenderLocationID() const { return fieldSenderLocationID.offset >= 0; }
   FieldSenderLocationID::ValueType getSenderLocationID() const { return fieldSenderLocationID.getValue( buf ); }
   const char * ptrToSenderLocationID() const { return buf + fieldSenderLocationID.offset; }
   private: FieldSenderLocationID fieldSenderLocationID;

   public:
   bool isSetTargetSubID() const { return fieldTargetSubID.offset >= 0; }
   FieldTargetSubID::ValueType getTargetSubID() const { return fieldTargetSubID.getValue( buf ); }
   const char * ptrToTargetSubID() const { return buf + fieldTargetSubID.offset; }
   private: FieldTargetSubID fieldTargetSubID;

   public:
   bool isSetTargetLocationID() const { return fieldTargetLocationID.offset >= 0; }
   FieldTargetLocationID::ValueType getTargetLocationID() const { return fieldTargetLocationID.getValue( buf ); }
   const char * ptrToTargetLocationID() const { return buf + fieldTargetLocationID.offset; }
   private: FieldTargetLocationID fieldTargetLocationID;

   public:
   bool isSetOnBehalfOfSubID() const { return fieldOnBehalfOfSubID.offset >= 0; }
   FieldOnBehalfOfSubID::ValueType getOnBehalfOfSubID() const { return fieldOnBehalfOfSubID.getValue( buf ); }
   const char * ptrToOnBehalfOfSubID() const { return buf + fieldOnBehalfOfSubID.offset; }
   private: FieldOnBehalfOfSubID fieldOnBehalfOfSubID;

   public:
   bool isSetOnBehalfOfLocationID() const { return fieldOnBehalfOfLocationID.offset >= 0; }
   FieldOnBehalfOfLocationID::ValueType getOnBehalfOfLocationID() const { return fieldOnBehalfOfLocationID.getValue( buf ); }
   const char * ptrToOnBehalfOfLocationID() const { return buf + fieldOnBehalfOfLocationID.offset; }
   private: FieldOnBehalfOfLocationID fieldOnBehalfOfLocationID;

   public:
   bool isSetDeliverToSubID() const { return fieldDeliverToSubID.offset >= 0; }
   FieldDeliverToSubID::ValueType getDeliverToSubID() const { return fieldDeliverToSubID.getValue( buf ); }
   const char * ptrToDeliverToSubID() const { return buf + fieldDeliverToSubID.offset; }
   private: FieldDeliverToSubID fieldDeliverToSubID;

   public:
   bool isSetDeliverToLocationID() const { return fieldDeliverToLocationID.offset >= 0; }
   FieldDeliverToLocationID::ValueType getDeliverToLocationID() const { return fieldDeliverToLocationID.getValue( buf ); }
   const char * ptrToDeliverToLocationID() const { return buf + fieldDeliverToLocationID.offset; }
   private: FieldDeliverToLocationID fieldDeliverToLocationID;

   public:
   bool isSetPossDupFlag() const { return fieldPossDupFlag.offset >= 0; }
   FieldPossDupFlag::ValueType getPossDupFlag() const { return fieldPossDupFlag.getValue( buf ); }
   const char * ptrToPossDupFlag() const { return buf + fieldPossDupFlag.offset; }
   private: FieldPossDupFlag fieldPossDupFlag;

   public:
   bool isSetPossResend() const { return fieldPossResend.offset >= 0; }
   FieldPossResend::ValueType getPossResend() const { return fieldPossResend.getValue( buf ); }
   const char * ptrToPossResend() const { return buf + fieldPossResend.offset; }
   private: FieldPossResend fieldPossResend;

   public:
   bool isSetSendingTime() const { return fieldSendingTime.offset >= 0; }
   FieldSendingTime::ValueType getSendingTime() const { return fieldSendingTime.getValue( buf ); }
   const char * ptrToSendingTime() const { return buf + fieldSendingTime.offset; }
   private: FieldSendingTime fieldSendingTime;

   public:
   bool isSetOrigSendingTime() const { return fieldOrigSendingTime.offset >= 0; }
   FieldOrigSendingTime::ValueType getOrigSendingTime() const { return fieldOrigSendingTime.getValue( buf ); }
   const char * ptrToOrigSendingTime() const { return buf + fieldOrigSendingTime.offset; }
   private: FieldOrigSendingTime fieldOrigSendingTime;

   public:
   bool isSetXmlDataLen() const { return fieldXmlDataLen.offset >= 0; }
   FieldXmlDataLen::ValueType getXmlDataLen() const { return fieldXmlDataLen.getValue( buf ); }
   const char * ptrToXmlDataLen() const { return buf + fieldXmlDataLen.offset; }
   private: FieldXmlDataLen fieldXmlDataLen;

   public:
   bool isSetXmlData() const { return fieldXmlData.offset >= 0; }
   FieldXmlData::ValueType getXmlData() const { return fieldXmlData.getValue( buf ); }
   const char * ptrToXmlData() const { return buf + fieldXmlData.offset; }
   private: FieldXmlData fieldXmlData;

   public:
   bool isSetMessageEncoding() const { return fieldMessageEncoding.offset >= 0; }
   FieldMessageEncoding::ValueType getMessageEncoding() const { return fieldMessageEncoding.getValue( buf ); }
   const char * ptrToMessageEncoding() const { return buf + fieldMessageEncoding.offset; }
   private: FieldMessageEncoding fieldMessageEncoding;

   public:
   bool isSetLastMsgSeqNumProcessed() const { return fieldLastMsgSeqNumProcessed.offset >= 0; }
   FieldLastMsgSeqNumProcessed::ValueType getLastMsgSeqNumProcessed() const { return fieldLastMsgSeqNumProcessed.getValue( buf ); }
   const char * ptrToLastMsgSeqNumProcessed() const { return buf + fieldLastMsgSeqNumProcessed.offset; }
   private: FieldLastMsgSeqNumProcessed fieldLastMsgSeqNumProcessed;

   public:
   bool isSetNoHops() const { return fieldNoHops.offset >= 0; }
   FieldNoHops::ValueType getNoHops() const { return fieldNoHops.getValue( buf ); }
   const char * ptrToNoHops() const { return buf + fieldNoHops.offset; }
   private: FieldNoHops fieldNoHops;
  
   public:
   std::size_t getGroupCountHops() const { return groupsHops.size(); } 
   const GroupHops & getGroupHops( std::size_t idx ) const { return groupsHops[ idx ]; } 
   private: GroupHops::Array groupsHops{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageHeartbeat: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetTestReqID() const { return fieldTestReqID.offset >= 0; }
   FieldTestReqID::ValueType getTestReqID() const { return fieldTestReqID.getValue( buf ); }
   const char * ptrToTestReqID() const { return buf + fieldTestReqID.offset; }
   private: FieldTestReqID fieldTestReqID;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageTestRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetTestReqID() const { return fieldTestReqID.offset >= 0; }
   FieldTestReqID::ValueType getTestReqID() const { return fieldTestReqID.getValue( buf ); }
   const char * ptrToTestReqID() const { return buf + fieldTestReqID.offset; }
   private: FieldTestReqID fieldTestReqID;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageResendRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetBeginSeqNo() const { return fieldBeginSeqNo.offset >= 0; }
   FieldBeginSeqNo::ValueType getBeginSeqNo() const { return fieldBeginSeqNo.getValue( buf ); }
   const char * ptrToBeginSeqNo() const { return buf + fieldBeginSeqNo.offset; }
   private: FieldBeginSeqNo fieldBeginSeqNo;

   public:
   bool isSetEndSeqNo() const { return fieldEndSeqNo.offset >= 0; }
   FieldEndSeqNo::ValueType getEndSeqNo() const { return fieldEndSeqNo.getValue( buf ); }
   const char * ptrToEndSeqNo() const { return buf + fieldEndSeqNo.offset; }
   private: FieldEndSeqNo fieldEndSeqNo;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageReject: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetRefSeqNum() const { return fieldRefSeqNum.offset >= 0; }
   FieldRefSeqNum::ValueType getRefSeqNum() const { return fieldRefSeqNum.getValue( buf ); }
   const char * ptrToRefSeqNum() const { return buf + fieldRefSeqNum.offset; }
   private: FieldRefSeqNum fieldRefSeqNum;

   public:
   bool isSetRefTagID() const { return fieldRefTagID.offset >= 0; }
   FieldRefTagID::ValueType getRefTagID() const { return fieldRefTagID.getValue( buf ); }
   const char * ptrToRefTagID() const { return buf + fieldRefTagID.offset; }
   private: FieldRefTagID fieldRefTagID;

   public:
   bool isSetRefMsgType() const { return fieldRefMsgType.offset >= 0; }
   FieldRefMsgType::ValueType getRefMsgType() const { return fieldRefMsgType.getValue( buf ); }
   const char * ptrToRefMsgType() const { return buf + fieldRefMsgType.offset; }
   private: FieldRefMsgType fieldRefMsgType;

   public:
   bool isSetSessionRejectReason() const { return fieldSessionRejectReason.offset >= 0; }
   FieldSessionRejectReason::ValueType getSessionRejectReason() const { return fieldSessionRejectReason.getValue( buf ); }
   const char * ptrToSessionRejectReason() const { return buf + fieldSessionRejectReason.offset; }
   private: FieldSessionRejectReason fieldSessionRejectReason;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSequenceReset: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetGapFillFlag() const { return fieldGapFillFlag.offset >= 0; }
   FieldGapFillFlag::ValueType getGapFillFlag() const { return fieldGapFillFlag.getValue( buf ); }
   const char * ptrToGapFillFlag() const { return buf + fieldGapFillFlag.offset; }
   private: FieldGapFillFlag fieldGapFillFlag;

   public:
   bool isSetNewSeqNo() const { return fieldNewSeqNo.offset >= 0; }
   FieldNewSeqNo::ValueType getNewSeqNo() const { return fieldNewSeqNo.getValue( buf ); }
   const char * ptrToNewSeqNo() const { return buf + fieldNewSeqNo.offset; }
   private: FieldNewSeqNo fieldNewSeqNo;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageLogout: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageIOI: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetIOIID() const { return fieldIOIID.offset >= 0; }
   FieldIOIID::ValueType getIOIID() const { return fieldIOIID.getValue( buf ); }
   const char * ptrToIOIID() const { return buf + fieldIOIID.offset; }
   private: FieldIOIID fieldIOIID;

   public:
   bool isSetIOITransType() const { return fieldIOITransType.offset >= 0; }
   FieldIOITransType::ValueType getIOITransType() const { return fieldIOITransType.getValue( buf ); }
   const char * ptrToIOITransType() const { return buf + fieldIOITransType.offset; }
   private: FieldIOITransType fieldIOITransType;

   public:
   bool isSetIOIRefID() const { return fieldIOIRefID.offset >= 0; }
   FieldIOIRefID::ValueType getIOIRefID() const { return fieldIOIRefID.getValue( buf ); }
   const char * ptrToIOIRefID() const { return buf + fieldIOIRefID.offset; }
   private: FieldIOIRefID fieldIOIRefID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetIOIQty() const { return fieldIOIQty.offset >= 0; }
   FieldIOIQty::ValueType getIOIQty() const { return fieldIOIQty.getValue( buf ); }
   const char * ptrToIOIQty() const { return buf + fieldIOIQty.offset; }
   private: FieldIOIQty fieldIOIQty;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetValidUntilTime() const { return fieldValidUntilTime.offset >= 0; }
   FieldValidUntilTime::ValueType getValidUntilTime() const { return fieldValidUntilTime.getValue( buf ); }
   const char * ptrToValidUntilTime() const { return buf + fieldValidUntilTime.offset; }
   private: FieldValidUntilTime fieldValidUntilTime;

   public:
   bool isSetIOIQltyInd() const { return fieldIOIQltyInd.offset >= 0; }
   FieldIOIQltyInd::ValueType getIOIQltyInd() const { return fieldIOIQltyInd.getValue( buf ); }
   const char * ptrToIOIQltyInd() const { return buf + fieldIOIQltyInd.offset; }
   private: FieldIOIQltyInd fieldIOIQltyInd;

   public:
   bool isSetIOINaturalFlag() const { return fieldIOINaturalFlag.offset >= 0; }
   FieldIOINaturalFlag::ValueType getIOINaturalFlag() const { return fieldIOINaturalFlag.getValue( buf ); }
   const char * ptrToIOINaturalFlag() const { return buf + fieldIOINaturalFlag.offset; }
   private: FieldIOINaturalFlag fieldIOINaturalFlag;

   public:
   bool isSetNoIOIQualifiers() const { return fieldNoIOIQualifiers.offset >= 0; }
   FieldNoIOIQualifiers::ValueType getNoIOIQualifiers() const { return fieldNoIOIQualifiers.getValue( buf ); }
   const char * ptrToNoIOIQualifiers() const { return buf + fieldNoIOIQualifiers.offset; }
   private: FieldNoIOIQualifiers fieldNoIOIQualifiers;
  
   public:
   std::size_t getGroupCountIOIQualifiers() const { return groupsIOIQualifiers.size(); } 
   const GroupIOIQualifiers & getGroupIOIQualifiers( std::size_t idx ) const { return groupsIOIQualifiers[ idx ]; } 
   private: GroupIOIQualifiers::Array groupsIOIQualifiers{ 10 };

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetURLLink() const { return fieldURLLink.offset >= 0; }
   FieldURLLink::ValueType getURLLink() const { return fieldURLLink.getValue( buf ); }
   const char * ptrToURLLink() const { return buf + fieldURLLink.offset; }
   private: FieldURLLink fieldURLLink;

   public:
   bool isSetNoRoutingIDs() const { return fieldNoRoutingIDs.offset >= 0; }
   FieldNoRoutingIDs::ValueType getNoRoutingIDs() const { return fieldNoRoutingIDs.getValue( buf ); }
   const char * ptrToNoRoutingIDs() const { return buf + fieldNoRoutingIDs.offset; }
   private: FieldNoRoutingIDs fieldNoRoutingIDs;
  
   public:
   std::size_t getGroupCountRoutingIDs() const { return groupsRoutingIDs.size(); } 
   const GroupRoutingIDs & getGroupRoutingIDs( std::size_t idx ) const { return groupsRoutingIDs[ idx ]; } 
   private: GroupRoutingIDs::Array groupsRoutingIDs{ 10 };

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageAdvertisement: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetAdvId() const { return fieldAdvId.offset >= 0; }
   FieldAdvId::ValueType getAdvId() const { return fieldAdvId.getValue( buf ); }
   const char * ptrToAdvId() const { return buf + fieldAdvId.offset; }
   private: FieldAdvId fieldAdvId;

   public:
   bool isSetAdvTransType() const { return fieldAdvTransType.offset >= 0; }
   FieldAdvTransType::ValueType getAdvTransType() const { return fieldAdvTransType.getValue( buf ); }
   const char * ptrToAdvTransType() const { return buf + fieldAdvTransType.offset; }
   private: FieldAdvTransType fieldAdvTransType;

   public:
   bool isSetAdvRefID() const { return fieldAdvRefID.offset >= 0; }
   FieldAdvRefID::ValueType getAdvRefID() const { return fieldAdvRefID.getValue( buf ); }
   const char * ptrToAdvRefID() const { return buf + fieldAdvRefID.offset; }
   private: FieldAdvRefID fieldAdvRefID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetAdvSide() const { return fieldAdvSide.offset >= 0; }
   FieldAdvSide::ValueType getAdvSide() const { return fieldAdvSide.getValue( buf ); }
   const char * ptrToAdvSide() const { return buf + fieldAdvSide.offset; }
   private: FieldAdvSide fieldAdvSide;

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetURLLink() const { return fieldURLLink.offset >= 0; }
   FieldURLLink::ValueType getURLLink() const { return fieldURLLink.getValue( buf ); }
   const char * ptrToURLLink() const { return buf + fieldURLLink.offset; }
   private: FieldURLLink fieldURLLink;

   public:
   bool isSetLastMkt() const { return fieldLastMkt.offset >= 0; }
   FieldLastMkt::ValueType getLastMkt() const { return fieldLastMkt.getValue( buf ); }
   const char * ptrToLastMkt() const { return buf + fieldLastMkt.offset; }
   private: FieldLastMkt fieldLastMkt;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageExecutionReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetSecondaryExecID() const { return fieldSecondaryExecID.offset >= 0; }
   FieldSecondaryExecID::ValueType getSecondaryExecID() const { return fieldSecondaryExecID.getValue( buf ); }
   const char * ptrToSecondaryExecID() const { return buf + fieldSecondaryExecID.offset; }
   private: FieldSecondaryExecID fieldSecondaryExecID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrigClOrdID() const { return fieldOrigClOrdID.offset >= 0; }
   FieldOrigClOrdID::ValueType getOrigClOrdID() const { return fieldOrigClOrdID.getValue( buf ); }
   const char * ptrToOrigClOrdID() const { return buf + fieldOrigClOrdID.offset; }
   private: FieldOrigClOrdID fieldOrigClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetQuoteRespID() const { return fieldQuoteRespID.offset >= 0; }
   FieldQuoteRespID::ValueType getQuoteRespID() const { return fieldQuoteRespID.getValue( buf ); }
   const char * ptrToQuoteRespID() const { return buf + fieldQuoteRespID.offset; }
   private: FieldQuoteRespID fieldQuoteRespID;

   public:
   bool isSetOrdStatusReqID() const { return fieldOrdStatusReqID.offset >= 0; }
   FieldOrdStatusReqID::ValueType getOrdStatusReqID() const { return fieldOrdStatusReqID.getValue( buf ); }
   const char * ptrToOrdStatusReqID() const { return buf + fieldOrdStatusReqID.offset; }
   private: FieldOrdStatusReqID fieldOrdStatusReqID;

   public:
   bool isSetMassStatusReqID() const { return fieldMassStatusReqID.offset >= 0; }
   FieldMassStatusReqID::ValueType getMassStatusReqID() const { return fieldMassStatusReqID.getValue( buf ); }
   const char * ptrToMassStatusReqID() const { return buf + fieldMassStatusReqID.offset; }
   private: FieldMassStatusReqID fieldMassStatusReqID;

   public:
   bool isSetTotNumReports() const { return fieldTotNumReports.offset >= 0; }
   FieldTotNumReports::ValueType getTotNumReports() const { return fieldTotNumReports.getValue( buf ); }
   const char * ptrToTotNumReports() const { return buf + fieldTotNumReports.offset; }
   private: FieldTotNumReports fieldTotNumReports;

   public:
   bool isSetLastRptRequested() const { return fieldLastRptRequested.offset >= 0; }
   FieldLastRptRequested::ValueType getLastRptRequested() const { return fieldLastRptRequested.getValue( buf ); }
   const char * ptrToLastRptRequested() const { return buf + fieldLastRptRequested.offset; }
   private: FieldLastRptRequested fieldLastRptRequested;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetNoContraBrokers() const { return fieldNoContraBrokers.offset >= 0; }
   FieldNoContraBrokers::ValueType getNoContraBrokers() const { return fieldNoContraBrokers.getValue( buf ); }
   const char * ptrToNoContraBrokers() const { return buf + fieldNoContraBrokers.offset; }
   private: FieldNoContraBrokers fieldNoContraBrokers;
  
   public:
   std::size_t getGroupCountContraBrokers() const { return groupsContraBrokers.size(); } 
   const GroupContraBrokers & getGroupContraBrokers( std::size_t idx ) const { return groupsContraBrokers[ idx ]; } 
   private: GroupContraBrokers::Array groupsContraBrokers{ 10 };

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetCrossID() const { return fieldCrossID.offset >= 0; }
   FieldCrossID::ValueType getCrossID() const { return fieldCrossID.getValue( buf ); }
   const char * ptrToCrossID() const { return buf + fieldCrossID.offset; }
   private: FieldCrossID fieldCrossID;

   public:
   bool isSetOrigCrossID() const { return fieldOrigCrossID.offset >= 0; }
   FieldOrigCrossID::ValueType getOrigCrossID() const { return fieldOrigCrossID.getValue( buf ); }
   const char * ptrToOrigCrossID() const { return buf + fieldOrigCrossID.offset; }
   private: FieldOrigCrossID fieldOrigCrossID;

   public:
   bool isSetCrossType() const { return fieldCrossType.offset >= 0; }
   FieldCrossType::ValueType getCrossType() const { return fieldCrossType.getValue( buf ); }
   const char * ptrToCrossType() const { return buf + fieldCrossType.offset; }
   private: FieldCrossType fieldCrossType;

   public:
   bool isSetExecID() const { return fieldExecID.offset >= 0; }
   FieldExecID::ValueType getExecID() const { return fieldExecID.getValue( buf ); }
   const char * ptrToExecID() const { return buf + fieldExecID.offset; }
   private: FieldExecID fieldExecID;

   public:
   bool isSetExecRefID() const { return fieldExecRefID.offset >= 0; }
   FieldExecRefID::ValueType getExecRefID() const { return fieldExecRefID.getValue( buf ); }
   const char * ptrToExecRefID() const { return buf + fieldExecRefID.offset; }
   private: FieldExecRefID fieldExecRefID;

   public:
   bool isSetExecType() const { return fieldExecType.offset >= 0; }
   FieldExecType::ValueType getExecType() const { return fieldExecType.getValue( buf ); }
   const char * ptrToExecType() const { return buf + fieldExecType.offset; }
   private: FieldExecType fieldExecType;

   public:
   bool isSetOrdStatus() const { return fieldOrdStatus.offset >= 0; }
   FieldOrdStatus::ValueType getOrdStatus() const { return fieldOrdStatus.getValue( buf ); }
   const char * ptrToOrdStatus() const { return buf + fieldOrdStatus.offset; }
   private: FieldOrdStatus fieldOrdStatus;

   public:
   bool isSetWorkingIndicator() const { return fieldWorkingIndicator.offset >= 0; }
   FieldWorkingIndicator::ValueType getWorkingIndicator() const { return fieldWorkingIndicator.getValue( buf ); }
   const char * ptrToWorkingIndicator() const { return buf + fieldWorkingIndicator.offset; }
   private: FieldWorkingIndicator fieldWorkingIndicator;

   public:
   bool isSetOrdRejReason() const { return fieldOrdRejReason.offset >= 0; }
   FieldOrdRejReason::ValueType getOrdRejReason() const { return fieldOrdRejReason.getValue( buf ); }
   const char * ptrToOrdRejReason() const { return buf + fieldOrdRejReason.offset; }
   private: FieldOrdRejReason fieldOrdRejReason;

   public:
   bool isSetExecRestatementReason() const { return fieldExecRestatementReason.offset >= 0; }
   FieldExecRestatementReason::ValueType getExecRestatementReason() const { return fieldExecRestatementReason.getValue( buf ); }
   const char * ptrToExecRestatementReason() const { return buf + fieldExecRestatementReason.offset; }
   private: FieldExecRestatementReason fieldExecRestatementReason;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetDayBookingInst() const { return fieldDayBookingInst.offset >= 0; }
   FieldDayBookingInst::ValueType getDayBookingInst() const { return fieldDayBookingInst.getValue( buf ); }
   const char * ptrToDayBookingInst() const { return buf + fieldDayBookingInst.offset; }
   private: FieldDayBookingInst fieldDayBookingInst;

   public:
   bool isSetBookingUnit() const { return fieldBookingUnit.offset >= 0; }
   FieldBookingUnit::ValueType getBookingUnit() const { return fieldBookingUnit.getValue( buf ); }
   const char * ptrToBookingUnit() const { return buf + fieldBookingUnit.offset; }
   private: FieldBookingUnit fieldBookingUnit;

   public:
   bool isSetPreallocMethod() const { return fieldPreallocMethod.offset >= 0; }
   FieldPreallocMethod::ValueType getPreallocMethod() const { return fieldPreallocMethod.getValue( buf ); }
   const char * ptrToPreallocMethod() const { return buf + fieldPreallocMethod.offset; }
   private: FieldPreallocMethod fieldPreallocMethod;

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetCashMargin() const { return fieldCashMargin.offset >= 0; }
   FieldCashMargin::ValueType getCashMargin() const { return fieldCashMargin.getValue( buf ); }
   const char * ptrToCashMargin() const { return buf + fieldCashMargin.offset; }
   private: FieldCashMargin fieldCashMargin;

   public:
   bool isSetClearingFeeIndicator() const { return fieldClearingFeeIndicator.offset >= 0; }
   FieldClearingFeeIndicator::ValueType getClearingFeeIndicator() const { return fieldClearingFeeIndicator.getValue( buf ); }
   const char * ptrToClearingFeeIndicator() const { return buf + fieldClearingFeeIndicator.offset; }
   private: FieldClearingFeeIndicator fieldClearingFeeIndicator;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetStopPx() const { return fieldStopPx.offset >= 0; }
   FieldStopPx::ValueType getStopPx() const { return fieldStopPx.getValue( buf ); }
   const char * ptrToStopPx() const { return buf + fieldStopPx.offset; }
   private: FieldStopPx fieldStopPx;

   public:
   bool isSetPegOffsetValue() const { return fieldPegOffsetValue.offset >= 0; }
   FieldPegOffsetValue::ValueType getPegOffsetValue() const { return fieldPegOffsetValue.getValue( buf ); }
   const char * ptrToPegOffsetValue() const { return buf + fieldPegOffsetValue.offset; }
   private: FieldPegOffsetValue fieldPegOffsetValue;

   public:
   bool isSetPegMoveType() const { return fieldPegMoveType.offset >= 0; }
   FieldPegMoveType::ValueType getPegMoveType() const { return fieldPegMoveType.getValue( buf ); }
   const char * ptrToPegMoveType() const { return buf + fieldPegMoveType.offset; }
   private: FieldPegMoveType fieldPegMoveType;

   public:
   bool isSetPegOffsetType() const { return fieldPegOffsetType.offset >= 0; }
   FieldPegOffsetType::ValueType getPegOffsetType() const { return fieldPegOffsetType.getValue( buf ); }
   const char * ptrToPegOffsetType() const { return buf + fieldPegOffsetType.offset; }
   private: FieldPegOffsetType fieldPegOffsetType;

   public:
   bool isSetPegLimitType() const { return fieldPegLimitType.offset >= 0; }
   FieldPegLimitType::ValueType getPegLimitType() const { return fieldPegLimitType.getValue( buf ); }
   const char * ptrToPegLimitType() const { return buf + fieldPegLimitType.offset; }
   private: FieldPegLimitType fieldPegLimitType;

   public:
   bool isSetPegRoundDirection() const { return fieldPegRoundDirection.offset >= 0; }
   FieldPegRoundDirection::ValueType getPegRoundDirection() const { return fieldPegRoundDirection.getValue( buf ); }
   const char * ptrToPegRoundDirection() const { return buf + fieldPegRoundDirection.offset; }
   private: FieldPegRoundDirection fieldPegRoundDirection;

   public:
   bool isSetPegScope() const { return fieldPegScope.offset >= 0; }
   FieldPegScope::ValueType getPegScope() const { return fieldPegScope.getValue( buf ); }
   const char * ptrToPegScope() const { return buf + fieldPegScope.offset; }
   private: FieldPegScope fieldPegScope;

   public:
   bool isSetDiscretionInst() const { return fieldDiscretionInst.offset >= 0; }
   FieldDiscretionInst::ValueType getDiscretionInst() const { return fieldDiscretionInst.getValue( buf ); }
   const char * ptrToDiscretionInst() const { return buf + fieldDiscretionInst.offset; }
   private: FieldDiscretionInst fieldDiscretionInst;

   public:
   bool isSetDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.offset >= 0; }
   FieldDiscretionOffsetValue::ValueType getDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.getValue( buf ); }
   const char * ptrToDiscretionOffsetValue() const { return buf + fieldDiscretionOffsetValue.offset; }
   private: FieldDiscretionOffsetValue fieldDiscretionOffsetValue;

   public:
   bool isSetDiscretionMoveType() const { return fieldDiscretionMoveType.offset >= 0; }
   FieldDiscretionMoveType::ValueType getDiscretionMoveType() const { return fieldDiscretionMoveType.getValue( buf ); }
   const char * ptrToDiscretionMoveType() const { return buf + fieldDiscretionMoveType.offset; }
   private: FieldDiscretionMoveType fieldDiscretionMoveType;

   public:
   bool isSetDiscretionOffsetType() const { return fieldDiscretionOffsetType.offset >= 0; }
   FieldDiscretionOffsetType::ValueType getDiscretionOffsetType() const { return fieldDiscretionOffsetType.getValue( buf ); }
   const char * ptrToDiscretionOffsetType() const { return buf + fieldDiscretionOffsetType.offset; }
   private: FieldDiscretionOffsetType fieldDiscretionOffsetType;

   public:
   bool isSetDiscretionLimitType() const { return fieldDiscretionLimitType.offset >= 0; }
   FieldDiscretionLimitType::ValueType getDiscretionLimitType() const { return fieldDiscretionLimitType.getValue( buf ); }
   const char * ptrToDiscretionLimitType() const { return buf + fieldDiscretionLimitType.offset; }
   private: FieldDiscretionLimitType fieldDiscretionLimitType;

   public:
   bool isSetDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.offset >= 0; }
   FieldDiscretionRoundDirection::ValueType getDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.getValue( buf ); }
   const char * ptrToDiscretionRoundDirection() const { return buf + fieldDiscretionRoundDirection.offset; }
   private: FieldDiscretionRoundDirection fieldDiscretionRoundDirection;

   public:
   bool isSetDiscretionScope() const { return fieldDiscretionScope.offset >= 0; }
   FieldDiscretionScope::ValueType getDiscretionScope() const { return fieldDiscretionScope.getValue( buf ); }
   const char * ptrToDiscretionScope() const { return buf + fieldDiscretionScope.offset; }
   private: FieldDiscretionScope fieldDiscretionScope;

   public:
   bool isSetPeggedPrice() const { return fieldPeggedPrice.offset >= 0; }
   FieldPeggedPrice::ValueType getPeggedPrice() const { return fieldPeggedPrice.getValue( buf ); }
   const char * ptrToPeggedPrice() const { return buf + fieldPeggedPrice.offset; }
   private: FieldPeggedPrice fieldPeggedPrice;

   public:
   bool isSetDiscretionPrice() const { return fieldDiscretionPrice.offset >= 0; }
   FieldDiscretionPrice::ValueType getDiscretionPrice() const { return fieldDiscretionPrice.getValue( buf ); }
   const char * ptrToDiscretionPrice() const { return buf + fieldDiscretionPrice.offset; }
   private: FieldDiscretionPrice fieldDiscretionPrice;

   public:
   bool isSetTargetStrategy() const { return fieldTargetStrategy.offset >= 0; }
   FieldTargetStrategy::ValueType getTargetStrategy() const { return fieldTargetStrategy.getValue( buf ); }
   const char * ptrToTargetStrategy() const { return buf + fieldTargetStrategy.offset; }
   private: FieldTargetStrategy fieldTargetStrategy;

   public:
   bool isSetTargetStrategyParameters() const { return fieldTargetStrategyParameters.offset >= 0; }
   FieldTargetStrategyParameters::ValueType getTargetStrategyParameters() const { return fieldTargetStrategyParameters.getValue( buf ); }
   const char * ptrToTargetStrategyParameters() const { return buf + fieldTargetStrategyParameters.offset; }
   private: FieldTargetStrategyParameters fieldTargetStrategyParameters;

   public:
   bool isSetParticipationRate() const { return fieldParticipationRate.offset >= 0; }
   FieldParticipationRate::ValueType getParticipationRate() const { return fieldParticipationRate.getValue( buf ); }
   const char * ptrToParticipationRate() const { return buf + fieldParticipationRate.offset; }
   private: FieldParticipationRate fieldParticipationRate;

   public:
   bool isSetTargetStrategyPerformance() const { return fieldTargetStrategyPerformance.offset >= 0; }
   FieldTargetStrategyPerformance::ValueType getTargetStrategyPerformance() const { return fieldTargetStrategyPerformance.getValue( buf ); }
   const char * ptrToTargetStrategyPerformance() const { return buf + fieldTargetStrategyPerformance.offset; }
   private: FieldTargetStrategyPerformance fieldTargetStrategyPerformance;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetSolicitedFlag() const { return fieldSolicitedFlag.offset >= 0; }
   FieldSolicitedFlag::ValueType getSolicitedFlag() const { return fieldSolicitedFlag.getValue( buf ); }
   const char * ptrToSolicitedFlag() const { return buf + fieldSolicitedFlag.offset; }
   private: FieldSolicitedFlag fieldSolicitedFlag;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetOrderRestrictions() const { return fieldOrderRestrictions.offset >= 0; }
   FieldOrderRestrictions::ValueType getOrderRestrictions() const { return fieldOrderRestrictions.getValue( buf ); }
   const char * ptrToOrderRestrictions() const { return buf + fieldOrderRestrictions.offset; }
   private: FieldOrderRestrictions fieldOrderRestrictions;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetLastQty() const { return fieldLastQty.offset >= 0; }
   FieldLastQty::ValueType getLastQty() const { return fieldLastQty.getValue( buf ); }
   const char * ptrToLastQty() const { return buf + fieldLastQty.offset; }
   private: FieldLastQty fieldLastQty;

   public:
   bool isSetUnderlyingLastQty() const { return fieldUnderlyingLastQty.offset >= 0; }
   FieldUnderlyingLastQty::ValueType getUnderlyingLastQty() const { return fieldUnderlyingLastQty.getValue( buf ); }
   const char * ptrToUnderlyingLastQty() const { return buf + fieldUnderlyingLastQty.offset; }
   private: FieldUnderlyingLastQty fieldUnderlyingLastQty;

   public:
   bool isSetLastPx() const { return fieldLastPx.offset >= 0; }
   FieldLastPx::ValueType getLastPx() const { return fieldLastPx.getValue( buf ); }
   const char * ptrToLastPx() const { return buf + fieldLastPx.offset; }
   private: FieldLastPx fieldLastPx;

   public:
   bool isSetUnderlyingLastPx() const { return fieldUnderlyingLastPx.offset >= 0; }
   FieldUnderlyingLastPx::ValueType getUnderlyingLastPx() const { return fieldUnderlyingLastPx.getValue( buf ); }
   const char * ptrToUnderlyingLastPx() const { return buf + fieldUnderlyingLastPx.offset; }
   private: FieldUnderlyingLastPx fieldUnderlyingLastPx;

   public:
   bool isSetLastParPx() const { return fieldLastParPx.offset >= 0; }
   FieldLastParPx::ValueType getLastParPx() const { return fieldLastParPx.getValue( buf ); }
   const char * ptrToLastParPx() const { return buf + fieldLastParPx.offset; }
   private: FieldLastParPx fieldLastParPx;

   public:
   bool isSetLastSpotRate() const { return fieldLastSpotRate.offset >= 0; }
   FieldLastSpotRate::ValueType getLastSpotRate() const { return fieldLastSpotRate.getValue( buf ); }
   const char * ptrToLastSpotRate() const { return buf + fieldLastSpotRate.offset; }
   private: FieldLastSpotRate fieldLastSpotRate;

   public:
   bool isSetLastForwardPoints() const { return fieldLastForwardPoints.offset >= 0; }
   FieldLastForwardPoints::ValueType getLastForwardPoints() const { return fieldLastForwardPoints.getValue( buf ); }
   const char * ptrToLastForwardPoints() const { return buf + fieldLastForwardPoints.offset; }
   private: FieldLastForwardPoints fieldLastForwardPoints;

   public:
   bool isSetLastMkt() const { return fieldLastMkt.offset >= 0; }
   FieldLastMkt::ValueType getLastMkt() const { return fieldLastMkt.getValue( buf ); }
   const char * ptrToLastMkt() const { return buf + fieldLastMkt.offset; }
   private: FieldLastMkt fieldLastMkt;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetTimeBracket() const { return fieldTimeBracket.offset >= 0; }
   FieldTimeBracket::ValueType getTimeBracket() const { return fieldTimeBracket.getValue( buf ); }
   const char * ptrToTimeBracket() const { return buf + fieldTimeBracket.offset; }
   private: FieldTimeBracket fieldTimeBracket;

   public:
   bool isSetLastCapacity() const { return fieldLastCapacity.offset >= 0; }
   FieldLastCapacity::ValueType getLastCapacity() const { return fieldLastCapacity.getValue( buf ); }
   const char * ptrToLastCapacity() const { return buf + fieldLastCapacity.offset; }
   private: FieldLastCapacity fieldLastCapacity;

   public:
   bool isSetLeavesQty() const { return fieldLeavesQty.offset >= 0; }
   FieldLeavesQty::ValueType getLeavesQty() const { return fieldLeavesQty.getValue( buf ); }
   const char * ptrToLeavesQty() const { return buf + fieldLeavesQty.offset; }
   private: FieldLeavesQty fieldLeavesQty;

   public:
   bool isSetCumQty() const { return fieldCumQty.offset >= 0; }
   FieldCumQty::ValueType getCumQty() const { return fieldCumQty.getValue( buf ); }
   const char * ptrToCumQty() const { return buf + fieldCumQty.offset; }
   private: FieldCumQty fieldCumQty;

   public:
   bool isSetAvgPx() const { return fieldAvgPx.offset >= 0; }
   FieldAvgPx::ValueType getAvgPx() const { return fieldAvgPx.getValue( buf ); }
   const char * ptrToAvgPx() const { return buf + fieldAvgPx.offset; }
   private: FieldAvgPx fieldAvgPx;

   public:
   bool isSetDayOrderQty() const { return fieldDayOrderQty.offset >= 0; }
   FieldDayOrderQty::ValueType getDayOrderQty() const { return fieldDayOrderQty.getValue( buf ); }
   const char * ptrToDayOrderQty() const { return buf + fieldDayOrderQty.offset; }
   private: FieldDayOrderQty fieldDayOrderQty;

   public:
   bool isSetDayCumQty() const { return fieldDayCumQty.offset >= 0; }
   FieldDayCumQty::ValueType getDayCumQty() const { return fieldDayCumQty.getValue( buf ); }
   const char * ptrToDayCumQty() const { return buf + fieldDayCumQty.offset; }
   private: FieldDayCumQty fieldDayCumQty;

   public:
   bool isSetDayAvgPx() const { return fieldDayAvgPx.offset >= 0; }
   FieldDayAvgPx::ValueType getDayAvgPx() const { return fieldDayAvgPx.getValue( buf ); }
   const char * ptrToDayAvgPx() const { return buf + fieldDayAvgPx.offset; }
   private: FieldDayAvgPx fieldDayAvgPx;

   public:
   bool isSetGTBookingInst() const { return fieldGTBookingInst.offset >= 0; }
   FieldGTBookingInst::ValueType getGTBookingInst() const { return fieldGTBookingInst.getValue( buf ); }
   const char * ptrToGTBookingInst() const { return buf + fieldGTBookingInst.offset; }
   private: FieldGTBookingInst fieldGTBookingInst;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetReportToExch() const { return fieldReportToExch.offset >= 0; }
   FieldReportToExch::ValueType getReportToExch() const { return fieldReportToExch.getValue( buf ); }
   const char * ptrToReportToExch() const { return buf + fieldReportToExch.offset; }
   private: FieldReportToExch fieldReportToExch;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommCurrency() const { return fieldCommCurrency.offset >= 0; }
   FieldCommCurrency::ValueType getCommCurrency() const { return fieldCommCurrency.getValue( buf ); }
   const char * ptrToCommCurrency() const { return buf + fieldCommCurrency.offset; }
   private: FieldCommCurrency fieldCommCurrency;

   public:
   bool isSetFundRenewWaiv() const { return fieldFundRenewWaiv.offset >= 0; }
   FieldFundRenewWaiv::ValueType getFundRenewWaiv() const { return fieldFundRenewWaiv.getValue( buf ); }
   const char * ptrToFundRenewWaiv() const { return buf + fieldFundRenewWaiv.offset; }
   private: FieldFundRenewWaiv fieldFundRenewWaiv;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetGrossTradeAmt() const { return fieldGrossTradeAmt.offset >= 0; }
   FieldGrossTradeAmt::ValueType getGrossTradeAmt() const { return fieldGrossTradeAmt.getValue( buf ); }
   const char * ptrToGrossTradeAmt() const { return buf + fieldGrossTradeAmt.offset; }
   private: FieldGrossTradeAmt fieldGrossTradeAmt;

   public:
   bool isSetNumDaysInterest() const { return fieldNumDaysInterest.offset >= 0; }
   FieldNumDaysInterest::ValueType getNumDaysInterest() const { return fieldNumDaysInterest.getValue( buf ); }
   const char * ptrToNumDaysInterest() const { return buf + fieldNumDaysInterest.offset; }
   private: FieldNumDaysInterest fieldNumDaysInterest;

   public:
   bool isSetExDate() const { return fieldExDate.offset >= 0; }
   FieldExDate::ValueType getExDate() const { return fieldExDate.getValue( buf ); }
   const char * ptrToExDate() const { return buf + fieldExDate.offset; }
   private: FieldExDate fieldExDate;

   public:
   bool isSetAccruedInterestRate() const { return fieldAccruedInterestRate.offset >= 0; }
   FieldAccruedInterestRate::ValueType getAccruedInterestRate() const { return fieldAccruedInterestRate.getValue( buf ); }
   const char * ptrToAccruedInterestRate() const { return buf + fieldAccruedInterestRate.offset; }
   private: FieldAccruedInterestRate fieldAccruedInterestRate;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetInterestAtMaturity() const { return fieldInterestAtMaturity.offset >= 0; }
   FieldInterestAtMaturity::ValueType getInterestAtMaturity() const { return fieldInterestAtMaturity.getValue( buf ); }
   const char * ptrToInterestAtMaturity() const { return buf + fieldInterestAtMaturity.offset; }
   private: FieldInterestAtMaturity fieldInterestAtMaturity;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetTradedFlatSwitch() const { return fieldTradedFlatSwitch.offset >= 0; }
   FieldTradedFlatSwitch::ValueType getTradedFlatSwitch() const { return fieldTradedFlatSwitch.getValue( buf ); }
   const char * ptrToTradedFlatSwitch() const { return buf + fieldTradedFlatSwitch.offset; }
   private: FieldTradedFlatSwitch fieldTradedFlatSwitch;

   public:
   bool isSetBasisFeatureDate() const { return fieldBasisFeatureDate.offset >= 0; }
   FieldBasisFeatureDate::ValueType getBasisFeatureDate() const { return fieldBasisFeatureDate.getValue( buf ); }
   const char * ptrToBasisFeatureDate() const { return buf + fieldBasisFeatureDate.offset; }
   private: FieldBasisFeatureDate fieldBasisFeatureDate;

   public:
   bool isSetBasisFeaturePrice() const { return fieldBasisFeaturePrice.offset >= 0; }
   FieldBasisFeaturePrice::ValueType getBasisFeaturePrice() const { return fieldBasisFeaturePrice.getValue( buf ); }
   const char * ptrToBasisFeaturePrice() const { return buf + fieldBasisFeaturePrice.offset; }
   private: FieldBasisFeaturePrice fieldBasisFeaturePrice;

   public:
   bool isSetConcession() const { return fieldConcession.offset >= 0; }
   FieldConcession::ValueType getConcession() const { return fieldConcession.getValue( buf ); }
   const char * ptrToConcession() const { return buf + fieldConcession.offset; }
   private: FieldConcession fieldConcession;

   public:
   bool isSetTotalTakedown() const { return fieldTotalTakedown.offset >= 0; }
   FieldTotalTakedown::ValueType getTotalTakedown() const { return fieldTotalTakedown.getValue( buf ); }
   const char * ptrToTotalTakedown() const { return buf + fieldTotalTakedown.offset; }
   private: FieldTotalTakedown fieldTotalTakedown;

   public:
   bool isSetNetMoney() const { return fieldNetMoney.offset >= 0; }
   FieldNetMoney::ValueType getNetMoney() const { return fieldNetMoney.getValue( buf ); }
   const char * ptrToNetMoney() const { return buf + fieldNetMoney.offset; }
   private: FieldNetMoney fieldNetMoney;

   public:
   bool isSetSettlCurrAmt() const { return fieldSettlCurrAmt.offset >= 0; }
   FieldSettlCurrAmt::ValueType getSettlCurrAmt() const { return fieldSettlCurrAmt.getValue( buf ); }
   const char * ptrToSettlCurrAmt() const { return buf + fieldSettlCurrAmt.offset; }
   private: FieldSettlCurrAmt fieldSettlCurrAmt;

   public:
   bool isSetSettlCurrency() const { return fieldSettlCurrency.offset >= 0; }
   FieldSettlCurrency::ValueType getSettlCurrency() const { return fieldSettlCurrency.getValue( buf ); }
   const char * ptrToSettlCurrency() const { return buf + fieldSettlCurrency.offset; }
   private: FieldSettlCurrency fieldSettlCurrency;

   public:
   bool isSetSettlCurrFxRate() const { return fieldSettlCurrFxRate.offset >= 0; }
   FieldSettlCurrFxRate::ValueType getSettlCurrFxRate() const { return fieldSettlCurrFxRate.getValue( buf ); }
   const char * ptrToSettlCurrFxRate() const { return buf + fieldSettlCurrFxRate.offset; }
   private: FieldSettlCurrFxRate fieldSettlCurrFxRate;

   public:
   bool isSetSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.offset >= 0; }
   FieldSettlCurrFxRateCalc::ValueType getSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.getValue( buf ); }
   const char * ptrToSettlCurrFxRateCalc() const { return buf + fieldSettlCurrFxRateCalc.offset; }
   private: FieldSettlCurrFxRateCalc fieldSettlCurrFxRateCalc;

   public:
   bool isSetHandlInst() const { return fieldHandlInst.offset >= 0; }
   FieldHandlInst::ValueType getHandlInst() const { return fieldHandlInst.getValue( buf ); }
   const char * ptrToHandlInst() const { return buf + fieldHandlInst.offset; }
   private: FieldHandlInst fieldHandlInst;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetMaxFloor() const { return fieldMaxFloor.offset >= 0; }
   FieldMaxFloor::ValueType getMaxFloor() const { return fieldMaxFloor.getValue( buf ); }
   const char * ptrToMaxFloor() const { return buf + fieldMaxFloor.offset; }
   private: FieldMaxFloor fieldMaxFloor;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetMaxShow() const { return fieldMaxShow.offset >= 0; }
   FieldMaxShow::ValueType getMaxShow() const { return fieldMaxShow.getValue( buf ); }
   const char * ptrToMaxShow() const { return buf + fieldMaxShow.offset; }
   private: FieldMaxShow fieldMaxShow;

   public:
   bool isSetBookingType() const { return fieldBookingType.offset >= 0; }
   FieldBookingType::ValueType getBookingType() const { return fieldBookingType.getValue( buf ); }
   const char * ptrToBookingType() const { return buf + fieldBookingType.offset; }
   private: FieldBookingType fieldBookingType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetSettlDate2() const { return fieldSettlDate2.offset >= 0; }
   FieldSettlDate2::ValueType getSettlDate2() const { return fieldSettlDate2.getValue( buf ); }
   const char * ptrToSettlDate2() const { return buf + fieldSettlDate2.offset; }
   private: FieldSettlDate2 fieldSettlDate2;

   public:
   bool isSetOrderQty2() const { return fieldOrderQty2.offset >= 0; }
   FieldOrderQty2::ValueType getOrderQty2() const { return fieldOrderQty2.getValue( buf ); }
   const char * ptrToOrderQty2() const { return buf + fieldOrderQty2.offset; }
   private: FieldOrderQty2 fieldOrderQty2;

   public:
   bool isSetLastForwardPoints2() const { return fieldLastForwardPoints2.offset >= 0; }
   FieldLastForwardPoints2::ValueType getLastForwardPoints2() const { return fieldLastForwardPoints2.getValue( buf ); }
   const char * ptrToLastForwardPoints2() const { return buf + fieldLastForwardPoints2.offset; }
   private: FieldLastForwardPoints2 fieldLastForwardPoints2;

   public:
   bool isSetMultiLegReportingType() const { return fieldMultiLegReportingType.offset >= 0; }
   FieldMultiLegReportingType::ValueType getMultiLegReportingType() const { return fieldMultiLegReportingType.getValue( buf ); }
   const char * ptrToMultiLegReportingType() const { return buf + fieldMultiLegReportingType.offset; }
   private: FieldMultiLegReportingType fieldMultiLegReportingType;

   public:
   bool isSetCancellationRights() const { return fieldCancellationRights.offset >= 0; }
   FieldCancellationRights::ValueType getCancellationRights() const { return fieldCancellationRights.getValue( buf ); }
   const char * ptrToCancellationRights() const { return buf + fieldCancellationRights.offset; }
   private: FieldCancellationRights fieldCancellationRights;

   public:
   bool isSetMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.offset >= 0; }
   FieldMoneyLaunderingStatus::ValueType getMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.getValue( buf ); }
   const char * ptrToMoneyLaunderingStatus() const { return buf + fieldMoneyLaunderingStatus.offset; }
   private: FieldMoneyLaunderingStatus fieldMoneyLaunderingStatus;

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetDesignation() const { return fieldDesignation.offset >= 0; }
   FieldDesignation::ValueType getDesignation() const { return fieldDesignation.getValue( buf ); }
   const char * ptrToDesignation() const { return buf + fieldDesignation.offset; }
   private: FieldDesignation fieldDesignation;

   public:
   bool isSetTransBkdTime() const { return fieldTransBkdTime.offset >= 0; }
   FieldTransBkdTime::ValueType getTransBkdTime() const { return fieldTransBkdTime.getValue( buf ); }
   const char * ptrToTransBkdTime() const { return buf + fieldTransBkdTime.offset; }
   private: FieldTransBkdTime fieldTransBkdTime;

   public:
   bool isSetExecValuationPoint() const { return fieldExecValuationPoint.offset >= 0; }
   FieldExecValuationPoint::ValueType getExecValuationPoint() const { return fieldExecValuationPoint.getValue( buf ); }
   const char * ptrToExecValuationPoint() const { return buf + fieldExecValuationPoint.offset; }
   private: FieldExecValuationPoint fieldExecValuationPoint;

   public:
   bool isSetExecPriceType() const { return fieldExecPriceType.offset >= 0; }
   FieldExecPriceType::ValueType getExecPriceType() const { return fieldExecPriceType.getValue( buf ); }
   const char * ptrToExecPriceType() const { return buf + fieldExecPriceType.offset; }
   private: FieldExecPriceType fieldExecPriceType;

   public:
   bool isSetExecPriceAdjustment() const { return fieldExecPriceAdjustment.offset >= 0; }
   FieldExecPriceAdjustment::ValueType getExecPriceAdjustment() const { return fieldExecPriceAdjustment.getValue( buf ); }
   const char * ptrToExecPriceAdjustment() const { return buf + fieldExecPriceAdjustment.offset; }
   private: FieldExecPriceAdjustment fieldExecPriceAdjustment;

   public:
   bool isSetPriorityIndicator() const { return fieldPriorityIndicator.offset >= 0; }
   FieldPriorityIndicator::ValueType getPriorityIndicator() const { return fieldPriorityIndicator.getValue( buf ); }
   const char * ptrToPriorityIndicator() const { return buf + fieldPriorityIndicator.offset; }
   private: FieldPriorityIndicator fieldPriorityIndicator;

   public:
   bool isSetPriceImprovement() const { return fieldPriceImprovement.offset >= 0; }
   FieldPriceImprovement::ValueType getPriceImprovement() const { return fieldPriceImprovement.getValue( buf ); }
   const char * ptrToPriceImprovement() const { return buf + fieldPriceImprovement.offset; }
   private: FieldPriceImprovement fieldPriceImprovement;

   public:
   bool isSetLastLiquidityInd() const { return fieldLastLiquidityInd.offset >= 0; }
   FieldLastLiquidityInd::ValueType getLastLiquidityInd() const { return fieldLastLiquidityInd.getValue( buf ); }
   const char * ptrToLastLiquidityInd() const { return buf + fieldLastLiquidityInd.offset; }
   private: FieldLastLiquidityInd fieldLastLiquidityInd;

   public:
   bool isSetNoContAmts() const { return fieldNoContAmts.offset >= 0; }
   FieldNoContAmts::ValueType getNoContAmts() const { return fieldNoContAmts.getValue( buf ); }
   const char * ptrToNoContAmts() const { return buf + fieldNoContAmts.offset; }
   private: FieldNoContAmts fieldNoContAmts;
  
   public:
   std::size_t getGroupCountContAmts() const { return groupsContAmts.size(); } 
   const GroupContAmts & getGroupContAmts( std::size_t idx ) const { return groupsContAmts[ idx ]; } 
   private: GroupContAmts::Array groupsContAmts{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetCopyMsgIndicator() const { return fieldCopyMsgIndicator.offset >= 0; }
   FieldCopyMsgIndicator::ValueType getCopyMsgIndicator() const { return fieldCopyMsgIndicator.getValue( buf ); }
   const char * ptrToCopyMsgIndicator() const { return buf + fieldCopyMsgIndicator.offset; }
   private: FieldCopyMsgIndicator fieldCopyMsgIndicator;

   public:
   bool isSetNoMiscFees() const { return fieldNoMiscFees.offset >= 0; }
   FieldNoMiscFees::ValueType getNoMiscFees() const { return fieldNoMiscFees.getValue( buf ); }
   const char * ptrToNoMiscFees() const { return buf + fieldNoMiscFees.offset; }
   private: FieldNoMiscFees fieldNoMiscFees;
  
   public:
   std::size_t getGroupCountMiscFees() const { return groupsMiscFees.size(); } 
   const GroupMiscFees & getGroupMiscFees( std::size_t idx ) const { return groupsMiscFees[ idx ]; } 
   private: GroupMiscFees::Array groupsMiscFees{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageOrderCancelReject: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetOrigClOrdID() const { return fieldOrigClOrdID.offset >= 0; }
   FieldOrigClOrdID::ValueType getOrigClOrdID() const { return fieldOrigClOrdID.getValue( buf ); }
   const char * ptrToOrigClOrdID() const { return buf + fieldOrigClOrdID.offset; }
   private: FieldOrigClOrdID fieldOrigClOrdID;

   public:
   bool isSetOrdStatus() const { return fieldOrdStatus.offset >= 0; }
   FieldOrdStatus::ValueType getOrdStatus() const { return fieldOrdStatus.getValue( buf ); }
   const char * ptrToOrdStatus() const { return buf + fieldOrdStatus.offset; }
   private: FieldOrdStatus fieldOrdStatus;

   public:
   bool isSetWorkingIndicator() const { return fieldWorkingIndicator.offset >= 0; }
   FieldWorkingIndicator::ValueType getWorkingIndicator() const { return fieldWorkingIndicator.getValue( buf ); }
   const char * ptrToWorkingIndicator() const { return buf + fieldWorkingIndicator.offset; }
   private: FieldWorkingIndicator fieldWorkingIndicator;

   public:
   bool isSetOrigOrdModTime() const { return fieldOrigOrdModTime.offset >= 0; }
   FieldOrigOrdModTime::ValueType getOrigOrdModTime() const { return fieldOrigOrdModTime.getValue( buf ); }
   const char * ptrToOrigOrdModTime() const { return buf + fieldOrigOrdModTime.offset; }
   private: FieldOrigOrdModTime fieldOrigOrdModTime;

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetCxlRejResponseTo() const { return fieldCxlRejResponseTo.offset >= 0; }
   FieldCxlRejResponseTo::ValueType getCxlRejResponseTo() const { return fieldCxlRejResponseTo.getValue( buf ); }
   const char * ptrToCxlRejResponseTo() const { return buf + fieldCxlRejResponseTo.offset; }
   private: FieldCxlRejResponseTo fieldCxlRejResponseTo;

   public:
   bool isSetCxlRejReason() const { return fieldCxlRejReason.offset >= 0; }
   FieldCxlRejReason::ValueType getCxlRejReason() const { return fieldCxlRejReason.getValue( buf ); }
   const char * ptrToCxlRejReason() const { return buf + fieldCxlRejReason.offset; }
   private: FieldCxlRejReason fieldCxlRejReason;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageLogon: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetEncryptMethod() const { return fieldEncryptMethod.offset >= 0; }
   FieldEncryptMethod::ValueType getEncryptMethod() const { return fieldEncryptMethod.getValue( buf ); }
   const char * ptrToEncryptMethod() const { return buf + fieldEncryptMethod.offset; }
   private: FieldEncryptMethod fieldEncryptMethod;

   public:
   bool isSetHeartBtInt() const { return fieldHeartBtInt.offset >= 0; }
   FieldHeartBtInt::ValueType getHeartBtInt() const { return fieldHeartBtInt.getValue( buf ); }
   const char * ptrToHeartBtInt() const { return buf + fieldHeartBtInt.offset; }
   private: FieldHeartBtInt fieldHeartBtInt;

   public:
   bool isSetRawDataLength() const { return fieldRawDataLength.offset >= 0; }
   FieldRawDataLength::ValueType getRawDataLength() const { return fieldRawDataLength.getValue( buf ); }
   const char * ptrToRawDataLength() const { return buf + fieldRawDataLength.offset; }
   private: FieldRawDataLength fieldRawDataLength;

   public:
   bool isSetRawData() const { return fieldRawData.offset >= 0; }
   FieldRawData::ValueType getRawData() const { return fieldRawData.getValue( buf ); }
   const char * ptrToRawData() const { return buf + fieldRawData.offset; }
   private: FieldRawData fieldRawData;

   public:
   bool isSetResetSeqNumFlag() const { return fieldResetSeqNumFlag.offset >= 0; }
   FieldResetSeqNumFlag::ValueType getResetSeqNumFlag() const { return fieldResetSeqNumFlag.getValue( buf ); }
   const char * ptrToResetSeqNumFlag() const { return buf + fieldResetSeqNumFlag.offset; }
   private: FieldResetSeqNumFlag fieldResetSeqNumFlag;

   public:
   bool isSetNextExpectedMsgSeqNum() const { return fieldNextExpectedMsgSeqNum.offset >= 0; }
   FieldNextExpectedMsgSeqNum::ValueType getNextExpectedMsgSeqNum() const { return fieldNextExpectedMsgSeqNum.getValue( buf ); }
   const char * ptrToNextExpectedMsgSeqNum() const { return buf + fieldNextExpectedMsgSeqNum.offset; }
   private: FieldNextExpectedMsgSeqNum fieldNextExpectedMsgSeqNum;

   public:
   bool isSetMaxMessageSize() const { return fieldMaxMessageSize.offset >= 0; }
   FieldMaxMessageSize::ValueType getMaxMessageSize() const { return fieldMaxMessageSize.getValue( buf ); }
   const char * ptrToMaxMessageSize() const { return buf + fieldMaxMessageSize.offset; }
   private: FieldMaxMessageSize fieldMaxMessageSize;

   public:
   bool isSetNoMsgTypes() const { return fieldNoMsgTypes.offset >= 0; }
   FieldNoMsgTypes::ValueType getNoMsgTypes() const { return fieldNoMsgTypes.getValue( buf ); }
   const char * ptrToNoMsgTypes() const { return buf + fieldNoMsgTypes.offset; }
   private: FieldNoMsgTypes fieldNoMsgTypes;
  
   public:
   std::size_t getGroupCountMsgTypes() const { return groupsMsgTypes.size(); } 
   const GroupMsgTypes & getGroupMsgTypes( std::size_t idx ) const { return groupsMsgTypes[ idx ]; } 
   private: GroupMsgTypes::Array groupsMsgTypes{ 10 };

   public:
   bool isSetTestMessageIndicator() const { return fieldTestMessageIndicator.offset >= 0; }
   FieldTestMessageIndicator::ValueType getTestMessageIndicator() const { return fieldTestMessageIndicator.getValue( buf ); }
   const char * ptrToTestMessageIndicator() const { return buf + fieldTestMessageIndicator.offset; }
   private: FieldTestMessageIndicator fieldTestMessageIndicator;

   public:
   bool isSetUsername() const { return fieldUsername.offset >= 0; }
   FieldUsername::ValueType getUsername() const { return fieldUsername.getValue( buf ); }
   const char * ptrToUsername() const { return buf + fieldUsername.offset; }
   private: FieldUsername fieldUsername;

   public:
   bool isSetPassword() const { return fieldPassword.offset >= 0; }
   FieldPassword::ValueType getPassword() const { return fieldPassword.getValue( buf ); }
   const char * ptrToPassword() const { return buf + fieldPassword.offset; }
   private: FieldPassword fieldPassword;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageNews: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrigTime() const { return fieldOrigTime.offset >= 0; }
   FieldOrigTime::ValueType getOrigTime() const { return fieldOrigTime.getValue( buf ); }
   const char * ptrToOrigTime() const { return buf + fieldOrigTime.offset; }
   private: FieldOrigTime fieldOrigTime;

   public:
   bool isSetUrgency() const { return fieldUrgency.offset >= 0; }
   FieldUrgency::ValueType getUrgency() const { return fieldUrgency.getValue( buf ); }
   const char * ptrToUrgency() const { return buf + fieldUrgency.offset; }
   private: FieldUrgency fieldUrgency;

   public:
   bool isSetHeadline() const { return fieldHeadline.offset >= 0; }
   FieldHeadline::ValueType getHeadline() const { return fieldHeadline.getValue( buf ); }
   const char * ptrToHeadline() const { return buf + fieldHeadline.offset; }
   private: FieldHeadline fieldHeadline;

   public:
   bool isSetEncodedHeadlineLen() const { return fieldEncodedHeadlineLen.offset >= 0; }
   FieldEncodedHeadlineLen::ValueType getEncodedHeadlineLen() const { return fieldEncodedHeadlineLen.getValue( buf ); }
   const char * ptrToEncodedHeadlineLen() const { return buf + fieldEncodedHeadlineLen.offset; }
   private: FieldEncodedHeadlineLen fieldEncodedHeadlineLen;

   public:
   bool isSetEncodedHeadline() const { return fieldEncodedHeadline.offset >= 0; }
   FieldEncodedHeadline::ValueType getEncodedHeadline() const { return fieldEncodedHeadline.getValue( buf ); }
   const char * ptrToEncodedHeadline() const { return buf + fieldEncodedHeadline.offset; }
   private: FieldEncodedHeadline fieldEncodedHeadline;

   public:
   bool isSetNoRoutingIDs() const { return fieldNoRoutingIDs.offset >= 0; }
   FieldNoRoutingIDs::ValueType getNoRoutingIDs() const { return fieldNoRoutingIDs.getValue( buf ); }
   const char * ptrToNoRoutingIDs() const { return buf + fieldNoRoutingIDs.offset; }
   private: FieldNoRoutingIDs fieldNoRoutingIDs;
  
   public:
   std::size_t getGroupCountRoutingIDs() const { return groupsRoutingIDs.size(); } 
   const GroupRoutingIDs & getGroupRoutingIDs( std::size_t idx ) const { return groupsRoutingIDs[ idx ]; } 
   private: GroupRoutingIDs::Array groupsRoutingIDs{ 10 };

   public:
   bool isSetNoRelatedSym() const { return fieldNoRelatedSym.offset >= 0; }
   FieldNoRelatedSym::ValueType getNoRelatedSym() const { return fieldNoRelatedSym.getValue( buf ); }
   const char * ptrToNoRelatedSym() const { return buf + fieldNoRelatedSym.offset; }
   private: FieldNoRelatedSym fieldNoRelatedSym;
  
   public:
   std::size_t getGroupCountRelatedSym() const { return groupsRelatedSym.size(); } 
   const GroupRelatedSym & getGroupRelatedSym( std::size_t idx ) const { return groupsRelatedSym[ idx ]; } 
   private: GroupRelatedSym::Array groupsRelatedSym{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLinesOfText() const { return fieldNoLinesOfText.offset >= 0; }
   FieldNoLinesOfText::ValueType getNoLinesOfText() const { return fieldNoLinesOfText.getValue( buf ); }
   const char * ptrToNoLinesOfText() const { return buf + fieldNoLinesOfText.offset; }
   private: FieldNoLinesOfText fieldNoLinesOfText;
  
   public:
   std::size_t getGroupCountLinesOfText() const { return groupsLinesOfText.size(); } 
   const GroupLinesOfText & getGroupLinesOfText( std::size_t idx ) const { return groupsLinesOfText[ idx ]; } 
   private: GroupLinesOfText::Array groupsLinesOfText{ 10 };

   public:
   bool isSetURLLink() const { return fieldURLLink.offset >= 0; }
   FieldURLLink::ValueType getURLLink() const { return fieldURLLink.getValue( buf ); }
   const char * ptrToURLLink() const { return buf + fieldURLLink.offset; }
   private: FieldURLLink fieldURLLink;

   public:
   bool isSetRawDataLength() const { return fieldRawDataLength.offset >= 0; }
   FieldRawDataLength::ValueType getRawDataLength() const { return fieldRawDataLength.getValue( buf ); }
   const char * ptrToRawDataLength() const { return buf + fieldRawDataLength.offset; }
   private: FieldRawDataLength fieldRawDataLength;

   public:
   bool isSetRawData() const { return fieldRawData.offset >= 0; }
   FieldRawData::ValueType getRawData() const { return fieldRawData.getValue( buf ); }
   const char * ptrToRawData() const { return buf + fieldRawData.offset; }
   private: FieldRawData fieldRawData;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageEmail: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetEmailThreadID() const { return fieldEmailThreadID.offset >= 0; }
   FieldEmailThreadID::ValueType getEmailThreadID() const { return fieldEmailThreadID.getValue( buf ); }
   const char * ptrToEmailThreadID() const { return buf + fieldEmailThreadID.offset; }
   private: FieldEmailThreadID fieldEmailThreadID;

   public:
   bool isSetEmailType() const { return fieldEmailType.offset >= 0; }
   FieldEmailType::ValueType getEmailType() const { return fieldEmailType.getValue( buf ); }
   const char * ptrToEmailType() const { return buf + fieldEmailType.offset; }
   private: FieldEmailType fieldEmailType;

   public:
   bool isSetOrigTime() const { return fieldOrigTime.offset >= 0; }
   FieldOrigTime::ValueType getOrigTime() const { return fieldOrigTime.getValue( buf ); }
   const char * ptrToOrigTime() const { return buf + fieldOrigTime.offset; }
   private: FieldOrigTime fieldOrigTime;

   public:
   bool isSetSubject() const { return fieldSubject.offset >= 0; }
   FieldSubject::ValueType getSubject() const { return fieldSubject.getValue( buf ); }
   const char * ptrToSubject() const { return buf + fieldSubject.offset; }
   private: FieldSubject fieldSubject;

   public:
   bool isSetEncodedSubjectLen() const { return fieldEncodedSubjectLen.offset >= 0; }
   FieldEncodedSubjectLen::ValueType getEncodedSubjectLen() const { return fieldEncodedSubjectLen.getValue( buf ); }
   const char * ptrToEncodedSubjectLen() const { return buf + fieldEncodedSubjectLen.offset; }
   private: FieldEncodedSubjectLen fieldEncodedSubjectLen;

   public:
   bool isSetEncodedSubject() const { return fieldEncodedSubject.offset >= 0; }
   FieldEncodedSubject::ValueType getEncodedSubject() const { return fieldEncodedSubject.getValue( buf ); }
   const char * ptrToEncodedSubject() const { return buf + fieldEncodedSubject.offset; }
   private: FieldEncodedSubject fieldEncodedSubject;

   public:
   bool isSetNoRoutingIDs() const { return fieldNoRoutingIDs.offset >= 0; }
   FieldNoRoutingIDs::ValueType getNoRoutingIDs() const { return fieldNoRoutingIDs.getValue( buf ); }
   const char * ptrToNoRoutingIDs() const { return buf + fieldNoRoutingIDs.offset; }
   private: FieldNoRoutingIDs fieldNoRoutingIDs;
  
   public:
   std::size_t getGroupCountRoutingIDs() const { return groupsRoutingIDs.size(); } 
   const GroupRoutingIDs & getGroupRoutingIDs( std::size_t idx ) const { return groupsRoutingIDs[ idx ]; } 
   private: GroupRoutingIDs::Array groupsRoutingIDs{ 10 };

   public:
   bool isSetNoRelatedSym() const { return fieldNoRelatedSym.offset >= 0; }
   FieldNoRelatedSym::ValueType getNoRelatedSym() const { return fieldNoRelatedSym.getValue( buf ); }
   const char * ptrToNoRelatedSym() const { return buf + fieldNoRelatedSym.offset; }
   private: FieldNoRelatedSym fieldNoRelatedSym;
  
   public:
   std::size_t getGroupCountRelatedSym() const { return groupsRelatedSym.size(); } 
   const GroupRelatedSym & getGroupRelatedSym( std::size_t idx ) const { return groupsRelatedSym[ idx ]; } 
   private: GroupRelatedSym::Array groupsRelatedSym{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetNoLinesOfText() const { return fieldNoLinesOfText.offset >= 0; }
   FieldNoLinesOfText::ValueType getNoLinesOfText() const { return fieldNoLinesOfText.getValue( buf ); }
   const char * ptrToNoLinesOfText() const { return buf + fieldNoLinesOfText.offset; }
   private: FieldNoLinesOfText fieldNoLinesOfText;
  
   public:
   std::size_t getGroupCountLinesOfText() const { return groupsLinesOfText.size(); } 
   const GroupLinesOfText & getGroupLinesOfText( std::size_t idx ) const { return groupsLinesOfText[ idx ]; } 
   private: GroupLinesOfText::Array groupsLinesOfText{ 10 };

   public:
   bool isSetRawDataLength() const { return fieldRawDataLength.offset >= 0; }
   FieldRawDataLength::ValueType getRawDataLength() const { return fieldRawDataLength.getValue( buf ); }
   const char * ptrToRawDataLength() const { return buf + fieldRawDataLength.offset; }
   private: FieldRawDataLength fieldRawDataLength;

   public:
   bool isSetRawData() const { return fieldRawData.offset >= 0; }
   FieldRawData::ValueType getRawData() const { return fieldRawData.getValue( buf ); }
   const char * ptrToRawData() const { return buf + fieldRawData.offset; }
   private: FieldRawData fieldRawData;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageNewOrderSingle: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetDayBookingInst() const { return fieldDayBookingInst.offset >= 0; }
   FieldDayBookingInst::ValueType getDayBookingInst() const { return fieldDayBookingInst.getValue( buf ); }
   const char * ptrToDayBookingInst() const { return buf + fieldDayBookingInst.offset; }
   private: FieldDayBookingInst fieldDayBookingInst;

   public:
   bool isSetBookingUnit() const { return fieldBookingUnit.offset >= 0; }
   FieldBookingUnit::ValueType getBookingUnit() const { return fieldBookingUnit.getValue( buf ); }
   const char * ptrToBookingUnit() const { return buf + fieldBookingUnit.offset; }
   private: FieldBookingUnit fieldBookingUnit;

   public:
   bool isSetPreallocMethod() const { return fieldPreallocMethod.offset >= 0; }
   FieldPreallocMethod::ValueType getPreallocMethod() const { return fieldPreallocMethod.getValue( buf ); }
   const char * ptrToPreallocMethod() const { return buf + fieldPreallocMethod.offset; }
   private: FieldPreallocMethod fieldPreallocMethod;

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetCashMargin() const { return fieldCashMargin.offset >= 0; }
   FieldCashMargin::ValueType getCashMargin() const { return fieldCashMargin.getValue( buf ); }
   const char * ptrToCashMargin() const { return buf + fieldCashMargin.offset; }
   private: FieldCashMargin fieldCashMargin;

   public:
   bool isSetClearingFeeIndicator() const { return fieldClearingFeeIndicator.offset >= 0; }
   FieldClearingFeeIndicator::ValueType getClearingFeeIndicator() const { return fieldClearingFeeIndicator.getValue( buf ); }
   const char * ptrToClearingFeeIndicator() const { return buf + fieldClearingFeeIndicator.offset; }
   private: FieldClearingFeeIndicator fieldClearingFeeIndicator;

   public:
   bool isSetHandlInst() const { return fieldHandlInst.offset >= 0; }
   FieldHandlInst::ValueType getHandlInst() const { return fieldHandlInst.getValue( buf ); }
   const char * ptrToHandlInst() const { return buf + fieldHandlInst.offset; }
   private: FieldHandlInst fieldHandlInst;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetMaxFloor() const { return fieldMaxFloor.offset >= 0; }
   FieldMaxFloor::ValueType getMaxFloor() const { return fieldMaxFloor.getValue( buf ); }
   const char * ptrToMaxFloor() const { return buf + fieldMaxFloor.offset; }
   private: FieldMaxFloor fieldMaxFloor;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetProcessCode() const { return fieldProcessCode.offset >= 0; }
   FieldProcessCode::ValueType getProcessCode() const { return fieldProcessCode.getValue( buf ); }
   const char * ptrToProcessCode() const { return buf + fieldProcessCode.offset; }
   private: FieldProcessCode fieldProcessCode;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetPrevClosePx() const { return fieldPrevClosePx.offset >= 0; }
   FieldPrevClosePx::ValueType getPrevClosePx() const { return fieldPrevClosePx.getValue( buf ); }
   const char * ptrToPrevClosePx() const { return buf + fieldPrevClosePx.offset; }
   private: FieldPrevClosePx fieldPrevClosePx;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetLocateReqd() const { return fieldLocateReqd.offset >= 0; }
   FieldLocateReqd::ValueType getLocateReqd() const { return fieldLocateReqd.getValue( buf ); }
   const char * ptrToLocateReqd() const { return buf + fieldLocateReqd.offset; }
   private: FieldLocateReqd fieldLocateReqd;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetStopPx() const { return fieldStopPx.offset >= 0; }
   FieldStopPx::ValueType getStopPx() const { return fieldStopPx.getValue( buf ); }
   const char * ptrToStopPx() const { return buf + fieldStopPx.offset; }
   private: FieldStopPx fieldStopPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetSolicitedFlag() const { return fieldSolicitedFlag.offset >= 0; }
   FieldSolicitedFlag::ValueType getSolicitedFlag() const { return fieldSolicitedFlag.getValue( buf ); }
   const char * ptrToSolicitedFlag() const { return buf + fieldSolicitedFlag.offset; }
   private: FieldSolicitedFlag fieldSolicitedFlag;

   public:
   bool isSetIOIID() const { return fieldIOIID.offset >= 0; }
   FieldIOIID::ValueType getIOIID() const { return fieldIOIID.getValue( buf ); }
   const char * ptrToIOIID() const { return buf + fieldIOIID.offset; }
   private: FieldIOIID fieldIOIID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetGTBookingInst() const { return fieldGTBookingInst.offset >= 0; }
   FieldGTBookingInst::ValueType getGTBookingInst() const { return fieldGTBookingInst.getValue( buf ); }
   const char * ptrToGTBookingInst() const { return buf + fieldGTBookingInst.offset; }
   private: FieldGTBookingInst fieldGTBookingInst;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommCurrency() const { return fieldCommCurrency.offset >= 0; }
   FieldCommCurrency::ValueType getCommCurrency() const { return fieldCommCurrency.getValue( buf ); }
   const char * ptrToCommCurrency() const { return buf + fieldCommCurrency.offset; }
   private: FieldCommCurrency fieldCommCurrency;

   public:
   bool isSetFundRenewWaiv() const { return fieldFundRenewWaiv.offset >= 0; }
   FieldFundRenewWaiv::ValueType getFundRenewWaiv() const { return fieldFundRenewWaiv.getValue( buf ); }
   const char * ptrToFundRenewWaiv() const { return buf + fieldFundRenewWaiv.offset; }
   private: FieldFundRenewWaiv fieldFundRenewWaiv;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetOrderRestrictions() const { return fieldOrderRestrictions.offset >= 0; }
   FieldOrderRestrictions::ValueType getOrderRestrictions() const { return fieldOrderRestrictions.getValue( buf ); }
   const char * ptrToOrderRestrictions() const { return buf + fieldOrderRestrictions.offset; }
   private: FieldOrderRestrictions fieldOrderRestrictions;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetForexReq() const { return fieldForexReq.offset >= 0; }
   FieldForexReq::ValueType getForexReq() const { return fieldForexReq.getValue( buf ); }
   const char * ptrToForexReq() const { return buf + fieldForexReq.offset; }
   private: FieldForexReq fieldForexReq;

   public:
   bool isSetSettlCurrency() const { return fieldSettlCurrency.offset >= 0; }
   FieldSettlCurrency::ValueType getSettlCurrency() const { return fieldSettlCurrency.getValue( buf ); }
   const char * ptrToSettlCurrency() const { return buf + fieldSettlCurrency.offset; }
   private: FieldSettlCurrency fieldSettlCurrency;

   public:
   bool isSetBookingType() const { return fieldBookingType.offset >= 0; }
   FieldBookingType::ValueType getBookingType() const { return fieldBookingType.getValue( buf ); }
   const char * ptrToBookingType() const { return buf + fieldBookingType.offset; }
   private: FieldBookingType fieldBookingType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetSettlDate2() const { return fieldSettlDate2.offset >= 0; }
   FieldSettlDate2::ValueType getSettlDate2() const { return fieldSettlDate2.getValue( buf ); }
   const char * ptrToSettlDate2() const { return buf + fieldSettlDate2.offset; }
   private: FieldSettlDate2 fieldSettlDate2;

   public:
   bool isSetOrderQty2() const { return fieldOrderQty2.offset >= 0; }
   FieldOrderQty2::ValueType getOrderQty2() const { return fieldOrderQty2.getValue( buf ); }
   const char * ptrToOrderQty2() const { return buf + fieldOrderQty2.offset; }
   private: FieldOrderQty2 fieldOrderQty2;

   public:
   bool isSetPrice2() const { return fieldPrice2.offset >= 0; }
   FieldPrice2::ValueType getPrice2() const { return fieldPrice2.getValue( buf ); }
   const char * ptrToPrice2() const { return buf + fieldPrice2.offset; }
   private: FieldPrice2 fieldPrice2;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetCoveredOrUncovered() const { return fieldCoveredOrUncovered.offset >= 0; }
   FieldCoveredOrUncovered::ValueType getCoveredOrUncovered() const { return fieldCoveredOrUncovered.getValue( buf ); }
   const char * ptrToCoveredOrUncovered() const { return buf + fieldCoveredOrUncovered.offset; }
   private: FieldCoveredOrUncovered fieldCoveredOrUncovered;

   public:
   bool isSetMaxShow() const { return fieldMaxShow.offset >= 0; }
   FieldMaxShow::ValueType getMaxShow() const { return fieldMaxShow.getValue( buf ); }
   const char * ptrToMaxShow() const { return buf + fieldMaxShow.offset; }
   private: FieldMaxShow fieldMaxShow;

   public:
   bool isSetPegOffsetValue() const { return fieldPegOffsetValue.offset >= 0; }
   FieldPegOffsetValue::ValueType getPegOffsetValue() const { return fieldPegOffsetValue.getValue( buf ); }
   const char * ptrToPegOffsetValue() const { return buf + fieldPegOffsetValue.offset; }
   private: FieldPegOffsetValue fieldPegOffsetValue;

   public:
   bool isSetPegMoveType() const { return fieldPegMoveType.offset >= 0; }
   FieldPegMoveType::ValueType getPegMoveType() const { return fieldPegMoveType.getValue( buf ); }
   const char * ptrToPegMoveType() const { return buf + fieldPegMoveType.offset; }
   private: FieldPegMoveType fieldPegMoveType;

   public:
   bool isSetPegOffsetType() const { return fieldPegOffsetType.offset >= 0; }
   FieldPegOffsetType::ValueType getPegOffsetType() const { return fieldPegOffsetType.getValue( buf ); }
   const char * ptrToPegOffsetType() const { return buf + fieldPegOffsetType.offset; }
   private: FieldPegOffsetType fieldPegOffsetType;

   public:
   bool isSetPegLimitType() const { return fieldPegLimitType.offset >= 0; }
   FieldPegLimitType::ValueType getPegLimitType() const { return fieldPegLimitType.getValue( buf ); }
   const char * ptrToPegLimitType() const { return buf + fieldPegLimitType.offset; }
   private: FieldPegLimitType fieldPegLimitType;

   public:
   bool isSetPegRoundDirection() const { return fieldPegRoundDirection.offset >= 0; }
   FieldPegRoundDirection::ValueType getPegRoundDirection() const { return fieldPegRoundDirection.getValue( buf ); }
   const char * ptrToPegRoundDirection() const { return buf + fieldPegRoundDirection.offset; }
   private: FieldPegRoundDirection fieldPegRoundDirection;

   public:
   bool isSetPegScope() const { return fieldPegScope.offset >= 0; }
   FieldPegScope::ValueType getPegScope() const { return fieldPegScope.getValue( buf ); }
   const char * ptrToPegScope() const { return buf + fieldPegScope.offset; }
   private: FieldPegScope fieldPegScope;

   public:
   bool isSetDiscretionInst() const { return fieldDiscretionInst.offset >= 0; }
   FieldDiscretionInst::ValueType getDiscretionInst() const { return fieldDiscretionInst.getValue( buf ); }
   const char * ptrToDiscretionInst() const { return buf + fieldDiscretionInst.offset; }
   private: FieldDiscretionInst fieldDiscretionInst;

   public:
   bool isSetDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.offset >= 0; }
   FieldDiscretionOffsetValue::ValueType getDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.getValue( buf ); }
   const char * ptrToDiscretionOffsetValue() const { return buf + fieldDiscretionOffsetValue.offset; }
   private: FieldDiscretionOffsetValue fieldDiscretionOffsetValue;

   public:
   bool isSetDiscretionMoveType() const { return fieldDiscretionMoveType.offset >= 0; }
   FieldDiscretionMoveType::ValueType getDiscretionMoveType() const { return fieldDiscretionMoveType.getValue( buf ); }
   const char * ptrToDiscretionMoveType() const { return buf + fieldDiscretionMoveType.offset; }
   private: FieldDiscretionMoveType fieldDiscretionMoveType;

   public:
   bool isSetDiscretionOffsetType() const { return fieldDiscretionOffsetType.offset >= 0; }
   FieldDiscretionOffsetType::ValueType getDiscretionOffsetType() const { return fieldDiscretionOffsetType.getValue( buf ); }
   const char * ptrToDiscretionOffsetType() const { return buf + fieldDiscretionOffsetType.offset; }
   private: FieldDiscretionOffsetType fieldDiscretionOffsetType;

   public:
   bool isSetDiscretionLimitType() const { return fieldDiscretionLimitType.offset >= 0; }
   FieldDiscretionLimitType::ValueType getDiscretionLimitType() const { return fieldDiscretionLimitType.getValue( buf ); }
   const char * ptrToDiscretionLimitType() const { return buf + fieldDiscretionLimitType.offset; }
   private: FieldDiscretionLimitType fieldDiscretionLimitType;

   public:
   bool isSetDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.offset >= 0; }
   FieldDiscretionRoundDirection::ValueType getDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.getValue( buf ); }
   const char * ptrToDiscretionRoundDirection() const { return buf + fieldDiscretionRoundDirection.offset; }
   private: FieldDiscretionRoundDirection fieldDiscretionRoundDirection;

   public:
   bool isSetDiscretionScope() const { return fieldDiscretionScope.offset >= 0; }
   FieldDiscretionScope::ValueType getDiscretionScope() const { return fieldDiscretionScope.getValue( buf ); }
   const char * ptrToDiscretionScope() const { return buf + fieldDiscretionScope.offset; }
   private: FieldDiscretionScope fieldDiscretionScope;

   public:
   bool isSetTargetStrategy() const { return fieldTargetStrategy.offset >= 0; }
   FieldTargetStrategy::ValueType getTargetStrategy() const { return fieldTargetStrategy.getValue( buf ); }
   const char * ptrToTargetStrategy() const { return buf + fieldTargetStrategy.offset; }
   private: FieldTargetStrategy fieldTargetStrategy;

   public:
   bool isSetTargetStrategyParameters() const { return fieldTargetStrategyParameters.offset >= 0; }
   FieldTargetStrategyParameters::ValueType getTargetStrategyParameters() const { return fieldTargetStrategyParameters.getValue( buf ); }
   const char * ptrToTargetStrategyParameters() const { return buf + fieldTargetStrategyParameters.offset; }
   private: FieldTargetStrategyParameters fieldTargetStrategyParameters;

   public:
   bool isSetParticipationRate() const { return fieldParticipationRate.offset >= 0; }
   FieldParticipationRate::ValueType getParticipationRate() const { return fieldParticipationRate.getValue( buf ); }
   const char * ptrToParticipationRate() const { return buf + fieldParticipationRate.offset; }
   private: FieldParticipationRate fieldParticipationRate;

   public:
   bool isSetCancellationRights() const { return fieldCancellationRights.offset >= 0; }
   FieldCancellationRights::ValueType getCancellationRights() const { return fieldCancellationRights.getValue( buf ); }
   const char * ptrToCancellationRights() const { return buf + fieldCancellationRights.offset; }
   private: FieldCancellationRights fieldCancellationRights;

   public:
   bool isSetMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.offset >= 0; }
   FieldMoneyLaunderingStatus::ValueType getMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.getValue( buf ); }
   const char * ptrToMoneyLaunderingStatus() const { return buf + fieldMoneyLaunderingStatus.offset; }
   private: FieldMoneyLaunderingStatus fieldMoneyLaunderingStatus;

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetDesignation() const { return fieldDesignation.offset >= 0; }
   FieldDesignation::ValueType getDesignation() const { return fieldDesignation.getValue( buf ); }
   const char * ptrToDesignation() const { return buf + fieldDesignation.offset; }
   private: FieldDesignation fieldDesignation;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageNewOrderList: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetBidID() const { return fieldBidID.offset >= 0; }
   FieldBidID::ValueType getBidID() const { return fieldBidID.getValue( buf ); }
   const char * ptrToBidID() const { return buf + fieldBidID.offset; }
   private: FieldBidID fieldBidID;

   public:
   bool isSetClientBidID() const { return fieldClientBidID.offset >= 0; }
   FieldClientBidID::ValueType getClientBidID() const { return fieldClientBidID.getValue( buf ); }
   const char * ptrToClientBidID() const { return buf + fieldClientBidID.offset; }
   private: FieldClientBidID fieldClientBidID;

   public:
   bool isSetProgRptReqs() const { return fieldProgRptReqs.offset >= 0; }
   FieldProgRptReqs::ValueType getProgRptReqs() const { return fieldProgRptReqs.getValue( buf ); }
   const char * ptrToProgRptReqs() const { return buf + fieldProgRptReqs.offset; }
   private: FieldProgRptReqs fieldProgRptReqs;

   public:
   bool isSetBidType() const { return fieldBidType.offset >= 0; }
   FieldBidType::ValueType getBidType() const { return fieldBidType.getValue( buf ); }
   const char * ptrToBidType() const { return buf + fieldBidType.offset; }
   private: FieldBidType fieldBidType;

   public:
   bool isSetProgPeriodInterval() const { return fieldProgPeriodInterval.offset >= 0; }
   FieldProgPeriodInterval::ValueType getProgPeriodInterval() const { return fieldProgPeriodInterval.getValue( buf ); }
   const char * ptrToProgPeriodInterval() const { return buf + fieldProgPeriodInterval.offset; }
   private: FieldProgPeriodInterval fieldProgPeriodInterval;

   public:
   bool isSetCancellationRights() const { return fieldCancellationRights.offset >= 0; }
   FieldCancellationRights::ValueType getCancellationRights() const { return fieldCancellationRights.getValue( buf ); }
   const char * ptrToCancellationRights() const { return buf + fieldCancellationRights.offset; }
   private: FieldCancellationRights fieldCancellationRights;

   public:
   bool isSetMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.offset >= 0; }
   FieldMoneyLaunderingStatus::ValueType getMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.getValue( buf ); }
   const char * ptrToMoneyLaunderingStatus() const { return buf + fieldMoneyLaunderingStatus.offset; }
   private: FieldMoneyLaunderingStatus fieldMoneyLaunderingStatus;

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetListExecInstType() const { return fieldListExecInstType.offset >= 0; }
   FieldListExecInstType::ValueType getListExecInstType() const { return fieldListExecInstType.getValue( buf ); }
   const char * ptrToListExecInstType() const { return buf + fieldListExecInstType.offset; }
   private: FieldListExecInstType fieldListExecInstType;

   public:
   bool isSetListExecInst() const { return fieldListExecInst.offset >= 0; }
   FieldListExecInst::ValueType getListExecInst() const { return fieldListExecInst.getValue( buf ); }
   const char * ptrToListExecInst() const { return buf + fieldListExecInst.offset; }
   private: FieldListExecInst fieldListExecInst;

   public:
   bool isSetEncodedListExecInstLen() const { return fieldEncodedListExecInstLen.offset >= 0; }
   FieldEncodedListExecInstLen::ValueType getEncodedListExecInstLen() const { return fieldEncodedListExecInstLen.getValue( buf ); }
   const char * ptrToEncodedListExecInstLen() const { return buf + fieldEncodedListExecInstLen.offset; }
   private: FieldEncodedListExecInstLen fieldEncodedListExecInstLen;

   public:
   bool isSetEncodedListExecInst() const { return fieldEncodedListExecInst.offset >= 0; }
   FieldEncodedListExecInst::ValueType getEncodedListExecInst() const { return fieldEncodedListExecInst.getValue( buf ); }
   const char * ptrToEncodedListExecInst() const { return buf + fieldEncodedListExecInst.offset; }
   private: FieldEncodedListExecInst fieldEncodedListExecInst;

   public:
   bool isSetAllowableOneSidednessPct() const { return fieldAllowableOneSidednessPct.offset >= 0; }
   FieldAllowableOneSidednessPct::ValueType getAllowableOneSidednessPct() const { return fieldAllowableOneSidednessPct.getValue( buf ); }
   const char * ptrToAllowableOneSidednessPct() const { return buf + fieldAllowableOneSidednessPct.offset; }
   private: FieldAllowableOneSidednessPct fieldAllowableOneSidednessPct;

   public:
   bool isSetAllowableOneSidednessValue() const { return fieldAllowableOneSidednessValue.offset >= 0; }
   FieldAllowableOneSidednessValue::ValueType getAllowableOneSidednessValue() const { return fieldAllowableOneSidednessValue.getValue( buf ); }
   const char * ptrToAllowableOneSidednessValue() const { return buf + fieldAllowableOneSidednessValue.offset; }
   private: FieldAllowableOneSidednessValue fieldAllowableOneSidednessValue;

   public:
   bool isSetAllowableOneSidednessCurr() const { return fieldAllowableOneSidednessCurr.offset >= 0; }
   FieldAllowableOneSidednessCurr::ValueType getAllowableOneSidednessCurr() const { return fieldAllowableOneSidednessCurr.getValue( buf ); }
   const char * ptrToAllowableOneSidednessCurr() const { return buf + fieldAllowableOneSidednessCurr.offset; }
   private: FieldAllowableOneSidednessCurr fieldAllowableOneSidednessCurr;

   public:
   bool isSetTotNoOrders() const { return fieldTotNoOrders.offset >= 0; }
   FieldTotNoOrders::ValueType getTotNoOrders() const { return fieldTotNoOrders.getValue( buf ); }
   const char * ptrToTotNoOrders() const { return buf + fieldTotNoOrders.offset; }
   private: FieldTotNoOrders fieldTotNoOrders;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoOrders() const { return fieldNoOrders.offset >= 0; }
   FieldNoOrders::ValueType getNoOrders() const { return fieldNoOrders.getValue( buf ); }
   const char * ptrToNoOrders() const { return buf + fieldNoOrders.offset; }
   private: FieldNoOrders fieldNoOrders;
  
   public:
   std::size_t getGroupCountOrders() const { return groupsOrders.size(); } 
   const GroupOrders & getGroupOrders( std::size_t idx ) const { return groupsOrders[ idx ]; } 
   private: GroupOrders::Array groupsOrders{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageOrderCancelRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrigClOrdID() const { return fieldOrigClOrdID.offset >= 0; }
   FieldOrigClOrdID::ValueType getOrigClOrdID() const { return fieldOrigClOrdID.getValue( buf ); }
   const char * ptrToOrigClOrdID() const { return buf + fieldOrigClOrdID.offset; }
   private: FieldOrigClOrdID fieldOrigClOrdID;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetOrigOrdModTime() const { return fieldOrigOrdModTime.offset >= 0; }
   FieldOrigOrdModTime::ValueType getOrigOrdModTime() const { return fieldOrigOrdModTime.getValue( buf ); }
   const char * ptrToOrigOrdModTime() const { return buf + fieldOrigOrdModTime.offset; }
   private: FieldOrigOrdModTime fieldOrigOrdModTime;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageOrderCancelReplaceRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetOrigClOrdID() const { return fieldOrigClOrdID.offset >= 0; }
   FieldOrigClOrdID::ValueType getOrigClOrdID() const { return fieldOrigClOrdID.getValue( buf ); }
   const char * ptrToOrigClOrdID() const { return buf + fieldOrigClOrdID.offset; }
   private: FieldOrigClOrdID fieldOrigClOrdID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetOrigOrdModTime() const { return fieldOrigOrdModTime.offset >= 0; }
   FieldOrigOrdModTime::ValueType getOrigOrdModTime() const { return fieldOrigOrdModTime.getValue( buf ); }
   const char * ptrToOrigOrdModTime() const { return buf + fieldOrigOrdModTime.offset; }
   private: FieldOrigOrdModTime fieldOrigOrdModTime;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetDayBookingInst() const { return fieldDayBookingInst.offset >= 0; }
   FieldDayBookingInst::ValueType getDayBookingInst() const { return fieldDayBookingInst.getValue( buf ); }
   const char * ptrToDayBookingInst() const { return buf + fieldDayBookingInst.offset; }
   private: FieldDayBookingInst fieldDayBookingInst;

   public:
   bool isSetBookingUnit() const { return fieldBookingUnit.offset >= 0; }
   FieldBookingUnit::ValueType getBookingUnit() const { return fieldBookingUnit.getValue( buf ); }
   const char * ptrToBookingUnit() const { return buf + fieldBookingUnit.offset; }
   private: FieldBookingUnit fieldBookingUnit;

   public:
   bool isSetPreallocMethod() const { return fieldPreallocMethod.offset >= 0; }
   FieldPreallocMethod::ValueType getPreallocMethod() const { return fieldPreallocMethod.getValue( buf ); }
   const char * ptrToPreallocMethod() const { return buf + fieldPreallocMethod.offset; }
   private: FieldPreallocMethod fieldPreallocMethod;

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetCashMargin() const { return fieldCashMargin.offset >= 0; }
   FieldCashMargin::ValueType getCashMargin() const { return fieldCashMargin.getValue( buf ); }
   const char * ptrToCashMargin() const { return buf + fieldCashMargin.offset; }
   private: FieldCashMargin fieldCashMargin;

   public:
   bool isSetClearingFeeIndicator() const { return fieldClearingFeeIndicator.offset >= 0; }
   FieldClearingFeeIndicator::ValueType getClearingFeeIndicator() const { return fieldClearingFeeIndicator.getValue( buf ); }
   const char * ptrToClearingFeeIndicator() const { return buf + fieldClearingFeeIndicator.offset; }
   private: FieldClearingFeeIndicator fieldClearingFeeIndicator;

   public:
   bool isSetHandlInst() const { return fieldHandlInst.offset >= 0; }
   FieldHandlInst::ValueType getHandlInst() const { return fieldHandlInst.getValue( buf ); }
   const char * ptrToHandlInst() const { return buf + fieldHandlInst.offset; }
   private: FieldHandlInst fieldHandlInst;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetMaxFloor() const { return fieldMaxFloor.offset >= 0; }
   FieldMaxFloor::ValueType getMaxFloor() const { return fieldMaxFloor.getValue( buf ); }
   const char * ptrToMaxFloor() const { return buf + fieldMaxFloor.offset; }
   private: FieldMaxFloor fieldMaxFloor;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetStopPx() const { return fieldStopPx.offset >= 0; }
   FieldStopPx::ValueType getStopPx() const { return fieldStopPx.getValue( buf ); }
   const char * ptrToStopPx() const { return buf + fieldStopPx.offset; }
   private: FieldStopPx fieldStopPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetPegOffsetValue() const { return fieldPegOffsetValue.offset >= 0; }
   FieldPegOffsetValue::ValueType getPegOffsetValue() const { return fieldPegOffsetValue.getValue( buf ); }
   const char * ptrToPegOffsetValue() const { return buf + fieldPegOffsetValue.offset; }
   private: FieldPegOffsetValue fieldPegOffsetValue;

   public:
   bool isSetPegMoveType() const { return fieldPegMoveType.offset >= 0; }
   FieldPegMoveType::ValueType getPegMoveType() const { return fieldPegMoveType.getValue( buf ); }
   const char * ptrToPegMoveType() const { return buf + fieldPegMoveType.offset; }
   private: FieldPegMoveType fieldPegMoveType;

   public:
   bool isSetPegOffsetType() const { return fieldPegOffsetType.offset >= 0; }
   FieldPegOffsetType::ValueType getPegOffsetType() const { return fieldPegOffsetType.getValue( buf ); }
   const char * ptrToPegOffsetType() const { return buf + fieldPegOffsetType.offset; }
   private: FieldPegOffsetType fieldPegOffsetType;

   public:
   bool isSetPegLimitType() const { return fieldPegLimitType.offset >= 0; }
   FieldPegLimitType::ValueType getPegLimitType() const { return fieldPegLimitType.getValue( buf ); }
   const char * ptrToPegLimitType() const { return buf + fieldPegLimitType.offset; }
   private: FieldPegLimitType fieldPegLimitType;

   public:
   bool isSetPegRoundDirection() const { return fieldPegRoundDirection.offset >= 0; }
   FieldPegRoundDirection::ValueType getPegRoundDirection() const { return fieldPegRoundDirection.getValue( buf ); }
   const char * ptrToPegRoundDirection() const { return buf + fieldPegRoundDirection.offset; }
   private: FieldPegRoundDirection fieldPegRoundDirection;

   public:
   bool isSetPegScope() const { return fieldPegScope.offset >= 0; }
   FieldPegScope::ValueType getPegScope() const { return fieldPegScope.getValue( buf ); }
   const char * ptrToPegScope() const { return buf + fieldPegScope.offset; }
   private: FieldPegScope fieldPegScope;

   public:
   bool isSetDiscretionInst() const { return fieldDiscretionInst.offset >= 0; }
   FieldDiscretionInst::ValueType getDiscretionInst() const { return fieldDiscretionInst.getValue( buf ); }
   const char * ptrToDiscretionInst() const { return buf + fieldDiscretionInst.offset; }
   private: FieldDiscretionInst fieldDiscretionInst;

   public:
   bool isSetDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.offset >= 0; }
   FieldDiscretionOffsetValue::ValueType getDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.getValue( buf ); }
   const char * ptrToDiscretionOffsetValue() const { return buf + fieldDiscretionOffsetValue.offset; }
   private: FieldDiscretionOffsetValue fieldDiscretionOffsetValue;

   public:
   bool isSetDiscretionMoveType() const { return fieldDiscretionMoveType.offset >= 0; }
   FieldDiscretionMoveType::ValueType getDiscretionMoveType() const { return fieldDiscretionMoveType.getValue( buf ); }
   const char * ptrToDiscretionMoveType() const { return buf + fieldDiscretionMoveType.offset; }
   private: FieldDiscretionMoveType fieldDiscretionMoveType;

   public:
   bool isSetDiscretionOffsetType() const { return fieldDiscretionOffsetType.offset >= 0; }
   FieldDiscretionOffsetType::ValueType getDiscretionOffsetType() const { return fieldDiscretionOffsetType.getValue( buf ); }
   const char * ptrToDiscretionOffsetType() const { return buf + fieldDiscretionOffsetType.offset; }
   private: FieldDiscretionOffsetType fieldDiscretionOffsetType;

   public:
   bool isSetDiscretionLimitType() const { return fieldDiscretionLimitType.offset >= 0; }
   FieldDiscretionLimitType::ValueType getDiscretionLimitType() const { return fieldDiscretionLimitType.getValue( buf ); }
   const char * ptrToDiscretionLimitType() const { return buf + fieldDiscretionLimitType.offset; }
   private: FieldDiscretionLimitType fieldDiscretionLimitType;

   public:
   bool isSetDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.offset >= 0; }
   FieldDiscretionRoundDirection::ValueType getDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.getValue( buf ); }
   const char * ptrToDiscretionRoundDirection() const { return buf + fieldDiscretionRoundDirection.offset; }
   private: FieldDiscretionRoundDirection fieldDiscretionRoundDirection;

   public:
   bool isSetDiscretionScope() const { return fieldDiscretionScope.offset >= 0; }
   FieldDiscretionScope::ValueType getDiscretionScope() const { return fieldDiscretionScope.getValue( buf ); }
   const char * ptrToDiscretionScope() const { return buf + fieldDiscretionScope.offset; }
   private: FieldDiscretionScope fieldDiscretionScope;

   public:
   bool isSetTargetStrategy() const { return fieldTargetStrategy.offset >= 0; }
   FieldTargetStrategy::ValueType getTargetStrategy() const { return fieldTargetStrategy.getValue( buf ); }
   const char * ptrToTargetStrategy() const { return buf + fieldTargetStrategy.offset; }
   private: FieldTargetStrategy fieldTargetStrategy;

   public:
   bool isSetTargetStrategyParameters() const { return fieldTargetStrategyParameters.offset >= 0; }
   FieldTargetStrategyParameters::ValueType getTargetStrategyParameters() const { return fieldTargetStrategyParameters.getValue( buf ); }
   const char * ptrToTargetStrategyParameters() const { return buf + fieldTargetStrategyParameters.offset; }
   private: FieldTargetStrategyParameters fieldTargetStrategyParameters;

   public:
   bool isSetParticipationRate() const { return fieldParticipationRate.offset >= 0; }
   FieldParticipationRate::ValueType getParticipationRate() const { return fieldParticipationRate.getValue( buf ); }
   const char * ptrToParticipationRate() const { return buf + fieldParticipationRate.offset; }
   private: FieldParticipationRate fieldParticipationRate;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetSolicitedFlag() const { return fieldSolicitedFlag.offset >= 0; }
   FieldSolicitedFlag::ValueType getSolicitedFlag() const { return fieldSolicitedFlag.getValue( buf ); }
   const char * ptrToSolicitedFlag() const { return buf + fieldSolicitedFlag.offset; }
   private: FieldSolicitedFlag fieldSolicitedFlag;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetGTBookingInst() const { return fieldGTBookingInst.offset >= 0; }
   FieldGTBookingInst::ValueType getGTBookingInst() const { return fieldGTBookingInst.getValue( buf ); }
   const char * ptrToGTBookingInst() const { return buf + fieldGTBookingInst.offset; }
   private: FieldGTBookingInst fieldGTBookingInst;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommCurrency() const { return fieldCommCurrency.offset >= 0; }
   FieldCommCurrency::ValueType getCommCurrency() const { return fieldCommCurrency.getValue( buf ); }
   const char * ptrToCommCurrency() const { return buf + fieldCommCurrency.offset; }
   private: FieldCommCurrency fieldCommCurrency;

   public:
   bool isSetFundRenewWaiv() const { return fieldFundRenewWaiv.offset >= 0; }
   FieldFundRenewWaiv::ValueType getFundRenewWaiv() const { return fieldFundRenewWaiv.getValue( buf ); }
   const char * ptrToFundRenewWaiv() const { return buf + fieldFundRenewWaiv.offset; }
   private: FieldFundRenewWaiv fieldFundRenewWaiv;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetOrderRestrictions() const { return fieldOrderRestrictions.offset >= 0; }
   FieldOrderRestrictions::ValueType getOrderRestrictions() const { return fieldOrderRestrictions.getValue( buf ); }
   const char * ptrToOrderRestrictions() const { return buf + fieldOrderRestrictions.offset; }
   private: FieldOrderRestrictions fieldOrderRestrictions;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetForexReq() const { return fieldForexReq.offset >= 0; }
   FieldForexReq::ValueType getForexReq() const { return fieldForexReq.getValue( buf ); }
   const char * ptrToForexReq() const { return buf + fieldForexReq.offset; }
   private: FieldForexReq fieldForexReq;

   public:
   bool isSetSettlCurrency() const { return fieldSettlCurrency.offset >= 0; }
   FieldSettlCurrency::ValueType getSettlCurrency() const { return fieldSettlCurrency.getValue( buf ); }
   const char * ptrToSettlCurrency() const { return buf + fieldSettlCurrency.offset; }
   private: FieldSettlCurrency fieldSettlCurrency;

   public:
   bool isSetBookingType() const { return fieldBookingType.offset >= 0; }
   FieldBookingType::ValueType getBookingType() const { return fieldBookingType.getValue( buf ); }
   const char * ptrToBookingType() const { return buf + fieldBookingType.offset; }
   private: FieldBookingType fieldBookingType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetSettlDate2() const { return fieldSettlDate2.offset >= 0; }
   FieldSettlDate2::ValueType getSettlDate2() const { return fieldSettlDate2.getValue( buf ); }
   const char * ptrToSettlDate2() const { return buf + fieldSettlDate2.offset; }
   private: FieldSettlDate2 fieldSettlDate2;

   public:
   bool isSetOrderQty2() const { return fieldOrderQty2.offset >= 0; }
   FieldOrderQty2::ValueType getOrderQty2() const { return fieldOrderQty2.getValue( buf ); }
   const char * ptrToOrderQty2() const { return buf + fieldOrderQty2.offset; }
   private: FieldOrderQty2 fieldOrderQty2;

   public:
   bool isSetPrice2() const { return fieldPrice2.offset >= 0; }
   FieldPrice2::ValueType getPrice2() const { return fieldPrice2.getValue( buf ); }
   const char * ptrToPrice2() const { return buf + fieldPrice2.offset; }
   private: FieldPrice2 fieldPrice2;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetCoveredOrUncovered() const { return fieldCoveredOrUncovered.offset >= 0; }
   FieldCoveredOrUncovered::ValueType getCoveredOrUncovered() const { return fieldCoveredOrUncovered.getValue( buf ); }
   const char * ptrToCoveredOrUncovered() const { return buf + fieldCoveredOrUncovered.offset; }
   private: FieldCoveredOrUncovered fieldCoveredOrUncovered;

   public:
   bool isSetMaxShow() const { return fieldMaxShow.offset >= 0; }
   FieldMaxShow::ValueType getMaxShow() const { return fieldMaxShow.getValue( buf ); }
   const char * ptrToMaxShow() const { return buf + fieldMaxShow.offset; }
   private: FieldMaxShow fieldMaxShow;

   public:
   bool isSetLocateReqd() const { return fieldLocateReqd.offset >= 0; }
   FieldLocateReqd::ValueType getLocateReqd() const { return fieldLocateReqd.getValue( buf ); }
   const char * ptrToLocateReqd() const { return buf + fieldLocateReqd.offset; }
   private: FieldLocateReqd fieldLocateReqd;

   public:
   bool isSetCancellationRights() const { return fieldCancellationRights.offset >= 0; }
   FieldCancellationRights::ValueType getCancellationRights() const { return fieldCancellationRights.getValue( buf ); }
   const char * ptrToCancellationRights() const { return buf + fieldCancellationRights.offset; }
   private: FieldCancellationRights fieldCancellationRights;

   public:
   bool isSetMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.offset >= 0; }
   FieldMoneyLaunderingStatus::ValueType getMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.getValue( buf ); }
   const char * ptrToMoneyLaunderingStatus() const { return buf + fieldMoneyLaunderingStatus.offset; }
   private: FieldMoneyLaunderingStatus fieldMoneyLaunderingStatus;

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetDesignation() const { return fieldDesignation.offset >= 0; }
   FieldDesignation::ValueType getDesignation() const { return fieldDesignation.getValue( buf ); }
   const char * ptrToDesignation() const { return buf + fieldDesignation.offset; }
   private: FieldDesignation fieldDesignation;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageOrderStatusRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetOrdStatusReqID() const { return fieldOrdStatusReqID.offset >= 0; }
   FieldOrdStatusReqID::ValueType getOrdStatusReqID() const { return fieldOrdStatusReqID.getValue( buf ); }
   const char * ptrToOrdStatusReqID() const { return buf + fieldOrdStatusReqID.offset; }
   private: FieldOrdStatusReqID fieldOrdStatusReqID;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageAllocationInstruction: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetAllocTransType() const { return fieldAllocTransType.offset >= 0; }
   FieldAllocTransType::ValueType getAllocTransType() const { return fieldAllocTransType.getValue( buf ); }
   const char * ptrToAllocTransType() const { return buf + fieldAllocTransType.offset; }
   private: FieldAllocTransType fieldAllocTransType;

   public:
   bool isSetAllocType() const { return fieldAllocType.offset >= 0; }
   FieldAllocType::ValueType getAllocType() const { return fieldAllocType.getValue( buf ); }
   const char * ptrToAllocType() const { return buf + fieldAllocType.offset; }
   private: FieldAllocType fieldAllocType;

   public:
   bool isSetSecondaryAllocID() const { return fieldSecondaryAllocID.offset >= 0; }
   FieldSecondaryAllocID::ValueType getSecondaryAllocID() const { return fieldSecondaryAllocID.getValue( buf ); }
   const char * ptrToSecondaryAllocID() const { return buf + fieldSecondaryAllocID.offset; }
   private: FieldSecondaryAllocID fieldSecondaryAllocID;

   public:
   bool isSetRefAllocID() const { return fieldRefAllocID.offset >= 0; }
   FieldRefAllocID::ValueType getRefAllocID() const { return fieldRefAllocID.getValue( buf ); }
   const char * ptrToRefAllocID() const { return buf + fieldRefAllocID.offset; }
   private: FieldRefAllocID fieldRefAllocID;

   public:
   bool isSetAllocCancReplaceReason() const { return fieldAllocCancReplaceReason.offset >= 0; }
   FieldAllocCancReplaceReason::ValueType getAllocCancReplaceReason() const { return fieldAllocCancReplaceReason.getValue( buf ); }
   const char * ptrToAllocCancReplaceReason() const { return buf + fieldAllocCancReplaceReason.offset; }
   private: FieldAllocCancReplaceReason fieldAllocCancReplaceReason;

   public:
   bool isSetAllocIntermedReqType() const { return fieldAllocIntermedReqType.offset >= 0; }
   FieldAllocIntermedReqType::ValueType getAllocIntermedReqType() const { return fieldAllocIntermedReqType.getValue( buf ); }
   const char * ptrToAllocIntermedReqType() const { return buf + fieldAllocIntermedReqType.offset; }
   private: FieldAllocIntermedReqType fieldAllocIntermedReqType;

   public:
   bool isSetAllocLinkID() const { return fieldAllocLinkID.offset >= 0; }
   FieldAllocLinkID::ValueType getAllocLinkID() const { return fieldAllocLinkID.getValue( buf ); }
   const char * ptrToAllocLinkID() const { return buf + fieldAllocLinkID.offset; }
   private: FieldAllocLinkID fieldAllocLinkID;

   public:
   bool isSetAllocLinkType() const { return fieldAllocLinkType.offset >= 0; }
   FieldAllocLinkType::ValueType getAllocLinkType() const { return fieldAllocLinkType.getValue( buf ); }
   const char * ptrToAllocLinkType() const { return buf + fieldAllocLinkType.offset; }
   private: FieldAllocLinkType fieldAllocLinkType;

   public:
   bool isSetBookingRefID() const { return fieldBookingRefID.offset >= 0; }
   FieldBookingRefID::ValueType getBookingRefID() const { return fieldBookingRefID.getValue( buf ); }
   const char * ptrToBookingRefID() const { return buf + fieldBookingRefID.offset; }
   private: FieldBookingRefID fieldBookingRefID;

   public:
   bool isSetAllocNoOrdersType() const { return fieldAllocNoOrdersType.offset >= 0; }
   FieldAllocNoOrdersType::ValueType getAllocNoOrdersType() const { return fieldAllocNoOrdersType.getValue( buf ); }
   const char * ptrToAllocNoOrdersType() const { return buf + fieldAllocNoOrdersType.offset; }
   private: FieldAllocNoOrdersType fieldAllocNoOrdersType;

   public:
   bool isSetNoOrders() const { return fieldNoOrders.offset >= 0; }
   FieldNoOrders::ValueType getNoOrders() const { return fieldNoOrders.getValue( buf ); }
   const char * ptrToNoOrders() const { return buf + fieldNoOrders.offset; }
   private: FieldNoOrders fieldNoOrders;
  
   public:
   std::size_t getGroupCountOrders() const { return groupsOrders.size(); } 
   const GroupOrders & getGroupOrders( std::size_t idx ) const { return groupsOrders[ idx ]; } 
   private: GroupOrders::Array groupsOrders{ 10 };

   public:
   bool isSetNoExecs() const { return fieldNoExecs.offset >= 0; }
   FieldNoExecs::ValueType getNoExecs() const { return fieldNoExecs.getValue( buf ); }
   const char * ptrToNoExecs() const { return buf + fieldNoExecs.offset; }
   private: FieldNoExecs fieldNoExecs;
  
   public:
   std::size_t getGroupCountExecs() const { return groupsExecs.size(); } 
   const GroupExecs & getGroupExecs( std::size_t idx ) const { return groupsExecs[ idx ]; } 
   private: GroupExecs::Array groupsExecs{ 10 };

   public:
   bool isSetPreviouslyReported() const { return fieldPreviouslyReported.offset >= 0; }
   FieldPreviouslyReported::ValueType getPreviouslyReported() const { return fieldPreviouslyReported.getValue( buf ); }
   const char * ptrToPreviouslyReported() const { return buf + fieldPreviouslyReported.offset; }
   private: FieldPreviouslyReported fieldPreviouslyReported;

   public:
   bool isSetReversalIndicator() const { return fieldReversalIndicator.offset >= 0; }
   FieldReversalIndicator::ValueType getReversalIndicator() const { return fieldReversalIndicator.getValue( buf ); }
   const char * ptrToReversalIndicator() const { return buf + fieldReversalIndicator.offset; }
   private: FieldReversalIndicator fieldReversalIndicator;

   public:
   bool isSetMatchType() const { return fieldMatchType.offset >= 0; }
   FieldMatchType::ValueType getMatchType() const { return fieldMatchType.getValue( buf ); }
   const char * ptrToMatchType() const { return buf + fieldMatchType.offset; }
   private: FieldMatchType fieldMatchType;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetLastMkt() const { return fieldLastMkt.offset >= 0; }
   FieldLastMkt::ValueType getLastMkt() const { return fieldLastMkt.getValue( buf ); }
   const char * ptrToLastMkt() const { return buf + fieldLastMkt.offset; }
   private: FieldLastMkt fieldLastMkt;

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetAvgPx() const { return fieldAvgPx.offset >= 0; }
   FieldAvgPx::ValueType getAvgPx() const { return fieldAvgPx.getValue( buf ); }
   const char * ptrToAvgPx() const { return buf + fieldAvgPx.offset; }
   private: FieldAvgPx fieldAvgPx;

   public:
   bool isSetAvgParPx() const { return fieldAvgParPx.offset >= 0; }
   FieldAvgParPx::ValueType getAvgParPx() const { return fieldAvgParPx.getValue( buf ); }
   const char * ptrToAvgParPx() const { return buf + fieldAvgParPx.offset; }
   private: FieldAvgParPx fieldAvgParPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetAvgPxPrecision() const { return fieldAvgPxPrecision.offset >= 0; }
   FieldAvgPxPrecision::ValueType getAvgPxPrecision() const { return fieldAvgPxPrecision.getValue( buf ); }
   const char * ptrToAvgPxPrecision() const { return buf + fieldAvgPxPrecision.offset; }
   private: FieldAvgPxPrecision fieldAvgPxPrecision;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetBookingType() const { return fieldBookingType.offset >= 0; }
   FieldBookingType::ValueType getBookingType() const { return fieldBookingType.getValue( buf ); }
   const char * ptrToBookingType() const { return buf + fieldBookingType.offset; }
   private: FieldBookingType fieldBookingType;

   public:
   bool isSetGrossTradeAmt() const { return fieldGrossTradeAmt.offset >= 0; }
   FieldGrossTradeAmt::ValueType getGrossTradeAmt() const { return fieldGrossTradeAmt.getValue( buf ); }
   const char * ptrToGrossTradeAmt() const { return buf + fieldGrossTradeAmt.offset; }
   private: FieldGrossTradeAmt fieldGrossTradeAmt;

   public:
   bool isSetConcession() const { return fieldConcession.offset >= 0; }
   FieldConcession::ValueType getConcession() const { return fieldConcession.getValue( buf ); }
   const char * ptrToConcession() const { return buf + fieldConcession.offset; }
   private: FieldConcession fieldConcession;

   public:
   bool isSetTotalTakedown() const { return fieldTotalTakedown.offset >= 0; }
   FieldTotalTakedown::ValueType getTotalTakedown() const { return fieldTotalTakedown.getValue( buf ); }
   const char * ptrToTotalTakedown() const { return buf + fieldTotalTakedown.offset; }
   private: FieldTotalTakedown fieldTotalTakedown;

   public:
   bool isSetNetMoney() const { return fieldNetMoney.offset >= 0; }
   FieldNetMoney::ValueType getNetMoney() const { return fieldNetMoney.getValue( buf ); }
   const char * ptrToNetMoney() const { return buf + fieldNetMoney.offset; }
   private: FieldNetMoney fieldNetMoney;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetAutoAcceptIndicator() const { return fieldAutoAcceptIndicator.offset >= 0; }
   FieldAutoAcceptIndicator::ValueType getAutoAcceptIndicator() const { return fieldAutoAcceptIndicator.getValue( buf ); }
   const char * ptrToAutoAcceptIndicator() const { return buf + fieldAutoAcceptIndicator.offset; }
   private: FieldAutoAcceptIndicator fieldAutoAcceptIndicator;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetNumDaysInterest() const { return fieldNumDaysInterest.offset >= 0; }
   FieldNumDaysInterest::ValueType getNumDaysInterest() const { return fieldNumDaysInterest.getValue( buf ); }
   const char * ptrToNumDaysInterest() const { return buf + fieldNumDaysInterest.offset; }
   private: FieldNumDaysInterest fieldNumDaysInterest;

   public:
   bool isSetAccruedInterestRate() const { return fieldAccruedInterestRate.offset >= 0; }
   FieldAccruedInterestRate::ValueType getAccruedInterestRate() const { return fieldAccruedInterestRate.getValue( buf ); }
   const char * ptrToAccruedInterestRate() const { return buf + fieldAccruedInterestRate.offset; }
   private: FieldAccruedInterestRate fieldAccruedInterestRate;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetTotalAccruedInterestAmt() const { return fieldTotalAccruedInterestAmt.offset >= 0; }
   FieldTotalAccruedInterestAmt::ValueType getTotalAccruedInterestAmt() const { return fieldTotalAccruedInterestAmt.getValue( buf ); }
   const char * ptrToTotalAccruedInterestAmt() const { return buf + fieldTotalAccruedInterestAmt.offset; }
   private: FieldTotalAccruedInterestAmt fieldTotalAccruedInterestAmt;

   public:
   bool isSetInterestAtMaturity() const { return fieldInterestAtMaturity.offset >= 0; }
   FieldInterestAtMaturity::ValueType getInterestAtMaturity() const { return fieldInterestAtMaturity.getValue( buf ); }
   const char * ptrToInterestAtMaturity() const { return buf + fieldInterestAtMaturity.offset; }
   private: FieldInterestAtMaturity fieldInterestAtMaturity;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetLegalConfirm() const { return fieldLegalConfirm.offset >= 0; }
   FieldLegalConfirm::ValueType getLegalConfirm() const { return fieldLegalConfirm.getValue( buf ); }
   const char * ptrToLegalConfirm() const { return buf + fieldLegalConfirm.offset; }
   private: FieldLegalConfirm fieldLegalConfirm;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetTotNoAllocs() const { return fieldTotNoAllocs.offset >= 0; }
   FieldTotNoAllocs::ValueType getTotNoAllocs() const { return fieldTotNoAllocs.getValue( buf ); }
   const char * ptrToTotNoAllocs() const { return buf + fieldTotNoAllocs.offset; }
   private: FieldTotNoAllocs fieldTotNoAllocs;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageListCancelRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageListExecute: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetClientBidID() const { return fieldClientBidID.offset >= 0; }
   FieldClientBidID::ValueType getClientBidID() const { return fieldClientBidID.getValue( buf ); }
   const char * ptrToClientBidID() const { return buf + fieldClientBidID.offset; }
   private: FieldClientBidID fieldClientBidID;

   public:
   bool isSetBidID() const { return fieldBidID.offset >= 0; }
   FieldBidID::ValueType getBidID() const { return fieldBidID.getValue( buf ); }
   const char * ptrToBidID() const { return buf + fieldBidID.offset; }
   private: FieldBidID fieldBidID;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageListStatusRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageListStatus: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetListStatusType() const { return fieldListStatusType.offset >= 0; }
   FieldListStatusType::ValueType getListStatusType() const { return fieldListStatusType.getValue( buf ); }
   const char * ptrToListStatusType() const { return buf + fieldListStatusType.offset; }
   private: FieldListStatusType fieldListStatusType;

   public:
   bool isSetNoRpts() const { return fieldNoRpts.offset >= 0; }
   FieldNoRpts::ValueType getNoRpts() const { return fieldNoRpts.getValue( buf ); }
   const char * ptrToNoRpts() const { return buf + fieldNoRpts.offset; }
   private: FieldNoRpts fieldNoRpts;

   public:
   bool isSetListOrderStatus() const { return fieldListOrderStatus.offset >= 0; }
   FieldListOrderStatus::ValueType getListOrderStatus() const { return fieldListOrderStatus.getValue( buf ); }
   const char * ptrToListOrderStatus() const { return buf + fieldListOrderStatus.offset; }
   private: FieldListOrderStatus fieldListOrderStatus;

   public:
   bool isSetRptSeq() const { return fieldRptSeq.offset >= 0; }
   FieldRptSeq::ValueType getRptSeq() const { return fieldRptSeq.getValue( buf ); }
   const char * ptrToRptSeq() const { return buf + fieldRptSeq.offset; }
   private: FieldRptSeq fieldRptSeq;

   public:
   bool isSetListStatusText() const { return fieldListStatusText.offset >= 0; }
   FieldListStatusText::ValueType getListStatusText() const { return fieldListStatusText.getValue( buf ); }
   const char * ptrToListStatusText() const { return buf + fieldListStatusText.offset; }
   private: FieldListStatusText fieldListStatusText;

   public:
   bool isSetEncodedListStatusTextLen() const { return fieldEncodedListStatusTextLen.offset >= 0; }
   FieldEncodedListStatusTextLen::ValueType getEncodedListStatusTextLen() const { return fieldEncodedListStatusTextLen.getValue( buf ); }
   const char * ptrToEncodedListStatusTextLen() const { return buf + fieldEncodedListStatusTextLen.offset; }
   private: FieldEncodedListStatusTextLen fieldEncodedListStatusTextLen;

   public:
   bool isSetEncodedListStatusText() const { return fieldEncodedListStatusText.offset >= 0; }
   FieldEncodedListStatusText::ValueType getEncodedListStatusText() const { return fieldEncodedListStatusText.getValue( buf ); }
   const char * ptrToEncodedListStatusText() const { return buf + fieldEncodedListStatusText.offset; }
   private: FieldEncodedListStatusText fieldEncodedListStatusText;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetTotNoOrders() const { return fieldTotNoOrders.offset >= 0; }
   FieldTotNoOrders::ValueType getTotNoOrders() const { return fieldTotNoOrders.getValue( buf ); }
   const char * ptrToTotNoOrders() const { return buf + fieldTotNoOrders.offset; }
   private: FieldTotNoOrders fieldTotNoOrders;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoOrders() const { return fieldNoOrders.offset >= 0; }
   FieldNoOrders::ValueType getNoOrders() const { return fieldNoOrders.getValue( buf ); }
   const char * ptrToNoOrders() const { return buf + fieldNoOrders.offset; }
   private: FieldNoOrders fieldNoOrders;
  
   public:
   std::size_t getGroupCountOrders() const { return groupsOrders.size(); } 
   const GroupOrders & getGroupOrders( std::size_t idx ) const { return groupsOrders[ idx ]; } 
   private: GroupOrders::Array groupsOrders{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageAllocationInstructionAck: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetSecondaryAllocID() const { return fieldSecondaryAllocID.offset >= 0; }
   FieldSecondaryAllocID::ValueType getSecondaryAllocID() const { return fieldSecondaryAllocID.getValue( buf ); }
   const char * ptrToSecondaryAllocID() const { return buf + fieldSecondaryAllocID.offset; }
   private: FieldSecondaryAllocID fieldSecondaryAllocID;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetAllocStatus() const { return fieldAllocStatus.offset >= 0; }
   FieldAllocStatus::ValueType getAllocStatus() const { return fieldAllocStatus.getValue( buf ); }
   const char * ptrToAllocStatus() const { return buf + fieldAllocStatus.offset; }
   private: FieldAllocStatus fieldAllocStatus;

   public:
   bool isSetAllocRejCode() const { return fieldAllocRejCode.offset >= 0; }
   FieldAllocRejCode::ValueType getAllocRejCode() const { return fieldAllocRejCode.getValue( buf ); }
   const char * ptrToAllocRejCode() const { return buf + fieldAllocRejCode.offset; }
   private: FieldAllocRejCode fieldAllocRejCode;

   public:
   bool isSetAllocType() const { return fieldAllocType.offset >= 0; }
   FieldAllocType::ValueType getAllocType() const { return fieldAllocType.getValue( buf ); }
   const char * ptrToAllocType() const { return buf + fieldAllocType.offset; }
   private: FieldAllocType fieldAllocType;

   public:
   bool isSetAllocIntermedReqType() const { return fieldAllocIntermedReqType.offset >= 0; }
   FieldAllocIntermedReqType::ValueType getAllocIntermedReqType() const { return fieldAllocIntermedReqType.getValue( buf ); }
   const char * ptrToAllocIntermedReqType() const { return buf + fieldAllocIntermedReqType.offset; }
   private: FieldAllocIntermedReqType fieldAllocIntermedReqType;

   public:
   bool isSetMatchStatus() const { return fieldMatchStatus.offset >= 0; }
   FieldMatchStatus::ValueType getMatchStatus() const { return fieldMatchStatus.getValue( buf ); }
   const char * ptrToMatchStatus() const { return buf + fieldMatchStatus.offset; }
   private: FieldMatchStatus fieldMatchStatus;

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageDontKnowTrade: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetExecID() const { return fieldExecID.offset >= 0; }
   FieldExecID::ValueType getExecID() const { return fieldExecID.getValue( buf ); }
   const char * ptrToExecID() const { return buf + fieldExecID.offset; }
   private: FieldExecID fieldExecID;

   public:
   bool isSetDKReason() const { return fieldDKReason.offset >= 0; }
   FieldDKReason::ValueType getDKReason() const { return fieldDKReason.getValue( buf ); }
   const char * ptrToDKReason() const { return buf + fieldDKReason.offset; }
   private: FieldDKReason fieldDKReason;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetLastQty() const { return fieldLastQty.offset >= 0; }
   FieldLastQty::ValueType getLastQty() const { return fieldLastQty.getValue( buf ); }
   const char * ptrToLastQty() const { return buf + fieldLastQty.offset; }
   private: FieldLastQty fieldLastQty;

   public:
   bool isSetLastPx() const { return fieldLastPx.offset >= 0; }
   FieldLastPx::ValueType getLastPx() const { return fieldLastPx.getValue( buf ); }
   const char * ptrToLastPx() const { return buf + fieldLastPx.offset; }
   private: FieldLastPx fieldLastPx;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageQuoteRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteReqID() const { return fieldQuoteReqID.offset >= 0; }
   FieldQuoteReqID::ValueType getQuoteReqID() const { return fieldQuoteReqID.getValue( buf ); }
   const char * ptrToQuoteReqID() const { return buf + fieldQuoteReqID.offset; }
   private: FieldQuoteReqID fieldQuoteReqID;

   public:
   bool isSetRFQReqID() const { return fieldRFQReqID.offset >= 0; }
   FieldRFQReqID::ValueType getRFQReqID() const { return fieldRFQReqID.getValue( buf ); }
   const char * ptrToRFQReqID() const { return buf + fieldRFQReqID.offset; }
   private: FieldRFQReqID fieldRFQReqID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetNoRelatedSym() const { return fieldNoRelatedSym.offset >= 0; }
   FieldNoRelatedSym::ValueType getNoRelatedSym() const { return fieldNoRelatedSym.getValue( buf ); }
   const char * ptrToNoRelatedSym() const { return buf + fieldNoRelatedSym.offset; }
   private: FieldNoRelatedSym fieldNoRelatedSym;
  
   public:
   std::size_t getGroupCountRelatedSym() const { return groupsRelatedSym.size(); } 
   const GroupRelatedSym & getGroupRelatedSym( std::size_t idx ) const { return groupsRelatedSym[ idx ]; } 
   private: GroupRelatedSym::Array groupsRelatedSym{ 10 };

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageQuote: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteReqID() const { return fieldQuoteReqID.offset >= 0; }
   FieldQuoteReqID::ValueType getQuoteReqID() const { return fieldQuoteReqID.getValue( buf ); }
   const char * ptrToQuoteReqID() const { return buf + fieldQuoteReqID.offset; }
   private: FieldQuoteReqID fieldQuoteReqID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetQuoteRespID() const { return fieldQuoteRespID.offset >= 0; }
   FieldQuoteRespID::ValueType getQuoteRespID() const { return fieldQuoteRespID.getValue( buf ); }
   const char * ptrToQuoteRespID() const { return buf + fieldQuoteRespID.offset; }
   private: FieldQuoteRespID fieldQuoteRespID;

   public:
   bool isSetQuoteType() const { return fieldQuoteType.offset >= 0; }
   FieldQuoteType::ValueType getQuoteType() const { return fieldQuoteType.getValue( buf ); }
   const char * ptrToQuoteType() const { return buf + fieldQuoteType.offset; }
   private: FieldQuoteType fieldQuoteType;

   public:
   bool isSetNoQuoteQualifiers() const { return fieldNoQuoteQualifiers.offset >= 0; }
   FieldNoQuoteQualifiers::ValueType getNoQuoteQualifiers() const { return fieldNoQuoteQualifiers.getValue( buf ); }
   const char * ptrToNoQuoteQualifiers() const { return buf + fieldNoQuoteQualifiers.offset; }
   private: FieldNoQuoteQualifiers fieldNoQuoteQualifiers;
  
   public:
   std::size_t getGroupCountQuoteQualifiers() const { return groupsQuoteQualifiers.size(); } 
   const GroupQuoteQualifiers & getGroupQuoteQualifiers( std::size_t idx ) const { return groupsQuoteQualifiers[ idx ]; } 
   private: GroupQuoteQualifiers::Array groupsQuoteQualifiers{ 10 };

   public:
   bool isSetQuoteResponseLevel() const { return fieldQuoteResponseLevel.offset >= 0; }
   FieldQuoteResponseLevel::ValueType getQuoteResponseLevel() const { return fieldQuoteResponseLevel.getValue( buf ); }
   const char * ptrToQuoteResponseLevel() const { return buf + fieldQuoteResponseLevel.offset; }
   private: FieldQuoteResponseLevel fieldQuoteResponseLevel;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetSettlDate2() const { return fieldSettlDate2.offset >= 0; }
   FieldSettlDate2::ValueType getSettlDate2() const { return fieldSettlDate2.getValue( buf ); }
   const char * ptrToSettlDate2() const { return buf + fieldSettlDate2.offset; }
   private: FieldSettlDate2 fieldSettlDate2;

   public:
   bool isSetOrderQty2() const { return fieldOrderQty2.offset >= 0; }
   FieldOrderQty2::ValueType getOrderQty2() const { return fieldOrderQty2.getValue( buf ); }
   const char * ptrToOrderQty2() const { return buf + fieldOrderQty2.offset; }
   private: FieldOrderQty2 fieldOrderQty2;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetBidPx() const { return fieldBidPx.offset >= 0; }
   FieldBidPx::ValueType getBidPx() const { return fieldBidPx.getValue( buf ); }
   const char * ptrToBidPx() const { return buf + fieldBidPx.offset; }
   private: FieldBidPx fieldBidPx;

   public:
   bool isSetOfferPx() const { return fieldOfferPx.offset >= 0; }
   FieldOfferPx::ValueType getOfferPx() const { return fieldOfferPx.getValue( buf ); }
   const char * ptrToOfferPx() const { return buf + fieldOfferPx.offset; }
   private: FieldOfferPx fieldOfferPx;

   public:
   bool isSetMktBidPx() const { return fieldMktBidPx.offset >= 0; }
   FieldMktBidPx::ValueType getMktBidPx() const { return fieldMktBidPx.getValue( buf ); }
   const char * ptrToMktBidPx() const { return buf + fieldMktBidPx.offset; }
   private: FieldMktBidPx fieldMktBidPx;

   public:
   bool isSetMktOfferPx() const { return fieldMktOfferPx.offset >= 0; }
   FieldMktOfferPx::ValueType getMktOfferPx() const { return fieldMktOfferPx.getValue( buf ); }
   const char * ptrToMktOfferPx() const { return buf + fieldMktOfferPx.offset; }
   private: FieldMktOfferPx fieldMktOfferPx;

   public:
   bool isSetMinBidSize() const { return fieldMinBidSize.offset >= 0; }
   FieldMinBidSize::ValueType getMinBidSize() const { return fieldMinBidSize.getValue( buf ); }
   const char * ptrToMinBidSize() const { return buf + fieldMinBidSize.offset; }
   private: FieldMinBidSize fieldMinBidSize;

   public:
   bool isSetBidSize() const { return fieldBidSize.offset >= 0; }
   FieldBidSize::ValueType getBidSize() const { return fieldBidSize.getValue( buf ); }
   const char * ptrToBidSize() const { return buf + fieldBidSize.offset; }
   private: FieldBidSize fieldBidSize;

   public:
   bool isSetMinOfferSize() const { return fieldMinOfferSize.offset >= 0; }
   FieldMinOfferSize::ValueType getMinOfferSize() const { return fieldMinOfferSize.getValue( buf ); }
   const char * ptrToMinOfferSize() const { return buf + fieldMinOfferSize.offset; }
   private: FieldMinOfferSize fieldMinOfferSize;

   public:
   bool isSetOfferSize() const { return fieldOfferSize.offset >= 0; }
   FieldOfferSize::ValueType getOfferSize() const { return fieldOfferSize.getValue( buf ); }
   const char * ptrToOfferSize() const { return buf + fieldOfferSize.offset; }
   private: FieldOfferSize fieldOfferSize;

   public:
   bool isSetValidUntilTime() const { return fieldValidUntilTime.offset >= 0; }
   FieldValidUntilTime::ValueType getValidUntilTime() const { return fieldValidUntilTime.getValue( buf ); }
   const char * ptrToValidUntilTime() const { return buf + fieldValidUntilTime.offset; }
   private: FieldValidUntilTime fieldValidUntilTime;

   public:
   bool isSetBidSpotRate() const { return fieldBidSpotRate.offset >= 0; }
   FieldBidSpotRate::ValueType getBidSpotRate() const { return fieldBidSpotRate.getValue( buf ); }
   const char * ptrToBidSpotRate() const { return buf + fieldBidSpotRate.offset; }
   private: FieldBidSpotRate fieldBidSpotRate;

   public:
   bool isSetOfferSpotRate() const { return fieldOfferSpotRate.offset >= 0; }
   FieldOfferSpotRate::ValueType getOfferSpotRate() const { return fieldOfferSpotRate.getValue( buf ); }
   const char * ptrToOfferSpotRate() const { return buf + fieldOfferSpotRate.offset; }
   private: FieldOfferSpotRate fieldOfferSpotRate;

   public:
   bool isSetBidForwardPoints() const { return fieldBidForwardPoints.offset >= 0; }
   FieldBidForwardPoints::ValueType getBidForwardPoints() const { return fieldBidForwardPoints.getValue( buf ); }
   const char * ptrToBidForwardPoints() const { return buf + fieldBidForwardPoints.offset; }
   private: FieldBidForwardPoints fieldBidForwardPoints;

   public:
   bool isSetOfferForwardPoints() const { return fieldOfferForwardPoints.offset >= 0; }
   FieldOfferForwardPoints::ValueType getOfferForwardPoints() const { return fieldOfferForwardPoints.getValue( buf ); }
   const char * ptrToOfferForwardPoints() const { return buf + fieldOfferForwardPoints.offset; }
   private: FieldOfferForwardPoints fieldOfferForwardPoints;

   public:
   bool isSetMidPx() const { return fieldMidPx.offset >= 0; }
   FieldMidPx::ValueType getMidPx() const { return fieldMidPx.getValue( buf ); }
   const char * ptrToMidPx() const { return buf + fieldMidPx.offset; }
   private: FieldMidPx fieldMidPx;

   public:
   bool isSetBidYield() const { return fieldBidYield.offset >= 0; }
   FieldBidYield::ValueType getBidYield() const { return fieldBidYield.getValue( buf ); }
   const char * ptrToBidYield() const { return buf + fieldBidYield.offset; }
   private: FieldBidYield fieldBidYield;

   public:
   bool isSetMidYield() const { return fieldMidYield.offset >= 0; }
   FieldMidYield::ValueType getMidYield() const { return fieldMidYield.getValue( buf ); }
   const char * ptrToMidYield() const { return buf + fieldMidYield.offset; }
   private: FieldMidYield fieldMidYield;

   public:
   bool isSetOfferYield() const { return fieldOfferYield.offset >= 0; }
   FieldOfferYield::ValueType getOfferYield() const { return fieldOfferYield.getValue( buf ); }
   const char * ptrToOfferYield() const { return buf + fieldOfferYield.offset; }
   private: FieldOfferYield fieldOfferYield;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetBidForwardPoints2() const { return fieldBidForwardPoints2.offset >= 0; }
   FieldBidForwardPoints2::ValueType getBidForwardPoints2() const { return fieldBidForwardPoints2.getValue( buf ); }
   const char * ptrToBidForwardPoints2() const { return buf + fieldBidForwardPoints2.offset; }
   private: FieldBidForwardPoints2 fieldBidForwardPoints2;

   public:
   bool isSetOfferForwardPoints2() const { return fieldOfferForwardPoints2.offset >= 0; }
   FieldOfferForwardPoints2::ValueType getOfferForwardPoints2() const { return fieldOfferForwardPoints2.getValue( buf ); }
   const char * ptrToOfferForwardPoints2() const { return buf + fieldOfferForwardPoints2.offset; }
   private: FieldOfferForwardPoints2 fieldOfferForwardPoints2;

   public:
   bool isSetSettlCurrBidFxRate() const { return fieldSettlCurrBidFxRate.offset >= 0; }
   FieldSettlCurrBidFxRate::ValueType getSettlCurrBidFxRate() const { return fieldSettlCurrBidFxRate.getValue( buf ); }
   const char * ptrToSettlCurrBidFxRate() const { return buf + fieldSettlCurrBidFxRate.offset; }
   private: FieldSettlCurrBidFxRate fieldSettlCurrBidFxRate;

   public:
   bool isSetSettlCurrOfferFxRate() const { return fieldSettlCurrOfferFxRate.offset >= 0; }
   FieldSettlCurrOfferFxRate::ValueType getSettlCurrOfferFxRate() const { return fieldSettlCurrOfferFxRate.getValue( buf ); }
   const char * ptrToSettlCurrOfferFxRate() const { return buf + fieldSettlCurrOfferFxRate.offset; }
   private: FieldSettlCurrOfferFxRate fieldSettlCurrOfferFxRate;

   public:
   bool isSetSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.offset >= 0; }
   FieldSettlCurrFxRateCalc::ValueType getSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.getValue( buf ); }
   const char * ptrToSettlCurrFxRateCalc() const { return buf + fieldSettlCurrFxRateCalc.offset; }
   private: FieldSettlCurrFxRateCalc fieldSettlCurrFxRateCalc;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSettlementInstructions: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSettlInstMsgID() const { return fieldSettlInstMsgID.offset >= 0; }
   FieldSettlInstMsgID::ValueType getSettlInstMsgID() const { return fieldSettlInstMsgID.getValue( buf ); }
   const char * ptrToSettlInstMsgID() const { return buf + fieldSettlInstMsgID.offset; }
   private: FieldSettlInstMsgID fieldSettlInstMsgID;

   public:
   bool isSetSettlInstReqID() const { return fieldSettlInstReqID.offset >= 0; }
   FieldSettlInstReqID::ValueType getSettlInstReqID() const { return fieldSettlInstReqID.getValue( buf ); }
   const char * ptrToSettlInstReqID() const { return buf + fieldSettlInstReqID.offset; }
   private: FieldSettlInstReqID fieldSettlInstReqID;

   public:
   bool isSetSettlInstMode() const { return fieldSettlInstMode.offset >= 0; }
   FieldSettlInstMode::ValueType getSettlInstMode() const { return fieldSettlInstMode.getValue( buf ); }
   const char * ptrToSettlInstMode() const { return buf + fieldSettlInstMode.offset; }
   private: FieldSettlInstMode fieldSettlInstMode;

   public:
   bool isSetSettlInstReqRejCode() const { return fieldSettlInstReqRejCode.offset >= 0; }
   FieldSettlInstReqRejCode::ValueType getSettlInstReqRejCode() const { return fieldSettlInstReqRejCode.getValue( buf ); }
   const char * ptrToSettlInstReqRejCode() const { return buf + fieldSettlInstReqRejCode.offset; }
   private: FieldSettlInstReqRejCode fieldSettlInstReqRejCode;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoSettlInst() const { return fieldNoSettlInst.offset >= 0; }
   FieldNoSettlInst::ValueType getNoSettlInst() const { return fieldNoSettlInst.getValue( buf ); }
   const char * ptrToNoSettlInst() const { return buf + fieldNoSettlInst.offset; }
   private: FieldNoSettlInst fieldNoSettlInst;
  
   public:
   std::size_t getGroupCountSettlInst() const { return groupsSettlInst.size(); } 
   const GroupSettlInst & getGroupSettlInst( std::size_t idx ) const { return groupsSettlInst[ idx ]; } 
   private: GroupSettlInst::Array groupsSettlInst{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageMarketDataRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetMDReqID() const { return fieldMDReqID.offset >= 0; }
   FieldMDReqID::ValueType getMDReqID() const { return fieldMDReqID.getValue( buf ); }
   const char * ptrToMDReqID() const { return buf + fieldMDReqID.offset; }
   private: FieldMDReqID fieldMDReqID;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetMarketDepth() const { return fieldMarketDepth.offset >= 0; }
   FieldMarketDepth::ValueType getMarketDepth() const { return fieldMarketDepth.getValue( buf ); }
   const char * ptrToMarketDepth() const { return buf + fieldMarketDepth.offset; }
   private: FieldMarketDepth fieldMarketDepth;

   public:
   bool isSetMDUpdateType() const { return fieldMDUpdateType.offset >= 0; }
   FieldMDUpdateType::ValueType getMDUpdateType() const { return fieldMDUpdateType.getValue( buf ); }
   const char * ptrToMDUpdateType() const { return buf + fieldMDUpdateType.offset; }
   private: FieldMDUpdateType fieldMDUpdateType;

   public:
   bool isSetAggregatedBook() const { return fieldAggregatedBook.offset >= 0; }
   FieldAggregatedBook::ValueType getAggregatedBook() const { return fieldAggregatedBook.getValue( buf ); }
   const char * ptrToAggregatedBook() const { return buf + fieldAggregatedBook.offset; }
   private: FieldAggregatedBook fieldAggregatedBook;

   public:
   bool isSetOpenCloseSettlFlag() const { return fieldOpenCloseSettlFlag.offset >= 0; }
   FieldOpenCloseSettlFlag::ValueType getOpenCloseSettlFlag() const { return fieldOpenCloseSettlFlag.getValue( buf ); }
   const char * ptrToOpenCloseSettlFlag() const { return buf + fieldOpenCloseSettlFlag.offset; }
   private: FieldOpenCloseSettlFlag fieldOpenCloseSettlFlag;

   public:
   bool isSetScope() const { return fieldScope.offset >= 0; }
   FieldScope::ValueType getScope() const { return fieldScope.getValue( buf ); }
   const char * ptrToScope() const { return buf + fieldScope.offset; }
   private: FieldScope fieldScope;

   public:
   bool isSetMDImplicitDelete() const { return fieldMDImplicitDelete.offset >= 0; }
   FieldMDImplicitDelete::ValueType getMDImplicitDelete() const { return fieldMDImplicitDelete.getValue( buf ); }
   const char * ptrToMDImplicitDelete() const { return buf + fieldMDImplicitDelete.offset; }
   private: FieldMDImplicitDelete fieldMDImplicitDelete;

   public:
   bool isSetNoMDEntryTypes() const { return fieldNoMDEntryTypes.offset >= 0; }
   FieldNoMDEntryTypes::ValueType getNoMDEntryTypes() const { return fieldNoMDEntryTypes.getValue( buf ); }
   const char * ptrToNoMDEntryTypes() const { return buf + fieldNoMDEntryTypes.offset; }
   private: FieldNoMDEntryTypes fieldNoMDEntryTypes;
  
   public:
   std::size_t getGroupCountMDEntryTypes() const { return groupsMDEntryTypes.size(); } 
   const GroupMDEntryTypes & getGroupMDEntryTypes( std::size_t idx ) const { return groupsMDEntryTypes[ idx ]; } 
   private: GroupMDEntryTypes::Array groupsMDEntryTypes{ 10 };

   public:
   bool isSetNoRelatedSym() const { return fieldNoRelatedSym.offset >= 0; }
   FieldNoRelatedSym::ValueType getNoRelatedSym() const { return fieldNoRelatedSym.getValue( buf ); }
   const char * ptrToNoRelatedSym() const { return buf + fieldNoRelatedSym.offset; }
   private: FieldNoRelatedSym fieldNoRelatedSym;
  
   public:
   std::size_t getGroupCountRelatedSym() const { return groupsRelatedSym.size(); } 
   const GroupRelatedSym & getGroupRelatedSym( std::size_t idx ) const { return groupsRelatedSym[ idx ]; } 
   private: GroupRelatedSym::Array groupsRelatedSym{ 10 };

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetApplQueueAction() const { return fieldApplQueueAction.offset >= 0; }
   FieldApplQueueAction::ValueType getApplQueueAction() const { return fieldApplQueueAction.getValue( buf ); }
   const char * ptrToApplQueueAction() const { return buf + fieldApplQueueAction.offset; }
   private: FieldApplQueueAction fieldApplQueueAction;

   public:
   bool isSetApplQueueMax() const { return fieldApplQueueMax.offset >= 0; }
   FieldApplQueueMax::ValueType getApplQueueMax() const { return fieldApplQueueMax.getValue( buf ); }
   const char * ptrToApplQueueMax() const { return buf + fieldApplQueueMax.offset; }
   private: FieldApplQueueMax fieldApplQueueMax;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageMarketDataSnapshotFullRefresh: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetMDReqID() const { return fieldMDReqID.offset >= 0; }
   FieldMDReqID::ValueType getMDReqID() const { return fieldMDReqID.getValue( buf ); }
   const char * ptrToMDReqID() const { return buf + fieldMDReqID.offset; }
   private: FieldMDReqID fieldMDReqID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetFinancialStatus() const { return fieldFinancialStatus.offset >= 0; }
   FieldFinancialStatus::ValueType getFinancialStatus() const { return fieldFinancialStatus.getValue( buf ); }
   const char * ptrToFinancialStatus() const { return buf + fieldFinancialStatus.offset; }
   private: FieldFinancialStatus fieldFinancialStatus;

   public:
   bool isSetCorporateAction() const { return fieldCorporateAction.offset >= 0; }
   FieldCorporateAction::ValueType getCorporateAction() const { return fieldCorporateAction.getValue( buf ); }
   const char * ptrToCorporateAction() const { return buf + fieldCorporateAction.offset; }
   private: FieldCorporateAction fieldCorporateAction;

   public:
   bool isSetNetChgPrevDay() const { return fieldNetChgPrevDay.offset >= 0; }
   FieldNetChgPrevDay::ValueType getNetChgPrevDay() const { return fieldNetChgPrevDay.getValue( buf ); }
   const char * ptrToNetChgPrevDay() const { return buf + fieldNetChgPrevDay.offset; }
   private: FieldNetChgPrevDay fieldNetChgPrevDay;

   public:
   bool isSetNoMDEntries() const { return fieldNoMDEntries.offset >= 0; }
   FieldNoMDEntries::ValueType getNoMDEntries() const { return fieldNoMDEntries.getValue( buf ); }
   const char * ptrToNoMDEntries() const { return buf + fieldNoMDEntries.offset; }
   private: FieldNoMDEntries fieldNoMDEntries;
  
   public:
   std::size_t getGroupCountMDEntries() const { return groupsMDEntries.size(); } 
   const GroupMDEntries & getGroupMDEntries( std::size_t idx ) const { return groupsMDEntries[ idx ]; } 
   private: GroupMDEntries::Array groupsMDEntries{ 10 };

   public:
   bool isSetApplQueueDepth() const { return fieldApplQueueDepth.offset >= 0; }
   FieldApplQueueDepth::ValueType getApplQueueDepth() const { return fieldApplQueueDepth.getValue( buf ); }
   const char * ptrToApplQueueDepth() const { return buf + fieldApplQueueDepth.offset; }
   private: FieldApplQueueDepth fieldApplQueueDepth;

   public:
   bool isSetApplQueueResolution() const { return fieldApplQueueResolution.offset >= 0; }
   FieldApplQueueResolution::ValueType getApplQueueResolution() const { return fieldApplQueueResolution.getValue( buf ); }
   const char * ptrToApplQueueResolution() const { return buf + fieldApplQueueResolution.offset; }
   private: FieldApplQueueResolution fieldApplQueueResolution;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageMarketDataIncrementalRefresh: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetMDReqID() const { return fieldMDReqID.offset >= 0; }
   FieldMDReqID::ValueType getMDReqID() const { return fieldMDReqID.getValue( buf ); }
   const char * ptrToMDReqID() const { return buf + fieldMDReqID.offset; }
   private: FieldMDReqID fieldMDReqID;

   public:
   bool isSetNoMDEntries() const { return fieldNoMDEntries.offset >= 0; }
   FieldNoMDEntries::ValueType getNoMDEntries() const { return fieldNoMDEntries.getValue( buf ); }
   const char * ptrToNoMDEntries() const { return buf + fieldNoMDEntries.offset; }
   private: FieldNoMDEntries fieldNoMDEntries;
  
   public:
   std::size_t getGroupCountMDEntries() const { return groupsMDEntries.size(); } 
   const GroupMDEntries & getGroupMDEntries( std::size_t idx ) const { return groupsMDEntries[ idx ]; } 
   private: GroupMDEntries::Array groupsMDEntries{ 10 };

   public:
   bool isSetApplQueueDepth() const { return fieldApplQueueDepth.offset >= 0; }
   FieldApplQueueDepth::ValueType getApplQueueDepth() const { return fieldApplQueueDepth.getValue( buf ); }
   const char * ptrToApplQueueDepth() const { return buf + fieldApplQueueDepth.offset; }
   private: FieldApplQueueDepth fieldApplQueueDepth;

   public:
   bool isSetApplQueueResolution() const { return fieldApplQueueResolution.offset >= 0; }
   FieldApplQueueResolution::ValueType getApplQueueResolution() const { return fieldApplQueueResolution.getValue( buf ); }
   const char * ptrToApplQueueResolution() const { return buf + fieldApplQueueResolution.offset; }
   private: FieldApplQueueResolution fieldApplQueueResolution;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageMarketDataRequestReject: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetMDReqID() const { return fieldMDReqID.offset >= 0; }
   FieldMDReqID::ValueType getMDReqID() const { return fieldMDReqID.getValue( buf ); }
   const char * ptrToMDReqID() const { return buf + fieldMDReqID.offset; }
   private: FieldMDReqID fieldMDReqID;

   public:
   bool isSetMDReqRejReason() const { return fieldMDReqRejReason.offset >= 0; }
   FieldMDReqRejReason::ValueType getMDReqRejReason() const { return fieldMDReqRejReason.getValue( buf ); }
   const char * ptrToMDReqRejReason() const { return buf + fieldMDReqRejReason.offset; }
   private: FieldMDReqRejReason fieldMDReqRejReason;

   public:
   bool isSetNoAltMDSource() const { return fieldNoAltMDSource.offset >= 0; }
   FieldNoAltMDSource::ValueType getNoAltMDSource() const { return fieldNoAltMDSource.getValue( buf ); }
   const char * ptrToNoAltMDSource() const { return buf + fieldNoAltMDSource.offset; }
   private: FieldNoAltMDSource fieldNoAltMDSource;
  
   public:
   std::size_t getGroupCountAltMDSource() const { return groupsAltMDSource.size(); } 
   const GroupAltMDSource & getGroupAltMDSource( std::size_t idx ) const { return groupsAltMDSource[ idx ]; } 
   private: GroupAltMDSource::Array groupsAltMDSource{ 10 };

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageQuoteCancel: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteReqID() const { return fieldQuoteReqID.offset >= 0; }
   FieldQuoteReqID::ValueType getQuoteReqID() const { return fieldQuoteReqID.getValue( buf ); }
   const char * ptrToQuoteReqID() const { return buf + fieldQuoteReqID.offset; }
   private: FieldQuoteReqID fieldQuoteReqID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetQuoteCancelType() const { return fieldQuoteCancelType.offset >= 0; }
   FieldQuoteCancelType::ValueType getQuoteCancelType() const { return fieldQuoteCancelType.getValue( buf ); }
   const char * ptrToQuoteCancelType() const { return buf + fieldQuoteCancelType.offset; }
   private: FieldQuoteCancelType fieldQuoteCancelType;

   public:
   bool isSetQuoteResponseLevel() const { return fieldQuoteResponseLevel.offset >= 0; }
   FieldQuoteResponseLevel::ValueType getQuoteResponseLevel() const { return fieldQuoteResponseLevel.getValue( buf ); }
   const char * ptrToQuoteResponseLevel() const { return buf + fieldQuoteResponseLevel.offset; }
   private: FieldQuoteResponseLevel fieldQuoteResponseLevel;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetNoQuoteEntries() const { return fieldNoQuoteEntries.offset >= 0; }
   FieldNoQuoteEntries::ValueType getNoQuoteEntries() const { return fieldNoQuoteEntries.getValue( buf ); }
   const char * ptrToNoQuoteEntries() const { return buf + fieldNoQuoteEntries.offset; }
   private: FieldNoQuoteEntries fieldNoQuoteEntries;
  
   public:
   std::size_t getGroupCountQuoteEntries() const { return groupsQuoteEntries.size(); } 
   const GroupQuoteEntries & getGroupQuoteEntries( std::size_t idx ) const { return groupsQuoteEntries[ idx ]; } 
   private: GroupQuoteEntries::Array groupsQuoteEntries{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageQuoteStatusRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteStatusReqID() const { return fieldQuoteStatusReqID.offset >= 0; }
   FieldQuoteStatusReqID::ValueType getQuoteStatusReqID() const { return fieldQuoteStatusReqID.getValue( buf ); }
   const char * ptrToQuoteStatusReqID() const { return buf + fieldQuoteStatusReqID.offset; }
   private: FieldQuoteStatusReqID fieldQuoteStatusReqID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageMassQuoteAcknowledgement: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteReqID() const { return fieldQuoteReqID.offset >= 0; }
   FieldQuoteReqID::ValueType getQuoteReqID() const { return fieldQuoteReqID.getValue( buf ); }
   const char * ptrToQuoteReqID() const { return buf + fieldQuoteReqID.offset; }
   private: FieldQuoteReqID fieldQuoteReqID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetQuoteStatus() const { return fieldQuoteStatus.offset >= 0; }
   FieldQuoteStatus::ValueType getQuoteStatus() const { return fieldQuoteStatus.getValue( buf ); }
   const char * ptrToQuoteStatus() const { return buf + fieldQuoteStatus.offset; }
   private: FieldQuoteStatus fieldQuoteStatus;

   public:
   bool isSetQuoteRejectReason() const { return fieldQuoteRejectReason.offset >= 0; }
   FieldQuoteRejectReason::ValueType getQuoteRejectReason() const { return fieldQuoteRejectReason.getValue( buf ); }
   const char * ptrToQuoteRejectReason() const { return buf + fieldQuoteRejectReason.offset; }
   private: FieldQuoteRejectReason fieldQuoteRejectReason;

   public:
   bool isSetQuoteResponseLevel() const { return fieldQuoteResponseLevel.offset >= 0; }
   FieldQuoteResponseLevel::ValueType getQuoteResponseLevel() const { return fieldQuoteResponseLevel.getValue( buf ); }
   const char * ptrToQuoteResponseLevel() const { return buf + fieldQuoteResponseLevel.offset; }
   private: FieldQuoteResponseLevel fieldQuoteResponseLevel;

   public:
   bool isSetQuoteType() const { return fieldQuoteType.offset >= 0; }
   FieldQuoteType::ValueType getQuoteType() const { return fieldQuoteType.getValue( buf ); }
   const char * ptrToQuoteType() const { return buf + fieldQuoteType.offset; }
   private: FieldQuoteType fieldQuoteType;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetNoQuoteSets() const { return fieldNoQuoteSets.offset >= 0; }
   FieldNoQuoteSets::ValueType getNoQuoteSets() const { return fieldNoQuoteSets.getValue( buf ); }
   const char * ptrToNoQuoteSets() const { return buf + fieldNoQuoteSets.offset; }
   private: FieldNoQuoteSets fieldNoQuoteSets;
  
   public:
   std::size_t getGroupCountQuoteSets() const { return groupsQuoteSets.size(); } 
   const GroupQuoteSets & getGroupQuoteSets( std::size_t idx ) const { return groupsQuoteSets[ idx ]; } 
   private: GroupQuoteSets::Array groupsQuoteSets{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSecurityDefinitionRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityReqID() const { return fieldSecurityReqID.offset >= 0; }
   FieldSecurityReqID::ValueType getSecurityReqID() const { return fieldSecurityReqID.getValue( buf ); }
   const char * ptrToSecurityReqID() const { return buf + fieldSecurityReqID.offset; }
   private: FieldSecurityReqID fieldSecurityReqID;

   public:
   bool isSetSecurityRequestType() const { return fieldSecurityRequestType.offset >= 0; }
   FieldSecurityRequestType::ValueType getSecurityRequestType() const { return fieldSecurityRequestType.getValue( buf ); }
   const char * ptrToSecurityRequestType() const { return buf + fieldSecurityRequestType.offset; }
   private: FieldSecurityRequestType fieldSecurityRequestType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetExpirationCycle() const { return fieldExpirationCycle.offset >= 0; }
   FieldExpirationCycle::ValueType getExpirationCycle() const { return fieldExpirationCycle.getValue( buf ); }
   const char * ptrToExpirationCycle() const { return buf + fieldExpirationCycle.offset; }
   private: FieldExpirationCycle fieldExpirationCycle;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSecurityDefinition: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityReqID() const { return fieldSecurityReqID.offset >= 0; }
   FieldSecurityReqID::ValueType getSecurityReqID() const { return fieldSecurityReqID.getValue( buf ); }
   const char * ptrToSecurityReqID() const { return buf + fieldSecurityReqID.offset; }
   private: FieldSecurityReqID fieldSecurityReqID;

   public:
   bool isSetSecurityResponseID() const { return fieldSecurityResponseID.offset >= 0; }
   FieldSecurityResponseID::ValueType getSecurityResponseID() const { return fieldSecurityResponseID.getValue( buf ); }
   const char * ptrToSecurityResponseID() const { return buf + fieldSecurityResponseID.offset; }
   private: FieldSecurityResponseID fieldSecurityResponseID;

   public:
   bool isSetSecurityResponseType() const { return fieldSecurityResponseType.offset >= 0; }
   FieldSecurityResponseType::ValueType getSecurityResponseType() const { return fieldSecurityResponseType.getValue( buf ); }
   const char * ptrToSecurityResponseType() const { return buf + fieldSecurityResponseType.offset; }
   private: FieldSecurityResponseType fieldSecurityResponseType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetExpirationCycle() const { return fieldExpirationCycle.offset >= 0; }
   FieldExpirationCycle::ValueType getExpirationCycle() const { return fieldExpirationCycle.getValue( buf ); }
   const char * ptrToExpirationCycle() const { return buf + fieldExpirationCycle.offset; }
   private: FieldExpirationCycle fieldExpirationCycle;

   public:
   bool isSetRoundLot() const { return fieldRoundLot.offset >= 0; }
   FieldRoundLot::ValueType getRoundLot() const { return fieldRoundLot.getValue( buf ); }
   const char * ptrToRoundLot() const { return buf + fieldRoundLot.offset; }
   private: FieldRoundLot fieldRoundLot;

   public:
   bool isSetMinTradeVol() const { return fieldMinTradeVol.offset >= 0; }
   FieldMinTradeVol::ValueType getMinTradeVol() const { return fieldMinTradeVol.getValue( buf ); }
   const char * ptrToMinTradeVol() const { return buf + fieldMinTradeVol.offset; }
   private: FieldMinTradeVol fieldMinTradeVol;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSecurityStatusRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityStatusReqID() const { return fieldSecurityStatusReqID.offset >= 0; }
   FieldSecurityStatusReqID::ValueType getSecurityStatusReqID() const { return fieldSecurityStatusReqID.getValue( buf ); }
   const char * ptrToSecurityStatusReqID() const { return buf + fieldSecurityStatusReqID.offset; }
   private: FieldSecurityStatusReqID fieldSecurityStatusReqID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSecurityStatus: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityStatusReqID() const { return fieldSecurityStatusReqID.offset >= 0; }
   FieldSecurityStatusReqID::ValueType getSecurityStatusReqID() const { return fieldSecurityStatusReqID.getValue( buf ); }
   const char * ptrToSecurityStatusReqID() const { return buf + fieldSecurityStatusReqID.offset; }
   private: FieldSecurityStatusReqID fieldSecurityStatusReqID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.offset >= 0; }
   FieldUnsolicitedIndicator::ValueType getUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.getValue( buf ); }
   const char * ptrToUnsolicitedIndicator() const { return buf + fieldUnsolicitedIndicator.offset; }
   private: FieldUnsolicitedIndicator fieldUnsolicitedIndicator;

   public:
   bool isSetSecurityTradingStatus() const { return fieldSecurityTradingStatus.offset >= 0; }
   FieldSecurityTradingStatus::ValueType getSecurityTradingStatus() const { return fieldSecurityTradingStatus.getValue( buf ); }
   const char * ptrToSecurityTradingStatus() const { return buf + fieldSecurityTradingStatus.offset; }
   private: FieldSecurityTradingStatus fieldSecurityTradingStatus;

   public:
   bool isSetFinancialStatus() const { return fieldFinancialStatus.offset >= 0; }
   FieldFinancialStatus::ValueType getFinancialStatus() const { return fieldFinancialStatus.getValue( buf ); }
   const char * ptrToFinancialStatus() const { return buf + fieldFinancialStatus.offset; }
   private: FieldFinancialStatus fieldFinancialStatus;

   public:
   bool isSetCorporateAction() const { return fieldCorporateAction.offset >= 0; }
   FieldCorporateAction::ValueType getCorporateAction() const { return fieldCorporateAction.getValue( buf ); }
   const char * ptrToCorporateAction() const { return buf + fieldCorporateAction.offset; }
   private: FieldCorporateAction fieldCorporateAction;

   public:
   bool isSetHaltReasonChar() const { return fieldHaltReasonChar.offset >= 0; }
   FieldHaltReasonChar::ValueType getHaltReasonChar() const { return fieldHaltReasonChar.getValue( buf ); }
   const char * ptrToHaltReasonChar() const { return buf + fieldHaltReasonChar.offset; }
   private: FieldHaltReasonChar fieldHaltReasonChar;

   public:
   bool isSetInViewOfCommon() const { return fieldInViewOfCommon.offset >= 0; }
   FieldInViewOfCommon::ValueType getInViewOfCommon() const { return fieldInViewOfCommon.getValue( buf ); }
   const char * ptrToInViewOfCommon() const { return buf + fieldInViewOfCommon.offset; }
   private: FieldInViewOfCommon fieldInViewOfCommon;

   public:
   bool isSetDueToRelated() const { return fieldDueToRelated.offset >= 0; }
   FieldDueToRelated::ValueType getDueToRelated() const { return fieldDueToRelated.getValue( buf ); }
   const char * ptrToDueToRelated() const { return buf + fieldDueToRelated.offset; }
   private: FieldDueToRelated fieldDueToRelated;

   public:
   bool isSetBuyVolume() const { return fieldBuyVolume.offset >= 0; }
   FieldBuyVolume::ValueType getBuyVolume() const { return fieldBuyVolume.getValue( buf ); }
   const char * ptrToBuyVolume() const { return buf + fieldBuyVolume.offset; }
   private: FieldBuyVolume fieldBuyVolume;

   public:
   bool isSetSellVolume() const { return fieldSellVolume.offset >= 0; }
   FieldSellVolume::ValueType getSellVolume() const { return fieldSellVolume.getValue( buf ); }
   const char * ptrToSellVolume() const { return buf + fieldSellVolume.offset; }
   private: FieldSellVolume fieldSellVolume;

   public:
   bool isSetHighPx() const { return fieldHighPx.offset >= 0; }
   FieldHighPx::ValueType getHighPx() const { return fieldHighPx.getValue( buf ); }
   const char * ptrToHighPx() const { return buf + fieldHighPx.offset; }
   private: FieldHighPx fieldHighPx;

   public:
   bool isSetLowPx() const { return fieldLowPx.offset >= 0; }
   FieldLowPx::ValueType getLowPx() const { return fieldLowPx.getValue( buf ); }
   const char * ptrToLowPx() const { return buf + fieldLowPx.offset; }
   private: FieldLowPx fieldLowPx;

   public:
   bool isSetLastPx() const { return fieldLastPx.offset >= 0; }
   FieldLastPx::ValueType getLastPx() const { return fieldLastPx.getValue( buf ); }
   const char * ptrToLastPx() const { return buf + fieldLastPx.offset; }
   private: FieldLastPx fieldLastPx;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetAdjustment() const { return fieldAdjustment.offset >= 0; }
   FieldAdjustment::ValueType getAdjustment() const { return fieldAdjustment.getValue( buf ); }
   const char * ptrToAdjustment() const { return buf + fieldAdjustment.offset; }
   private: FieldAdjustment fieldAdjustment;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageTradingSessionStatusRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetTradSesReqID() const { return fieldTradSesReqID.offset >= 0; }
   FieldTradSesReqID::ValueType getTradSesReqID() const { return fieldTradSesReqID.getValue( buf ); }
   const char * ptrToTradSesReqID() const { return buf + fieldTradSesReqID.offset; }
   private: FieldTradSesReqID fieldTradSesReqID;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetTradSesMethod() const { return fieldTradSesMethod.offset >= 0; }
   FieldTradSesMethod::ValueType getTradSesMethod() const { return fieldTradSesMethod.getValue( buf ); }
   const char * ptrToTradSesMethod() const { return buf + fieldTradSesMethod.offset; }
   private: FieldTradSesMethod fieldTradSesMethod;

   public:
   bool isSetTradSesMode() const { return fieldTradSesMode.offset >= 0; }
   FieldTradSesMode::ValueType getTradSesMode() const { return fieldTradSesMode.getValue( buf ); }
   const char * ptrToTradSesMode() const { return buf + fieldTradSesMode.offset; }
   private: FieldTradSesMode fieldTradSesMode;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageTradingSessionStatus: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetTradSesReqID() const { return fieldTradSesReqID.offset >= 0; }
   FieldTradSesReqID::ValueType getTradSesReqID() const { return fieldTradSesReqID.getValue( buf ); }
   const char * ptrToTradSesReqID() const { return buf + fieldTradSesReqID.offset; }
   private: FieldTradSesReqID fieldTradSesReqID;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetTradSesMethod() const { return fieldTradSesMethod.offset >= 0; }
   FieldTradSesMethod::ValueType getTradSesMethod() const { return fieldTradSesMethod.getValue( buf ); }
   const char * ptrToTradSesMethod() const { return buf + fieldTradSesMethod.offset; }
   private: FieldTradSesMethod fieldTradSesMethod;

   public:
   bool isSetTradSesMode() const { return fieldTradSesMode.offset >= 0; }
   FieldTradSesMode::ValueType getTradSesMode() const { return fieldTradSesMode.getValue( buf ); }
   const char * ptrToTradSesMode() const { return buf + fieldTradSesMode.offset; }
   private: FieldTradSesMode fieldTradSesMode;

   public:
   bool isSetUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.offset >= 0; }
   FieldUnsolicitedIndicator::ValueType getUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.getValue( buf ); }
   const char * ptrToUnsolicitedIndicator() const { return buf + fieldUnsolicitedIndicator.offset; }
   private: FieldUnsolicitedIndicator fieldUnsolicitedIndicator;

   public:
   bool isSetTradSesStatus() const { return fieldTradSesStatus.offset >= 0; }
   FieldTradSesStatus::ValueType getTradSesStatus() const { return fieldTradSesStatus.getValue( buf ); }
   const char * ptrToTradSesStatus() const { return buf + fieldTradSesStatus.offset; }
   private: FieldTradSesStatus fieldTradSesStatus;

   public:
   bool isSetTradSesStatusRejReason() const { return fieldTradSesStatusRejReason.offset >= 0; }
   FieldTradSesStatusRejReason::ValueType getTradSesStatusRejReason() const { return fieldTradSesStatusRejReason.getValue( buf ); }
   const char * ptrToTradSesStatusRejReason() const { return buf + fieldTradSesStatusRejReason.offset; }
   private: FieldTradSesStatusRejReason fieldTradSesStatusRejReason;

   public:
   bool isSetTradSesStartTime() const { return fieldTradSesStartTime.offset >= 0; }
   FieldTradSesStartTime::ValueType getTradSesStartTime() const { return fieldTradSesStartTime.getValue( buf ); }
   const char * ptrToTradSesStartTime() const { return buf + fieldTradSesStartTime.offset; }
   private: FieldTradSesStartTime fieldTradSesStartTime;

   public:
   bool isSetTradSesOpenTime() const { return fieldTradSesOpenTime.offset >= 0; }
   FieldTradSesOpenTime::ValueType getTradSesOpenTime() const { return fieldTradSesOpenTime.getValue( buf ); }
   const char * ptrToTradSesOpenTime() const { return buf + fieldTradSesOpenTime.offset; }
   private: FieldTradSesOpenTime fieldTradSesOpenTime;

   public:
   bool isSetTradSesPreCloseTime() const { return fieldTradSesPreCloseTime.offset >= 0; }
   FieldTradSesPreCloseTime::ValueType getTradSesPreCloseTime() const { return fieldTradSesPreCloseTime.getValue( buf ); }
   const char * ptrToTradSesPreCloseTime() const { return buf + fieldTradSesPreCloseTime.offset; }
   private: FieldTradSesPreCloseTime fieldTradSesPreCloseTime;

   public:
   bool isSetTradSesCloseTime() const { return fieldTradSesCloseTime.offset >= 0; }
   FieldTradSesCloseTime::ValueType getTradSesCloseTime() const { return fieldTradSesCloseTime.getValue( buf ); }
   const char * ptrToTradSesCloseTime() const { return buf + fieldTradSesCloseTime.offset; }
   private: FieldTradSesCloseTime fieldTradSesCloseTime;

   public:
   bool isSetTradSesEndTime() const { return fieldTradSesEndTime.offset >= 0; }
   FieldTradSesEndTime::ValueType getTradSesEndTime() const { return fieldTradSesEndTime.getValue( buf ); }
   const char * ptrToTradSesEndTime() const { return buf + fieldTradSesEndTime.offset; }
   private: FieldTradSesEndTime fieldTradSesEndTime;

   public:
   bool isSetTotalVolumeTraded() const { return fieldTotalVolumeTraded.offset >= 0; }
   FieldTotalVolumeTraded::ValueType getTotalVolumeTraded() const { return fieldTotalVolumeTraded.getValue( buf ); }
   const char * ptrToTotalVolumeTraded() const { return buf + fieldTotalVolumeTraded.offset; }
   private: FieldTotalVolumeTraded fieldTotalVolumeTraded;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageMassQuote: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteReqID() const { return fieldQuoteReqID.offset >= 0; }
   FieldQuoteReqID::ValueType getQuoteReqID() const { return fieldQuoteReqID.getValue( buf ); }
   const char * ptrToQuoteReqID() const { return buf + fieldQuoteReqID.offset; }
   private: FieldQuoteReqID fieldQuoteReqID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetQuoteType() const { return fieldQuoteType.offset >= 0; }
   FieldQuoteType::ValueType getQuoteType() const { return fieldQuoteType.getValue( buf ); }
   const char * ptrToQuoteType() const { return buf + fieldQuoteType.offset; }
   private: FieldQuoteType fieldQuoteType;

   public:
   bool isSetQuoteResponseLevel() const { return fieldQuoteResponseLevel.offset >= 0; }
   FieldQuoteResponseLevel::ValueType getQuoteResponseLevel() const { return fieldQuoteResponseLevel.getValue( buf ); }
   const char * ptrToQuoteResponseLevel() const { return buf + fieldQuoteResponseLevel.offset; }
   private: FieldQuoteResponseLevel fieldQuoteResponseLevel;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetDefBidSize() const { return fieldDefBidSize.offset >= 0; }
   FieldDefBidSize::ValueType getDefBidSize() const { return fieldDefBidSize.getValue( buf ); }
   const char * ptrToDefBidSize() const { return buf + fieldDefBidSize.offset; }
   private: FieldDefBidSize fieldDefBidSize;

   public:
   bool isSetDefOfferSize() const { return fieldDefOfferSize.offset >= 0; }
   FieldDefOfferSize::ValueType getDefOfferSize() const { return fieldDefOfferSize.getValue( buf ); }
   const char * ptrToDefOfferSize() const { return buf + fieldDefOfferSize.offset; }
   private: FieldDefOfferSize fieldDefOfferSize;

   public:
   bool isSetNoQuoteSets() const { return fieldNoQuoteSets.offset >= 0; }
   FieldNoQuoteSets::ValueType getNoQuoteSets() const { return fieldNoQuoteSets.getValue( buf ); }
   const char * ptrToNoQuoteSets() const { return buf + fieldNoQuoteSets.offset; }
   private: FieldNoQuoteSets fieldNoQuoteSets;
  
   public:
   std::size_t getGroupCountQuoteSets() const { return groupsQuoteSets.size(); } 
   const GroupQuoteSets & getGroupQuoteSets( std::size_t idx ) const { return groupsQuoteSets[ idx ]; } 
   private: GroupQuoteSets::Array groupsQuoteSets{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageBusinessMessageReject: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetRefSeqNum() const { return fieldRefSeqNum.offset >= 0; }
   FieldRefSeqNum::ValueType getRefSeqNum() const { return fieldRefSeqNum.getValue( buf ); }
   const char * ptrToRefSeqNum() const { return buf + fieldRefSeqNum.offset; }
   private: FieldRefSeqNum fieldRefSeqNum;

   public:
   bool isSetRefMsgType() const { return fieldRefMsgType.offset >= 0; }
   FieldRefMsgType::ValueType getRefMsgType() const { return fieldRefMsgType.getValue( buf ); }
   const char * ptrToRefMsgType() const { return buf + fieldRefMsgType.offset; }
   private: FieldRefMsgType fieldRefMsgType;

   public:
   bool isSetBusinessRejectRefID() const { return fieldBusinessRejectRefID.offset >= 0; }
   FieldBusinessRejectRefID::ValueType getBusinessRejectRefID() const { return fieldBusinessRejectRefID.getValue( buf ); }
   const char * ptrToBusinessRejectRefID() const { return buf + fieldBusinessRejectRefID.offset; }
   private: FieldBusinessRejectRefID fieldBusinessRejectRefID;

   public:
   bool isSetBusinessRejectReason() const { return fieldBusinessRejectReason.offset >= 0; }
   FieldBusinessRejectReason::ValueType getBusinessRejectReason() const { return fieldBusinessRejectReason.getValue( buf ); }
   const char * ptrToBusinessRejectReason() const { return buf + fieldBusinessRejectReason.offset; }
   private: FieldBusinessRejectReason fieldBusinessRejectReason;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageBidRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetBidID() const { return fieldBidID.offset >= 0; }
   FieldBidID::ValueType getBidID() const { return fieldBidID.getValue( buf ); }
   const char * ptrToBidID() const { return buf + fieldBidID.offset; }
   private: FieldBidID fieldBidID;

   public:
   bool isSetClientBidID() const { return fieldClientBidID.offset >= 0; }
   FieldClientBidID::ValueType getClientBidID() const { return fieldClientBidID.getValue( buf ); }
   const char * ptrToClientBidID() const { return buf + fieldClientBidID.offset; }
   private: FieldClientBidID fieldClientBidID;

   public:
   bool isSetBidRequestTransType() const { return fieldBidRequestTransType.offset >= 0; }
   FieldBidRequestTransType::ValueType getBidRequestTransType() const { return fieldBidRequestTransType.getValue( buf ); }
   const char * ptrToBidRequestTransType() const { return buf + fieldBidRequestTransType.offset; }
   private: FieldBidRequestTransType fieldBidRequestTransType;

   public:
   bool isSetListName() const { return fieldListName.offset >= 0; }
   FieldListName::ValueType getListName() const { return fieldListName.getValue( buf ); }
   const char * ptrToListName() const { return buf + fieldListName.offset; }
   private: FieldListName fieldListName;

   public:
   bool isSetTotNoRelatedSym() const { return fieldTotNoRelatedSym.offset >= 0; }
   FieldTotNoRelatedSym::ValueType getTotNoRelatedSym() const { return fieldTotNoRelatedSym.getValue( buf ); }
   const char * ptrToTotNoRelatedSym() const { return buf + fieldTotNoRelatedSym.offset; }
   private: FieldTotNoRelatedSym fieldTotNoRelatedSym;

   public:
   bool isSetBidType() const { return fieldBidType.offset >= 0; }
   FieldBidType::ValueType getBidType() const { return fieldBidType.getValue( buf ); }
   const char * ptrToBidType() const { return buf + fieldBidType.offset; }
   private: FieldBidType fieldBidType;

   public:
   bool isSetNumTickets() const { return fieldNumTickets.offset >= 0; }
   FieldNumTickets::ValueType getNumTickets() const { return fieldNumTickets.getValue( buf ); }
   const char * ptrToNumTickets() const { return buf + fieldNumTickets.offset; }
   private: FieldNumTickets fieldNumTickets;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetSideValue1() const { return fieldSideValue1.offset >= 0; }
   FieldSideValue1::ValueType getSideValue1() const { return fieldSideValue1.getValue( buf ); }
   const char * ptrToSideValue1() const { return buf + fieldSideValue1.offset; }
   private: FieldSideValue1 fieldSideValue1;

   public:
   bool isSetSideValue2() const { return fieldSideValue2.offset >= 0; }
   FieldSideValue2::ValueType getSideValue2() const { return fieldSideValue2.getValue( buf ); }
   const char * ptrToSideValue2() const { return buf + fieldSideValue2.offset; }
   private: FieldSideValue2 fieldSideValue2;

   public:
   bool isSetNoBidDescriptors() const { return fieldNoBidDescriptors.offset >= 0; }
   FieldNoBidDescriptors::ValueType getNoBidDescriptors() const { return fieldNoBidDescriptors.getValue( buf ); }
   const char * ptrToNoBidDescriptors() const { return buf + fieldNoBidDescriptors.offset; }
   private: FieldNoBidDescriptors fieldNoBidDescriptors;
  
   public:
   std::size_t getGroupCountBidDescriptors() const { return groupsBidDescriptors.size(); } 
   const GroupBidDescriptors & getGroupBidDescriptors( std::size_t idx ) const { return groupsBidDescriptors[ idx ]; } 
   private: GroupBidDescriptors::Array groupsBidDescriptors{ 10 };

   public:
   bool isSetNoBidComponents() const { return fieldNoBidComponents.offset >= 0; }
   FieldNoBidComponents::ValueType getNoBidComponents() const { return fieldNoBidComponents.getValue( buf ); }
   const char * ptrToNoBidComponents() const { return buf + fieldNoBidComponents.offset; }
   private: FieldNoBidComponents fieldNoBidComponents;
  
   public:
   std::size_t getGroupCountBidComponents() const { return groupsBidComponents.size(); } 
   const GroupBidComponents & getGroupBidComponents( std::size_t idx ) const { return groupsBidComponents[ idx ]; } 
   private: GroupBidComponents::Array groupsBidComponents{ 10 };

   public:
   bool isSetLiquidityIndType() const { return fieldLiquidityIndType.offset >= 0; }
   FieldLiquidityIndType::ValueType getLiquidityIndType() const { return fieldLiquidityIndType.getValue( buf ); }
   const char * ptrToLiquidityIndType() const { return buf + fieldLiquidityIndType.offset; }
   private: FieldLiquidityIndType fieldLiquidityIndType;

   public:
   bool isSetWtAverageLiquidity() const { return fieldWtAverageLiquidity.offset >= 0; }
   FieldWtAverageLiquidity::ValueType getWtAverageLiquidity() const { return fieldWtAverageLiquidity.getValue( buf ); }
   const char * ptrToWtAverageLiquidity() const { return buf + fieldWtAverageLiquidity.offset; }
   private: FieldWtAverageLiquidity fieldWtAverageLiquidity;

   public:
   bool isSetExchangeForPhysical() const { return fieldExchangeForPhysical.offset >= 0; }
   FieldExchangeForPhysical::ValueType getExchangeForPhysical() const { return fieldExchangeForPhysical.getValue( buf ); }
   const char * ptrToExchangeForPhysical() const { return buf + fieldExchangeForPhysical.offset; }
   private: FieldExchangeForPhysical fieldExchangeForPhysical;

   public:
   bool isSetOutMainCntryUIndex() const { return fieldOutMainCntryUIndex.offset >= 0; }
   FieldOutMainCntryUIndex::ValueType getOutMainCntryUIndex() const { return fieldOutMainCntryUIndex.getValue( buf ); }
   const char * ptrToOutMainCntryUIndex() const { return buf + fieldOutMainCntryUIndex.offset; }
   private: FieldOutMainCntryUIndex fieldOutMainCntryUIndex;

   public:
   bool isSetCrossPercent() const { return fieldCrossPercent.offset >= 0; }
   FieldCrossPercent::ValueType getCrossPercent() const { return fieldCrossPercent.getValue( buf ); }
   const char * ptrToCrossPercent() const { return buf + fieldCrossPercent.offset; }
   private: FieldCrossPercent fieldCrossPercent;

   public:
   bool isSetProgRptReqs() const { return fieldProgRptReqs.offset >= 0; }
   FieldProgRptReqs::ValueType getProgRptReqs() const { return fieldProgRptReqs.getValue( buf ); }
   const char * ptrToProgRptReqs() const { return buf + fieldProgRptReqs.offset; }
   private: FieldProgRptReqs fieldProgRptReqs;

   public:
   bool isSetProgPeriodInterval() const { return fieldProgPeriodInterval.offset >= 0; }
   FieldProgPeriodInterval::ValueType getProgPeriodInterval() const { return fieldProgPeriodInterval.getValue( buf ); }
   const char * ptrToProgPeriodInterval() const { return buf + fieldProgPeriodInterval.offset; }
   private: FieldProgPeriodInterval fieldProgPeriodInterval;

   public:
   bool isSetIncTaxInd() const { return fieldIncTaxInd.offset >= 0; }
   FieldIncTaxInd::ValueType getIncTaxInd() const { return fieldIncTaxInd.getValue( buf ); }
   const char * ptrToIncTaxInd() const { return buf + fieldIncTaxInd.offset; }
   private: FieldIncTaxInd fieldIncTaxInd;

   public:
   bool isSetForexReq() const { return fieldForexReq.offset >= 0; }
   FieldForexReq::ValueType getForexReq() const { return fieldForexReq.getValue( buf ); }
   const char * ptrToForexReq() const { return buf + fieldForexReq.offset; }
   private: FieldForexReq fieldForexReq;

   public:
   bool isSetNumBidders() const { return fieldNumBidders.offset >= 0; }
   FieldNumBidders::ValueType getNumBidders() const { return fieldNumBidders.getValue( buf ); }
   const char * ptrToNumBidders() const { return buf + fieldNumBidders.offset; }
   private: FieldNumBidders fieldNumBidders;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetBidTradeType() const { return fieldBidTradeType.offset >= 0; }
   FieldBidTradeType::ValueType getBidTradeType() const { return fieldBidTradeType.getValue( buf ); }
   const char * ptrToBidTradeType() const { return buf + fieldBidTradeType.offset; }
   private: FieldBidTradeType fieldBidTradeType;

   public:
   bool isSetBasisPxType() const { return fieldBasisPxType.offset >= 0; }
   FieldBasisPxType::ValueType getBasisPxType() const { return fieldBasisPxType.getValue( buf ); }
   const char * ptrToBasisPxType() const { return buf + fieldBasisPxType.offset; }
   private: FieldBasisPxType fieldBasisPxType;

   public:
   bool isSetStrikeTime() const { return fieldStrikeTime.offset >= 0; }
   FieldStrikeTime::ValueType getStrikeTime() const { return fieldStrikeTime.getValue( buf ); }
   const char * ptrToStrikeTime() const { return buf + fieldStrikeTime.offset; }
   private: FieldStrikeTime fieldStrikeTime;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageBidResponse: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetBidID() const { return fieldBidID.offset >= 0; }
   FieldBidID::ValueType getBidID() const { return fieldBidID.getValue( buf ); }
   const char * ptrToBidID() const { return buf + fieldBidID.offset; }
   private: FieldBidID fieldBidID;

   public:
   bool isSetClientBidID() const { return fieldClientBidID.offset >= 0; }
   FieldClientBidID::ValueType getClientBidID() const { return fieldClientBidID.getValue( buf ); }
   const char * ptrToClientBidID() const { return buf + fieldClientBidID.offset; }
   private: FieldClientBidID fieldClientBidID;

   public:
   bool isSetNoBidComponents() const { return fieldNoBidComponents.offset >= 0; }
   FieldNoBidComponents::ValueType getNoBidComponents() const { return fieldNoBidComponents.getValue( buf ); }
   const char * ptrToNoBidComponents() const { return buf + fieldNoBidComponents.offset; }
   private: FieldNoBidComponents fieldNoBidComponents;
  
   public:
   std::size_t getGroupCountBidComponents() const { return groupsBidComponents.size(); } 
   const GroupBidComponents & getGroupBidComponents( std::size_t idx ) const { return groupsBidComponents[ idx ]; } 
   private: GroupBidComponents::Array groupsBidComponents{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageListStrikePrice: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetListID() const { return fieldListID.offset >= 0; }
   FieldListID::ValueType getListID() const { return fieldListID.getValue( buf ); }
   const char * ptrToListID() const { return buf + fieldListID.offset; }
   private: FieldListID fieldListID;

   public:
   bool isSetTotNoStrikes() const { return fieldTotNoStrikes.offset >= 0; }
   FieldTotNoStrikes::ValueType getTotNoStrikes() const { return fieldTotNoStrikes.getValue( buf ); }
   const char * ptrToTotNoStrikes() const { return buf + fieldTotNoStrikes.offset; }
   private: FieldTotNoStrikes fieldTotNoStrikes;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoStrikes() const { return fieldNoStrikes.offset >= 0; }
   FieldNoStrikes::ValueType getNoStrikes() const { return fieldNoStrikes.getValue( buf ); }
   const char * ptrToNoStrikes() const { return buf + fieldNoStrikes.offset; }
   private: FieldNoStrikes fieldNoStrikes;
  
   public:
   std::size_t getGroupCountStrikes() const { return groupsStrikes.size(); } 
   const GroupStrikes & getGroupStrikes( std::size_t idx ) const { return groupsStrikes[ idx ]; } 
   private: GroupStrikes::Array groupsStrikes{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageXMLnonFIX: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageRegistrationInstructions: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetRegistTransType() const { return fieldRegistTransType.offset >= 0; }
   FieldRegistTransType::ValueType getRegistTransType() const { return fieldRegistTransType.getValue( buf ); }
   const char * ptrToRegistTransType() const { return buf + fieldRegistTransType.offset; }
   private: FieldRegistTransType fieldRegistTransType;

   public:
   bool isSetRegistRefID() const { return fieldRegistRefID.offset >= 0; }
   FieldRegistRefID::ValueType getRegistRefID() const { return fieldRegistRefID.getValue( buf ); }
   const char * ptrToRegistRefID() const { return buf + fieldRegistRefID.offset; }
   private: FieldRegistRefID fieldRegistRefID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetRegistAcctType() const { return fieldRegistAcctType.offset >= 0; }
   FieldRegistAcctType::ValueType getRegistAcctType() const { return fieldRegistAcctType.getValue( buf ); }
   const char * ptrToRegistAcctType() const { return buf + fieldRegistAcctType.offset; }
   private: FieldRegistAcctType fieldRegistAcctType;

   public:
   bool isSetTaxAdvantageType() const { return fieldTaxAdvantageType.offset >= 0; }
   FieldTaxAdvantageType::ValueType getTaxAdvantageType() const { return fieldTaxAdvantageType.getValue( buf ); }
   const char * ptrToTaxAdvantageType() const { return buf + fieldTaxAdvantageType.offset; }
   private: FieldTaxAdvantageType fieldTaxAdvantageType;

   public:
   bool isSetOwnershipType() const { return fieldOwnershipType.offset >= 0; }
   FieldOwnershipType::ValueType getOwnershipType() const { return fieldOwnershipType.getValue( buf ); }
   const char * ptrToOwnershipType() const { return buf + fieldOwnershipType.offset; }
   private: FieldOwnershipType fieldOwnershipType;

   public:
   bool isSetNoRegistDtls() const { return fieldNoRegistDtls.offset >= 0; }
   FieldNoRegistDtls::ValueType getNoRegistDtls() const { return fieldNoRegistDtls.getValue( buf ); }
   const char * ptrToNoRegistDtls() const { return buf + fieldNoRegistDtls.offset; }
   private: FieldNoRegistDtls fieldNoRegistDtls;
  
   public:
   std::size_t getGroupCountRegistDtls() const { return groupsRegistDtls.size(); } 
   const GroupRegistDtls & getGroupRegistDtls( std::size_t idx ) const { return groupsRegistDtls[ idx ]; } 
   private: GroupRegistDtls::Array groupsRegistDtls{ 10 };

   public:
   bool isSetNoDistribInsts() const { return fieldNoDistribInsts.offset >= 0; }
   FieldNoDistribInsts::ValueType getNoDistribInsts() const { return fieldNoDistribInsts.getValue( buf ); }
   const char * ptrToNoDistribInsts() const { return buf + fieldNoDistribInsts.offset; }
   private: FieldNoDistribInsts fieldNoDistribInsts;
  
   public:
   std::size_t getGroupCountDistribInsts() const { return groupsDistribInsts.size(); } 
   const GroupDistribInsts & getGroupDistribInsts( std::size_t idx ) const { return groupsDistribInsts[ idx ]; } 
   private: GroupDistribInsts::Array groupsDistribInsts{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageRegistrationInstructionsResponse: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetRegistTransType() const { return fieldRegistTransType.offset >= 0; }
   FieldRegistTransType::ValueType getRegistTransType() const { return fieldRegistTransType.getValue( buf ); }
   const char * ptrToRegistTransType() const { return buf + fieldRegistTransType.offset; }
   private: FieldRegistTransType fieldRegistTransType;

   public:
   bool isSetRegistRefID() const { return fieldRegistRefID.offset >= 0; }
   FieldRegistRefID::ValueType getRegistRefID() const { return fieldRegistRefID.getValue( buf ); }
   const char * ptrToRegistRefID() const { return buf + fieldRegistRefID.offset; }
   private: FieldRegistRefID fieldRegistRefID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetRegistStatus() const { return fieldRegistStatus.offset >= 0; }
   FieldRegistStatus::ValueType getRegistStatus() const { return fieldRegistStatus.getValue( buf ); }
   const char * ptrToRegistStatus() const { return buf + fieldRegistStatus.offset; }
   private: FieldRegistStatus fieldRegistStatus;

   public:
   bool isSetRegistRejReasonCode() const { return fieldRegistRejReasonCode.offset >= 0; }
   FieldRegistRejReasonCode::ValueType getRegistRejReasonCode() const { return fieldRegistRejReasonCode.getValue( buf ); }
   const char * ptrToRegistRejReasonCode() const { return buf + fieldRegistRejReasonCode.offset; }
   private: FieldRegistRejReasonCode fieldRegistRejReasonCode;

   public:
   bool isSetRegistRejReasonText() const { return fieldRegistRejReasonText.offset >= 0; }
   FieldRegistRejReasonText::ValueType getRegistRejReasonText() const { return fieldRegistRejReasonText.getValue( buf ); }
   const char * ptrToRegistRejReasonText() const { return buf + fieldRegistRejReasonText.offset; }
   private: FieldRegistRejReasonText fieldRegistRejReasonText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageOrderMassCancelRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetMassCancelRequestType() const { return fieldMassCancelRequestType.offset >= 0; }
   FieldMassCancelRequestType::ValueType getMassCancelRequestType() const { return fieldMassCancelRequestType.getValue( buf ); }
   const char * ptrToMassCancelRequestType() const { return buf + fieldMassCancelRequestType.offset; }
   private: FieldMassCancelRequestType fieldMassCancelRequestType;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetUnderlyingSymbol() const { return fieldUnderlyingSymbol.offset >= 0; }
   FieldUnderlyingSymbol::ValueType getUnderlyingSymbol() const { return fieldUnderlyingSymbol.getValue( buf ); }
   const char * ptrToUnderlyingSymbol() const { return buf + fieldUnderlyingSymbol.offset; }
   private: FieldUnderlyingSymbol fieldUnderlyingSymbol;

   public:
   bool isSetUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.offset >= 0; }
   FieldUnderlyingSymbolSfx::ValueType getUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.getValue( buf ); }
   const char * ptrToUnderlyingSymbolSfx() const { return buf + fieldUnderlyingSymbolSfx.offset; }
   private: FieldUnderlyingSymbolSfx fieldUnderlyingSymbolSfx;

   public:
   bool isSetUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.offset >= 0; }
   FieldUnderlyingSecurityID::ValueType getUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.getValue( buf ); }
   const char * ptrToUnderlyingSecurityID() const { return buf + fieldUnderlyingSecurityID.offset; }
   private: FieldUnderlyingSecurityID fieldUnderlyingSecurityID;

   public:
   bool isSetUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.offset >= 0; }
   FieldUnderlyingSecurityIDSource::ValueType getUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.getValue( buf ); }
   const char * ptrToUnderlyingSecurityIDSource() const { return buf + fieldUnderlyingSecurityIDSource.offset; }
   private: FieldUnderlyingSecurityIDSource fieldUnderlyingSecurityIDSource;

   public:
   bool isSetNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.offset >= 0; }
   FieldNoUnderlyingSecurityAltID::ValueType getNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.getValue( buf ); }
   const char * ptrToNoUnderlyingSecurityAltID() const { return buf + fieldNoUnderlyingSecurityAltID.offset; }
   private: FieldNoUnderlyingSecurityAltID fieldNoUnderlyingSecurityAltID;
  
   public:
   std::size_t getGroupCountUnderlyingSecurityAltID() const { return groupsUnderlyingSecurityAltID.size(); } 
   const GroupUnderlyingSecurityAltID & getGroupUnderlyingSecurityAltID( std::size_t idx ) const { return groupsUnderlyingSecurityAltID[ idx ]; } 
   private: GroupUnderlyingSecurityAltID::Array groupsUnderlyingSecurityAltID{ 10 };

   public:
   bool isSetUnderlyingProduct() const { return fieldUnderlyingProduct.offset >= 0; }
   FieldUnderlyingProduct::ValueType getUnderlyingProduct() const { return fieldUnderlyingProduct.getValue( buf ); }
   const char * ptrToUnderlyingProduct() const { return buf + fieldUnderlyingProduct.offset; }
   private: FieldUnderlyingProduct fieldUnderlyingProduct;

   public:
   bool isSetUnderlyingCFICode() const { return fieldUnderlyingCFICode.offset >= 0; }
   FieldUnderlyingCFICode::ValueType getUnderlyingCFICode() const { return fieldUnderlyingCFICode.getValue( buf ); }
   const char * ptrToUnderlyingCFICode() const { return buf + fieldUnderlyingCFICode.offset; }
   private: FieldUnderlyingCFICode fieldUnderlyingCFICode;

   public:
   bool isSetUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.offset >= 0; }
   FieldUnderlyingSecurityType::ValueType getUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingSecurityType() const { return buf + fieldUnderlyingSecurityType.offset; }
   private: FieldUnderlyingSecurityType fieldUnderlyingSecurityType;

   public:
   bool isSetUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.offset >= 0; }
   FieldUnderlyingSecuritySubType::ValueType getUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.getValue( buf ); }
   const char * ptrToUnderlyingSecuritySubType() const { return buf + fieldUnderlyingSecuritySubType.offset; }
   private: FieldUnderlyingSecuritySubType fieldUnderlyingSecuritySubType;

   public:
   bool isSetUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.offset >= 0; }
   FieldUnderlyingMaturityMonthYear::ValueType getUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.getValue( buf ); }
   const char * ptrToUnderlyingMaturityMonthYear() const { return buf + fieldUnderlyingMaturityMonthYear.offset; }
   private: FieldUnderlyingMaturityMonthYear fieldUnderlyingMaturityMonthYear;

   public:
   bool isSetUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.offset >= 0; }
   FieldUnderlyingMaturityDate::ValueType getUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.getValue( buf ); }
   const char * ptrToUnderlyingMaturityDate() const { return buf + fieldUnderlyingMaturityDate.offset; }
   private: FieldUnderlyingMaturityDate fieldUnderlyingMaturityDate;

   public:
   bool isSetUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.offset >= 0; }
   FieldUnderlyingPutOrCall::ValueType getUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.getValue( buf ); }
   const char * ptrToUnderlyingPutOrCall() const { return buf + fieldUnderlyingPutOrCall.offset; }
   private: FieldUnderlyingPutOrCall fieldUnderlyingPutOrCall;

   public:
   bool isSetUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.offset >= 0; }
   FieldUnderlyingCouponPaymentDate::ValueType getUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.getValue( buf ); }
   const char * ptrToUnderlyingCouponPaymentDate() const { return buf + fieldUnderlyingCouponPaymentDate.offset; }
   private: FieldUnderlyingCouponPaymentDate fieldUnderlyingCouponPaymentDate;

   public:
   bool isSetUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.offset >= 0; }
   FieldUnderlyingIssueDate::ValueType getUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.getValue( buf ); }
   const char * ptrToUnderlyingIssueDate() const { return buf + fieldUnderlyingIssueDate.offset; }
   private: FieldUnderlyingIssueDate fieldUnderlyingIssueDate;

   public:
   bool isSetUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.offset >= 0; }
   FieldUnderlyingRepoCollateralSecurityType::ValueType getUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingRepoCollateralSecurityType() const { return buf + fieldUnderlyingRepoCollateralSecurityType.offset; }
   private: FieldUnderlyingRepoCollateralSecurityType fieldUnderlyingRepoCollateralSecurityType;

   public:
   bool isSetUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.offset >= 0; }
   FieldUnderlyingRepurchaseTerm::ValueType getUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseTerm() const { return buf + fieldUnderlyingRepurchaseTerm.offset; }
   private: FieldUnderlyingRepurchaseTerm fieldUnderlyingRepurchaseTerm;

   public:
   bool isSetUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.offset >= 0; }
   FieldUnderlyingRepurchaseRate::ValueType getUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseRate() const { return buf + fieldUnderlyingRepurchaseRate.offset; }
   private: FieldUnderlyingRepurchaseRate fieldUnderlyingRepurchaseRate;

   public:
   bool isSetUnderlyingFactor() const { return fieldUnderlyingFactor.offset >= 0; }
   FieldUnderlyingFactor::ValueType getUnderlyingFactor() const { return fieldUnderlyingFactor.getValue( buf ); }
   const char * ptrToUnderlyingFactor() const { return buf + fieldUnderlyingFactor.offset; }
   private: FieldUnderlyingFactor fieldUnderlyingFactor;

   public:
   bool isSetUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.offset >= 0; }
   FieldUnderlyingCreditRating::ValueType getUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.getValue( buf ); }
   const char * ptrToUnderlyingCreditRating() const { return buf + fieldUnderlyingCreditRating.offset; }
   private: FieldUnderlyingCreditRating fieldUnderlyingCreditRating;

   public:
   bool isSetUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.offset >= 0; }
   FieldUnderlyingInstrRegistry::ValueType getUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.getValue( buf ); }
   const char * ptrToUnderlyingInstrRegistry() const { return buf + fieldUnderlyingInstrRegistry.offset; }
   private: FieldUnderlyingInstrRegistry fieldUnderlyingInstrRegistry;

   public:
   bool isSetUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.offset >= 0; }
   FieldUnderlyingCountryOfIssue::ValueType getUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingCountryOfIssue() const { return buf + fieldUnderlyingCountryOfIssue.offset; }
   private: FieldUnderlyingCountryOfIssue fieldUnderlyingCountryOfIssue;

   public:
   bool isSetUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0; }
   FieldUnderlyingStateOrProvinceOfIssue::ValueType getUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingStateOrProvinceOfIssue() const { return buf + fieldUnderlyingStateOrProvinceOfIssue.offset; }
   private: FieldUnderlyingStateOrProvinceOfIssue fieldUnderlyingStateOrProvinceOfIssue;

   public:
   bool isSetUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.offset >= 0; }
   FieldUnderlyingLocaleOfIssue::ValueType getUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingLocaleOfIssue() const { return buf + fieldUnderlyingLocaleOfIssue.offset; }
   private: FieldUnderlyingLocaleOfIssue fieldUnderlyingLocaleOfIssue;

   public:
   bool isSetUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.offset >= 0; }
   FieldUnderlyingRedemptionDate::ValueType getUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.getValue( buf ); }
   const char * ptrToUnderlyingRedemptionDate() const { return buf + fieldUnderlyingRedemptionDate.offset; }
   private: FieldUnderlyingRedemptionDate fieldUnderlyingRedemptionDate;

   public:
   bool isSetUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.offset >= 0; }
   FieldUnderlyingStrikePrice::ValueType getUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.getValue( buf ); }
   const char * ptrToUnderlyingStrikePrice() const { return buf + fieldUnderlyingStrikePrice.offset; }
   private: FieldUnderlyingStrikePrice fieldUnderlyingStrikePrice;

   public:
   bool isSetUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.offset >= 0; }
   FieldUnderlyingStrikeCurrency::ValueType getUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.getValue( buf ); }
   const char * ptrToUnderlyingStrikeCurrency() const { return buf + fieldUnderlyingStrikeCurrency.offset; }
   private: FieldUnderlyingStrikeCurrency fieldUnderlyingStrikeCurrency;

   public:
   bool isSetUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.offset >= 0; }
   FieldUnderlyingOptAttribute::ValueType getUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.getValue( buf ); }
   const char * ptrToUnderlyingOptAttribute() const { return buf + fieldUnderlyingOptAttribute.offset; }
   private: FieldUnderlyingOptAttribute fieldUnderlyingOptAttribute;

   public:
   bool isSetUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.offset >= 0; }
   FieldUnderlyingContractMultiplier::ValueType getUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.getValue( buf ); }
   const char * ptrToUnderlyingContractMultiplier() const { return buf + fieldUnderlyingContractMultiplier.offset; }
   private: FieldUnderlyingContractMultiplier fieldUnderlyingContractMultiplier;

   public:
   bool isSetUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.offset >= 0; }
   FieldUnderlyingCouponRate::ValueType getUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.getValue( buf ); }
   const char * ptrToUnderlyingCouponRate() const { return buf + fieldUnderlyingCouponRate.offset; }
   private: FieldUnderlyingCouponRate fieldUnderlyingCouponRate;

   public:
   bool isSetUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.offset >= 0; }
   FieldUnderlyingSecurityExchange::ValueType getUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.getValue( buf ); }
   const char * ptrToUnderlyingSecurityExchange() const { return buf + fieldUnderlyingSecurityExchange.offset; }
   private: FieldUnderlyingSecurityExchange fieldUnderlyingSecurityExchange;

   public:
   bool isSetUnderlyingIssuer() const { return fieldUnderlyingIssuer.offset >= 0; }
   FieldUnderlyingIssuer::ValueType getUnderlyingIssuer() const { return fieldUnderlyingIssuer.getValue( buf ); }
   const char * ptrToUnderlyingIssuer() const { return buf + fieldUnderlyingIssuer.offset; }
   private: FieldUnderlyingIssuer fieldUnderlyingIssuer;

   public:
   bool isSetEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.offset >= 0; }
   FieldEncodedUnderlyingIssuerLen::ValueType getEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuerLen() const { return buf + fieldEncodedUnderlyingIssuerLen.offset; }
   private: FieldEncodedUnderlyingIssuerLen fieldEncodedUnderlyingIssuerLen;

   public:
   bool isSetEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.offset >= 0; }
   FieldEncodedUnderlyingIssuer::ValueType getEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuer() const { return buf + fieldEncodedUnderlyingIssuer.offset; }
   private: FieldEncodedUnderlyingIssuer fieldEncodedUnderlyingIssuer;

   public:
   bool isSetUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.offset >= 0; }
   FieldUnderlyingSecurityDesc::ValueType getUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToUnderlyingSecurityDesc() const { return buf + fieldUnderlyingSecurityDesc.offset; }
   private: FieldUnderlyingSecurityDesc fieldUnderlyingSecurityDesc;

   public:
   bool isSetEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.offset >= 0; }
   FieldEncodedUnderlyingSecurityDescLen::ValueType getEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDescLen() const { return buf + fieldEncodedUnderlyingSecurityDescLen.offset; }
   private: FieldEncodedUnderlyingSecurityDescLen fieldEncodedUnderlyingSecurityDescLen;

   public:
   bool isSetEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.offset >= 0; }
   FieldEncodedUnderlyingSecurityDesc::ValueType getEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDesc() const { return buf + fieldEncodedUnderlyingSecurityDesc.offset; }
   private: FieldEncodedUnderlyingSecurityDesc fieldEncodedUnderlyingSecurityDesc;

   public:
   bool isSetUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.offset >= 0; }
   FieldUnderlyingCPProgram::ValueType getUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.getValue( buf ); }
   const char * ptrToUnderlyingCPProgram() const { return buf + fieldUnderlyingCPProgram.offset; }
   private: FieldUnderlyingCPProgram fieldUnderlyingCPProgram;

   public:
   bool isSetUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.offset >= 0; }
   FieldUnderlyingCPRegType::ValueType getUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.getValue( buf ); }
   const char * ptrToUnderlyingCPRegType() const { return buf + fieldUnderlyingCPRegType.offset; }
   private: FieldUnderlyingCPRegType fieldUnderlyingCPRegType;

   public:
   bool isSetUnderlyingCurrency() const { return fieldUnderlyingCurrency.offset >= 0; }
   FieldUnderlyingCurrency::ValueType getUnderlyingCurrency() const { return fieldUnderlyingCurrency.getValue( buf ); }
   const char * ptrToUnderlyingCurrency() const { return buf + fieldUnderlyingCurrency.offset; }
   private: FieldUnderlyingCurrency fieldUnderlyingCurrency;

   public:
   bool isSetUnderlyingQty() const { return fieldUnderlyingQty.offset >= 0; }
   FieldUnderlyingQty::ValueType getUnderlyingQty() const { return fieldUnderlyingQty.getValue( buf ); }
   const char * ptrToUnderlyingQty() const { return buf + fieldUnderlyingQty.offset; }
   private: FieldUnderlyingQty fieldUnderlyingQty;

   public:
   bool isSetUnderlyingPx() const { return fieldUnderlyingPx.offset >= 0; }
   FieldUnderlyingPx::ValueType getUnderlyingPx() const { return fieldUnderlyingPx.getValue( buf ); }
   const char * ptrToUnderlyingPx() const { return buf + fieldUnderlyingPx.offset; }
   private: FieldUnderlyingPx fieldUnderlyingPx;

   public:
   bool isSetUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.offset >= 0; }
   FieldUnderlyingDirtyPrice::ValueType getUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.getValue( buf ); }
   const char * ptrToUnderlyingDirtyPrice() const { return buf + fieldUnderlyingDirtyPrice.offset; }
   private: FieldUnderlyingDirtyPrice fieldUnderlyingDirtyPrice;

   public:
   bool isSetUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.offset >= 0; }
   FieldUnderlyingEndPrice::ValueType getUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.getValue( buf ); }
   const char * ptrToUnderlyingEndPrice() const { return buf + fieldUnderlyingEndPrice.offset; }
   private: FieldUnderlyingEndPrice fieldUnderlyingEndPrice;

   public:
   bool isSetUnderlyingStartValue() const { return fieldUnderlyingStartValue.offset >= 0; }
   FieldUnderlyingStartValue::ValueType getUnderlyingStartValue() const { return fieldUnderlyingStartValue.getValue( buf ); }
   const char * ptrToUnderlyingStartValue() const { return buf + fieldUnderlyingStartValue.offset; }
   private: FieldUnderlyingStartValue fieldUnderlyingStartValue;

   public:
   bool isSetUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.offset >= 0; }
   FieldUnderlyingCurrentValue::ValueType getUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.getValue( buf ); }
   const char * ptrToUnderlyingCurrentValue() const { return buf + fieldUnderlyingCurrentValue.offset; }
   private: FieldUnderlyingCurrentValue fieldUnderlyingCurrentValue;

   public:
   bool isSetUnderlyingEndValue() const { return fieldUnderlyingEndValue.offset >= 0; }
   FieldUnderlyingEndValue::ValueType getUnderlyingEndValue() const { return fieldUnderlyingEndValue.getValue( buf ); }
   const char * ptrToUnderlyingEndValue() const { return buf + fieldUnderlyingEndValue.offset; }
   private: FieldUnderlyingEndValue fieldUnderlyingEndValue;

   public:
   bool isSetNoUnderlyingStips() const { return fieldNoUnderlyingStips.offset >= 0; }
   FieldNoUnderlyingStips::ValueType getNoUnderlyingStips() const { return fieldNoUnderlyingStips.getValue( buf ); }
   const char * ptrToNoUnderlyingStips() const { return buf + fieldNoUnderlyingStips.offset; }
   private: FieldNoUnderlyingStips fieldNoUnderlyingStips;
  
   public:
   std::size_t getGroupCountUnderlyingStips() const { return groupsUnderlyingStips.size(); } 
   const GroupUnderlyingStips & getGroupUnderlyingStips( std::size_t idx ) const { return groupsUnderlyingStips[ idx ]; } 
   private: GroupUnderlyingStips::Array groupsUnderlyingStips{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageOrderMassCancelReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetMassCancelRequestType() const { return fieldMassCancelRequestType.offset >= 0; }
   FieldMassCancelRequestType::ValueType getMassCancelRequestType() const { return fieldMassCancelRequestType.getValue( buf ); }
   const char * ptrToMassCancelRequestType() const { return buf + fieldMassCancelRequestType.offset; }
   private: FieldMassCancelRequestType fieldMassCancelRequestType;

   public:
   bool isSetMassCancelResponse() const { return fieldMassCancelResponse.offset >= 0; }
   FieldMassCancelResponse::ValueType getMassCancelResponse() const { return fieldMassCancelResponse.getValue( buf ); }
   const char * ptrToMassCancelResponse() const { return buf + fieldMassCancelResponse.offset; }
   private: FieldMassCancelResponse fieldMassCancelResponse;

   public:
   bool isSetMassCancelRejectReason() const { return fieldMassCancelRejectReason.offset >= 0; }
   FieldMassCancelRejectReason::ValueType getMassCancelRejectReason() const { return fieldMassCancelRejectReason.getValue( buf ); }
   const char * ptrToMassCancelRejectReason() const { return buf + fieldMassCancelRejectReason.offset; }
   private: FieldMassCancelRejectReason fieldMassCancelRejectReason;

   public:
   bool isSetTotalAffectedOrders() const { return fieldTotalAffectedOrders.offset >= 0; }
   FieldTotalAffectedOrders::ValueType getTotalAffectedOrders() const { return fieldTotalAffectedOrders.getValue( buf ); }
   const char * ptrToTotalAffectedOrders() const { return buf + fieldTotalAffectedOrders.offset; }
   private: FieldTotalAffectedOrders fieldTotalAffectedOrders;

   public:
   bool isSetNoAffectedOrders() const { return fieldNoAffectedOrders.offset >= 0; }
   FieldNoAffectedOrders::ValueType getNoAffectedOrders() const { return fieldNoAffectedOrders.getValue( buf ); }
   const char * ptrToNoAffectedOrders() const { return buf + fieldNoAffectedOrders.offset; }
   private: FieldNoAffectedOrders fieldNoAffectedOrders;
  
   public:
   std::size_t getGroupCountAffectedOrders() const { return groupsAffectedOrders.size(); } 
   const GroupAffectedOrders & getGroupAffectedOrders( std::size_t idx ) const { return groupsAffectedOrders[ idx ]; } 
   private: GroupAffectedOrders::Array groupsAffectedOrders{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetUnderlyingSymbol() const { return fieldUnderlyingSymbol.offset >= 0; }
   FieldUnderlyingSymbol::ValueType getUnderlyingSymbol() const { return fieldUnderlyingSymbol.getValue( buf ); }
   const char * ptrToUnderlyingSymbol() const { return buf + fieldUnderlyingSymbol.offset; }
   private: FieldUnderlyingSymbol fieldUnderlyingSymbol;

   public:
   bool isSetUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.offset >= 0; }
   FieldUnderlyingSymbolSfx::ValueType getUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.getValue( buf ); }
   const char * ptrToUnderlyingSymbolSfx() const { return buf + fieldUnderlyingSymbolSfx.offset; }
   private: FieldUnderlyingSymbolSfx fieldUnderlyingSymbolSfx;

   public:
   bool isSetUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.offset >= 0; }
   FieldUnderlyingSecurityID::ValueType getUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.getValue( buf ); }
   const char * ptrToUnderlyingSecurityID() const { return buf + fieldUnderlyingSecurityID.offset; }
   private: FieldUnderlyingSecurityID fieldUnderlyingSecurityID;

   public:
   bool isSetUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.offset >= 0; }
   FieldUnderlyingSecurityIDSource::ValueType getUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.getValue( buf ); }
   const char * ptrToUnderlyingSecurityIDSource() const { return buf + fieldUnderlyingSecurityIDSource.offset; }
   private: FieldUnderlyingSecurityIDSource fieldUnderlyingSecurityIDSource;

   public:
   bool isSetNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.offset >= 0; }
   FieldNoUnderlyingSecurityAltID::ValueType getNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.getValue( buf ); }
   const char * ptrToNoUnderlyingSecurityAltID() const { return buf + fieldNoUnderlyingSecurityAltID.offset; }
   private: FieldNoUnderlyingSecurityAltID fieldNoUnderlyingSecurityAltID;
  
   public:
   std::size_t getGroupCountUnderlyingSecurityAltID() const { return groupsUnderlyingSecurityAltID.size(); } 
   const GroupUnderlyingSecurityAltID & getGroupUnderlyingSecurityAltID( std::size_t idx ) const { return groupsUnderlyingSecurityAltID[ idx ]; } 
   private: GroupUnderlyingSecurityAltID::Array groupsUnderlyingSecurityAltID{ 10 };

   public:
   bool isSetUnderlyingProduct() const { return fieldUnderlyingProduct.offset >= 0; }
   FieldUnderlyingProduct::ValueType getUnderlyingProduct() const { return fieldUnderlyingProduct.getValue( buf ); }
   const char * ptrToUnderlyingProduct() const { return buf + fieldUnderlyingProduct.offset; }
   private: FieldUnderlyingProduct fieldUnderlyingProduct;

   public:
   bool isSetUnderlyingCFICode() const { return fieldUnderlyingCFICode.offset >= 0; }
   FieldUnderlyingCFICode::ValueType getUnderlyingCFICode() const { return fieldUnderlyingCFICode.getValue( buf ); }
   const char * ptrToUnderlyingCFICode() const { return buf + fieldUnderlyingCFICode.offset; }
   private: FieldUnderlyingCFICode fieldUnderlyingCFICode;

   public:
   bool isSetUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.offset >= 0; }
   FieldUnderlyingSecurityType::ValueType getUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingSecurityType() const { return buf + fieldUnderlyingSecurityType.offset; }
   private: FieldUnderlyingSecurityType fieldUnderlyingSecurityType;

   public:
   bool isSetUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.offset >= 0; }
   FieldUnderlyingSecuritySubType::ValueType getUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.getValue( buf ); }
   const char * ptrToUnderlyingSecuritySubType() const { return buf + fieldUnderlyingSecuritySubType.offset; }
   private: FieldUnderlyingSecuritySubType fieldUnderlyingSecuritySubType;

   public:
   bool isSetUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.offset >= 0; }
   FieldUnderlyingMaturityMonthYear::ValueType getUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.getValue( buf ); }
   const char * ptrToUnderlyingMaturityMonthYear() const { return buf + fieldUnderlyingMaturityMonthYear.offset; }
   private: FieldUnderlyingMaturityMonthYear fieldUnderlyingMaturityMonthYear;

   public:
   bool isSetUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.offset >= 0; }
   FieldUnderlyingMaturityDate::ValueType getUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.getValue( buf ); }
   const char * ptrToUnderlyingMaturityDate() const { return buf + fieldUnderlyingMaturityDate.offset; }
   private: FieldUnderlyingMaturityDate fieldUnderlyingMaturityDate;

   public:
   bool isSetUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.offset >= 0; }
   FieldUnderlyingPutOrCall::ValueType getUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.getValue( buf ); }
   const char * ptrToUnderlyingPutOrCall() const { return buf + fieldUnderlyingPutOrCall.offset; }
   private: FieldUnderlyingPutOrCall fieldUnderlyingPutOrCall;

   public:
   bool isSetUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.offset >= 0; }
   FieldUnderlyingCouponPaymentDate::ValueType getUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.getValue( buf ); }
   const char * ptrToUnderlyingCouponPaymentDate() const { return buf + fieldUnderlyingCouponPaymentDate.offset; }
   private: FieldUnderlyingCouponPaymentDate fieldUnderlyingCouponPaymentDate;

   public:
   bool isSetUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.offset >= 0; }
   FieldUnderlyingIssueDate::ValueType getUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.getValue( buf ); }
   const char * ptrToUnderlyingIssueDate() const { return buf + fieldUnderlyingIssueDate.offset; }
   private: FieldUnderlyingIssueDate fieldUnderlyingIssueDate;

   public:
   bool isSetUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.offset >= 0; }
   FieldUnderlyingRepoCollateralSecurityType::ValueType getUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingRepoCollateralSecurityType() const { return buf + fieldUnderlyingRepoCollateralSecurityType.offset; }
   private: FieldUnderlyingRepoCollateralSecurityType fieldUnderlyingRepoCollateralSecurityType;

   public:
   bool isSetUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.offset >= 0; }
   FieldUnderlyingRepurchaseTerm::ValueType getUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseTerm() const { return buf + fieldUnderlyingRepurchaseTerm.offset; }
   private: FieldUnderlyingRepurchaseTerm fieldUnderlyingRepurchaseTerm;

   public:
   bool isSetUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.offset >= 0; }
   FieldUnderlyingRepurchaseRate::ValueType getUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseRate() const { return buf + fieldUnderlyingRepurchaseRate.offset; }
   private: FieldUnderlyingRepurchaseRate fieldUnderlyingRepurchaseRate;

   public:
   bool isSetUnderlyingFactor() const { return fieldUnderlyingFactor.offset >= 0; }
   FieldUnderlyingFactor::ValueType getUnderlyingFactor() const { return fieldUnderlyingFactor.getValue( buf ); }
   const char * ptrToUnderlyingFactor() const { return buf + fieldUnderlyingFactor.offset; }
   private: FieldUnderlyingFactor fieldUnderlyingFactor;

   public:
   bool isSetUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.offset >= 0; }
   FieldUnderlyingCreditRating::ValueType getUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.getValue( buf ); }
   const char * ptrToUnderlyingCreditRating() const { return buf + fieldUnderlyingCreditRating.offset; }
   private: FieldUnderlyingCreditRating fieldUnderlyingCreditRating;

   public:
   bool isSetUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.offset >= 0; }
   FieldUnderlyingInstrRegistry::ValueType getUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.getValue( buf ); }
   const char * ptrToUnderlyingInstrRegistry() const { return buf + fieldUnderlyingInstrRegistry.offset; }
   private: FieldUnderlyingInstrRegistry fieldUnderlyingInstrRegistry;

   public:
   bool isSetUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.offset >= 0; }
   FieldUnderlyingCountryOfIssue::ValueType getUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingCountryOfIssue() const { return buf + fieldUnderlyingCountryOfIssue.offset; }
   private: FieldUnderlyingCountryOfIssue fieldUnderlyingCountryOfIssue;

   public:
   bool isSetUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0; }
   FieldUnderlyingStateOrProvinceOfIssue::ValueType getUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingStateOrProvinceOfIssue() const { return buf + fieldUnderlyingStateOrProvinceOfIssue.offset; }
   private: FieldUnderlyingStateOrProvinceOfIssue fieldUnderlyingStateOrProvinceOfIssue;

   public:
   bool isSetUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.offset >= 0; }
   FieldUnderlyingLocaleOfIssue::ValueType getUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingLocaleOfIssue() const { return buf + fieldUnderlyingLocaleOfIssue.offset; }
   private: FieldUnderlyingLocaleOfIssue fieldUnderlyingLocaleOfIssue;

   public:
   bool isSetUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.offset >= 0; }
   FieldUnderlyingRedemptionDate::ValueType getUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.getValue( buf ); }
   const char * ptrToUnderlyingRedemptionDate() const { return buf + fieldUnderlyingRedemptionDate.offset; }
   private: FieldUnderlyingRedemptionDate fieldUnderlyingRedemptionDate;

   public:
   bool isSetUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.offset >= 0; }
   FieldUnderlyingStrikePrice::ValueType getUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.getValue( buf ); }
   const char * ptrToUnderlyingStrikePrice() const { return buf + fieldUnderlyingStrikePrice.offset; }
   private: FieldUnderlyingStrikePrice fieldUnderlyingStrikePrice;

   public:
   bool isSetUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.offset >= 0; }
   FieldUnderlyingStrikeCurrency::ValueType getUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.getValue( buf ); }
   const char * ptrToUnderlyingStrikeCurrency() const { return buf + fieldUnderlyingStrikeCurrency.offset; }
   private: FieldUnderlyingStrikeCurrency fieldUnderlyingStrikeCurrency;

   public:
   bool isSetUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.offset >= 0; }
   FieldUnderlyingOptAttribute::ValueType getUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.getValue( buf ); }
   const char * ptrToUnderlyingOptAttribute() const { return buf + fieldUnderlyingOptAttribute.offset; }
   private: FieldUnderlyingOptAttribute fieldUnderlyingOptAttribute;

   public:
   bool isSetUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.offset >= 0; }
   FieldUnderlyingContractMultiplier::ValueType getUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.getValue( buf ); }
   const char * ptrToUnderlyingContractMultiplier() const { return buf + fieldUnderlyingContractMultiplier.offset; }
   private: FieldUnderlyingContractMultiplier fieldUnderlyingContractMultiplier;

   public:
   bool isSetUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.offset >= 0; }
   FieldUnderlyingCouponRate::ValueType getUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.getValue( buf ); }
   const char * ptrToUnderlyingCouponRate() const { return buf + fieldUnderlyingCouponRate.offset; }
   private: FieldUnderlyingCouponRate fieldUnderlyingCouponRate;

   public:
   bool isSetUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.offset >= 0; }
   FieldUnderlyingSecurityExchange::ValueType getUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.getValue( buf ); }
   const char * ptrToUnderlyingSecurityExchange() const { return buf + fieldUnderlyingSecurityExchange.offset; }
   private: FieldUnderlyingSecurityExchange fieldUnderlyingSecurityExchange;

   public:
   bool isSetUnderlyingIssuer() const { return fieldUnderlyingIssuer.offset >= 0; }
   FieldUnderlyingIssuer::ValueType getUnderlyingIssuer() const { return fieldUnderlyingIssuer.getValue( buf ); }
   const char * ptrToUnderlyingIssuer() const { return buf + fieldUnderlyingIssuer.offset; }
   private: FieldUnderlyingIssuer fieldUnderlyingIssuer;

   public:
   bool isSetEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.offset >= 0; }
   FieldEncodedUnderlyingIssuerLen::ValueType getEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuerLen() const { return buf + fieldEncodedUnderlyingIssuerLen.offset; }
   private: FieldEncodedUnderlyingIssuerLen fieldEncodedUnderlyingIssuerLen;

   public:
   bool isSetEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.offset >= 0; }
   FieldEncodedUnderlyingIssuer::ValueType getEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuer() const { return buf + fieldEncodedUnderlyingIssuer.offset; }
   private: FieldEncodedUnderlyingIssuer fieldEncodedUnderlyingIssuer;

   public:
   bool isSetUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.offset >= 0; }
   FieldUnderlyingSecurityDesc::ValueType getUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToUnderlyingSecurityDesc() const { return buf + fieldUnderlyingSecurityDesc.offset; }
   private: FieldUnderlyingSecurityDesc fieldUnderlyingSecurityDesc;

   public:
   bool isSetEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.offset >= 0; }
   FieldEncodedUnderlyingSecurityDescLen::ValueType getEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDescLen() const { return buf + fieldEncodedUnderlyingSecurityDescLen.offset; }
   private: FieldEncodedUnderlyingSecurityDescLen fieldEncodedUnderlyingSecurityDescLen;

   public:
   bool isSetEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.offset >= 0; }
   FieldEncodedUnderlyingSecurityDesc::ValueType getEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDesc() const { return buf + fieldEncodedUnderlyingSecurityDesc.offset; }
   private: FieldEncodedUnderlyingSecurityDesc fieldEncodedUnderlyingSecurityDesc;

   public:
   bool isSetUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.offset >= 0; }
   FieldUnderlyingCPProgram::ValueType getUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.getValue( buf ); }
   const char * ptrToUnderlyingCPProgram() const { return buf + fieldUnderlyingCPProgram.offset; }
   private: FieldUnderlyingCPProgram fieldUnderlyingCPProgram;

   public:
   bool isSetUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.offset >= 0; }
   FieldUnderlyingCPRegType::ValueType getUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.getValue( buf ); }
   const char * ptrToUnderlyingCPRegType() const { return buf + fieldUnderlyingCPRegType.offset; }
   private: FieldUnderlyingCPRegType fieldUnderlyingCPRegType;

   public:
   bool isSetUnderlyingCurrency() const { return fieldUnderlyingCurrency.offset >= 0; }
   FieldUnderlyingCurrency::ValueType getUnderlyingCurrency() const { return fieldUnderlyingCurrency.getValue( buf ); }
   const char * ptrToUnderlyingCurrency() const { return buf + fieldUnderlyingCurrency.offset; }
   private: FieldUnderlyingCurrency fieldUnderlyingCurrency;

   public:
   bool isSetUnderlyingQty() const { return fieldUnderlyingQty.offset >= 0; }
   FieldUnderlyingQty::ValueType getUnderlyingQty() const { return fieldUnderlyingQty.getValue( buf ); }
   const char * ptrToUnderlyingQty() const { return buf + fieldUnderlyingQty.offset; }
   private: FieldUnderlyingQty fieldUnderlyingQty;

   public:
   bool isSetUnderlyingPx() const { return fieldUnderlyingPx.offset >= 0; }
   FieldUnderlyingPx::ValueType getUnderlyingPx() const { return fieldUnderlyingPx.getValue( buf ); }
   const char * ptrToUnderlyingPx() const { return buf + fieldUnderlyingPx.offset; }
   private: FieldUnderlyingPx fieldUnderlyingPx;

   public:
   bool isSetUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.offset >= 0; }
   FieldUnderlyingDirtyPrice::ValueType getUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.getValue( buf ); }
   const char * ptrToUnderlyingDirtyPrice() const { return buf + fieldUnderlyingDirtyPrice.offset; }
   private: FieldUnderlyingDirtyPrice fieldUnderlyingDirtyPrice;

   public:
   bool isSetUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.offset >= 0; }
   FieldUnderlyingEndPrice::ValueType getUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.getValue( buf ); }
   const char * ptrToUnderlyingEndPrice() const { return buf + fieldUnderlyingEndPrice.offset; }
   private: FieldUnderlyingEndPrice fieldUnderlyingEndPrice;

   public:
   bool isSetUnderlyingStartValue() const { return fieldUnderlyingStartValue.offset >= 0; }
   FieldUnderlyingStartValue::ValueType getUnderlyingStartValue() const { return fieldUnderlyingStartValue.getValue( buf ); }
   const char * ptrToUnderlyingStartValue() const { return buf + fieldUnderlyingStartValue.offset; }
   private: FieldUnderlyingStartValue fieldUnderlyingStartValue;

   public:
   bool isSetUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.offset >= 0; }
   FieldUnderlyingCurrentValue::ValueType getUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.getValue( buf ); }
   const char * ptrToUnderlyingCurrentValue() const { return buf + fieldUnderlyingCurrentValue.offset; }
   private: FieldUnderlyingCurrentValue fieldUnderlyingCurrentValue;

   public:
   bool isSetUnderlyingEndValue() const { return fieldUnderlyingEndValue.offset >= 0; }
   FieldUnderlyingEndValue::ValueType getUnderlyingEndValue() const { return fieldUnderlyingEndValue.getValue( buf ); }
   const char * ptrToUnderlyingEndValue() const { return buf + fieldUnderlyingEndValue.offset; }
   private: FieldUnderlyingEndValue fieldUnderlyingEndValue;

   public:
   bool isSetNoUnderlyingStips() const { return fieldNoUnderlyingStips.offset >= 0; }
   FieldNoUnderlyingStips::ValueType getNoUnderlyingStips() const { return fieldNoUnderlyingStips.getValue( buf ); }
   const char * ptrToNoUnderlyingStips() const { return buf + fieldNoUnderlyingStips.offset; }
   private: FieldNoUnderlyingStips fieldNoUnderlyingStips;
  
   public:
   std::size_t getGroupCountUnderlyingStips() const { return groupsUnderlyingStips.size(); } 
   const GroupUnderlyingStips & getGroupUnderlyingStips( std::size_t idx ) const { return groupsUnderlyingStips[ idx ]; } 
   private: GroupUnderlyingStips::Array groupsUnderlyingStips{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageNewOrderCross: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetCrossID() const { return fieldCrossID.offset >= 0; }
   FieldCrossID::ValueType getCrossID() const { return fieldCrossID.getValue( buf ); }
   const char * ptrToCrossID() const { return buf + fieldCrossID.offset; }
   private: FieldCrossID fieldCrossID;

   public:
   bool isSetCrossType() const { return fieldCrossType.offset >= 0; }
   FieldCrossType::ValueType getCrossType() const { return fieldCrossType.getValue( buf ); }
   const char * ptrToCrossType() const { return buf + fieldCrossType.offset; }
   private: FieldCrossType fieldCrossType;

   public:
   bool isSetCrossPrioritization() const { return fieldCrossPrioritization.offset >= 0; }
   FieldCrossPrioritization::ValueType getCrossPrioritization() const { return fieldCrossPrioritization.getValue( buf ); }
   const char * ptrToCrossPrioritization() const { return buf + fieldCrossPrioritization.offset; }
   private: FieldCrossPrioritization fieldCrossPrioritization;

   public:
   bool isSetNoSides() const { return fieldNoSides.offset >= 0; }
   FieldNoSides::ValueType getNoSides() const { return fieldNoSides.getValue( buf ); }
   const char * ptrToNoSides() const { return buf + fieldNoSides.offset; }
   private: FieldNoSides fieldNoSides;
  
   public:
   std::size_t getGroupCountSides() const { return groupsSides.size(); } 
   const GroupSides & getGroupSides( std::size_t idx ) const { return groupsSides[ idx ]; } 
   private: GroupSides::Array groupsSides{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetHandlInst() const { return fieldHandlInst.offset >= 0; }
   FieldHandlInst::ValueType getHandlInst() const { return fieldHandlInst.getValue( buf ); }
   const char * ptrToHandlInst() const { return buf + fieldHandlInst.offset; }
   private: FieldHandlInst fieldHandlInst;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetMaxFloor() const { return fieldMaxFloor.offset >= 0; }
   FieldMaxFloor::ValueType getMaxFloor() const { return fieldMaxFloor.getValue( buf ); }
   const char * ptrToMaxFloor() const { return buf + fieldMaxFloor.offset; }
   private: FieldMaxFloor fieldMaxFloor;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetProcessCode() const { return fieldProcessCode.offset >= 0; }
   FieldProcessCode::ValueType getProcessCode() const { return fieldProcessCode.getValue( buf ); }
   const char * ptrToProcessCode() const { return buf + fieldProcessCode.offset; }
   private: FieldProcessCode fieldProcessCode;

   public:
   bool isSetPrevClosePx() const { return fieldPrevClosePx.offset >= 0; }
   FieldPrevClosePx::ValueType getPrevClosePx() const { return fieldPrevClosePx.getValue( buf ); }
   const char * ptrToPrevClosePx() const { return buf + fieldPrevClosePx.offset; }
   private: FieldPrevClosePx fieldPrevClosePx;

   public:
   bool isSetLocateReqd() const { return fieldLocateReqd.offset >= 0; }
   FieldLocateReqd::ValueType getLocateReqd() const { return fieldLocateReqd.getValue( buf ); }
   const char * ptrToLocateReqd() const { return buf + fieldLocateReqd.offset; }
   private: FieldLocateReqd fieldLocateReqd;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetStopPx() const { return fieldStopPx.offset >= 0; }
   FieldStopPx::ValueType getStopPx() const { return fieldStopPx.getValue( buf ); }
   const char * ptrToStopPx() const { return buf + fieldStopPx.offset; }
   private: FieldStopPx fieldStopPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetIOIID() const { return fieldIOIID.offset >= 0; }
   FieldIOIID::ValueType getIOIID() const { return fieldIOIID.getValue( buf ); }
   const char * ptrToIOIID() const { return buf + fieldIOIID.offset; }
   private: FieldIOIID fieldIOIID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetGTBookingInst() const { return fieldGTBookingInst.offset >= 0; }
   FieldGTBookingInst::ValueType getGTBookingInst() const { return fieldGTBookingInst.getValue( buf ); }
   const char * ptrToGTBookingInst() const { return buf + fieldGTBookingInst.offset; }
   private: FieldGTBookingInst fieldGTBookingInst;

   public:
   bool isSetMaxShow() const { return fieldMaxShow.offset >= 0; }
   FieldMaxShow::ValueType getMaxShow() const { return fieldMaxShow.getValue( buf ); }
   const char * ptrToMaxShow() const { return buf + fieldMaxShow.offset; }
   private: FieldMaxShow fieldMaxShow;

   public:
   bool isSetPegOffsetValue() const { return fieldPegOffsetValue.offset >= 0; }
   FieldPegOffsetValue::ValueType getPegOffsetValue() const { return fieldPegOffsetValue.getValue( buf ); }
   const char * ptrToPegOffsetValue() const { return buf + fieldPegOffsetValue.offset; }
   private: FieldPegOffsetValue fieldPegOffsetValue;

   public:
   bool isSetPegMoveType() const { return fieldPegMoveType.offset >= 0; }
   FieldPegMoveType::ValueType getPegMoveType() const { return fieldPegMoveType.getValue( buf ); }
   const char * ptrToPegMoveType() const { return buf + fieldPegMoveType.offset; }
   private: FieldPegMoveType fieldPegMoveType;

   public:
   bool isSetPegOffsetType() const { return fieldPegOffsetType.offset >= 0; }
   FieldPegOffsetType::ValueType getPegOffsetType() const { return fieldPegOffsetType.getValue( buf ); }
   const char * ptrToPegOffsetType() const { return buf + fieldPegOffsetType.offset; }
   private: FieldPegOffsetType fieldPegOffsetType;

   public:
   bool isSetPegLimitType() const { return fieldPegLimitType.offset >= 0; }
   FieldPegLimitType::ValueType getPegLimitType() const { return fieldPegLimitType.getValue( buf ); }
   const char * ptrToPegLimitType() const { return buf + fieldPegLimitType.offset; }
   private: FieldPegLimitType fieldPegLimitType;

   public:
   bool isSetPegRoundDirection() const { return fieldPegRoundDirection.offset >= 0; }
   FieldPegRoundDirection::ValueType getPegRoundDirection() const { return fieldPegRoundDirection.getValue( buf ); }
   const char * ptrToPegRoundDirection() const { return buf + fieldPegRoundDirection.offset; }
   private: FieldPegRoundDirection fieldPegRoundDirection;

   public:
   bool isSetPegScope() const { return fieldPegScope.offset >= 0; }
   FieldPegScope::ValueType getPegScope() const { return fieldPegScope.getValue( buf ); }
   const char * ptrToPegScope() const { return buf + fieldPegScope.offset; }
   private: FieldPegScope fieldPegScope;

   public:
   bool isSetDiscretionInst() const { return fieldDiscretionInst.offset >= 0; }
   FieldDiscretionInst::ValueType getDiscretionInst() const { return fieldDiscretionInst.getValue( buf ); }
   const char * ptrToDiscretionInst() const { return buf + fieldDiscretionInst.offset; }
   private: FieldDiscretionInst fieldDiscretionInst;

   public:
   bool isSetDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.offset >= 0; }
   FieldDiscretionOffsetValue::ValueType getDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.getValue( buf ); }
   const char * ptrToDiscretionOffsetValue() const { return buf + fieldDiscretionOffsetValue.offset; }
   private: FieldDiscretionOffsetValue fieldDiscretionOffsetValue;

   public:
   bool isSetDiscretionMoveType() const { return fieldDiscretionMoveType.offset >= 0; }
   FieldDiscretionMoveType::ValueType getDiscretionMoveType() const { return fieldDiscretionMoveType.getValue( buf ); }
   const char * ptrToDiscretionMoveType() const { return buf + fieldDiscretionMoveType.offset; }
   private: FieldDiscretionMoveType fieldDiscretionMoveType;

   public:
   bool isSetDiscretionOffsetType() const { return fieldDiscretionOffsetType.offset >= 0; }
   FieldDiscretionOffsetType::ValueType getDiscretionOffsetType() const { return fieldDiscretionOffsetType.getValue( buf ); }
   const char * ptrToDiscretionOffsetType() const { return buf + fieldDiscretionOffsetType.offset; }
   private: FieldDiscretionOffsetType fieldDiscretionOffsetType;

   public:
   bool isSetDiscretionLimitType() const { return fieldDiscretionLimitType.offset >= 0; }
   FieldDiscretionLimitType::ValueType getDiscretionLimitType() const { return fieldDiscretionLimitType.getValue( buf ); }
   const char * ptrToDiscretionLimitType() const { return buf + fieldDiscretionLimitType.offset; }
   private: FieldDiscretionLimitType fieldDiscretionLimitType;

   public:
   bool isSetDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.offset >= 0; }
   FieldDiscretionRoundDirection::ValueType getDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.getValue( buf ); }
   const char * ptrToDiscretionRoundDirection() const { return buf + fieldDiscretionRoundDirection.offset; }
   private: FieldDiscretionRoundDirection fieldDiscretionRoundDirection;

   public:
   bool isSetDiscretionScope() const { return fieldDiscretionScope.offset >= 0; }
   FieldDiscretionScope::ValueType getDiscretionScope() const { return fieldDiscretionScope.getValue( buf ); }
   const char * ptrToDiscretionScope() const { return buf + fieldDiscretionScope.offset; }
   private: FieldDiscretionScope fieldDiscretionScope;

   public:
   bool isSetTargetStrategy() const { return fieldTargetStrategy.offset >= 0; }
   FieldTargetStrategy::ValueType getTargetStrategy() const { return fieldTargetStrategy.getValue( buf ); }
   const char * ptrToTargetStrategy() const { return buf + fieldTargetStrategy.offset; }
   private: FieldTargetStrategy fieldTargetStrategy;

   public:
   bool isSetTargetStrategyParameters() const { return fieldTargetStrategyParameters.offset >= 0; }
   FieldTargetStrategyParameters::ValueType getTargetStrategyParameters() const { return fieldTargetStrategyParameters.getValue( buf ); }
   const char * ptrToTargetStrategyParameters() const { return buf + fieldTargetStrategyParameters.offset; }
   private: FieldTargetStrategyParameters fieldTargetStrategyParameters;

   public:
   bool isSetParticipationRate() const { return fieldParticipationRate.offset >= 0; }
   FieldParticipationRate::ValueType getParticipationRate() const { return fieldParticipationRate.getValue( buf ); }
   const char * ptrToParticipationRate() const { return buf + fieldParticipationRate.offset; }
   private: FieldParticipationRate fieldParticipationRate;

   public:
   bool isSetCancellationRights() const { return fieldCancellationRights.offset >= 0; }
   FieldCancellationRights::ValueType getCancellationRights() const { return fieldCancellationRights.getValue( buf ); }
   const char * ptrToCancellationRights() const { return buf + fieldCancellationRights.offset; }
   private: FieldCancellationRights fieldCancellationRights;

   public:
   bool isSetMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.offset >= 0; }
   FieldMoneyLaunderingStatus::ValueType getMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.getValue( buf ); }
   const char * ptrToMoneyLaunderingStatus() const { return buf + fieldMoneyLaunderingStatus.offset; }
   private: FieldMoneyLaunderingStatus fieldMoneyLaunderingStatus;

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetDesignation() const { return fieldDesignation.offset >= 0; }
   FieldDesignation::ValueType getDesignation() const { return fieldDesignation.getValue( buf ); }
   const char * ptrToDesignation() const { return buf + fieldDesignation.offset; }
   private: FieldDesignation fieldDesignation;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageCrossOrderCancelReplaceRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetCrossID() const { return fieldCrossID.offset >= 0; }
   FieldCrossID::ValueType getCrossID() const { return fieldCrossID.getValue( buf ); }
   const char * ptrToCrossID() const { return buf + fieldCrossID.offset; }
   private: FieldCrossID fieldCrossID;

   public:
   bool isSetOrigCrossID() const { return fieldOrigCrossID.offset >= 0; }
   FieldOrigCrossID::ValueType getOrigCrossID() const { return fieldOrigCrossID.getValue( buf ); }
   const char * ptrToOrigCrossID() const { return buf + fieldOrigCrossID.offset; }
   private: FieldOrigCrossID fieldOrigCrossID;

   public:
   bool isSetCrossType() const { return fieldCrossType.offset >= 0; }
   FieldCrossType::ValueType getCrossType() const { return fieldCrossType.getValue( buf ); }
   const char * ptrToCrossType() const { return buf + fieldCrossType.offset; }
   private: FieldCrossType fieldCrossType;

   public:
   bool isSetCrossPrioritization() const { return fieldCrossPrioritization.offset >= 0; }
   FieldCrossPrioritization::ValueType getCrossPrioritization() const { return fieldCrossPrioritization.getValue( buf ); }
   const char * ptrToCrossPrioritization() const { return buf + fieldCrossPrioritization.offset; }
   private: FieldCrossPrioritization fieldCrossPrioritization;

   public:
   bool isSetNoSides() const { return fieldNoSides.offset >= 0; }
   FieldNoSides::ValueType getNoSides() const { return fieldNoSides.getValue( buf ); }
   const char * ptrToNoSides() const { return buf + fieldNoSides.offset; }
   private: FieldNoSides fieldNoSides;
  
   public:
   std::size_t getGroupCountSides() const { return groupsSides.size(); } 
   const GroupSides & getGroupSides( std::size_t idx ) const { return groupsSides[ idx ]; } 
   private: GroupSides::Array groupsSides{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetHandlInst() const { return fieldHandlInst.offset >= 0; }
   FieldHandlInst::ValueType getHandlInst() const { return fieldHandlInst.getValue( buf ); }
   const char * ptrToHandlInst() const { return buf + fieldHandlInst.offset; }
   private: FieldHandlInst fieldHandlInst;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetMaxFloor() const { return fieldMaxFloor.offset >= 0; }
   FieldMaxFloor::ValueType getMaxFloor() const { return fieldMaxFloor.getValue( buf ); }
   const char * ptrToMaxFloor() const { return buf + fieldMaxFloor.offset; }
   private: FieldMaxFloor fieldMaxFloor;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetProcessCode() const { return fieldProcessCode.offset >= 0; }
   FieldProcessCode::ValueType getProcessCode() const { return fieldProcessCode.getValue( buf ); }
   const char * ptrToProcessCode() const { return buf + fieldProcessCode.offset; }
   private: FieldProcessCode fieldProcessCode;

   public:
   bool isSetPrevClosePx() const { return fieldPrevClosePx.offset >= 0; }
   FieldPrevClosePx::ValueType getPrevClosePx() const { return fieldPrevClosePx.getValue( buf ); }
   const char * ptrToPrevClosePx() const { return buf + fieldPrevClosePx.offset; }
   private: FieldPrevClosePx fieldPrevClosePx;

   public:
   bool isSetLocateReqd() const { return fieldLocateReqd.offset >= 0; }
   FieldLocateReqd::ValueType getLocateReqd() const { return fieldLocateReqd.getValue( buf ); }
   const char * ptrToLocateReqd() const { return buf + fieldLocateReqd.offset; }
   private: FieldLocateReqd fieldLocateReqd;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetStopPx() const { return fieldStopPx.offset >= 0; }
   FieldStopPx::ValueType getStopPx() const { return fieldStopPx.getValue( buf ); }
   const char * ptrToStopPx() const { return buf + fieldStopPx.offset; }
   private: FieldStopPx fieldStopPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetIOIID() const { return fieldIOIID.offset >= 0; }
   FieldIOIID::ValueType getIOIID() const { return fieldIOIID.getValue( buf ); }
   const char * ptrToIOIID() const { return buf + fieldIOIID.offset; }
   private: FieldIOIID fieldIOIID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetGTBookingInst() const { return fieldGTBookingInst.offset >= 0; }
   FieldGTBookingInst::ValueType getGTBookingInst() const { return fieldGTBookingInst.getValue( buf ); }
   const char * ptrToGTBookingInst() const { return buf + fieldGTBookingInst.offset; }
   private: FieldGTBookingInst fieldGTBookingInst;

   public:
   bool isSetMaxShow() const { return fieldMaxShow.offset >= 0; }
   FieldMaxShow::ValueType getMaxShow() const { return fieldMaxShow.getValue( buf ); }
   const char * ptrToMaxShow() const { return buf + fieldMaxShow.offset; }
   private: FieldMaxShow fieldMaxShow;

   public:
   bool isSetPegOffsetValue() const { return fieldPegOffsetValue.offset >= 0; }
   FieldPegOffsetValue::ValueType getPegOffsetValue() const { return fieldPegOffsetValue.getValue( buf ); }
   const char * ptrToPegOffsetValue() const { return buf + fieldPegOffsetValue.offset; }
   private: FieldPegOffsetValue fieldPegOffsetValue;

   public:
   bool isSetPegMoveType() const { return fieldPegMoveType.offset >= 0; }
   FieldPegMoveType::ValueType getPegMoveType() const { return fieldPegMoveType.getValue( buf ); }
   const char * ptrToPegMoveType() const { return buf + fieldPegMoveType.offset; }
   private: FieldPegMoveType fieldPegMoveType;

   public:
   bool isSetPegOffsetType() const { return fieldPegOffsetType.offset >= 0; }
   FieldPegOffsetType::ValueType getPegOffsetType() const { return fieldPegOffsetType.getValue( buf ); }
   const char * ptrToPegOffsetType() const { return buf + fieldPegOffsetType.offset; }
   private: FieldPegOffsetType fieldPegOffsetType;

   public:
   bool isSetPegLimitType() const { return fieldPegLimitType.offset >= 0; }
   FieldPegLimitType::ValueType getPegLimitType() const { return fieldPegLimitType.getValue( buf ); }
   const char * ptrToPegLimitType() const { return buf + fieldPegLimitType.offset; }
   private: FieldPegLimitType fieldPegLimitType;

   public:
   bool isSetPegRoundDirection() const { return fieldPegRoundDirection.offset >= 0; }
   FieldPegRoundDirection::ValueType getPegRoundDirection() const { return fieldPegRoundDirection.getValue( buf ); }
   const char * ptrToPegRoundDirection() const { return buf + fieldPegRoundDirection.offset; }
   private: FieldPegRoundDirection fieldPegRoundDirection;

   public:
   bool isSetPegScope() const { return fieldPegScope.offset >= 0; }
   FieldPegScope::ValueType getPegScope() const { return fieldPegScope.getValue( buf ); }
   const char * ptrToPegScope() const { return buf + fieldPegScope.offset; }
   private: FieldPegScope fieldPegScope;

   public:
   bool isSetDiscretionInst() const { return fieldDiscretionInst.offset >= 0; }
   FieldDiscretionInst::ValueType getDiscretionInst() const { return fieldDiscretionInst.getValue( buf ); }
   const char * ptrToDiscretionInst() const { return buf + fieldDiscretionInst.offset; }
   private: FieldDiscretionInst fieldDiscretionInst;

   public:
   bool isSetDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.offset >= 0; }
   FieldDiscretionOffsetValue::ValueType getDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.getValue( buf ); }
   const char * ptrToDiscretionOffsetValue() const { return buf + fieldDiscretionOffsetValue.offset; }
   private: FieldDiscretionOffsetValue fieldDiscretionOffsetValue;

   public:
   bool isSetDiscretionMoveType() const { return fieldDiscretionMoveType.offset >= 0; }
   FieldDiscretionMoveType::ValueType getDiscretionMoveType() const { return fieldDiscretionMoveType.getValue( buf ); }
   const char * ptrToDiscretionMoveType() const { return buf + fieldDiscretionMoveType.offset; }
   private: FieldDiscretionMoveType fieldDiscretionMoveType;

   public:
   bool isSetDiscretionOffsetType() const { return fieldDiscretionOffsetType.offset >= 0; }
   FieldDiscretionOffsetType::ValueType getDiscretionOffsetType() const { return fieldDiscretionOffsetType.getValue( buf ); }
   const char * ptrToDiscretionOffsetType() const { return buf + fieldDiscretionOffsetType.offset; }
   private: FieldDiscretionOffsetType fieldDiscretionOffsetType;

   public:
   bool isSetDiscretionLimitType() const { return fieldDiscretionLimitType.offset >= 0; }
   FieldDiscretionLimitType::ValueType getDiscretionLimitType() const { return fieldDiscretionLimitType.getValue( buf ); }
   const char * ptrToDiscretionLimitType() const { return buf + fieldDiscretionLimitType.offset; }
   private: FieldDiscretionLimitType fieldDiscretionLimitType;

   public:
   bool isSetDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.offset >= 0; }
   FieldDiscretionRoundDirection::ValueType getDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.getValue( buf ); }
   const char * ptrToDiscretionRoundDirection() const { return buf + fieldDiscretionRoundDirection.offset; }
   private: FieldDiscretionRoundDirection fieldDiscretionRoundDirection;

   public:
   bool isSetDiscretionScope() const { return fieldDiscretionScope.offset >= 0; }
   FieldDiscretionScope::ValueType getDiscretionScope() const { return fieldDiscretionScope.getValue( buf ); }
   const char * ptrToDiscretionScope() const { return buf + fieldDiscretionScope.offset; }
   private: FieldDiscretionScope fieldDiscretionScope;

   public:
   bool isSetTargetStrategy() const { return fieldTargetStrategy.offset >= 0; }
   FieldTargetStrategy::ValueType getTargetStrategy() const { return fieldTargetStrategy.getValue( buf ); }
   const char * ptrToTargetStrategy() const { return buf + fieldTargetStrategy.offset; }
   private: FieldTargetStrategy fieldTargetStrategy;

   public:
   bool isSetTargetStrategyParameters() const { return fieldTargetStrategyParameters.offset >= 0; }
   FieldTargetStrategyParameters::ValueType getTargetStrategyParameters() const { return fieldTargetStrategyParameters.getValue( buf ); }
   const char * ptrToTargetStrategyParameters() const { return buf + fieldTargetStrategyParameters.offset; }
   private: FieldTargetStrategyParameters fieldTargetStrategyParameters;

   public:
   bool isSetParticipationRate() const { return fieldParticipationRate.offset >= 0; }
   FieldParticipationRate::ValueType getParticipationRate() const { return fieldParticipationRate.getValue( buf ); }
   const char * ptrToParticipationRate() const { return buf + fieldParticipationRate.offset; }
   private: FieldParticipationRate fieldParticipationRate;

   public:
   bool isSetCancellationRights() const { return fieldCancellationRights.offset >= 0; }
   FieldCancellationRights::ValueType getCancellationRights() const { return fieldCancellationRights.getValue( buf ); }
   const char * ptrToCancellationRights() const { return buf + fieldCancellationRights.offset; }
   private: FieldCancellationRights fieldCancellationRights;

   public:
   bool isSetMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.offset >= 0; }
   FieldMoneyLaunderingStatus::ValueType getMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.getValue( buf ); }
   const char * ptrToMoneyLaunderingStatus() const { return buf + fieldMoneyLaunderingStatus.offset; }
   private: FieldMoneyLaunderingStatus fieldMoneyLaunderingStatus;

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetDesignation() const { return fieldDesignation.offset >= 0; }
   FieldDesignation::ValueType getDesignation() const { return fieldDesignation.getValue( buf ); }
   const char * ptrToDesignation() const { return buf + fieldDesignation.offset; }
   private: FieldDesignation fieldDesignation;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageCrossOrderCancelRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetCrossID() const { return fieldCrossID.offset >= 0; }
   FieldCrossID::ValueType getCrossID() const { return fieldCrossID.getValue( buf ); }
   const char * ptrToCrossID() const { return buf + fieldCrossID.offset; }
   private: FieldCrossID fieldCrossID;

   public:
   bool isSetOrigCrossID() const { return fieldOrigCrossID.offset >= 0; }
   FieldOrigCrossID::ValueType getOrigCrossID() const { return fieldOrigCrossID.getValue( buf ); }
   const char * ptrToOrigCrossID() const { return buf + fieldOrigCrossID.offset; }
   private: FieldOrigCrossID fieldOrigCrossID;

   public:
   bool isSetCrossType() const { return fieldCrossType.offset >= 0; }
   FieldCrossType::ValueType getCrossType() const { return fieldCrossType.getValue( buf ); }
   const char * ptrToCrossType() const { return buf + fieldCrossType.offset; }
   private: FieldCrossType fieldCrossType;

   public:
   bool isSetCrossPrioritization() const { return fieldCrossPrioritization.offset >= 0; }
   FieldCrossPrioritization::ValueType getCrossPrioritization() const { return fieldCrossPrioritization.getValue( buf ); }
   const char * ptrToCrossPrioritization() const { return buf + fieldCrossPrioritization.offset; }
   private: FieldCrossPrioritization fieldCrossPrioritization;

   public:
   bool isSetNoSides() const { return fieldNoSides.offset >= 0; }
   FieldNoSides::ValueType getNoSides() const { return fieldNoSides.getValue( buf ); }
   const char * ptrToNoSides() const { return buf + fieldNoSides.offset; }
   private: FieldNoSides fieldNoSides;
  
   public:
   std::size_t getGroupCountSides() const { return groupsSides.size(); } 
   const GroupSides & getGroupSides( std::size_t idx ) const { return groupsSides[ idx ]; } 
   private: GroupSides::Array groupsSides{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSecurityTypeRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityReqID() const { return fieldSecurityReqID.offset >= 0; }
   FieldSecurityReqID::ValueType getSecurityReqID() const { return fieldSecurityReqID.getValue( buf ); }
   const char * ptrToSecurityReqID() const { return buf + fieldSecurityReqID.offset; }
   private: FieldSecurityReqID fieldSecurityReqID;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSecurityTypes: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityReqID() const { return fieldSecurityReqID.offset >= 0; }
   FieldSecurityReqID::ValueType getSecurityReqID() const { return fieldSecurityReqID.getValue( buf ); }
   const char * ptrToSecurityReqID() const { return buf + fieldSecurityReqID.offset; }
   private: FieldSecurityReqID fieldSecurityReqID;

   public:
   bool isSetSecurityResponseID() const { return fieldSecurityResponseID.offset >= 0; }
   FieldSecurityResponseID::ValueType getSecurityResponseID() const { return fieldSecurityResponseID.getValue( buf ); }
   const char * ptrToSecurityResponseID() const { return buf + fieldSecurityResponseID.offset; }
   private: FieldSecurityResponseID fieldSecurityResponseID;

   public:
   bool isSetSecurityResponseType() const { return fieldSecurityResponseType.offset >= 0; }
   FieldSecurityResponseType::ValueType getSecurityResponseType() const { return fieldSecurityResponseType.getValue( buf ); }
   const char * ptrToSecurityResponseType() const { return buf + fieldSecurityResponseType.offset; }
   private: FieldSecurityResponseType fieldSecurityResponseType;

   public:
   bool isSetTotNoSecurityTypes() const { return fieldTotNoSecurityTypes.offset >= 0; }
   FieldTotNoSecurityTypes::ValueType getTotNoSecurityTypes() const { return fieldTotNoSecurityTypes.getValue( buf ); }
   const char * ptrToTotNoSecurityTypes() const { return buf + fieldTotNoSecurityTypes.offset; }
   private: FieldTotNoSecurityTypes fieldTotNoSecurityTypes;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoSecurityTypes() const { return fieldNoSecurityTypes.offset >= 0; }
   FieldNoSecurityTypes::ValueType getNoSecurityTypes() const { return fieldNoSecurityTypes.getValue( buf ); }
   const char * ptrToNoSecurityTypes() const { return buf + fieldNoSecurityTypes.offset; }
   private: FieldNoSecurityTypes fieldNoSecurityTypes;
  
   public:
   std::size_t getGroupCountSecurityTypes() const { return groupsSecurityTypes.size(); } 
   const GroupSecurityTypes & getGroupSecurityTypes( std::size_t idx ) const { return groupsSecurityTypes[ idx ]; } 
   private: GroupSecurityTypes::Array groupsSecurityTypes{ 10 };

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSecurityListRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityReqID() const { return fieldSecurityReqID.offset >= 0; }
   FieldSecurityReqID::ValueType getSecurityReqID() const { return fieldSecurityReqID.getValue( buf ); }
   const char * ptrToSecurityReqID() const { return buf + fieldSecurityReqID.offset; }
   private: FieldSecurityReqID fieldSecurityReqID;

   public:
   bool isSetSecurityListRequestType() const { return fieldSecurityListRequestType.offset >= 0; }
   FieldSecurityListRequestType::ValueType getSecurityListRequestType() const { return fieldSecurityListRequestType.getValue( buf ); }
   const char * ptrToSecurityListRequestType() const { return buf + fieldSecurityListRequestType.offset; }
   private: FieldSecurityListRequestType fieldSecurityListRequestType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSecurityList: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityReqID() const { return fieldSecurityReqID.offset >= 0; }
   FieldSecurityReqID::ValueType getSecurityReqID() const { return fieldSecurityReqID.getValue( buf ); }
   const char * ptrToSecurityReqID() const { return buf + fieldSecurityReqID.offset; }
   private: FieldSecurityReqID fieldSecurityReqID;

   public:
   bool isSetSecurityResponseID() const { return fieldSecurityResponseID.offset >= 0; }
   FieldSecurityResponseID::ValueType getSecurityResponseID() const { return fieldSecurityResponseID.getValue( buf ); }
   const char * ptrToSecurityResponseID() const { return buf + fieldSecurityResponseID.offset; }
   private: FieldSecurityResponseID fieldSecurityResponseID;

   public:
   bool isSetSecurityRequestResult() const { return fieldSecurityRequestResult.offset >= 0; }
   FieldSecurityRequestResult::ValueType getSecurityRequestResult() const { return fieldSecurityRequestResult.getValue( buf ); }
   const char * ptrToSecurityRequestResult() const { return buf + fieldSecurityRequestResult.offset; }
   private: FieldSecurityRequestResult fieldSecurityRequestResult;

   public:
   bool isSetTotNoRelatedSym() const { return fieldTotNoRelatedSym.offset >= 0; }
   FieldTotNoRelatedSym::ValueType getTotNoRelatedSym() const { return fieldTotNoRelatedSym.getValue( buf ); }
   const char * ptrToTotNoRelatedSym() const { return buf + fieldTotNoRelatedSym.offset; }
   private: FieldTotNoRelatedSym fieldTotNoRelatedSym;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoRelatedSym() const { return fieldNoRelatedSym.offset >= 0; }
   FieldNoRelatedSym::ValueType getNoRelatedSym() const { return fieldNoRelatedSym.getValue( buf ); }
   const char * ptrToNoRelatedSym() const { return buf + fieldNoRelatedSym.offset; }
   private: FieldNoRelatedSym fieldNoRelatedSym;
  
   public:
   std::size_t getGroupCountRelatedSym() const { return groupsRelatedSym.size(); } 
   const GroupRelatedSym & getGroupRelatedSym( std::size_t idx ) const { return groupsRelatedSym[ idx ]; } 
   private: GroupRelatedSym::Array groupsRelatedSym{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageDerivativeSecurityListRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityReqID() const { return fieldSecurityReqID.offset >= 0; }
   FieldSecurityReqID::ValueType getSecurityReqID() const { return fieldSecurityReqID.getValue( buf ); }
   const char * ptrToSecurityReqID() const { return buf + fieldSecurityReqID.offset; }
   private: FieldSecurityReqID fieldSecurityReqID;

   public:
   bool isSetSecurityListRequestType() const { return fieldSecurityListRequestType.offset >= 0; }
   FieldSecurityListRequestType::ValueType getSecurityListRequestType() const { return fieldSecurityListRequestType.getValue( buf ); }
   const char * ptrToSecurityListRequestType() const { return buf + fieldSecurityListRequestType.offset; }
   private: FieldSecurityListRequestType fieldSecurityListRequestType;

   public:
   bool isSetUnderlyingSymbol() const { return fieldUnderlyingSymbol.offset >= 0; }
   FieldUnderlyingSymbol::ValueType getUnderlyingSymbol() const { return fieldUnderlyingSymbol.getValue( buf ); }
   const char * ptrToUnderlyingSymbol() const { return buf + fieldUnderlyingSymbol.offset; }
   private: FieldUnderlyingSymbol fieldUnderlyingSymbol;

   public:
   bool isSetUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.offset >= 0; }
   FieldUnderlyingSymbolSfx::ValueType getUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.getValue( buf ); }
   const char * ptrToUnderlyingSymbolSfx() const { return buf + fieldUnderlyingSymbolSfx.offset; }
   private: FieldUnderlyingSymbolSfx fieldUnderlyingSymbolSfx;

   public:
   bool isSetUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.offset >= 0; }
   FieldUnderlyingSecurityID::ValueType getUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.getValue( buf ); }
   const char * ptrToUnderlyingSecurityID() const { return buf + fieldUnderlyingSecurityID.offset; }
   private: FieldUnderlyingSecurityID fieldUnderlyingSecurityID;

   public:
   bool isSetUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.offset >= 0; }
   FieldUnderlyingSecurityIDSource::ValueType getUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.getValue( buf ); }
   const char * ptrToUnderlyingSecurityIDSource() const { return buf + fieldUnderlyingSecurityIDSource.offset; }
   private: FieldUnderlyingSecurityIDSource fieldUnderlyingSecurityIDSource;

   public:
   bool isSetNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.offset >= 0; }
   FieldNoUnderlyingSecurityAltID::ValueType getNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.getValue( buf ); }
   const char * ptrToNoUnderlyingSecurityAltID() const { return buf + fieldNoUnderlyingSecurityAltID.offset; }
   private: FieldNoUnderlyingSecurityAltID fieldNoUnderlyingSecurityAltID;
  
   public:
   std::size_t getGroupCountUnderlyingSecurityAltID() const { return groupsUnderlyingSecurityAltID.size(); } 
   const GroupUnderlyingSecurityAltID & getGroupUnderlyingSecurityAltID( std::size_t idx ) const { return groupsUnderlyingSecurityAltID[ idx ]; } 
   private: GroupUnderlyingSecurityAltID::Array groupsUnderlyingSecurityAltID{ 10 };

   public:
   bool isSetUnderlyingProduct() const { return fieldUnderlyingProduct.offset >= 0; }
   FieldUnderlyingProduct::ValueType getUnderlyingProduct() const { return fieldUnderlyingProduct.getValue( buf ); }
   const char * ptrToUnderlyingProduct() const { return buf + fieldUnderlyingProduct.offset; }
   private: FieldUnderlyingProduct fieldUnderlyingProduct;

   public:
   bool isSetUnderlyingCFICode() const { return fieldUnderlyingCFICode.offset >= 0; }
   FieldUnderlyingCFICode::ValueType getUnderlyingCFICode() const { return fieldUnderlyingCFICode.getValue( buf ); }
   const char * ptrToUnderlyingCFICode() const { return buf + fieldUnderlyingCFICode.offset; }
   private: FieldUnderlyingCFICode fieldUnderlyingCFICode;

   public:
   bool isSetUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.offset >= 0; }
   FieldUnderlyingSecurityType::ValueType getUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingSecurityType() const { return buf + fieldUnderlyingSecurityType.offset; }
   private: FieldUnderlyingSecurityType fieldUnderlyingSecurityType;

   public:
   bool isSetUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.offset >= 0; }
   FieldUnderlyingSecuritySubType::ValueType getUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.getValue( buf ); }
   const char * ptrToUnderlyingSecuritySubType() const { return buf + fieldUnderlyingSecuritySubType.offset; }
   private: FieldUnderlyingSecuritySubType fieldUnderlyingSecuritySubType;

   public:
   bool isSetUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.offset >= 0; }
   FieldUnderlyingMaturityMonthYear::ValueType getUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.getValue( buf ); }
   const char * ptrToUnderlyingMaturityMonthYear() const { return buf + fieldUnderlyingMaturityMonthYear.offset; }
   private: FieldUnderlyingMaturityMonthYear fieldUnderlyingMaturityMonthYear;

   public:
   bool isSetUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.offset >= 0; }
   FieldUnderlyingMaturityDate::ValueType getUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.getValue( buf ); }
   const char * ptrToUnderlyingMaturityDate() const { return buf + fieldUnderlyingMaturityDate.offset; }
   private: FieldUnderlyingMaturityDate fieldUnderlyingMaturityDate;

   public:
   bool isSetUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.offset >= 0; }
   FieldUnderlyingPutOrCall::ValueType getUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.getValue( buf ); }
   const char * ptrToUnderlyingPutOrCall() const { return buf + fieldUnderlyingPutOrCall.offset; }
   private: FieldUnderlyingPutOrCall fieldUnderlyingPutOrCall;

   public:
   bool isSetUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.offset >= 0; }
   FieldUnderlyingCouponPaymentDate::ValueType getUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.getValue( buf ); }
   const char * ptrToUnderlyingCouponPaymentDate() const { return buf + fieldUnderlyingCouponPaymentDate.offset; }
   private: FieldUnderlyingCouponPaymentDate fieldUnderlyingCouponPaymentDate;

   public:
   bool isSetUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.offset >= 0; }
   FieldUnderlyingIssueDate::ValueType getUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.getValue( buf ); }
   const char * ptrToUnderlyingIssueDate() const { return buf + fieldUnderlyingIssueDate.offset; }
   private: FieldUnderlyingIssueDate fieldUnderlyingIssueDate;

   public:
   bool isSetUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.offset >= 0; }
   FieldUnderlyingRepoCollateralSecurityType::ValueType getUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingRepoCollateralSecurityType() const { return buf + fieldUnderlyingRepoCollateralSecurityType.offset; }
   private: FieldUnderlyingRepoCollateralSecurityType fieldUnderlyingRepoCollateralSecurityType;

   public:
   bool isSetUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.offset >= 0; }
   FieldUnderlyingRepurchaseTerm::ValueType getUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseTerm() const { return buf + fieldUnderlyingRepurchaseTerm.offset; }
   private: FieldUnderlyingRepurchaseTerm fieldUnderlyingRepurchaseTerm;

   public:
   bool isSetUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.offset >= 0; }
   FieldUnderlyingRepurchaseRate::ValueType getUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseRate() const { return buf + fieldUnderlyingRepurchaseRate.offset; }
   private: FieldUnderlyingRepurchaseRate fieldUnderlyingRepurchaseRate;

   public:
   bool isSetUnderlyingFactor() const { return fieldUnderlyingFactor.offset >= 0; }
   FieldUnderlyingFactor::ValueType getUnderlyingFactor() const { return fieldUnderlyingFactor.getValue( buf ); }
   const char * ptrToUnderlyingFactor() const { return buf + fieldUnderlyingFactor.offset; }
   private: FieldUnderlyingFactor fieldUnderlyingFactor;

   public:
   bool isSetUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.offset >= 0; }
   FieldUnderlyingCreditRating::ValueType getUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.getValue( buf ); }
   const char * ptrToUnderlyingCreditRating() const { return buf + fieldUnderlyingCreditRating.offset; }
   private: FieldUnderlyingCreditRating fieldUnderlyingCreditRating;

   public:
   bool isSetUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.offset >= 0; }
   FieldUnderlyingInstrRegistry::ValueType getUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.getValue( buf ); }
   const char * ptrToUnderlyingInstrRegistry() const { return buf + fieldUnderlyingInstrRegistry.offset; }
   private: FieldUnderlyingInstrRegistry fieldUnderlyingInstrRegistry;

   public:
   bool isSetUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.offset >= 0; }
   FieldUnderlyingCountryOfIssue::ValueType getUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingCountryOfIssue() const { return buf + fieldUnderlyingCountryOfIssue.offset; }
   private: FieldUnderlyingCountryOfIssue fieldUnderlyingCountryOfIssue;

   public:
   bool isSetUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0; }
   FieldUnderlyingStateOrProvinceOfIssue::ValueType getUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingStateOrProvinceOfIssue() const { return buf + fieldUnderlyingStateOrProvinceOfIssue.offset; }
   private: FieldUnderlyingStateOrProvinceOfIssue fieldUnderlyingStateOrProvinceOfIssue;

   public:
   bool isSetUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.offset >= 0; }
   FieldUnderlyingLocaleOfIssue::ValueType getUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingLocaleOfIssue() const { return buf + fieldUnderlyingLocaleOfIssue.offset; }
   private: FieldUnderlyingLocaleOfIssue fieldUnderlyingLocaleOfIssue;

   public:
   bool isSetUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.offset >= 0; }
   FieldUnderlyingRedemptionDate::ValueType getUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.getValue( buf ); }
   const char * ptrToUnderlyingRedemptionDate() const { return buf + fieldUnderlyingRedemptionDate.offset; }
   private: FieldUnderlyingRedemptionDate fieldUnderlyingRedemptionDate;

   public:
   bool isSetUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.offset >= 0; }
   FieldUnderlyingStrikePrice::ValueType getUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.getValue( buf ); }
   const char * ptrToUnderlyingStrikePrice() const { return buf + fieldUnderlyingStrikePrice.offset; }
   private: FieldUnderlyingStrikePrice fieldUnderlyingStrikePrice;

   public:
   bool isSetUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.offset >= 0; }
   FieldUnderlyingStrikeCurrency::ValueType getUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.getValue( buf ); }
   const char * ptrToUnderlyingStrikeCurrency() const { return buf + fieldUnderlyingStrikeCurrency.offset; }
   private: FieldUnderlyingStrikeCurrency fieldUnderlyingStrikeCurrency;

   public:
   bool isSetUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.offset >= 0; }
   FieldUnderlyingOptAttribute::ValueType getUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.getValue( buf ); }
   const char * ptrToUnderlyingOptAttribute() const { return buf + fieldUnderlyingOptAttribute.offset; }
   private: FieldUnderlyingOptAttribute fieldUnderlyingOptAttribute;

   public:
   bool isSetUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.offset >= 0; }
   FieldUnderlyingContractMultiplier::ValueType getUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.getValue( buf ); }
   const char * ptrToUnderlyingContractMultiplier() const { return buf + fieldUnderlyingContractMultiplier.offset; }
   private: FieldUnderlyingContractMultiplier fieldUnderlyingContractMultiplier;

   public:
   bool isSetUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.offset >= 0; }
   FieldUnderlyingCouponRate::ValueType getUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.getValue( buf ); }
   const char * ptrToUnderlyingCouponRate() const { return buf + fieldUnderlyingCouponRate.offset; }
   private: FieldUnderlyingCouponRate fieldUnderlyingCouponRate;

   public:
   bool isSetUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.offset >= 0; }
   FieldUnderlyingSecurityExchange::ValueType getUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.getValue( buf ); }
   const char * ptrToUnderlyingSecurityExchange() const { return buf + fieldUnderlyingSecurityExchange.offset; }
   private: FieldUnderlyingSecurityExchange fieldUnderlyingSecurityExchange;

   public:
   bool isSetUnderlyingIssuer() const { return fieldUnderlyingIssuer.offset >= 0; }
   FieldUnderlyingIssuer::ValueType getUnderlyingIssuer() const { return fieldUnderlyingIssuer.getValue( buf ); }
   const char * ptrToUnderlyingIssuer() const { return buf + fieldUnderlyingIssuer.offset; }
   private: FieldUnderlyingIssuer fieldUnderlyingIssuer;

   public:
   bool isSetEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.offset >= 0; }
   FieldEncodedUnderlyingIssuerLen::ValueType getEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuerLen() const { return buf + fieldEncodedUnderlyingIssuerLen.offset; }
   private: FieldEncodedUnderlyingIssuerLen fieldEncodedUnderlyingIssuerLen;

   public:
   bool isSetEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.offset >= 0; }
   FieldEncodedUnderlyingIssuer::ValueType getEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuer() const { return buf + fieldEncodedUnderlyingIssuer.offset; }
   private: FieldEncodedUnderlyingIssuer fieldEncodedUnderlyingIssuer;

   public:
   bool isSetUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.offset >= 0; }
   FieldUnderlyingSecurityDesc::ValueType getUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToUnderlyingSecurityDesc() const { return buf + fieldUnderlyingSecurityDesc.offset; }
   private: FieldUnderlyingSecurityDesc fieldUnderlyingSecurityDesc;

   public:
   bool isSetEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.offset >= 0; }
   FieldEncodedUnderlyingSecurityDescLen::ValueType getEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDescLen() const { return buf + fieldEncodedUnderlyingSecurityDescLen.offset; }
   private: FieldEncodedUnderlyingSecurityDescLen fieldEncodedUnderlyingSecurityDescLen;

   public:
   bool isSetEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.offset >= 0; }
   FieldEncodedUnderlyingSecurityDesc::ValueType getEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDesc() const { return buf + fieldEncodedUnderlyingSecurityDesc.offset; }
   private: FieldEncodedUnderlyingSecurityDesc fieldEncodedUnderlyingSecurityDesc;

   public:
   bool isSetUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.offset >= 0; }
   FieldUnderlyingCPProgram::ValueType getUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.getValue( buf ); }
   const char * ptrToUnderlyingCPProgram() const { return buf + fieldUnderlyingCPProgram.offset; }
   private: FieldUnderlyingCPProgram fieldUnderlyingCPProgram;

   public:
   bool isSetUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.offset >= 0; }
   FieldUnderlyingCPRegType::ValueType getUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.getValue( buf ); }
   const char * ptrToUnderlyingCPRegType() const { return buf + fieldUnderlyingCPRegType.offset; }
   private: FieldUnderlyingCPRegType fieldUnderlyingCPRegType;

   public:
   bool isSetUnderlyingCurrency() const { return fieldUnderlyingCurrency.offset >= 0; }
   FieldUnderlyingCurrency::ValueType getUnderlyingCurrency() const { return fieldUnderlyingCurrency.getValue( buf ); }
   const char * ptrToUnderlyingCurrency() const { return buf + fieldUnderlyingCurrency.offset; }
   private: FieldUnderlyingCurrency fieldUnderlyingCurrency;

   public:
   bool isSetUnderlyingQty() const { return fieldUnderlyingQty.offset >= 0; }
   FieldUnderlyingQty::ValueType getUnderlyingQty() const { return fieldUnderlyingQty.getValue( buf ); }
   const char * ptrToUnderlyingQty() const { return buf + fieldUnderlyingQty.offset; }
   private: FieldUnderlyingQty fieldUnderlyingQty;

   public:
   bool isSetUnderlyingPx() const { return fieldUnderlyingPx.offset >= 0; }
   FieldUnderlyingPx::ValueType getUnderlyingPx() const { return fieldUnderlyingPx.getValue( buf ); }
   const char * ptrToUnderlyingPx() const { return buf + fieldUnderlyingPx.offset; }
   private: FieldUnderlyingPx fieldUnderlyingPx;

   public:
   bool isSetUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.offset >= 0; }
   FieldUnderlyingDirtyPrice::ValueType getUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.getValue( buf ); }
   const char * ptrToUnderlyingDirtyPrice() const { return buf + fieldUnderlyingDirtyPrice.offset; }
   private: FieldUnderlyingDirtyPrice fieldUnderlyingDirtyPrice;

   public:
   bool isSetUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.offset >= 0; }
   FieldUnderlyingEndPrice::ValueType getUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.getValue( buf ); }
   const char * ptrToUnderlyingEndPrice() const { return buf + fieldUnderlyingEndPrice.offset; }
   private: FieldUnderlyingEndPrice fieldUnderlyingEndPrice;

   public:
   bool isSetUnderlyingStartValue() const { return fieldUnderlyingStartValue.offset >= 0; }
   FieldUnderlyingStartValue::ValueType getUnderlyingStartValue() const { return fieldUnderlyingStartValue.getValue( buf ); }
   const char * ptrToUnderlyingStartValue() const { return buf + fieldUnderlyingStartValue.offset; }
   private: FieldUnderlyingStartValue fieldUnderlyingStartValue;

   public:
   bool isSetUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.offset >= 0; }
   FieldUnderlyingCurrentValue::ValueType getUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.getValue( buf ); }
   const char * ptrToUnderlyingCurrentValue() const { return buf + fieldUnderlyingCurrentValue.offset; }
   private: FieldUnderlyingCurrentValue fieldUnderlyingCurrentValue;

   public:
   bool isSetUnderlyingEndValue() const { return fieldUnderlyingEndValue.offset >= 0; }
   FieldUnderlyingEndValue::ValueType getUnderlyingEndValue() const { return fieldUnderlyingEndValue.getValue( buf ); }
   const char * ptrToUnderlyingEndValue() const { return buf + fieldUnderlyingEndValue.offset; }
   private: FieldUnderlyingEndValue fieldUnderlyingEndValue;

   public:
   bool isSetNoUnderlyingStips() const { return fieldNoUnderlyingStips.offset >= 0; }
   FieldNoUnderlyingStips::ValueType getNoUnderlyingStips() const { return fieldNoUnderlyingStips.getValue( buf ); }
   const char * ptrToNoUnderlyingStips() const { return buf + fieldNoUnderlyingStips.offset; }
   private: FieldNoUnderlyingStips fieldNoUnderlyingStips;
  
   public:
   std::size_t getGroupCountUnderlyingStips() const { return groupsUnderlyingStips.size(); } 
   const GroupUnderlyingStips & getGroupUnderlyingStips( std::size_t idx ) const { return groupsUnderlyingStips[ idx ]; } 
   private: GroupUnderlyingStips::Array groupsUnderlyingStips{ 10 };

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageDerivativeSecurityList: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSecurityReqID() const { return fieldSecurityReqID.offset >= 0; }
   FieldSecurityReqID::ValueType getSecurityReqID() const { return fieldSecurityReqID.getValue( buf ); }
   const char * ptrToSecurityReqID() const { return buf + fieldSecurityReqID.offset; }
   private: FieldSecurityReqID fieldSecurityReqID;

   public:
   bool isSetSecurityResponseID() const { return fieldSecurityResponseID.offset >= 0; }
   FieldSecurityResponseID::ValueType getSecurityResponseID() const { return fieldSecurityResponseID.getValue( buf ); }
   const char * ptrToSecurityResponseID() const { return buf + fieldSecurityResponseID.offset; }
   private: FieldSecurityResponseID fieldSecurityResponseID;

   public:
   bool isSetSecurityRequestResult() const { return fieldSecurityRequestResult.offset >= 0; }
   FieldSecurityRequestResult::ValueType getSecurityRequestResult() const { return fieldSecurityRequestResult.getValue( buf ); }
   const char * ptrToSecurityRequestResult() const { return buf + fieldSecurityRequestResult.offset; }
   private: FieldSecurityRequestResult fieldSecurityRequestResult;

   public:
   bool isSetUnderlyingSymbol() const { return fieldUnderlyingSymbol.offset >= 0; }
   FieldUnderlyingSymbol::ValueType getUnderlyingSymbol() const { return fieldUnderlyingSymbol.getValue( buf ); }
   const char * ptrToUnderlyingSymbol() const { return buf + fieldUnderlyingSymbol.offset; }
   private: FieldUnderlyingSymbol fieldUnderlyingSymbol;

   public:
   bool isSetUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.offset >= 0; }
   FieldUnderlyingSymbolSfx::ValueType getUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.getValue( buf ); }
   const char * ptrToUnderlyingSymbolSfx() const { return buf + fieldUnderlyingSymbolSfx.offset; }
   private: FieldUnderlyingSymbolSfx fieldUnderlyingSymbolSfx;

   public:
   bool isSetUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.offset >= 0; }
   FieldUnderlyingSecurityID::ValueType getUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.getValue( buf ); }
   const char * ptrToUnderlyingSecurityID() const { return buf + fieldUnderlyingSecurityID.offset; }
   private: FieldUnderlyingSecurityID fieldUnderlyingSecurityID;

   public:
   bool isSetUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.offset >= 0; }
   FieldUnderlyingSecurityIDSource::ValueType getUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.getValue( buf ); }
   const char * ptrToUnderlyingSecurityIDSource() const { return buf + fieldUnderlyingSecurityIDSource.offset; }
   private: FieldUnderlyingSecurityIDSource fieldUnderlyingSecurityIDSource;

   public:
   bool isSetNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.offset >= 0; }
   FieldNoUnderlyingSecurityAltID::ValueType getNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.getValue( buf ); }
   const char * ptrToNoUnderlyingSecurityAltID() const { return buf + fieldNoUnderlyingSecurityAltID.offset; }
   private: FieldNoUnderlyingSecurityAltID fieldNoUnderlyingSecurityAltID;
  
   public:
   std::size_t getGroupCountUnderlyingSecurityAltID() const { return groupsUnderlyingSecurityAltID.size(); } 
   const GroupUnderlyingSecurityAltID & getGroupUnderlyingSecurityAltID( std::size_t idx ) const { return groupsUnderlyingSecurityAltID[ idx ]; } 
   private: GroupUnderlyingSecurityAltID::Array groupsUnderlyingSecurityAltID{ 10 };

   public:
   bool isSetUnderlyingProduct() const { return fieldUnderlyingProduct.offset >= 0; }
   FieldUnderlyingProduct::ValueType getUnderlyingProduct() const { return fieldUnderlyingProduct.getValue( buf ); }
   const char * ptrToUnderlyingProduct() const { return buf + fieldUnderlyingProduct.offset; }
   private: FieldUnderlyingProduct fieldUnderlyingProduct;

   public:
   bool isSetUnderlyingCFICode() const { return fieldUnderlyingCFICode.offset >= 0; }
   FieldUnderlyingCFICode::ValueType getUnderlyingCFICode() const { return fieldUnderlyingCFICode.getValue( buf ); }
   const char * ptrToUnderlyingCFICode() const { return buf + fieldUnderlyingCFICode.offset; }
   private: FieldUnderlyingCFICode fieldUnderlyingCFICode;

   public:
   bool isSetUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.offset >= 0; }
   FieldUnderlyingSecurityType::ValueType getUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingSecurityType() const { return buf + fieldUnderlyingSecurityType.offset; }
   private: FieldUnderlyingSecurityType fieldUnderlyingSecurityType;

   public:
   bool isSetUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.offset >= 0; }
   FieldUnderlyingSecuritySubType::ValueType getUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.getValue( buf ); }
   const char * ptrToUnderlyingSecuritySubType() const { return buf + fieldUnderlyingSecuritySubType.offset; }
   private: FieldUnderlyingSecuritySubType fieldUnderlyingSecuritySubType;

   public:
   bool isSetUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.offset >= 0; }
   FieldUnderlyingMaturityMonthYear::ValueType getUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.getValue( buf ); }
   const char * ptrToUnderlyingMaturityMonthYear() const { return buf + fieldUnderlyingMaturityMonthYear.offset; }
   private: FieldUnderlyingMaturityMonthYear fieldUnderlyingMaturityMonthYear;

   public:
   bool isSetUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.offset >= 0; }
   FieldUnderlyingMaturityDate::ValueType getUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.getValue( buf ); }
   const char * ptrToUnderlyingMaturityDate() const { return buf + fieldUnderlyingMaturityDate.offset; }
   private: FieldUnderlyingMaturityDate fieldUnderlyingMaturityDate;

   public:
   bool isSetUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.offset >= 0; }
   FieldUnderlyingPutOrCall::ValueType getUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.getValue( buf ); }
   const char * ptrToUnderlyingPutOrCall() const { return buf + fieldUnderlyingPutOrCall.offset; }
   private: FieldUnderlyingPutOrCall fieldUnderlyingPutOrCall;

   public:
   bool isSetUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.offset >= 0; }
   FieldUnderlyingCouponPaymentDate::ValueType getUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.getValue( buf ); }
   const char * ptrToUnderlyingCouponPaymentDate() const { return buf + fieldUnderlyingCouponPaymentDate.offset; }
   private: FieldUnderlyingCouponPaymentDate fieldUnderlyingCouponPaymentDate;

   public:
   bool isSetUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.offset >= 0; }
   FieldUnderlyingIssueDate::ValueType getUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.getValue( buf ); }
   const char * ptrToUnderlyingIssueDate() const { return buf + fieldUnderlyingIssueDate.offset; }
   private: FieldUnderlyingIssueDate fieldUnderlyingIssueDate;

   public:
   bool isSetUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.offset >= 0; }
   FieldUnderlyingRepoCollateralSecurityType::ValueType getUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingRepoCollateralSecurityType() const { return buf + fieldUnderlyingRepoCollateralSecurityType.offset; }
   private: FieldUnderlyingRepoCollateralSecurityType fieldUnderlyingRepoCollateralSecurityType;

   public:
   bool isSetUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.offset >= 0; }
   FieldUnderlyingRepurchaseTerm::ValueType getUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseTerm() const { return buf + fieldUnderlyingRepurchaseTerm.offset; }
   private: FieldUnderlyingRepurchaseTerm fieldUnderlyingRepurchaseTerm;

   public:
   bool isSetUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.offset >= 0; }
   FieldUnderlyingRepurchaseRate::ValueType getUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseRate() const { return buf + fieldUnderlyingRepurchaseRate.offset; }
   private: FieldUnderlyingRepurchaseRate fieldUnderlyingRepurchaseRate;

   public:
   bool isSetUnderlyingFactor() const { return fieldUnderlyingFactor.offset >= 0; }
   FieldUnderlyingFactor::ValueType getUnderlyingFactor() const { return fieldUnderlyingFactor.getValue( buf ); }
   const char * ptrToUnderlyingFactor() const { return buf + fieldUnderlyingFactor.offset; }
   private: FieldUnderlyingFactor fieldUnderlyingFactor;

   public:
   bool isSetUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.offset >= 0; }
   FieldUnderlyingCreditRating::ValueType getUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.getValue( buf ); }
   const char * ptrToUnderlyingCreditRating() const { return buf + fieldUnderlyingCreditRating.offset; }
   private: FieldUnderlyingCreditRating fieldUnderlyingCreditRating;

   public:
   bool isSetUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.offset >= 0; }
   FieldUnderlyingInstrRegistry::ValueType getUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.getValue( buf ); }
   const char * ptrToUnderlyingInstrRegistry() const { return buf + fieldUnderlyingInstrRegistry.offset; }
   private: FieldUnderlyingInstrRegistry fieldUnderlyingInstrRegistry;

   public:
   bool isSetUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.offset >= 0; }
   FieldUnderlyingCountryOfIssue::ValueType getUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingCountryOfIssue() const { return buf + fieldUnderlyingCountryOfIssue.offset; }
   private: FieldUnderlyingCountryOfIssue fieldUnderlyingCountryOfIssue;

   public:
   bool isSetUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0; }
   FieldUnderlyingStateOrProvinceOfIssue::ValueType getUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingStateOrProvinceOfIssue() const { return buf + fieldUnderlyingStateOrProvinceOfIssue.offset; }
   private: FieldUnderlyingStateOrProvinceOfIssue fieldUnderlyingStateOrProvinceOfIssue;

   public:
   bool isSetUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.offset >= 0; }
   FieldUnderlyingLocaleOfIssue::ValueType getUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingLocaleOfIssue() const { return buf + fieldUnderlyingLocaleOfIssue.offset; }
   private: FieldUnderlyingLocaleOfIssue fieldUnderlyingLocaleOfIssue;

   public:
   bool isSetUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.offset >= 0; }
   FieldUnderlyingRedemptionDate::ValueType getUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.getValue( buf ); }
   const char * ptrToUnderlyingRedemptionDate() const { return buf + fieldUnderlyingRedemptionDate.offset; }
   private: FieldUnderlyingRedemptionDate fieldUnderlyingRedemptionDate;

   public:
   bool isSetUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.offset >= 0; }
   FieldUnderlyingStrikePrice::ValueType getUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.getValue( buf ); }
   const char * ptrToUnderlyingStrikePrice() const { return buf + fieldUnderlyingStrikePrice.offset; }
   private: FieldUnderlyingStrikePrice fieldUnderlyingStrikePrice;

   public:
   bool isSetUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.offset >= 0; }
   FieldUnderlyingStrikeCurrency::ValueType getUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.getValue( buf ); }
   const char * ptrToUnderlyingStrikeCurrency() const { return buf + fieldUnderlyingStrikeCurrency.offset; }
   private: FieldUnderlyingStrikeCurrency fieldUnderlyingStrikeCurrency;

   public:
   bool isSetUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.offset >= 0; }
   FieldUnderlyingOptAttribute::ValueType getUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.getValue( buf ); }
   const char * ptrToUnderlyingOptAttribute() const { return buf + fieldUnderlyingOptAttribute.offset; }
   private: FieldUnderlyingOptAttribute fieldUnderlyingOptAttribute;

   public:
   bool isSetUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.offset >= 0; }
   FieldUnderlyingContractMultiplier::ValueType getUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.getValue( buf ); }
   const char * ptrToUnderlyingContractMultiplier() const { return buf + fieldUnderlyingContractMultiplier.offset; }
   private: FieldUnderlyingContractMultiplier fieldUnderlyingContractMultiplier;

   public:
   bool isSetUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.offset >= 0; }
   FieldUnderlyingCouponRate::ValueType getUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.getValue( buf ); }
   const char * ptrToUnderlyingCouponRate() const { return buf + fieldUnderlyingCouponRate.offset; }
   private: FieldUnderlyingCouponRate fieldUnderlyingCouponRate;

   public:
   bool isSetUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.offset >= 0; }
   FieldUnderlyingSecurityExchange::ValueType getUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.getValue( buf ); }
   const char * ptrToUnderlyingSecurityExchange() const { return buf + fieldUnderlyingSecurityExchange.offset; }
   private: FieldUnderlyingSecurityExchange fieldUnderlyingSecurityExchange;

   public:
   bool isSetUnderlyingIssuer() const { return fieldUnderlyingIssuer.offset >= 0; }
   FieldUnderlyingIssuer::ValueType getUnderlyingIssuer() const { return fieldUnderlyingIssuer.getValue( buf ); }
   const char * ptrToUnderlyingIssuer() const { return buf + fieldUnderlyingIssuer.offset; }
   private: FieldUnderlyingIssuer fieldUnderlyingIssuer;

   public:
   bool isSetEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.offset >= 0; }
   FieldEncodedUnderlyingIssuerLen::ValueType getEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuerLen() const { return buf + fieldEncodedUnderlyingIssuerLen.offset; }
   private: FieldEncodedUnderlyingIssuerLen fieldEncodedUnderlyingIssuerLen;

   public:
   bool isSetEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.offset >= 0; }
   FieldEncodedUnderlyingIssuer::ValueType getEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuer() const { return buf + fieldEncodedUnderlyingIssuer.offset; }
   private: FieldEncodedUnderlyingIssuer fieldEncodedUnderlyingIssuer;

   public:
   bool isSetUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.offset >= 0; }
   FieldUnderlyingSecurityDesc::ValueType getUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToUnderlyingSecurityDesc() const { return buf + fieldUnderlyingSecurityDesc.offset; }
   private: FieldUnderlyingSecurityDesc fieldUnderlyingSecurityDesc;

   public:
   bool isSetEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.offset >= 0; }
   FieldEncodedUnderlyingSecurityDescLen::ValueType getEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDescLen() const { return buf + fieldEncodedUnderlyingSecurityDescLen.offset; }
   private: FieldEncodedUnderlyingSecurityDescLen fieldEncodedUnderlyingSecurityDescLen;

   public:
   bool isSetEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.offset >= 0; }
   FieldEncodedUnderlyingSecurityDesc::ValueType getEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDesc() const { return buf + fieldEncodedUnderlyingSecurityDesc.offset; }
   private: FieldEncodedUnderlyingSecurityDesc fieldEncodedUnderlyingSecurityDesc;

   public:
   bool isSetUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.offset >= 0; }
   FieldUnderlyingCPProgram::ValueType getUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.getValue( buf ); }
   const char * ptrToUnderlyingCPProgram() const { return buf + fieldUnderlyingCPProgram.offset; }
   private: FieldUnderlyingCPProgram fieldUnderlyingCPProgram;

   public:
   bool isSetUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.offset >= 0; }
   FieldUnderlyingCPRegType::ValueType getUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.getValue( buf ); }
   const char * ptrToUnderlyingCPRegType() const { return buf + fieldUnderlyingCPRegType.offset; }
   private: FieldUnderlyingCPRegType fieldUnderlyingCPRegType;

   public:
   bool isSetUnderlyingCurrency() const { return fieldUnderlyingCurrency.offset >= 0; }
   FieldUnderlyingCurrency::ValueType getUnderlyingCurrency() const { return fieldUnderlyingCurrency.getValue( buf ); }
   const char * ptrToUnderlyingCurrency() const { return buf + fieldUnderlyingCurrency.offset; }
   private: FieldUnderlyingCurrency fieldUnderlyingCurrency;

   public:
   bool isSetUnderlyingQty() const { return fieldUnderlyingQty.offset >= 0; }
   FieldUnderlyingQty::ValueType getUnderlyingQty() const { return fieldUnderlyingQty.getValue( buf ); }
   const char * ptrToUnderlyingQty() const { return buf + fieldUnderlyingQty.offset; }
   private: FieldUnderlyingQty fieldUnderlyingQty;

   public:
   bool isSetUnderlyingPx() const { return fieldUnderlyingPx.offset >= 0; }
   FieldUnderlyingPx::ValueType getUnderlyingPx() const { return fieldUnderlyingPx.getValue( buf ); }
   const char * ptrToUnderlyingPx() const { return buf + fieldUnderlyingPx.offset; }
   private: FieldUnderlyingPx fieldUnderlyingPx;

   public:
   bool isSetUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.offset >= 0; }
   FieldUnderlyingDirtyPrice::ValueType getUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.getValue( buf ); }
   const char * ptrToUnderlyingDirtyPrice() const { return buf + fieldUnderlyingDirtyPrice.offset; }
   private: FieldUnderlyingDirtyPrice fieldUnderlyingDirtyPrice;

   public:
   bool isSetUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.offset >= 0; }
   FieldUnderlyingEndPrice::ValueType getUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.getValue( buf ); }
   const char * ptrToUnderlyingEndPrice() const { return buf + fieldUnderlyingEndPrice.offset; }
   private: FieldUnderlyingEndPrice fieldUnderlyingEndPrice;

   public:
   bool isSetUnderlyingStartValue() const { return fieldUnderlyingStartValue.offset >= 0; }
   FieldUnderlyingStartValue::ValueType getUnderlyingStartValue() const { return fieldUnderlyingStartValue.getValue( buf ); }
   const char * ptrToUnderlyingStartValue() const { return buf + fieldUnderlyingStartValue.offset; }
   private: FieldUnderlyingStartValue fieldUnderlyingStartValue;

   public:
   bool isSetUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.offset >= 0; }
   FieldUnderlyingCurrentValue::ValueType getUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.getValue( buf ); }
   const char * ptrToUnderlyingCurrentValue() const { return buf + fieldUnderlyingCurrentValue.offset; }
   private: FieldUnderlyingCurrentValue fieldUnderlyingCurrentValue;

   public:
   bool isSetUnderlyingEndValue() const { return fieldUnderlyingEndValue.offset >= 0; }
   FieldUnderlyingEndValue::ValueType getUnderlyingEndValue() const { return fieldUnderlyingEndValue.getValue( buf ); }
   const char * ptrToUnderlyingEndValue() const { return buf + fieldUnderlyingEndValue.offset; }
   private: FieldUnderlyingEndValue fieldUnderlyingEndValue;

   public:
   bool isSetNoUnderlyingStips() const { return fieldNoUnderlyingStips.offset >= 0; }
   FieldNoUnderlyingStips::ValueType getNoUnderlyingStips() const { return fieldNoUnderlyingStips.getValue( buf ); }
   const char * ptrToNoUnderlyingStips() const { return buf + fieldNoUnderlyingStips.offset; }
   private: FieldNoUnderlyingStips fieldNoUnderlyingStips;
  
   public:
   std::size_t getGroupCountUnderlyingStips() const { return groupsUnderlyingStips.size(); } 
   const GroupUnderlyingStips & getGroupUnderlyingStips( std::size_t idx ) const { return groupsUnderlyingStips[ idx ]; } 
   private: GroupUnderlyingStips::Array groupsUnderlyingStips{ 10 };

   public:
   bool isSetTotNoRelatedSym() const { return fieldTotNoRelatedSym.offset >= 0; }
   FieldTotNoRelatedSym::ValueType getTotNoRelatedSym() const { return fieldTotNoRelatedSym.getValue( buf ); }
   const char * ptrToTotNoRelatedSym() const { return buf + fieldTotNoRelatedSym.offset; }
   private: FieldTotNoRelatedSym fieldTotNoRelatedSym;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoRelatedSym() const { return fieldNoRelatedSym.offset >= 0; }
   FieldNoRelatedSym::ValueType getNoRelatedSym() const { return fieldNoRelatedSym.getValue( buf ); }
   const char * ptrToNoRelatedSym() const { return buf + fieldNoRelatedSym.offset; }
   private: FieldNoRelatedSym fieldNoRelatedSym;
  
   public:
   std::size_t getGroupCountRelatedSym() const { return groupsRelatedSym.size(); } 
   const GroupRelatedSym & getGroupRelatedSym( std::size_t idx ) const { return groupsRelatedSym[ idx ]; } 
   private: GroupRelatedSym::Array groupsRelatedSym{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageNewOrderMultileg: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetDayBookingInst() const { return fieldDayBookingInst.offset >= 0; }
   FieldDayBookingInst::ValueType getDayBookingInst() const { return fieldDayBookingInst.getValue( buf ); }
   const char * ptrToDayBookingInst() const { return buf + fieldDayBookingInst.offset; }
   private: FieldDayBookingInst fieldDayBookingInst;

   public:
   bool isSetBookingUnit() const { return fieldBookingUnit.offset >= 0; }
   FieldBookingUnit::ValueType getBookingUnit() const { return fieldBookingUnit.getValue( buf ); }
   const char * ptrToBookingUnit() const { return buf + fieldBookingUnit.offset; }
   private: FieldBookingUnit fieldBookingUnit;

   public:
   bool isSetPreallocMethod() const { return fieldPreallocMethod.offset >= 0; }
   FieldPreallocMethod::ValueType getPreallocMethod() const { return fieldPreallocMethod.getValue( buf ); }
   const char * ptrToPreallocMethod() const { return buf + fieldPreallocMethod.offset; }
   private: FieldPreallocMethod fieldPreallocMethod;

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetCashMargin() const { return fieldCashMargin.offset >= 0; }
   FieldCashMargin::ValueType getCashMargin() const { return fieldCashMargin.getValue( buf ); }
   const char * ptrToCashMargin() const { return buf + fieldCashMargin.offset; }
   private: FieldCashMargin fieldCashMargin;

   public:
   bool isSetClearingFeeIndicator() const { return fieldClearingFeeIndicator.offset >= 0; }
   FieldClearingFeeIndicator::ValueType getClearingFeeIndicator() const { return fieldClearingFeeIndicator.getValue( buf ); }
   const char * ptrToClearingFeeIndicator() const { return buf + fieldClearingFeeIndicator.offset; }
   private: FieldClearingFeeIndicator fieldClearingFeeIndicator;

   public:
   bool isSetHandlInst() const { return fieldHandlInst.offset >= 0; }
   FieldHandlInst::ValueType getHandlInst() const { return fieldHandlInst.getValue( buf ); }
   const char * ptrToHandlInst() const { return buf + fieldHandlInst.offset; }
   private: FieldHandlInst fieldHandlInst;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetMaxFloor() const { return fieldMaxFloor.offset >= 0; }
   FieldMaxFloor::ValueType getMaxFloor() const { return fieldMaxFloor.getValue( buf ); }
   const char * ptrToMaxFloor() const { return buf + fieldMaxFloor.offset; }
   private: FieldMaxFloor fieldMaxFloor;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetProcessCode() const { return fieldProcessCode.offset >= 0; }
   FieldProcessCode::ValueType getProcessCode() const { return fieldProcessCode.getValue( buf ); }
   const char * ptrToProcessCode() const { return buf + fieldProcessCode.offset; }
   private: FieldProcessCode fieldProcessCode;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetPrevClosePx() const { return fieldPrevClosePx.offset >= 0; }
   FieldPrevClosePx::ValueType getPrevClosePx() const { return fieldPrevClosePx.getValue( buf ); }
   const char * ptrToPrevClosePx() const { return buf + fieldPrevClosePx.offset; }
   private: FieldPrevClosePx fieldPrevClosePx;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetLocateReqd() const { return fieldLocateReqd.offset >= 0; }
   FieldLocateReqd::ValueType getLocateReqd() const { return fieldLocateReqd.getValue( buf ); }
   const char * ptrToLocateReqd() const { return buf + fieldLocateReqd.offset; }
   private: FieldLocateReqd fieldLocateReqd;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetStopPx() const { return fieldStopPx.offset >= 0; }
   FieldStopPx::ValueType getStopPx() const { return fieldStopPx.getValue( buf ); }
   const char * ptrToStopPx() const { return buf + fieldStopPx.offset; }
   private: FieldStopPx fieldStopPx;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetSolicitedFlag() const { return fieldSolicitedFlag.offset >= 0; }
   FieldSolicitedFlag::ValueType getSolicitedFlag() const { return fieldSolicitedFlag.getValue( buf ); }
   const char * ptrToSolicitedFlag() const { return buf + fieldSolicitedFlag.offset; }
   private: FieldSolicitedFlag fieldSolicitedFlag;

   public:
   bool isSetIOIID() const { return fieldIOIID.offset >= 0; }
   FieldIOIID::ValueType getIOIID() const { return fieldIOIID.getValue( buf ); }
   const char * ptrToIOIID() const { return buf + fieldIOIID.offset; }
   private: FieldIOIID fieldIOIID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetGTBookingInst() const { return fieldGTBookingInst.offset >= 0; }
   FieldGTBookingInst::ValueType getGTBookingInst() const { return fieldGTBookingInst.getValue( buf ); }
   const char * ptrToGTBookingInst() const { return buf + fieldGTBookingInst.offset; }
   private: FieldGTBookingInst fieldGTBookingInst;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommCurrency() const { return fieldCommCurrency.offset >= 0; }
   FieldCommCurrency::ValueType getCommCurrency() const { return fieldCommCurrency.getValue( buf ); }
   const char * ptrToCommCurrency() const { return buf + fieldCommCurrency.offset; }
   private: FieldCommCurrency fieldCommCurrency;

   public:
   bool isSetFundRenewWaiv() const { return fieldFundRenewWaiv.offset >= 0; }
   FieldFundRenewWaiv::ValueType getFundRenewWaiv() const { return fieldFundRenewWaiv.getValue( buf ); }
   const char * ptrToFundRenewWaiv() const { return buf + fieldFundRenewWaiv.offset; }
   private: FieldFundRenewWaiv fieldFundRenewWaiv;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetOrderRestrictions() const { return fieldOrderRestrictions.offset >= 0; }
   FieldOrderRestrictions::ValueType getOrderRestrictions() const { return fieldOrderRestrictions.getValue( buf ); }
   const char * ptrToOrderRestrictions() const { return buf + fieldOrderRestrictions.offset; }
   private: FieldOrderRestrictions fieldOrderRestrictions;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetForexReq() const { return fieldForexReq.offset >= 0; }
   FieldForexReq::ValueType getForexReq() const { return fieldForexReq.getValue( buf ); }
   const char * ptrToForexReq() const { return buf + fieldForexReq.offset; }
   private: FieldForexReq fieldForexReq;

   public:
   bool isSetSettlCurrency() const { return fieldSettlCurrency.offset >= 0; }
   FieldSettlCurrency::ValueType getSettlCurrency() const { return fieldSettlCurrency.getValue( buf ); }
   const char * ptrToSettlCurrency() const { return buf + fieldSettlCurrency.offset; }
   private: FieldSettlCurrency fieldSettlCurrency;

   public:
   bool isSetBookingType() const { return fieldBookingType.offset >= 0; }
   FieldBookingType::ValueType getBookingType() const { return fieldBookingType.getValue( buf ); }
   const char * ptrToBookingType() const { return buf + fieldBookingType.offset; }
   private: FieldBookingType fieldBookingType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetCoveredOrUncovered() const { return fieldCoveredOrUncovered.offset >= 0; }
   FieldCoveredOrUncovered::ValueType getCoveredOrUncovered() const { return fieldCoveredOrUncovered.getValue( buf ); }
   const char * ptrToCoveredOrUncovered() const { return buf + fieldCoveredOrUncovered.offset; }
   private: FieldCoveredOrUncovered fieldCoveredOrUncovered;

   public:
   bool isSetMaxShow() const { return fieldMaxShow.offset >= 0; }
   FieldMaxShow::ValueType getMaxShow() const { return fieldMaxShow.getValue( buf ); }
   const char * ptrToMaxShow() const { return buf + fieldMaxShow.offset; }
   private: FieldMaxShow fieldMaxShow;

   public:
   bool isSetPegOffsetValue() const { return fieldPegOffsetValue.offset >= 0; }
   FieldPegOffsetValue::ValueType getPegOffsetValue() const { return fieldPegOffsetValue.getValue( buf ); }
   const char * ptrToPegOffsetValue() const { return buf + fieldPegOffsetValue.offset; }
   private: FieldPegOffsetValue fieldPegOffsetValue;

   public:
   bool isSetPegMoveType() const { return fieldPegMoveType.offset >= 0; }
   FieldPegMoveType::ValueType getPegMoveType() const { return fieldPegMoveType.getValue( buf ); }
   const char * ptrToPegMoveType() const { return buf + fieldPegMoveType.offset; }
   private: FieldPegMoveType fieldPegMoveType;

   public:
   bool isSetPegOffsetType() const { return fieldPegOffsetType.offset >= 0; }
   FieldPegOffsetType::ValueType getPegOffsetType() const { return fieldPegOffsetType.getValue( buf ); }
   const char * ptrToPegOffsetType() const { return buf + fieldPegOffsetType.offset; }
   private: FieldPegOffsetType fieldPegOffsetType;

   public:
   bool isSetPegLimitType() const { return fieldPegLimitType.offset >= 0; }
   FieldPegLimitType::ValueType getPegLimitType() const { return fieldPegLimitType.getValue( buf ); }
   const char * ptrToPegLimitType() const { return buf + fieldPegLimitType.offset; }
   private: FieldPegLimitType fieldPegLimitType;

   public:
   bool isSetPegRoundDirection() const { return fieldPegRoundDirection.offset >= 0; }
   FieldPegRoundDirection::ValueType getPegRoundDirection() const { return fieldPegRoundDirection.getValue( buf ); }
   const char * ptrToPegRoundDirection() const { return buf + fieldPegRoundDirection.offset; }
   private: FieldPegRoundDirection fieldPegRoundDirection;

   public:
   bool isSetPegScope() const { return fieldPegScope.offset >= 0; }
   FieldPegScope::ValueType getPegScope() const { return fieldPegScope.getValue( buf ); }
   const char * ptrToPegScope() const { return buf + fieldPegScope.offset; }
   private: FieldPegScope fieldPegScope;

   public:
   bool isSetDiscretionInst() const { return fieldDiscretionInst.offset >= 0; }
   FieldDiscretionInst::ValueType getDiscretionInst() const { return fieldDiscretionInst.getValue( buf ); }
   const char * ptrToDiscretionInst() const { return buf + fieldDiscretionInst.offset; }
   private: FieldDiscretionInst fieldDiscretionInst;

   public:
   bool isSetDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.offset >= 0; }
   FieldDiscretionOffsetValue::ValueType getDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.getValue( buf ); }
   const char * ptrToDiscretionOffsetValue() const { return buf + fieldDiscretionOffsetValue.offset; }
   private: FieldDiscretionOffsetValue fieldDiscretionOffsetValue;

   public:
   bool isSetDiscretionMoveType() const { return fieldDiscretionMoveType.offset >= 0; }
   FieldDiscretionMoveType::ValueType getDiscretionMoveType() const { return fieldDiscretionMoveType.getValue( buf ); }
   const char * ptrToDiscretionMoveType() const { return buf + fieldDiscretionMoveType.offset; }
   private: FieldDiscretionMoveType fieldDiscretionMoveType;

   public:
   bool isSetDiscretionOffsetType() const { return fieldDiscretionOffsetType.offset >= 0; }
   FieldDiscretionOffsetType::ValueType getDiscretionOffsetType() const { return fieldDiscretionOffsetType.getValue( buf ); }
   const char * ptrToDiscretionOffsetType() const { return buf + fieldDiscretionOffsetType.offset; }
   private: FieldDiscretionOffsetType fieldDiscretionOffsetType;

   public:
   bool isSetDiscretionLimitType() const { return fieldDiscretionLimitType.offset >= 0; }
   FieldDiscretionLimitType::ValueType getDiscretionLimitType() const { return fieldDiscretionLimitType.getValue( buf ); }
   const char * ptrToDiscretionLimitType() const { return buf + fieldDiscretionLimitType.offset; }
   private: FieldDiscretionLimitType fieldDiscretionLimitType;

   public:
   bool isSetDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.offset >= 0; }
   FieldDiscretionRoundDirection::ValueType getDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.getValue( buf ); }
   const char * ptrToDiscretionRoundDirection() const { return buf + fieldDiscretionRoundDirection.offset; }
   private: FieldDiscretionRoundDirection fieldDiscretionRoundDirection;

   public:
   bool isSetDiscretionScope() const { return fieldDiscretionScope.offset >= 0; }
   FieldDiscretionScope::ValueType getDiscretionScope() const { return fieldDiscretionScope.getValue( buf ); }
   const char * ptrToDiscretionScope() const { return buf + fieldDiscretionScope.offset; }
   private: FieldDiscretionScope fieldDiscretionScope;

   public:
   bool isSetTargetStrategy() const { return fieldTargetStrategy.offset >= 0; }
   FieldTargetStrategy::ValueType getTargetStrategy() const { return fieldTargetStrategy.getValue( buf ); }
   const char * ptrToTargetStrategy() const { return buf + fieldTargetStrategy.offset; }
   private: FieldTargetStrategy fieldTargetStrategy;

   public:
   bool isSetTargetStrategyParameters() const { return fieldTargetStrategyParameters.offset >= 0; }
   FieldTargetStrategyParameters::ValueType getTargetStrategyParameters() const { return fieldTargetStrategyParameters.getValue( buf ); }
   const char * ptrToTargetStrategyParameters() const { return buf + fieldTargetStrategyParameters.offset; }
   private: FieldTargetStrategyParameters fieldTargetStrategyParameters;

   public:
   bool isSetParticipationRate() const { return fieldParticipationRate.offset >= 0; }
   FieldParticipationRate::ValueType getParticipationRate() const { return fieldParticipationRate.getValue( buf ); }
   const char * ptrToParticipationRate() const { return buf + fieldParticipationRate.offset; }
   private: FieldParticipationRate fieldParticipationRate;

   public:
   bool isSetCancellationRights() const { return fieldCancellationRights.offset >= 0; }
   FieldCancellationRights::ValueType getCancellationRights() const { return fieldCancellationRights.getValue( buf ); }
   const char * ptrToCancellationRights() const { return buf + fieldCancellationRights.offset; }
   private: FieldCancellationRights fieldCancellationRights;

   public:
   bool isSetMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.offset >= 0; }
   FieldMoneyLaunderingStatus::ValueType getMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.getValue( buf ); }
   const char * ptrToMoneyLaunderingStatus() const { return buf + fieldMoneyLaunderingStatus.offset; }
   private: FieldMoneyLaunderingStatus fieldMoneyLaunderingStatus;

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetDesignation() const { return fieldDesignation.offset >= 0; }
   FieldDesignation::ValueType getDesignation() const { return fieldDesignation.getValue( buf ); }
   const char * ptrToDesignation() const { return buf + fieldDesignation.offset; }
   private: FieldDesignation fieldDesignation;

   public:
   bool isSetMultiLegRptTypeReq() const { return fieldMultiLegRptTypeReq.offset >= 0; }
   FieldMultiLegRptTypeReq::ValueType getMultiLegRptTypeReq() const { return fieldMultiLegRptTypeReq.getValue( buf ); }
   const char * ptrToMultiLegRptTypeReq() const { return buf + fieldMultiLegRptTypeReq.offset; }
   private: FieldMultiLegRptTypeReq fieldMultiLegRptTypeReq;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageMultilegOrderCancelReplace: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetOrigClOrdID() const { return fieldOrigClOrdID.offset >= 0; }
   FieldOrigClOrdID::ValueType getOrigClOrdID() const { return fieldOrigClOrdID.getValue( buf ); }
   const char * ptrToOrigClOrdID() const { return buf + fieldOrigClOrdID.offset; }
   private: FieldOrigClOrdID fieldOrigClOrdID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetClOrdLinkID() const { return fieldClOrdLinkID.offset >= 0; }
   FieldClOrdLinkID::ValueType getClOrdLinkID() const { return fieldClOrdLinkID.getValue( buf ); }
   const char * ptrToClOrdLinkID() const { return buf + fieldClOrdLinkID.offset; }
   private: FieldClOrdLinkID fieldClOrdLinkID;

   public:
   bool isSetOrigOrdModTime() const { return fieldOrigOrdModTime.offset >= 0; }
   FieldOrigOrdModTime::ValueType getOrigOrdModTime() const { return fieldOrigOrdModTime.getValue( buf ); }
   const char * ptrToOrigOrdModTime() const { return buf + fieldOrigOrdModTime.offset; }
   private: FieldOrigOrdModTime fieldOrigOrdModTime;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetDayBookingInst() const { return fieldDayBookingInst.offset >= 0; }
   FieldDayBookingInst::ValueType getDayBookingInst() const { return fieldDayBookingInst.getValue( buf ); }
   const char * ptrToDayBookingInst() const { return buf + fieldDayBookingInst.offset; }
   private: FieldDayBookingInst fieldDayBookingInst;

   public:
   bool isSetBookingUnit() const { return fieldBookingUnit.offset >= 0; }
   FieldBookingUnit::ValueType getBookingUnit() const { return fieldBookingUnit.getValue( buf ); }
   const char * ptrToBookingUnit() const { return buf + fieldBookingUnit.offset; }
   private: FieldBookingUnit fieldBookingUnit;

   public:
   bool isSetPreallocMethod() const { return fieldPreallocMethod.offset >= 0; }
   FieldPreallocMethod::ValueType getPreallocMethod() const { return fieldPreallocMethod.getValue( buf ); }
   const char * ptrToPreallocMethod() const { return buf + fieldPreallocMethod.offset; }
   private: FieldPreallocMethod fieldPreallocMethod;

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetCashMargin() const { return fieldCashMargin.offset >= 0; }
   FieldCashMargin::ValueType getCashMargin() const { return fieldCashMargin.getValue( buf ); }
   const char * ptrToCashMargin() const { return buf + fieldCashMargin.offset; }
   private: FieldCashMargin fieldCashMargin;

   public:
   bool isSetClearingFeeIndicator() const { return fieldClearingFeeIndicator.offset >= 0; }
   FieldClearingFeeIndicator::ValueType getClearingFeeIndicator() const { return fieldClearingFeeIndicator.getValue( buf ); }
   const char * ptrToClearingFeeIndicator() const { return buf + fieldClearingFeeIndicator.offset; }
   private: FieldClearingFeeIndicator fieldClearingFeeIndicator;

   public:
   bool isSetHandlInst() const { return fieldHandlInst.offset >= 0; }
   FieldHandlInst::ValueType getHandlInst() const { return fieldHandlInst.getValue( buf ); }
   const char * ptrToHandlInst() const { return buf + fieldHandlInst.offset; }
   private: FieldHandlInst fieldHandlInst;

   public:
   bool isSetExecInst() const { return fieldExecInst.offset >= 0; }
   FieldExecInst::ValueType getExecInst() const { return fieldExecInst.getValue( buf ); }
   const char * ptrToExecInst() const { return buf + fieldExecInst.offset; }
   private: FieldExecInst fieldExecInst;

   public:
   bool isSetMinQty() const { return fieldMinQty.offset >= 0; }
   FieldMinQty::ValueType getMinQty() const { return fieldMinQty.getValue( buf ); }
   const char * ptrToMinQty() const { return buf + fieldMinQty.offset; }
   private: FieldMinQty fieldMinQty;

   public:
   bool isSetMaxFloor() const { return fieldMaxFloor.offset >= 0; }
   FieldMaxFloor::ValueType getMaxFloor() const { return fieldMaxFloor.getValue( buf ); }
   const char * ptrToMaxFloor() const { return buf + fieldMaxFloor.offset; }
   private: FieldMaxFloor fieldMaxFloor;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetProcessCode() const { return fieldProcessCode.offset >= 0; }
   FieldProcessCode::ValueType getProcessCode() const { return fieldProcessCode.getValue( buf ); }
   const char * ptrToProcessCode() const { return buf + fieldProcessCode.offset; }
   private: FieldProcessCode fieldProcessCode;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetPrevClosePx() const { return fieldPrevClosePx.offset >= 0; }
   FieldPrevClosePx::ValueType getPrevClosePx() const { return fieldPrevClosePx.getValue( buf ); }
   const char * ptrToPrevClosePx() const { return buf + fieldPrevClosePx.offset; }
   private: FieldPrevClosePx fieldPrevClosePx;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetLocateReqd() const { return fieldLocateReqd.offset >= 0; }
   FieldLocateReqd::ValueType getLocateReqd() const { return fieldLocateReqd.getValue( buf ); }
   const char * ptrToLocateReqd() const { return buf + fieldLocateReqd.offset; }
   private: FieldLocateReqd fieldLocateReqd;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetStopPx() const { return fieldStopPx.offset >= 0; }
   FieldStopPx::ValueType getStopPx() const { return fieldStopPx.getValue( buf ); }
   const char * ptrToStopPx() const { return buf + fieldStopPx.offset; }
   private: FieldStopPx fieldStopPx;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetComplianceID() const { return fieldComplianceID.offset >= 0; }
   FieldComplianceID::ValueType getComplianceID() const { return fieldComplianceID.getValue( buf ); }
   const char * ptrToComplianceID() const { return buf + fieldComplianceID.offset; }
   private: FieldComplianceID fieldComplianceID;

   public:
   bool isSetSolicitedFlag() const { return fieldSolicitedFlag.offset >= 0; }
   FieldSolicitedFlag::ValueType getSolicitedFlag() const { return fieldSolicitedFlag.getValue( buf ); }
   const char * ptrToSolicitedFlag() const { return buf + fieldSolicitedFlag.offset; }
   private: FieldSolicitedFlag fieldSolicitedFlag;

   public:
   bool isSetIOIID() const { return fieldIOIID.offset >= 0; }
   FieldIOIID::ValueType getIOIID() const { return fieldIOIID.getValue( buf ); }
   const char * ptrToIOIID() const { return buf + fieldIOIID.offset; }
   private: FieldIOIID fieldIOIID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetTimeInForce() const { return fieldTimeInForce.offset >= 0; }
   FieldTimeInForce::ValueType getTimeInForce() const { return fieldTimeInForce.getValue( buf ); }
   const char * ptrToTimeInForce() const { return buf + fieldTimeInForce.offset; }
   private: FieldTimeInForce fieldTimeInForce;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetGTBookingInst() const { return fieldGTBookingInst.offset >= 0; }
   FieldGTBookingInst::ValueType getGTBookingInst() const { return fieldGTBookingInst.getValue( buf ); }
   const char * ptrToGTBookingInst() const { return buf + fieldGTBookingInst.offset; }
   private: FieldGTBookingInst fieldGTBookingInst;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommCurrency() const { return fieldCommCurrency.offset >= 0; }
   FieldCommCurrency::ValueType getCommCurrency() const { return fieldCommCurrency.getValue( buf ); }
   const char * ptrToCommCurrency() const { return buf + fieldCommCurrency.offset; }
   private: FieldCommCurrency fieldCommCurrency;

   public:
   bool isSetFundRenewWaiv() const { return fieldFundRenewWaiv.offset >= 0; }
   FieldFundRenewWaiv::ValueType getFundRenewWaiv() const { return fieldFundRenewWaiv.getValue( buf ); }
   const char * ptrToFundRenewWaiv() const { return buf + fieldFundRenewWaiv.offset; }
   private: FieldFundRenewWaiv fieldFundRenewWaiv;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetOrderRestrictions() const { return fieldOrderRestrictions.offset >= 0; }
   FieldOrderRestrictions::ValueType getOrderRestrictions() const { return fieldOrderRestrictions.getValue( buf ); }
   const char * ptrToOrderRestrictions() const { return buf + fieldOrderRestrictions.offset; }
   private: FieldOrderRestrictions fieldOrderRestrictions;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetForexReq() const { return fieldForexReq.offset >= 0; }
   FieldForexReq::ValueType getForexReq() const { return fieldForexReq.getValue( buf ); }
   const char * ptrToForexReq() const { return buf + fieldForexReq.offset; }
   private: FieldForexReq fieldForexReq;

   public:
   bool isSetSettlCurrency() const { return fieldSettlCurrency.offset >= 0; }
   FieldSettlCurrency::ValueType getSettlCurrency() const { return fieldSettlCurrency.getValue( buf ); }
   const char * ptrToSettlCurrency() const { return buf + fieldSettlCurrency.offset; }
   private: FieldSettlCurrency fieldSettlCurrency;

   public:
   bool isSetBookingType() const { return fieldBookingType.offset >= 0; }
   FieldBookingType::ValueType getBookingType() const { return fieldBookingType.getValue( buf ); }
   const char * ptrToBookingType() const { return buf + fieldBookingType.offset; }
   private: FieldBookingType fieldBookingType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetCoveredOrUncovered() const { return fieldCoveredOrUncovered.offset >= 0; }
   FieldCoveredOrUncovered::ValueType getCoveredOrUncovered() const { return fieldCoveredOrUncovered.getValue( buf ); }
   const char * ptrToCoveredOrUncovered() const { return buf + fieldCoveredOrUncovered.offset; }
   private: FieldCoveredOrUncovered fieldCoveredOrUncovered;

   public:
   bool isSetMaxShow() const { return fieldMaxShow.offset >= 0; }
   FieldMaxShow::ValueType getMaxShow() const { return fieldMaxShow.getValue( buf ); }
   const char * ptrToMaxShow() const { return buf + fieldMaxShow.offset; }
   private: FieldMaxShow fieldMaxShow;

   public:
   bool isSetPegOffsetValue() const { return fieldPegOffsetValue.offset >= 0; }
   FieldPegOffsetValue::ValueType getPegOffsetValue() const { return fieldPegOffsetValue.getValue( buf ); }
   const char * ptrToPegOffsetValue() const { return buf + fieldPegOffsetValue.offset; }
   private: FieldPegOffsetValue fieldPegOffsetValue;

   public:
   bool isSetPegMoveType() const { return fieldPegMoveType.offset >= 0; }
   FieldPegMoveType::ValueType getPegMoveType() const { return fieldPegMoveType.getValue( buf ); }
   const char * ptrToPegMoveType() const { return buf + fieldPegMoveType.offset; }
   private: FieldPegMoveType fieldPegMoveType;

   public:
   bool isSetPegOffsetType() const { return fieldPegOffsetType.offset >= 0; }
   FieldPegOffsetType::ValueType getPegOffsetType() const { return fieldPegOffsetType.getValue( buf ); }
   const char * ptrToPegOffsetType() const { return buf + fieldPegOffsetType.offset; }
   private: FieldPegOffsetType fieldPegOffsetType;

   public:
   bool isSetPegLimitType() const { return fieldPegLimitType.offset >= 0; }
   FieldPegLimitType::ValueType getPegLimitType() const { return fieldPegLimitType.getValue( buf ); }
   const char * ptrToPegLimitType() const { return buf + fieldPegLimitType.offset; }
   private: FieldPegLimitType fieldPegLimitType;

   public:
   bool isSetPegRoundDirection() const { return fieldPegRoundDirection.offset >= 0; }
   FieldPegRoundDirection::ValueType getPegRoundDirection() const { return fieldPegRoundDirection.getValue( buf ); }
   const char * ptrToPegRoundDirection() const { return buf + fieldPegRoundDirection.offset; }
   private: FieldPegRoundDirection fieldPegRoundDirection;

   public:
   bool isSetPegScope() const { return fieldPegScope.offset >= 0; }
   FieldPegScope::ValueType getPegScope() const { return fieldPegScope.getValue( buf ); }
   const char * ptrToPegScope() const { return buf + fieldPegScope.offset; }
   private: FieldPegScope fieldPegScope;

   public:
   bool isSetDiscretionInst() const { return fieldDiscretionInst.offset >= 0; }
   FieldDiscretionInst::ValueType getDiscretionInst() const { return fieldDiscretionInst.getValue( buf ); }
   const char * ptrToDiscretionInst() const { return buf + fieldDiscretionInst.offset; }
   private: FieldDiscretionInst fieldDiscretionInst;

   public:
   bool isSetDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.offset >= 0; }
   FieldDiscretionOffsetValue::ValueType getDiscretionOffsetValue() const { return fieldDiscretionOffsetValue.getValue( buf ); }
   const char * ptrToDiscretionOffsetValue() const { return buf + fieldDiscretionOffsetValue.offset; }
   private: FieldDiscretionOffsetValue fieldDiscretionOffsetValue;

   public:
   bool isSetDiscretionMoveType() const { return fieldDiscretionMoveType.offset >= 0; }
   FieldDiscretionMoveType::ValueType getDiscretionMoveType() const { return fieldDiscretionMoveType.getValue( buf ); }
   const char * ptrToDiscretionMoveType() const { return buf + fieldDiscretionMoveType.offset; }
   private: FieldDiscretionMoveType fieldDiscretionMoveType;

   public:
   bool isSetDiscretionOffsetType() const { return fieldDiscretionOffsetType.offset >= 0; }
   FieldDiscretionOffsetType::ValueType getDiscretionOffsetType() const { return fieldDiscretionOffsetType.getValue( buf ); }
   const char * ptrToDiscretionOffsetType() const { return buf + fieldDiscretionOffsetType.offset; }
   private: FieldDiscretionOffsetType fieldDiscretionOffsetType;

   public:
   bool isSetDiscretionLimitType() const { return fieldDiscretionLimitType.offset >= 0; }
   FieldDiscretionLimitType::ValueType getDiscretionLimitType() const { return fieldDiscretionLimitType.getValue( buf ); }
   const char * ptrToDiscretionLimitType() const { return buf + fieldDiscretionLimitType.offset; }
   private: FieldDiscretionLimitType fieldDiscretionLimitType;

   public:
   bool isSetDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.offset >= 0; }
   FieldDiscretionRoundDirection::ValueType getDiscretionRoundDirection() const { return fieldDiscretionRoundDirection.getValue( buf ); }
   const char * ptrToDiscretionRoundDirection() const { return buf + fieldDiscretionRoundDirection.offset; }
   private: FieldDiscretionRoundDirection fieldDiscretionRoundDirection;

   public:
   bool isSetDiscretionScope() const { return fieldDiscretionScope.offset >= 0; }
   FieldDiscretionScope::ValueType getDiscretionScope() const { return fieldDiscretionScope.getValue( buf ); }
   const char * ptrToDiscretionScope() const { return buf + fieldDiscretionScope.offset; }
   private: FieldDiscretionScope fieldDiscretionScope;

   public:
   bool isSetTargetStrategy() const { return fieldTargetStrategy.offset >= 0; }
   FieldTargetStrategy::ValueType getTargetStrategy() const { return fieldTargetStrategy.getValue( buf ); }
   const char * ptrToTargetStrategy() const { return buf + fieldTargetStrategy.offset; }
   private: FieldTargetStrategy fieldTargetStrategy;

   public:
   bool isSetTargetStrategyParameters() const { return fieldTargetStrategyParameters.offset >= 0; }
   FieldTargetStrategyParameters::ValueType getTargetStrategyParameters() const { return fieldTargetStrategyParameters.getValue( buf ); }
   const char * ptrToTargetStrategyParameters() const { return buf + fieldTargetStrategyParameters.offset; }
   private: FieldTargetStrategyParameters fieldTargetStrategyParameters;

   public:
   bool isSetParticipationRate() const { return fieldParticipationRate.offset >= 0; }
   FieldParticipationRate::ValueType getParticipationRate() const { return fieldParticipationRate.getValue( buf ); }
   const char * ptrToParticipationRate() const { return buf + fieldParticipationRate.offset; }
   private: FieldParticipationRate fieldParticipationRate;

   public:
   bool isSetCancellationRights() const { return fieldCancellationRights.offset >= 0; }
   FieldCancellationRights::ValueType getCancellationRights() const { return fieldCancellationRights.getValue( buf ); }
   const char * ptrToCancellationRights() const { return buf + fieldCancellationRights.offset; }
   private: FieldCancellationRights fieldCancellationRights;

   public:
   bool isSetMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.offset >= 0; }
   FieldMoneyLaunderingStatus::ValueType getMoneyLaunderingStatus() const { return fieldMoneyLaunderingStatus.getValue( buf ); }
   const char * ptrToMoneyLaunderingStatus() const { return buf + fieldMoneyLaunderingStatus.offset; }
   private: FieldMoneyLaunderingStatus fieldMoneyLaunderingStatus;

   public:
   bool isSetRegistID() const { return fieldRegistID.offset >= 0; }
   FieldRegistID::ValueType getRegistID() const { return fieldRegistID.getValue( buf ); }
   const char * ptrToRegistID() const { return buf + fieldRegistID.offset; }
   private: FieldRegistID fieldRegistID;

   public:
   bool isSetDesignation() const { return fieldDesignation.offset >= 0; }
   FieldDesignation::ValueType getDesignation() const { return fieldDesignation.getValue( buf ); }
   const char * ptrToDesignation() const { return buf + fieldDesignation.offset; }
   private: FieldDesignation fieldDesignation;

   public:
   bool isSetMultiLegRptTypeReq() const { return fieldMultiLegRptTypeReq.offset >= 0; }
   FieldMultiLegRptTypeReq::ValueType getMultiLegRptTypeReq() const { return fieldMultiLegRptTypeReq.getValue( buf ); }
   const char * ptrToMultiLegRptTypeReq() const { return buf + fieldMultiLegRptTypeReq.offset; }
   private: FieldMultiLegRptTypeReq fieldMultiLegRptTypeReq;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageTradeCaptureReportRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetTradeRequestID() const { return fieldTradeRequestID.offset >= 0; }
   FieldTradeRequestID::ValueType getTradeRequestID() const { return fieldTradeRequestID.getValue( buf ); }
   const char * ptrToTradeRequestID() const { return buf + fieldTradeRequestID.offset; }
   private: FieldTradeRequestID fieldTradeRequestID;

   public:
   bool isSetTradeRequestType() const { return fieldTradeRequestType.offset >= 0; }
   FieldTradeRequestType::ValueType getTradeRequestType() const { return fieldTradeRequestType.getValue( buf ); }
   const char * ptrToTradeRequestType() const { return buf + fieldTradeRequestType.offset; }
   private: FieldTradeRequestType fieldTradeRequestType;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetTradeReportID() const { return fieldTradeReportID.offset >= 0; }
   FieldTradeReportID::ValueType getTradeReportID() const { return fieldTradeReportID.getValue( buf ); }
   const char * ptrToTradeReportID() const { return buf + fieldTradeReportID.offset; }
   private: FieldTradeReportID fieldTradeReportID;

   public:
   bool isSetSecondaryTradeReportID() const { return fieldSecondaryTradeReportID.offset >= 0; }
   FieldSecondaryTradeReportID::ValueType getSecondaryTradeReportID() const { return fieldSecondaryTradeReportID.getValue( buf ); }
   const char * ptrToSecondaryTradeReportID() const { return buf + fieldSecondaryTradeReportID.offset; }
   private: FieldSecondaryTradeReportID fieldSecondaryTradeReportID;

   public:
   bool isSetExecID() const { return fieldExecID.offset >= 0; }
   FieldExecID::ValueType getExecID() const { return fieldExecID.getValue( buf ); }
   const char * ptrToExecID() const { return buf + fieldExecID.offset; }
   private: FieldExecID fieldExecID;

   public:
   bool isSetExecType() const { return fieldExecType.offset >= 0; }
   FieldExecType::ValueType getExecType() const { return fieldExecType.getValue( buf ); }
   const char * ptrToExecType() const { return buf + fieldExecType.offset; }
   private: FieldExecType fieldExecType;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetMatchStatus() const { return fieldMatchStatus.offset >= 0; }
   FieldMatchStatus::ValueType getMatchStatus() const { return fieldMatchStatus.getValue( buf ); }
   const char * ptrToMatchStatus() const { return buf + fieldMatchStatus.offset; }
   private: FieldMatchStatus fieldMatchStatus;

   public:
   bool isSetTrdType() const { return fieldTrdType.offset >= 0; }
   FieldTrdType::ValueType getTrdType() const { return fieldTrdType.getValue( buf ); }
   const char * ptrToTrdType() const { return buf + fieldTrdType.offset; }
   private: FieldTrdType fieldTrdType;

   public:
   bool isSetTrdSubType() const { return fieldTrdSubType.offset >= 0; }
   FieldTrdSubType::ValueType getTrdSubType() const { return fieldTrdSubType.getValue( buf ); }
   const char * ptrToTrdSubType() const { return buf + fieldTrdSubType.offset; }
   private: FieldTrdSubType fieldTrdSubType;

   public:
   bool isSetTransferReason() const { return fieldTransferReason.offset >= 0; }
   FieldTransferReason::ValueType getTransferReason() const { return fieldTransferReason.getValue( buf ); }
   const char * ptrToTransferReason() const { return buf + fieldTransferReason.offset; }
   private: FieldTransferReason fieldTransferReason;

   public:
   bool isSetSecondaryTrdType() const { return fieldSecondaryTrdType.offset >= 0; }
   FieldSecondaryTrdType::ValueType getSecondaryTrdType() const { return fieldSecondaryTrdType.getValue( buf ); }
   const char * ptrToSecondaryTrdType() const { return buf + fieldSecondaryTrdType.offset; }
   private: FieldSecondaryTrdType fieldSecondaryTrdType;

   public:
   bool isSetTradeLinkID() const { return fieldTradeLinkID.offset >= 0; }
   FieldTradeLinkID::ValueType getTradeLinkID() const { return fieldTradeLinkID.getValue( buf ); }
   const char * ptrToTradeLinkID() const { return buf + fieldTradeLinkID.offset; }
   private: FieldTradeLinkID fieldTradeLinkID;

   public:
   bool isSetTrdMatchID() const { return fieldTrdMatchID.offset >= 0; }
   FieldTrdMatchID::ValueType getTrdMatchID() const { return fieldTrdMatchID.getValue( buf ); }
   const char * ptrToTrdMatchID() const { return buf + fieldTrdMatchID.offset; }
   private: FieldTrdMatchID fieldTrdMatchID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoDates() const { return fieldNoDates.offset >= 0; }
   FieldNoDates::ValueType getNoDates() const { return fieldNoDates.getValue( buf ); }
   const char * ptrToNoDates() const { return buf + fieldNoDates.offset; }
   private: FieldNoDates fieldNoDates;
  
   public:
   std::size_t getGroupCountDates() const { return groupsDates.size(); } 
   const GroupDates & getGroupDates( std::size_t idx ) const { return groupsDates[ idx ]; } 
   private: GroupDates::Array groupsDates{ 10 };

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetTimeBracket() const { return fieldTimeBracket.offset >= 0; }
   FieldTimeBracket::ValueType getTimeBracket() const { return fieldTimeBracket.getValue( buf ); }
   const char * ptrToTimeBracket() const { return buf + fieldTimeBracket.offset; }
   private: FieldTimeBracket fieldTimeBracket;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetMultiLegReportingType() const { return fieldMultiLegReportingType.offset >= 0; }
   FieldMultiLegReportingType::ValueType getMultiLegReportingType() const { return fieldMultiLegReportingType.getValue( buf ); }
   const char * ptrToMultiLegReportingType() const { return buf + fieldMultiLegReportingType.offset; }
   private: FieldMultiLegReportingType fieldMultiLegReportingType;

   public:
   bool isSetTradeInputSource() const { return fieldTradeInputSource.offset >= 0; }
   FieldTradeInputSource::ValueType getTradeInputSource() const { return fieldTradeInputSource.getValue( buf ); }
   const char * ptrToTradeInputSource() const { return buf + fieldTradeInputSource.offset; }
   private: FieldTradeInputSource fieldTradeInputSource;

   public:
   bool isSetTradeInputDevice() const { return fieldTradeInputDevice.offset >= 0; }
   FieldTradeInputDevice::ValueType getTradeInputDevice() const { return fieldTradeInputDevice.getValue( buf ); }
   const char * ptrToTradeInputDevice() const { return buf + fieldTradeInputDevice.offset; }
   private: FieldTradeInputDevice fieldTradeInputDevice;

   public:
   bool isSetResponseTransportType() const { return fieldResponseTransportType.offset >= 0; }
   FieldResponseTransportType::ValueType getResponseTransportType() const { return fieldResponseTransportType.getValue( buf ); }
   const char * ptrToResponseTransportType() const { return buf + fieldResponseTransportType.offset; }
   private: FieldResponseTransportType fieldResponseTransportType;

   public:
   bool isSetResponseDestination() const { return fieldResponseDestination.offset >= 0; }
   FieldResponseDestination::ValueType getResponseDestination() const { return fieldResponseDestination.getValue( buf ); }
   const char * ptrToResponseDestination() const { return buf + fieldResponseDestination.offset; }
   private: FieldResponseDestination fieldResponseDestination;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageTradeCaptureReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetTradeReportID() const { return fieldTradeReportID.offset >= 0; }
   FieldTradeReportID::ValueType getTradeReportID() const { return fieldTradeReportID.getValue( buf ); }
   const char * ptrToTradeReportID() const { return buf + fieldTradeReportID.offset; }
   private: FieldTradeReportID fieldTradeReportID;

   public:
   bool isSetTradeReportTransType() const { return fieldTradeReportTransType.offset >= 0; }
   FieldTradeReportTransType::ValueType getTradeReportTransType() const { return fieldTradeReportTransType.getValue( buf ); }
   const char * ptrToTradeReportTransType() const { return buf + fieldTradeReportTransType.offset; }
   private: FieldTradeReportTransType fieldTradeReportTransType;

   public:
   bool isSetTradeReportType() const { return fieldTradeReportType.offset >= 0; }
   FieldTradeReportType::ValueType getTradeReportType() const { return fieldTradeReportType.getValue( buf ); }
   const char * ptrToTradeReportType() const { return buf + fieldTradeReportType.offset; }
   private: FieldTradeReportType fieldTradeReportType;

   public:
   bool isSetTradeRequestID() const { return fieldTradeRequestID.offset >= 0; }
   FieldTradeRequestID::ValueType getTradeRequestID() const { return fieldTradeRequestID.getValue( buf ); }
   const char * ptrToTradeRequestID() const { return buf + fieldTradeRequestID.offset; }
   private: FieldTradeRequestID fieldTradeRequestID;

   public:
   bool isSetTrdType() const { return fieldTrdType.offset >= 0; }
   FieldTrdType::ValueType getTrdType() const { return fieldTrdType.getValue( buf ); }
   const char * ptrToTrdType() const { return buf + fieldTrdType.offset; }
   private: FieldTrdType fieldTrdType;

   public:
   bool isSetTrdSubType() const { return fieldTrdSubType.offset >= 0; }
   FieldTrdSubType::ValueType getTrdSubType() const { return fieldTrdSubType.getValue( buf ); }
   const char * ptrToTrdSubType() const { return buf + fieldTrdSubType.offset; }
   private: FieldTrdSubType fieldTrdSubType;

   public:
   bool isSetSecondaryTrdType() const { return fieldSecondaryTrdType.offset >= 0; }
   FieldSecondaryTrdType::ValueType getSecondaryTrdType() const { return fieldSecondaryTrdType.getValue( buf ); }
   const char * ptrToSecondaryTrdType() const { return buf + fieldSecondaryTrdType.offset; }
   private: FieldSecondaryTrdType fieldSecondaryTrdType;

   public:
   bool isSetTransferReason() const { return fieldTransferReason.offset >= 0; }
   FieldTransferReason::ValueType getTransferReason() const { return fieldTransferReason.getValue( buf ); }
   const char * ptrToTransferReason() const { return buf + fieldTransferReason.offset; }
   private: FieldTransferReason fieldTransferReason;

   public:
   bool isSetExecType() const { return fieldExecType.offset >= 0; }
   FieldExecType::ValueType getExecType() const { return fieldExecType.getValue( buf ); }
   const char * ptrToExecType() const { return buf + fieldExecType.offset; }
   private: FieldExecType fieldExecType;

   public:
   bool isSetTotNumTradeReports() const { return fieldTotNumTradeReports.offset >= 0; }
   FieldTotNumTradeReports::ValueType getTotNumTradeReports() const { return fieldTotNumTradeReports.getValue( buf ); }
   const char * ptrToTotNumTradeReports() const { return buf + fieldTotNumTradeReports.offset; }
   private: FieldTotNumTradeReports fieldTotNumTradeReports;

   public:
   bool isSetLastRptRequested() const { return fieldLastRptRequested.offset >= 0; }
   FieldLastRptRequested::ValueType getLastRptRequested() const { return fieldLastRptRequested.getValue( buf ); }
   const char * ptrToLastRptRequested() const { return buf + fieldLastRptRequested.offset; }
   private: FieldLastRptRequested fieldLastRptRequested;

   public:
   bool isSetUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.offset >= 0; }
   FieldUnsolicitedIndicator::ValueType getUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.getValue( buf ); }
   const char * ptrToUnsolicitedIndicator() const { return buf + fieldUnsolicitedIndicator.offset; }
   private: FieldUnsolicitedIndicator fieldUnsolicitedIndicator;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetTradeReportRefID() const { return fieldTradeReportRefID.offset >= 0; }
   FieldTradeReportRefID::ValueType getTradeReportRefID() const { return fieldTradeReportRefID.getValue( buf ); }
   const char * ptrToTradeReportRefID() const { return buf + fieldTradeReportRefID.offset; }
   private: FieldTradeReportRefID fieldTradeReportRefID;

   public:
   bool isSetSecondaryTradeReportRefID() const { return fieldSecondaryTradeReportRefID.offset >= 0; }
   FieldSecondaryTradeReportRefID::ValueType getSecondaryTradeReportRefID() const { return fieldSecondaryTradeReportRefID.getValue( buf ); }
   const char * ptrToSecondaryTradeReportRefID() const { return buf + fieldSecondaryTradeReportRefID.offset; }
   private: FieldSecondaryTradeReportRefID fieldSecondaryTradeReportRefID;

   public:
   bool isSetSecondaryTradeReportID() const { return fieldSecondaryTradeReportID.offset >= 0; }
   FieldSecondaryTradeReportID::ValueType getSecondaryTradeReportID() const { return fieldSecondaryTradeReportID.getValue( buf ); }
   const char * ptrToSecondaryTradeReportID() const { return buf + fieldSecondaryTradeReportID.offset; }
   private: FieldSecondaryTradeReportID fieldSecondaryTradeReportID;

   public:
   bool isSetTradeLinkID() const { return fieldTradeLinkID.offset >= 0; }
   FieldTradeLinkID::ValueType getTradeLinkID() const { return fieldTradeLinkID.getValue( buf ); }
   const char * ptrToTradeLinkID() const { return buf + fieldTradeLinkID.offset; }
   private: FieldTradeLinkID fieldTradeLinkID;

   public:
   bool isSetTrdMatchID() const { return fieldTrdMatchID.offset >= 0; }
   FieldTrdMatchID::ValueType getTrdMatchID() const { return fieldTrdMatchID.getValue( buf ); }
   const char * ptrToTrdMatchID() const { return buf + fieldTrdMatchID.offset; }
   private: FieldTrdMatchID fieldTrdMatchID;

   public:
   bool isSetExecID() const { return fieldExecID.offset >= 0; }
   FieldExecID::ValueType getExecID() const { return fieldExecID.getValue( buf ); }
   const char * ptrToExecID() const { return buf + fieldExecID.offset; }
   private: FieldExecID fieldExecID;

   public:
   bool isSetOrdStatus() const { return fieldOrdStatus.offset >= 0; }
   FieldOrdStatus::ValueType getOrdStatus() const { return fieldOrdStatus.getValue( buf ); }
   const char * ptrToOrdStatus() const { return buf + fieldOrdStatus.offset; }
   private: FieldOrdStatus fieldOrdStatus;

   public:
   bool isSetSecondaryExecID() const { return fieldSecondaryExecID.offset >= 0; }
   FieldSecondaryExecID::ValueType getSecondaryExecID() const { return fieldSecondaryExecID.getValue( buf ); }
   const char * ptrToSecondaryExecID() const { return buf + fieldSecondaryExecID.offset; }
   private: FieldSecondaryExecID fieldSecondaryExecID;

   public:
   bool isSetExecRestatementReason() const { return fieldExecRestatementReason.offset >= 0; }
   FieldExecRestatementReason::ValueType getExecRestatementReason() const { return fieldExecRestatementReason.getValue( buf ); }
   const char * ptrToExecRestatementReason() const { return buf + fieldExecRestatementReason.offset; }
   private: FieldExecRestatementReason fieldExecRestatementReason;

   public:
   bool isSetPreviouslyReported() const { return fieldPreviouslyReported.offset >= 0; }
   FieldPreviouslyReported::ValueType getPreviouslyReported() const { return fieldPreviouslyReported.getValue( buf ); }
   const char * ptrToPreviouslyReported() const { return buf + fieldPreviouslyReported.offset; }
   private: FieldPreviouslyReported fieldPreviouslyReported;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetUnderlyingTradingSessionID() const { return fieldUnderlyingTradingSessionID.offset >= 0; }
   FieldUnderlyingTradingSessionID::ValueType getUnderlyingTradingSessionID() const { return fieldUnderlyingTradingSessionID.getValue( buf ); }
   const char * ptrToUnderlyingTradingSessionID() const { return buf + fieldUnderlyingTradingSessionID.offset; }
   private: FieldUnderlyingTradingSessionID fieldUnderlyingTradingSessionID;

   public:
   bool isSetUnderlyingTradingSessionSubID() const { return fieldUnderlyingTradingSessionSubID.offset >= 0; }
   FieldUnderlyingTradingSessionSubID::ValueType getUnderlyingTradingSessionSubID() const { return fieldUnderlyingTradingSessionSubID.getValue( buf ); }
   const char * ptrToUnderlyingTradingSessionSubID() const { return buf + fieldUnderlyingTradingSessionSubID.offset; }
   private: FieldUnderlyingTradingSessionSubID fieldUnderlyingTradingSessionSubID;

   public:
   bool isSetLastQty() const { return fieldLastQty.offset >= 0; }
   FieldLastQty::ValueType getLastQty() const { return fieldLastQty.getValue( buf ); }
   const char * ptrToLastQty() const { return buf + fieldLastQty.offset; }
   private: FieldLastQty fieldLastQty;

   public:
   bool isSetLastPx() const { return fieldLastPx.offset >= 0; }
   FieldLastPx::ValueType getLastPx() const { return fieldLastPx.getValue( buf ); }
   const char * ptrToLastPx() const { return buf + fieldLastPx.offset; }
   private: FieldLastPx fieldLastPx;

   public:
   bool isSetLastParPx() const { return fieldLastParPx.offset >= 0; }
   FieldLastParPx::ValueType getLastParPx() const { return fieldLastParPx.getValue( buf ); }
   const char * ptrToLastParPx() const { return buf + fieldLastParPx.offset; }
   private: FieldLastParPx fieldLastParPx;

   public:
   bool isSetLastSpotRate() const { return fieldLastSpotRate.offset >= 0; }
   FieldLastSpotRate::ValueType getLastSpotRate() const { return fieldLastSpotRate.getValue( buf ); }
   const char * ptrToLastSpotRate() const { return buf + fieldLastSpotRate.offset; }
   private: FieldLastSpotRate fieldLastSpotRate;

   public:
   bool isSetLastForwardPoints() const { return fieldLastForwardPoints.offset >= 0; }
   FieldLastForwardPoints::ValueType getLastForwardPoints() const { return fieldLastForwardPoints.getValue( buf ); }
   const char * ptrToLastForwardPoints() const { return buf + fieldLastForwardPoints.offset; }
   private: FieldLastForwardPoints fieldLastForwardPoints;

   public:
   bool isSetLastMkt() const { return fieldLastMkt.offset >= 0; }
   FieldLastMkt::ValueType getLastMkt() const { return fieldLastMkt.getValue( buf ); }
   const char * ptrToLastMkt() const { return buf + fieldLastMkt.offset; }
   private: FieldLastMkt fieldLastMkt;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetAvgPx() const { return fieldAvgPx.offset >= 0; }
   FieldAvgPx::ValueType getAvgPx() const { return fieldAvgPx.getValue( buf ); }
   const char * ptrToAvgPx() const { return buf + fieldAvgPx.offset; }
   private: FieldAvgPx fieldAvgPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetAvgPxIndicator() const { return fieldAvgPxIndicator.offset >= 0; }
   FieldAvgPxIndicator::ValueType getAvgPxIndicator() const { return fieldAvgPxIndicator.getValue( buf ); }
   const char * ptrToAvgPxIndicator() const { return buf + fieldAvgPxIndicator.offset; }
   private: FieldAvgPxIndicator fieldAvgPxIndicator;

   public:
   bool isSetNoPosAmt() const { return fieldNoPosAmt.offset >= 0; }
   FieldNoPosAmt::ValueType getNoPosAmt() const { return fieldNoPosAmt.getValue( buf ); }
   const char * ptrToNoPosAmt() const { return buf + fieldNoPosAmt.offset; }
   private: FieldNoPosAmt fieldNoPosAmt;
  
   public:
   std::size_t getGroupCountPosAmt() const { return groupsPosAmt.size(); } 
   const GroupPosAmt & getGroupPosAmt( std::size_t idx ) const { return groupsPosAmt[ idx ]; } 
   private: GroupPosAmt::Array groupsPosAmt{ 10 };

   public:
   bool isSetMultiLegReportingType() const { return fieldMultiLegReportingType.offset >= 0; }
   FieldMultiLegReportingType::ValueType getMultiLegReportingType() const { return fieldMultiLegReportingType.getValue( buf ); }
   const char * ptrToMultiLegReportingType() const { return buf + fieldMultiLegReportingType.offset; }
   private: FieldMultiLegReportingType fieldMultiLegReportingType;

   public:
   bool isSetTradeLegRefID() const { return fieldTradeLegRefID.offset >= 0; }
   FieldTradeLegRefID::ValueType getTradeLegRefID() const { return fieldTradeLegRefID.getValue( buf ); }
   const char * ptrToTradeLegRefID() const { return buf + fieldTradeLegRefID.offset; }
   private: FieldTradeLegRefID fieldTradeLegRefID;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.offset >= 0; }
   FieldNoTrdRegTimestamps::ValueType getNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.getValue( buf ); }
   const char * ptrToNoTrdRegTimestamps() const { return buf + fieldNoTrdRegTimestamps.offset; }
   private: FieldNoTrdRegTimestamps fieldNoTrdRegTimestamps;
  
   public:
   std::size_t getGroupCountTrdRegTimestamps() const { return groupsTrdRegTimestamps.size(); } 
   const GroupTrdRegTimestamps & getGroupTrdRegTimestamps( std::size_t idx ) const { return groupsTrdRegTimestamps[ idx ]; } 
   private: GroupTrdRegTimestamps::Array groupsTrdRegTimestamps{ 10 };

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetMatchStatus() const { return fieldMatchStatus.offset >= 0; }
   FieldMatchStatus::ValueType getMatchStatus() const { return fieldMatchStatus.getValue( buf ); }
   const char * ptrToMatchStatus() const { return buf + fieldMatchStatus.offset; }
   private: FieldMatchStatus fieldMatchStatus;

   public:
   bool isSetMatchType() const { return fieldMatchType.offset >= 0; }
   FieldMatchType::ValueType getMatchType() const { return fieldMatchType.getValue( buf ); }
   const char * ptrToMatchType() const { return buf + fieldMatchType.offset; }
   private: FieldMatchType fieldMatchType;

   public:
   bool isSetNoSides() const { return fieldNoSides.offset >= 0; }
   FieldNoSides::ValueType getNoSides() const { return fieldNoSides.getValue( buf ); }
   const char * ptrToNoSides() const { return buf + fieldNoSides.offset; }
   private: FieldNoSides fieldNoSides;
  
   public:
   std::size_t getGroupCountSides() const { return groupsSides.size(); } 
   const GroupSides & getGroupSides( std::size_t idx ) const { return groupsSides[ idx ]; } 
   private: GroupSides::Array groupsSides{ 10 };

   public:
   bool isSetCopyMsgIndicator() const { return fieldCopyMsgIndicator.offset >= 0; }
   FieldCopyMsgIndicator::ValueType getCopyMsgIndicator() const { return fieldCopyMsgIndicator.getValue( buf ); }
   const char * ptrToCopyMsgIndicator() const { return buf + fieldCopyMsgIndicator.offset; }
   private: FieldCopyMsgIndicator fieldCopyMsgIndicator;

   public:
   bool isSetPublishTrdIndicator() const { return fieldPublishTrdIndicator.offset >= 0; }
   FieldPublishTrdIndicator::ValueType getPublishTrdIndicator() const { return fieldPublishTrdIndicator.getValue( buf ); }
   const char * ptrToPublishTrdIndicator() const { return buf + fieldPublishTrdIndicator.offset; }
   private: FieldPublishTrdIndicator fieldPublishTrdIndicator;

   public:
   bool isSetShortSaleReason() const { return fieldShortSaleReason.offset >= 0; }
   FieldShortSaleReason::ValueType getShortSaleReason() const { return fieldShortSaleReason.getValue( buf ); }
   const char * ptrToShortSaleReason() const { return buf + fieldShortSaleReason.offset; }
   private: FieldShortSaleReason fieldShortSaleReason;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageOrderMassStatusRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetMassStatusReqID() const { return fieldMassStatusReqID.offset >= 0; }
   FieldMassStatusReqID::ValueType getMassStatusReqID() const { return fieldMassStatusReqID.getValue( buf ); }
   const char * ptrToMassStatusReqID() const { return buf + fieldMassStatusReqID.offset; }
   private: FieldMassStatusReqID fieldMassStatusReqID;

   public:
   bool isSetMassStatusReqType() const { return fieldMassStatusReqType.offset >= 0; }
   FieldMassStatusReqType::ValueType getMassStatusReqType() const { return fieldMassStatusReqType.getValue( buf ); }
   const char * ptrToMassStatusReqType() const { return buf + fieldMassStatusReqType.offset; }
   private: FieldMassStatusReqType fieldMassStatusReqType;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetUnderlyingSymbol() const { return fieldUnderlyingSymbol.offset >= 0; }
   FieldUnderlyingSymbol::ValueType getUnderlyingSymbol() const { return fieldUnderlyingSymbol.getValue( buf ); }
   const char * ptrToUnderlyingSymbol() const { return buf + fieldUnderlyingSymbol.offset; }
   private: FieldUnderlyingSymbol fieldUnderlyingSymbol;

   public:
   bool isSetUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.offset >= 0; }
   FieldUnderlyingSymbolSfx::ValueType getUnderlyingSymbolSfx() const { return fieldUnderlyingSymbolSfx.getValue( buf ); }
   const char * ptrToUnderlyingSymbolSfx() const { return buf + fieldUnderlyingSymbolSfx.offset; }
   private: FieldUnderlyingSymbolSfx fieldUnderlyingSymbolSfx;

   public:
   bool isSetUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.offset >= 0; }
   FieldUnderlyingSecurityID::ValueType getUnderlyingSecurityID() const { return fieldUnderlyingSecurityID.getValue( buf ); }
   const char * ptrToUnderlyingSecurityID() const { return buf + fieldUnderlyingSecurityID.offset; }
   private: FieldUnderlyingSecurityID fieldUnderlyingSecurityID;

   public:
   bool isSetUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.offset >= 0; }
   FieldUnderlyingSecurityIDSource::ValueType getUnderlyingSecurityIDSource() const { return fieldUnderlyingSecurityIDSource.getValue( buf ); }
   const char * ptrToUnderlyingSecurityIDSource() const { return buf + fieldUnderlyingSecurityIDSource.offset; }
   private: FieldUnderlyingSecurityIDSource fieldUnderlyingSecurityIDSource;

   public:
   bool isSetNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.offset >= 0; }
   FieldNoUnderlyingSecurityAltID::ValueType getNoUnderlyingSecurityAltID() const { return fieldNoUnderlyingSecurityAltID.getValue( buf ); }
   const char * ptrToNoUnderlyingSecurityAltID() const { return buf + fieldNoUnderlyingSecurityAltID.offset; }
   private: FieldNoUnderlyingSecurityAltID fieldNoUnderlyingSecurityAltID;
  
   public:
   std::size_t getGroupCountUnderlyingSecurityAltID() const { return groupsUnderlyingSecurityAltID.size(); } 
   const GroupUnderlyingSecurityAltID & getGroupUnderlyingSecurityAltID( std::size_t idx ) const { return groupsUnderlyingSecurityAltID[ idx ]; } 
   private: GroupUnderlyingSecurityAltID::Array groupsUnderlyingSecurityAltID{ 10 };

   public:
   bool isSetUnderlyingProduct() const { return fieldUnderlyingProduct.offset >= 0; }
   FieldUnderlyingProduct::ValueType getUnderlyingProduct() const { return fieldUnderlyingProduct.getValue( buf ); }
   const char * ptrToUnderlyingProduct() const { return buf + fieldUnderlyingProduct.offset; }
   private: FieldUnderlyingProduct fieldUnderlyingProduct;

   public:
   bool isSetUnderlyingCFICode() const { return fieldUnderlyingCFICode.offset >= 0; }
   FieldUnderlyingCFICode::ValueType getUnderlyingCFICode() const { return fieldUnderlyingCFICode.getValue( buf ); }
   const char * ptrToUnderlyingCFICode() const { return buf + fieldUnderlyingCFICode.offset; }
   private: FieldUnderlyingCFICode fieldUnderlyingCFICode;

   public:
   bool isSetUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.offset >= 0; }
   FieldUnderlyingSecurityType::ValueType getUnderlyingSecurityType() const { return fieldUnderlyingSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingSecurityType() const { return buf + fieldUnderlyingSecurityType.offset; }
   private: FieldUnderlyingSecurityType fieldUnderlyingSecurityType;

   public:
   bool isSetUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.offset >= 0; }
   FieldUnderlyingSecuritySubType::ValueType getUnderlyingSecuritySubType() const { return fieldUnderlyingSecuritySubType.getValue( buf ); }
   const char * ptrToUnderlyingSecuritySubType() const { return buf + fieldUnderlyingSecuritySubType.offset; }
   private: FieldUnderlyingSecuritySubType fieldUnderlyingSecuritySubType;

   public:
   bool isSetUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.offset >= 0; }
   FieldUnderlyingMaturityMonthYear::ValueType getUnderlyingMaturityMonthYear() const { return fieldUnderlyingMaturityMonthYear.getValue( buf ); }
   const char * ptrToUnderlyingMaturityMonthYear() const { return buf + fieldUnderlyingMaturityMonthYear.offset; }
   private: FieldUnderlyingMaturityMonthYear fieldUnderlyingMaturityMonthYear;

   public:
   bool isSetUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.offset >= 0; }
   FieldUnderlyingMaturityDate::ValueType getUnderlyingMaturityDate() const { return fieldUnderlyingMaturityDate.getValue( buf ); }
   const char * ptrToUnderlyingMaturityDate() const { return buf + fieldUnderlyingMaturityDate.offset; }
   private: FieldUnderlyingMaturityDate fieldUnderlyingMaturityDate;

   public:
   bool isSetUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.offset >= 0; }
   FieldUnderlyingPutOrCall::ValueType getUnderlyingPutOrCall() const { return fieldUnderlyingPutOrCall.getValue( buf ); }
   const char * ptrToUnderlyingPutOrCall() const { return buf + fieldUnderlyingPutOrCall.offset; }
   private: FieldUnderlyingPutOrCall fieldUnderlyingPutOrCall;

   public:
   bool isSetUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.offset >= 0; }
   FieldUnderlyingCouponPaymentDate::ValueType getUnderlyingCouponPaymentDate() const { return fieldUnderlyingCouponPaymentDate.getValue( buf ); }
   const char * ptrToUnderlyingCouponPaymentDate() const { return buf + fieldUnderlyingCouponPaymentDate.offset; }
   private: FieldUnderlyingCouponPaymentDate fieldUnderlyingCouponPaymentDate;

   public:
   bool isSetUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.offset >= 0; }
   FieldUnderlyingIssueDate::ValueType getUnderlyingIssueDate() const { return fieldUnderlyingIssueDate.getValue( buf ); }
   const char * ptrToUnderlyingIssueDate() const { return buf + fieldUnderlyingIssueDate.offset; }
   private: FieldUnderlyingIssueDate fieldUnderlyingIssueDate;

   public:
   bool isSetUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.offset >= 0; }
   FieldUnderlyingRepoCollateralSecurityType::ValueType getUnderlyingRepoCollateralSecurityType() const { return fieldUnderlyingRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToUnderlyingRepoCollateralSecurityType() const { return buf + fieldUnderlyingRepoCollateralSecurityType.offset; }
   private: FieldUnderlyingRepoCollateralSecurityType fieldUnderlyingRepoCollateralSecurityType;

   public:
   bool isSetUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.offset >= 0; }
   FieldUnderlyingRepurchaseTerm::ValueType getUnderlyingRepurchaseTerm() const { return fieldUnderlyingRepurchaseTerm.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseTerm() const { return buf + fieldUnderlyingRepurchaseTerm.offset; }
   private: FieldUnderlyingRepurchaseTerm fieldUnderlyingRepurchaseTerm;

   public:
   bool isSetUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.offset >= 0; }
   FieldUnderlyingRepurchaseRate::ValueType getUnderlyingRepurchaseRate() const { return fieldUnderlyingRepurchaseRate.getValue( buf ); }
   const char * ptrToUnderlyingRepurchaseRate() const { return buf + fieldUnderlyingRepurchaseRate.offset; }
   private: FieldUnderlyingRepurchaseRate fieldUnderlyingRepurchaseRate;

   public:
   bool isSetUnderlyingFactor() const { return fieldUnderlyingFactor.offset >= 0; }
   FieldUnderlyingFactor::ValueType getUnderlyingFactor() const { return fieldUnderlyingFactor.getValue( buf ); }
   const char * ptrToUnderlyingFactor() const { return buf + fieldUnderlyingFactor.offset; }
   private: FieldUnderlyingFactor fieldUnderlyingFactor;

   public:
   bool isSetUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.offset >= 0; }
   FieldUnderlyingCreditRating::ValueType getUnderlyingCreditRating() const { return fieldUnderlyingCreditRating.getValue( buf ); }
   const char * ptrToUnderlyingCreditRating() const { return buf + fieldUnderlyingCreditRating.offset; }
   private: FieldUnderlyingCreditRating fieldUnderlyingCreditRating;

   public:
   bool isSetUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.offset >= 0; }
   FieldUnderlyingInstrRegistry::ValueType getUnderlyingInstrRegistry() const { return fieldUnderlyingInstrRegistry.getValue( buf ); }
   const char * ptrToUnderlyingInstrRegistry() const { return buf + fieldUnderlyingInstrRegistry.offset; }
   private: FieldUnderlyingInstrRegistry fieldUnderlyingInstrRegistry;

   public:
   bool isSetUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.offset >= 0; }
   FieldUnderlyingCountryOfIssue::ValueType getUnderlyingCountryOfIssue() const { return fieldUnderlyingCountryOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingCountryOfIssue() const { return buf + fieldUnderlyingCountryOfIssue.offset; }
   private: FieldUnderlyingCountryOfIssue fieldUnderlyingCountryOfIssue;

   public:
   bool isSetUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.offset >= 0; }
   FieldUnderlyingStateOrProvinceOfIssue::ValueType getUnderlyingStateOrProvinceOfIssue() const { return fieldUnderlyingStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingStateOrProvinceOfIssue() const { return buf + fieldUnderlyingStateOrProvinceOfIssue.offset; }
   private: FieldUnderlyingStateOrProvinceOfIssue fieldUnderlyingStateOrProvinceOfIssue;

   public:
   bool isSetUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.offset >= 0; }
   FieldUnderlyingLocaleOfIssue::ValueType getUnderlyingLocaleOfIssue() const { return fieldUnderlyingLocaleOfIssue.getValue( buf ); }
   const char * ptrToUnderlyingLocaleOfIssue() const { return buf + fieldUnderlyingLocaleOfIssue.offset; }
   private: FieldUnderlyingLocaleOfIssue fieldUnderlyingLocaleOfIssue;

   public:
   bool isSetUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.offset >= 0; }
   FieldUnderlyingRedemptionDate::ValueType getUnderlyingRedemptionDate() const { return fieldUnderlyingRedemptionDate.getValue( buf ); }
   const char * ptrToUnderlyingRedemptionDate() const { return buf + fieldUnderlyingRedemptionDate.offset; }
   private: FieldUnderlyingRedemptionDate fieldUnderlyingRedemptionDate;

   public:
   bool isSetUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.offset >= 0; }
   FieldUnderlyingStrikePrice::ValueType getUnderlyingStrikePrice() const { return fieldUnderlyingStrikePrice.getValue( buf ); }
   const char * ptrToUnderlyingStrikePrice() const { return buf + fieldUnderlyingStrikePrice.offset; }
   private: FieldUnderlyingStrikePrice fieldUnderlyingStrikePrice;

   public:
   bool isSetUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.offset >= 0; }
   FieldUnderlyingStrikeCurrency::ValueType getUnderlyingStrikeCurrency() const { return fieldUnderlyingStrikeCurrency.getValue( buf ); }
   const char * ptrToUnderlyingStrikeCurrency() const { return buf + fieldUnderlyingStrikeCurrency.offset; }
   private: FieldUnderlyingStrikeCurrency fieldUnderlyingStrikeCurrency;

   public:
   bool isSetUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.offset >= 0; }
   FieldUnderlyingOptAttribute::ValueType getUnderlyingOptAttribute() const { return fieldUnderlyingOptAttribute.getValue( buf ); }
   const char * ptrToUnderlyingOptAttribute() const { return buf + fieldUnderlyingOptAttribute.offset; }
   private: FieldUnderlyingOptAttribute fieldUnderlyingOptAttribute;

   public:
   bool isSetUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.offset >= 0; }
   FieldUnderlyingContractMultiplier::ValueType getUnderlyingContractMultiplier() const { return fieldUnderlyingContractMultiplier.getValue( buf ); }
   const char * ptrToUnderlyingContractMultiplier() const { return buf + fieldUnderlyingContractMultiplier.offset; }
   private: FieldUnderlyingContractMultiplier fieldUnderlyingContractMultiplier;

   public:
   bool isSetUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.offset >= 0; }
   FieldUnderlyingCouponRate::ValueType getUnderlyingCouponRate() const { return fieldUnderlyingCouponRate.getValue( buf ); }
   const char * ptrToUnderlyingCouponRate() const { return buf + fieldUnderlyingCouponRate.offset; }
   private: FieldUnderlyingCouponRate fieldUnderlyingCouponRate;

   public:
   bool isSetUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.offset >= 0; }
   FieldUnderlyingSecurityExchange::ValueType getUnderlyingSecurityExchange() const { return fieldUnderlyingSecurityExchange.getValue( buf ); }
   const char * ptrToUnderlyingSecurityExchange() const { return buf + fieldUnderlyingSecurityExchange.offset; }
   private: FieldUnderlyingSecurityExchange fieldUnderlyingSecurityExchange;

   public:
   bool isSetUnderlyingIssuer() const { return fieldUnderlyingIssuer.offset >= 0; }
   FieldUnderlyingIssuer::ValueType getUnderlyingIssuer() const { return fieldUnderlyingIssuer.getValue( buf ); }
   const char * ptrToUnderlyingIssuer() const { return buf + fieldUnderlyingIssuer.offset; }
   private: FieldUnderlyingIssuer fieldUnderlyingIssuer;

   public:
   bool isSetEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.offset >= 0; }
   FieldEncodedUnderlyingIssuerLen::ValueType getEncodedUnderlyingIssuerLen() const { return fieldEncodedUnderlyingIssuerLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuerLen() const { return buf + fieldEncodedUnderlyingIssuerLen.offset; }
   private: FieldEncodedUnderlyingIssuerLen fieldEncodedUnderlyingIssuerLen;

   public:
   bool isSetEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.offset >= 0; }
   FieldEncodedUnderlyingIssuer::ValueType getEncodedUnderlyingIssuer() const { return fieldEncodedUnderlyingIssuer.getValue( buf ); }
   const char * ptrToEncodedUnderlyingIssuer() const { return buf + fieldEncodedUnderlyingIssuer.offset; }
   private: FieldEncodedUnderlyingIssuer fieldEncodedUnderlyingIssuer;

   public:
   bool isSetUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.offset >= 0; }
   FieldUnderlyingSecurityDesc::ValueType getUnderlyingSecurityDesc() const { return fieldUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToUnderlyingSecurityDesc() const { return buf + fieldUnderlyingSecurityDesc.offset; }
   private: FieldUnderlyingSecurityDesc fieldUnderlyingSecurityDesc;

   public:
   bool isSetEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.offset >= 0; }
   FieldEncodedUnderlyingSecurityDescLen::ValueType getEncodedUnderlyingSecurityDescLen() const { return fieldEncodedUnderlyingSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDescLen() const { return buf + fieldEncodedUnderlyingSecurityDescLen.offset; }
   private: FieldEncodedUnderlyingSecurityDescLen fieldEncodedUnderlyingSecurityDescLen;

   public:
   bool isSetEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.offset >= 0; }
   FieldEncodedUnderlyingSecurityDesc::ValueType getEncodedUnderlyingSecurityDesc() const { return fieldEncodedUnderlyingSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedUnderlyingSecurityDesc() const { return buf + fieldEncodedUnderlyingSecurityDesc.offset; }
   private: FieldEncodedUnderlyingSecurityDesc fieldEncodedUnderlyingSecurityDesc;

   public:
   bool isSetUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.offset >= 0; }
   FieldUnderlyingCPProgram::ValueType getUnderlyingCPProgram() const { return fieldUnderlyingCPProgram.getValue( buf ); }
   const char * ptrToUnderlyingCPProgram() const { return buf + fieldUnderlyingCPProgram.offset; }
   private: FieldUnderlyingCPProgram fieldUnderlyingCPProgram;

   public:
   bool isSetUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.offset >= 0; }
   FieldUnderlyingCPRegType::ValueType getUnderlyingCPRegType() const { return fieldUnderlyingCPRegType.getValue( buf ); }
   const char * ptrToUnderlyingCPRegType() const { return buf + fieldUnderlyingCPRegType.offset; }
   private: FieldUnderlyingCPRegType fieldUnderlyingCPRegType;

   public:
   bool isSetUnderlyingCurrency() const { return fieldUnderlyingCurrency.offset >= 0; }
   FieldUnderlyingCurrency::ValueType getUnderlyingCurrency() const { return fieldUnderlyingCurrency.getValue( buf ); }
   const char * ptrToUnderlyingCurrency() const { return buf + fieldUnderlyingCurrency.offset; }
   private: FieldUnderlyingCurrency fieldUnderlyingCurrency;

   public:
   bool isSetUnderlyingQty() const { return fieldUnderlyingQty.offset >= 0; }
   FieldUnderlyingQty::ValueType getUnderlyingQty() const { return fieldUnderlyingQty.getValue( buf ); }
   const char * ptrToUnderlyingQty() const { return buf + fieldUnderlyingQty.offset; }
   private: FieldUnderlyingQty fieldUnderlyingQty;

   public:
   bool isSetUnderlyingPx() const { return fieldUnderlyingPx.offset >= 0; }
   FieldUnderlyingPx::ValueType getUnderlyingPx() const { return fieldUnderlyingPx.getValue( buf ); }
   const char * ptrToUnderlyingPx() const { return buf + fieldUnderlyingPx.offset; }
   private: FieldUnderlyingPx fieldUnderlyingPx;

   public:
   bool isSetUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.offset >= 0; }
   FieldUnderlyingDirtyPrice::ValueType getUnderlyingDirtyPrice() const { return fieldUnderlyingDirtyPrice.getValue( buf ); }
   const char * ptrToUnderlyingDirtyPrice() const { return buf + fieldUnderlyingDirtyPrice.offset; }
   private: FieldUnderlyingDirtyPrice fieldUnderlyingDirtyPrice;

   public:
   bool isSetUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.offset >= 0; }
   FieldUnderlyingEndPrice::ValueType getUnderlyingEndPrice() const { return fieldUnderlyingEndPrice.getValue( buf ); }
   const char * ptrToUnderlyingEndPrice() const { return buf + fieldUnderlyingEndPrice.offset; }
   private: FieldUnderlyingEndPrice fieldUnderlyingEndPrice;

   public:
   bool isSetUnderlyingStartValue() const { return fieldUnderlyingStartValue.offset >= 0; }
   FieldUnderlyingStartValue::ValueType getUnderlyingStartValue() const { return fieldUnderlyingStartValue.getValue( buf ); }
   const char * ptrToUnderlyingStartValue() const { return buf + fieldUnderlyingStartValue.offset; }
   private: FieldUnderlyingStartValue fieldUnderlyingStartValue;

   public:
   bool isSetUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.offset >= 0; }
   FieldUnderlyingCurrentValue::ValueType getUnderlyingCurrentValue() const { return fieldUnderlyingCurrentValue.getValue( buf ); }
   const char * ptrToUnderlyingCurrentValue() const { return buf + fieldUnderlyingCurrentValue.offset; }
   private: FieldUnderlyingCurrentValue fieldUnderlyingCurrentValue;

   public:
   bool isSetUnderlyingEndValue() const { return fieldUnderlyingEndValue.offset >= 0; }
   FieldUnderlyingEndValue::ValueType getUnderlyingEndValue() const { return fieldUnderlyingEndValue.getValue( buf ); }
   const char * ptrToUnderlyingEndValue() const { return buf + fieldUnderlyingEndValue.offset; }
   private: FieldUnderlyingEndValue fieldUnderlyingEndValue;

   public:
   bool isSetNoUnderlyingStips() const { return fieldNoUnderlyingStips.offset >= 0; }
   FieldNoUnderlyingStips::ValueType getNoUnderlyingStips() const { return fieldNoUnderlyingStips.getValue( buf ); }
   const char * ptrToNoUnderlyingStips() const { return buf + fieldNoUnderlyingStips.offset; }
   private: FieldNoUnderlyingStips fieldNoUnderlyingStips;
  
   public:
   std::size_t getGroupCountUnderlyingStips() const { return groupsUnderlyingStips.size(); } 
   const GroupUnderlyingStips & getGroupUnderlyingStips( std::size_t idx ) const { return groupsUnderlyingStips[ idx ]; } 
   private: GroupUnderlyingStips::Array groupsUnderlyingStips{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageQuoteRequestReject: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteReqID() const { return fieldQuoteReqID.offset >= 0; }
   FieldQuoteReqID::ValueType getQuoteReqID() const { return fieldQuoteReqID.getValue( buf ); }
   const char * ptrToQuoteReqID() const { return buf + fieldQuoteReqID.offset; }
   private: FieldQuoteReqID fieldQuoteReqID;

   public:
   bool isSetRFQReqID() const { return fieldRFQReqID.offset >= 0; }
   FieldRFQReqID::ValueType getRFQReqID() const { return fieldRFQReqID.getValue( buf ); }
   const char * ptrToRFQReqID() const { return buf + fieldRFQReqID.offset; }
   private: FieldRFQReqID fieldRFQReqID;

   public:
   bool isSetQuoteRequestRejectReason() const { return fieldQuoteRequestRejectReason.offset >= 0; }
   FieldQuoteRequestRejectReason::ValueType getQuoteRequestRejectReason() const { return fieldQuoteRequestRejectReason.getValue( buf ); }
   const char * ptrToQuoteRequestRejectReason() const { return buf + fieldQuoteRequestRejectReason.offset; }
   private: FieldQuoteRequestRejectReason fieldQuoteRequestRejectReason;

   public:
   bool isSetNoRelatedSym() const { return fieldNoRelatedSym.offset >= 0; }
   FieldNoRelatedSym::ValueType getNoRelatedSym() const { return fieldNoRelatedSym.getValue( buf ); }
   const char * ptrToNoRelatedSym() const { return buf + fieldNoRelatedSym.offset; }
   private: FieldNoRelatedSym fieldNoRelatedSym;
  
   public:
   std::size_t getGroupCountRelatedSym() const { return groupsRelatedSym.size(); } 
   const GroupRelatedSym & getGroupRelatedSym( std::size_t idx ) const { return groupsRelatedSym[ idx ]; } 
   private: GroupRelatedSym::Array groupsRelatedSym{ 10 };

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageRFQRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetRFQReqID() const { return fieldRFQReqID.offset >= 0; }
   FieldRFQReqID::ValueType getRFQReqID() const { return fieldRFQReqID.getValue( buf ); }
   const char * ptrToRFQReqID() const { return buf + fieldRFQReqID.offset; }
   private: FieldRFQReqID fieldRFQReqID;

   public:
   bool isSetNoRelatedSym() const { return fieldNoRelatedSym.offset >= 0; }
   FieldNoRelatedSym::ValueType getNoRelatedSym() const { return fieldNoRelatedSym.getValue( buf ); }
   const char * ptrToNoRelatedSym() const { return buf + fieldNoRelatedSym.offset; }
   private: FieldNoRelatedSym fieldNoRelatedSym;
  
   public:
   std::size_t getGroupCountRelatedSym() const { return groupsRelatedSym.size(); } 
   const GroupRelatedSym & getGroupRelatedSym( std::size_t idx ) const { return groupsRelatedSym[ idx ]; } 
   private: GroupRelatedSym::Array groupsRelatedSym{ 10 };

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageQuoteStatusReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteStatusReqID() const { return fieldQuoteStatusReqID.offset >= 0; }
   FieldQuoteStatusReqID::ValueType getQuoteStatusReqID() const { return fieldQuoteStatusReqID.getValue( buf ); }
   const char * ptrToQuoteStatusReqID() const { return buf + fieldQuoteStatusReqID.offset; }
   private: FieldQuoteStatusReqID fieldQuoteStatusReqID;

   public:
   bool isSetQuoteReqID() const { return fieldQuoteReqID.offset >= 0; }
   FieldQuoteReqID::ValueType getQuoteReqID() const { return fieldQuoteReqID.getValue( buf ); }
   const char * ptrToQuoteReqID() const { return buf + fieldQuoteReqID.offset; }
   private: FieldQuoteReqID fieldQuoteReqID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetQuoteRespID() const { return fieldQuoteRespID.offset >= 0; }
   FieldQuoteRespID::ValueType getQuoteRespID() const { return fieldQuoteRespID.getValue( buf ); }
   const char * ptrToQuoteRespID() const { return buf + fieldQuoteRespID.offset; }
   private: FieldQuoteRespID fieldQuoteRespID;

   public:
   bool isSetQuoteType() const { return fieldQuoteType.offset >= 0; }
   FieldQuoteType::ValueType getQuoteType() const { return fieldQuoteType.getValue( buf ); }
   const char * ptrToQuoteType() const { return buf + fieldQuoteType.offset; }
   private: FieldQuoteType fieldQuoteType;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetSettlDate2() const { return fieldSettlDate2.offset >= 0; }
   FieldSettlDate2::ValueType getSettlDate2() const { return fieldSettlDate2.getValue( buf ); }
   const char * ptrToSettlDate2() const { return buf + fieldSettlDate2.offset; }
   private: FieldSettlDate2 fieldSettlDate2;

   public:
   bool isSetOrderQty2() const { return fieldOrderQty2.offset >= 0; }
   FieldOrderQty2::ValueType getOrderQty2() const { return fieldOrderQty2.getValue( buf ); }
   const char * ptrToOrderQty2() const { return buf + fieldOrderQty2.offset; }
   private: FieldOrderQty2 fieldOrderQty2;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoQuoteQualifiers() const { return fieldNoQuoteQualifiers.offset >= 0; }
   FieldNoQuoteQualifiers::ValueType getNoQuoteQualifiers() const { return fieldNoQuoteQualifiers.getValue( buf ); }
   const char * ptrToNoQuoteQualifiers() const { return buf + fieldNoQuoteQualifiers.offset; }
   private: FieldNoQuoteQualifiers fieldNoQuoteQualifiers;
  
   public:
   std::size_t getGroupCountQuoteQualifiers() const { return groupsQuoteQualifiers.size(); } 
   const GroupQuoteQualifiers & getGroupQuoteQualifiers( std::size_t idx ) const { return groupsQuoteQualifiers[ idx ]; } 
   private: GroupQuoteQualifiers::Array groupsQuoteQualifiers{ 10 };

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetBidPx() const { return fieldBidPx.offset >= 0; }
   FieldBidPx::ValueType getBidPx() const { return fieldBidPx.getValue( buf ); }
   const char * ptrToBidPx() const { return buf + fieldBidPx.offset; }
   private: FieldBidPx fieldBidPx;

   public:
   bool isSetOfferPx() const { return fieldOfferPx.offset >= 0; }
   FieldOfferPx::ValueType getOfferPx() const { return fieldOfferPx.getValue( buf ); }
   const char * ptrToOfferPx() const { return buf + fieldOfferPx.offset; }
   private: FieldOfferPx fieldOfferPx;

   public:
   bool isSetMktBidPx() const { return fieldMktBidPx.offset >= 0; }
   FieldMktBidPx::ValueType getMktBidPx() const { return fieldMktBidPx.getValue( buf ); }
   const char * ptrToMktBidPx() const { return buf + fieldMktBidPx.offset; }
   private: FieldMktBidPx fieldMktBidPx;

   public:
   bool isSetMktOfferPx() const { return fieldMktOfferPx.offset >= 0; }
   FieldMktOfferPx::ValueType getMktOfferPx() const { return fieldMktOfferPx.getValue( buf ); }
   const char * ptrToMktOfferPx() const { return buf + fieldMktOfferPx.offset; }
   private: FieldMktOfferPx fieldMktOfferPx;

   public:
   bool isSetMinBidSize() const { return fieldMinBidSize.offset >= 0; }
   FieldMinBidSize::ValueType getMinBidSize() const { return fieldMinBidSize.getValue( buf ); }
   const char * ptrToMinBidSize() const { return buf + fieldMinBidSize.offset; }
   private: FieldMinBidSize fieldMinBidSize;

   public:
   bool isSetBidSize() const { return fieldBidSize.offset >= 0; }
   FieldBidSize::ValueType getBidSize() const { return fieldBidSize.getValue( buf ); }
   const char * ptrToBidSize() const { return buf + fieldBidSize.offset; }
   private: FieldBidSize fieldBidSize;

   public:
   bool isSetMinOfferSize() const { return fieldMinOfferSize.offset >= 0; }
   FieldMinOfferSize::ValueType getMinOfferSize() const { return fieldMinOfferSize.getValue( buf ); }
   const char * ptrToMinOfferSize() const { return buf + fieldMinOfferSize.offset; }
   private: FieldMinOfferSize fieldMinOfferSize;

   public:
   bool isSetOfferSize() const { return fieldOfferSize.offset >= 0; }
   FieldOfferSize::ValueType getOfferSize() const { return fieldOfferSize.getValue( buf ); }
   const char * ptrToOfferSize() const { return buf + fieldOfferSize.offset; }
   private: FieldOfferSize fieldOfferSize;

   public:
   bool isSetValidUntilTime() const { return fieldValidUntilTime.offset >= 0; }
   FieldValidUntilTime::ValueType getValidUntilTime() const { return fieldValidUntilTime.getValue( buf ); }
   const char * ptrToValidUntilTime() const { return buf + fieldValidUntilTime.offset; }
   private: FieldValidUntilTime fieldValidUntilTime;

   public:
   bool isSetBidSpotRate() const { return fieldBidSpotRate.offset >= 0; }
   FieldBidSpotRate::ValueType getBidSpotRate() const { return fieldBidSpotRate.getValue( buf ); }
   const char * ptrToBidSpotRate() const { return buf + fieldBidSpotRate.offset; }
   private: FieldBidSpotRate fieldBidSpotRate;

   public:
   bool isSetOfferSpotRate() const { return fieldOfferSpotRate.offset >= 0; }
   FieldOfferSpotRate::ValueType getOfferSpotRate() const { return fieldOfferSpotRate.getValue( buf ); }
   const char * ptrToOfferSpotRate() const { return buf + fieldOfferSpotRate.offset; }
   private: FieldOfferSpotRate fieldOfferSpotRate;

   public:
   bool isSetBidForwardPoints() const { return fieldBidForwardPoints.offset >= 0; }
   FieldBidForwardPoints::ValueType getBidForwardPoints() const { return fieldBidForwardPoints.getValue( buf ); }
   const char * ptrToBidForwardPoints() const { return buf + fieldBidForwardPoints.offset; }
   private: FieldBidForwardPoints fieldBidForwardPoints;

   public:
   bool isSetOfferForwardPoints() const { return fieldOfferForwardPoints.offset >= 0; }
   FieldOfferForwardPoints::ValueType getOfferForwardPoints() const { return fieldOfferForwardPoints.getValue( buf ); }
   const char * ptrToOfferForwardPoints() const { return buf + fieldOfferForwardPoints.offset; }
   private: FieldOfferForwardPoints fieldOfferForwardPoints;

   public:
   bool isSetMidPx() const { return fieldMidPx.offset >= 0; }
   FieldMidPx::ValueType getMidPx() const { return fieldMidPx.getValue( buf ); }
   const char * ptrToMidPx() const { return buf + fieldMidPx.offset; }
   private: FieldMidPx fieldMidPx;

   public:
   bool isSetBidYield() const { return fieldBidYield.offset >= 0; }
   FieldBidYield::ValueType getBidYield() const { return fieldBidYield.getValue( buf ); }
   const char * ptrToBidYield() const { return buf + fieldBidYield.offset; }
   private: FieldBidYield fieldBidYield;

   public:
   bool isSetMidYield() const { return fieldMidYield.offset >= 0; }
   FieldMidYield::ValueType getMidYield() const { return fieldMidYield.getValue( buf ); }
   const char * ptrToMidYield() const { return buf + fieldMidYield.offset; }
   private: FieldMidYield fieldMidYield;

   public:
   bool isSetOfferYield() const { return fieldOfferYield.offset >= 0; }
   FieldOfferYield::ValueType getOfferYield() const { return fieldOfferYield.getValue( buf ); }
   const char * ptrToOfferYield() const { return buf + fieldOfferYield.offset; }
   private: FieldOfferYield fieldOfferYield;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetBidForwardPoints2() const { return fieldBidForwardPoints2.offset >= 0; }
   FieldBidForwardPoints2::ValueType getBidForwardPoints2() const { return fieldBidForwardPoints2.getValue( buf ); }
   const char * ptrToBidForwardPoints2() const { return buf + fieldBidForwardPoints2.offset; }
   private: FieldBidForwardPoints2 fieldBidForwardPoints2;

   public:
   bool isSetOfferForwardPoints2() const { return fieldOfferForwardPoints2.offset >= 0; }
   FieldOfferForwardPoints2::ValueType getOfferForwardPoints2() const { return fieldOfferForwardPoints2.getValue( buf ); }
   const char * ptrToOfferForwardPoints2() const { return buf + fieldOfferForwardPoints2.offset; }
   private: FieldOfferForwardPoints2 fieldOfferForwardPoints2;

   public:
   bool isSetSettlCurrBidFxRate() const { return fieldSettlCurrBidFxRate.offset >= 0; }
   FieldSettlCurrBidFxRate::ValueType getSettlCurrBidFxRate() const { return fieldSettlCurrBidFxRate.getValue( buf ); }
   const char * ptrToSettlCurrBidFxRate() const { return buf + fieldSettlCurrBidFxRate.offset; }
   private: FieldSettlCurrBidFxRate fieldSettlCurrBidFxRate;

   public:
   bool isSetSettlCurrOfferFxRate() const { return fieldSettlCurrOfferFxRate.offset >= 0; }
   FieldSettlCurrOfferFxRate::ValueType getSettlCurrOfferFxRate() const { return fieldSettlCurrOfferFxRate.getValue( buf ); }
   const char * ptrToSettlCurrOfferFxRate() const { return buf + fieldSettlCurrOfferFxRate.offset; }
   private: FieldSettlCurrOfferFxRate fieldSettlCurrOfferFxRate;

   public:
   bool isSetSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.offset >= 0; }
   FieldSettlCurrFxRateCalc::ValueType getSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.getValue( buf ); }
   const char * ptrToSettlCurrFxRateCalc() const { return buf + fieldSettlCurrFxRateCalc.offset; }
   private: FieldSettlCurrFxRateCalc fieldSettlCurrFxRateCalc;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetQuoteStatus() const { return fieldQuoteStatus.offset >= 0; }
   FieldQuoteStatus::ValueType getQuoteStatus() const { return fieldQuoteStatus.getValue( buf ); }
   const char * ptrToQuoteStatus() const { return buf + fieldQuoteStatus.offset; }
   private: FieldQuoteStatus fieldQuoteStatus;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageQuoteResponse: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetQuoteRespID() const { return fieldQuoteRespID.offset >= 0; }
   FieldQuoteRespID::ValueType getQuoteRespID() const { return fieldQuoteRespID.getValue( buf ); }
   const char * ptrToQuoteRespID() const { return buf + fieldQuoteRespID.offset; }
   private: FieldQuoteRespID fieldQuoteRespID;

   public:
   bool isSetQuoteID() const { return fieldQuoteID.offset >= 0; }
   FieldQuoteID::ValueType getQuoteID() const { return fieldQuoteID.getValue( buf ); }
   const char * ptrToQuoteID() const { return buf + fieldQuoteID.offset; }
   private: FieldQuoteID fieldQuoteID;

   public:
   bool isSetQuoteRespType() const { return fieldQuoteRespType.offset >= 0; }
   FieldQuoteRespType::ValueType getQuoteRespType() const { return fieldQuoteRespType.getValue( buf ); }
   const char * ptrToQuoteRespType() const { return buf + fieldQuoteRespType.offset; }
   private: FieldQuoteRespType fieldQuoteRespType;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetIOIID() const { return fieldIOIID.offset >= 0; }
   FieldIOIID::ValueType getIOIID() const { return fieldIOIID.getValue( buf ); }
   const char * ptrToIOIID() const { return buf + fieldIOIID.offset; }
   private: FieldIOIID fieldIOIID;

   public:
   bool isSetQuoteType() const { return fieldQuoteType.offset >= 0; }
   FieldQuoteType::ValueType getQuoteType() const { return fieldQuoteType.getValue( buf ); }
   const char * ptrToQuoteType() const { return buf + fieldQuoteType.offset; }
   private: FieldQuoteType fieldQuoteType;

   public:
   bool isSetNoQuoteQualifiers() const { return fieldNoQuoteQualifiers.offset >= 0; }
   FieldNoQuoteQualifiers::ValueType getNoQuoteQualifiers() const { return fieldNoQuoteQualifiers.getValue( buf ); }
   const char * ptrToNoQuoteQualifiers() const { return buf + fieldNoQuoteQualifiers.offset; }
   private: FieldNoQuoteQualifiers fieldNoQuoteQualifiers;
  
   public:
   std::size_t getGroupCountQuoteQualifiers() const { return groupsQuoteQualifiers.size(); } 
   const GroupQuoteQualifiers & getGroupQuoteQualifiers( std::size_t idx ) const { return groupsQuoteQualifiers[ idx ]; } 
   private: GroupQuoteQualifiers::Array groupsQuoteQualifiers{ 10 };

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetOrderQty() const { return fieldOrderQty.offset >= 0; }
   FieldOrderQty::ValueType getOrderQty() const { return fieldOrderQty.getValue( buf ); }
   const char * ptrToOrderQty() const { return buf + fieldOrderQty.offset; }
   private: FieldOrderQty fieldOrderQty;

   public:
   bool isSetCashOrderQty() const { return fieldCashOrderQty.offset >= 0; }
   FieldCashOrderQty::ValueType getCashOrderQty() const { return fieldCashOrderQty.getValue( buf ); }
   const char * ptrToCashOrderQty() const { return buf + fieldCashOrderQty.offset; }
   private: FieldCashOrderQty fieldCashOrderQty;

   public:
   bool isSetOrderPercent() const { return fieldOrderPercent.offset >= 0; }
   FieldOrderPercent::ValueType getOrderPercent() const { return fieldOrderPercent.getValue( buf ); }
   const char * ptrToOrderPercent() const { return buf + fieldOrderPercent.offset; }
   private: FieldOrderPercent fieldOrderPercent;

   public:
   bool isSetRoundingDirection() const { return fieldRoundingDirection.offset >= 0; }
   FieldRoundingDirection::ValueType getRoundingDirection() const { return fieldRoundingDirection.getValue( buf ); }
   const char * ptrToRoundingDirection() const { return buf + fieldRoundingDirection.offset; }
   private: FieldRoundingDirection fieldRoundingDirection;

   public:
   bool isSetRoundingModulus() const { return fieldRoundingModulus.offset >= 0; }
   FieldRoundingModulus::ValueType getRoundingModulus() const { return fieldRoundingModulus.getValue( buf ); }
   const char * ptrToRoundingModulus() const { return buf + fieldRoundingModulus.offset; }
   private: FieldRoundingModulus fieldRoundingModulus;

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetSettlDate2() const { return fieldSettlDate2.offset >= 0; }
   FieldSettlDate2::ValueType getSettlDate2() const { return fieldSettlDate2.getValue( buf ); }
   const char * ptrToSettlDate2() const { return buf + fieldSettlDate2.offset; }
   private: FieldSettlDate2 fieldSettlDate2;

   public:
   bool isSetOrderQty2() const { return fieldOrderQty2.offset >= 0; }
   FieldOrderQty2::ValueType getOrderQty2() const { return fieldOrderQty2.getValue( buf ); }
   const char * ptrToOrderQty2() const { return buf + fieldOrderQty2.offset; }
   private: FieldOrderQty2 fieldOrderQty2;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetBidPx() const { return fieldBidPx.offset >= 0; }
   FieldBidPx::ValueType getBidPx() const { return fieldBidPx.getValue( buf ); }
   const char * ptrToBidPx() const { return buf + fieldBidPx.offset; }
   private: FieldBidPx fieldBidPx;

   public:
   bool isSetOfferPx() const { return fieldOfferPx.offset >= 0; }
   FieldOfferPx::ValueType getOfferPx() const { return fieldOfferPx.getValue( buf ); }
   const char * ptrToOfferPx() const { return buf + fieldOfferPx.offset; }
   private: FieldOfferPx fieldOfferPx;

   public:
   bool isSetMktBidPx() const { return fieldMktBidPx.offset >= 0; }
   FieldMktBidPx::ValueType getMktBidPx() const { return fieldMktBidPx.getValue( buf ); }
   const char * ptrToMktBidPx() const { return buf + fieldMktBidPx.offset; }
   private: FieldMktBidPx fieldMktBidPx;

   public:
   bool isSetMktOfferPx() const { return fieldMktOfferPx.offset >= 0; }
   FieldMktOfferPx::ValueType getMktOfferPx() const { return fieldMktOfferPx.getValue( buf ); }
   const char * ptrToMktOfferPx() const { return buf + fieldMktOfferPx.offset; }
   private: FieldMktOfferPx fieldMktOfferPx;

   public:
   bool isSetMinBidSize() const { return fieldMinBidSize.offset >= 0; }
   FieldMinBidSize::ValueType getMinBidSize() const { return fieldMinBidSize.getValue( buf ); }
   const char * ptrToMinBidSize() const { return buf + fieldMinBidSize.offset; }
   private: FieldMinBidSize fieldMinBidSize;

   public:
   bool isSetBidSize() const { return fieldBidSize.offset >= 0; }
   FieldBidSize::ValueType getBidSize() const { return fieldBidSize.getValue( buf ); }
   const char * ptrToBidSize() const { return buf + fieldBidSize.offset; }
   private: FieldBidSize fieldBidSize;

   public:
   bool isSetMinOfferSize() const { return fieldMinOfferSize.offset >= 0; }
   FieldMinOfferSize::ValueType getMinOfferSize() const { return fieldMinOfferSize.getValue( buf ); }
   const char * ptrToMinOfferSize() const { return buf + fieldMinOfferSize.offset; }
   private: FieldMinOfferSize fieldMinOfferSize;

   public:
   bool isSetOfferSize() const { return fieldOfferSize.offset >= 0; }
   FieldOfferSize::ValueType getOfferSize() const { return fieldOfferSize.getValue( buf ); }
   const char * ptrToOfferSize() const { return buf + fieldOfferSize.offset; }
   private: FieldOfferSize fieldOfferSize;

   public:
   bool isSetValidUntilTime() const { return fieldValidUntilTime.offset >= 0; }
   FieldValidUntilTime::ValueType getValidUntilTime() const { return fieldValidUntilTime.getValue( buf ); }
   const char * ptrToValidUntilTime() const { return buf + fieldValidUntilTime.offset; }
   private: FieldValidUntilTime fieldValidUntilTime;

   public:
   bool isSetBidSpotRate() const { return fieldBidSpotRate.offset >= 0; }
   FieldBidSpotRate::ValueType getBidSpotRate() const { return fieldBidSpotRate.getValue( buf ); }
   const char * ptrToBidSpotRate() const { return buf + fieldBidSpotRate.offset; }
   private: FieldBidSpotRate fieldBidSpotRate;

   public:
   bool isSetOfferSpotRate() const { return fieldOfferSpotRate.offset >= 0; }
   FieldOfferSpotRate::ValueType getOfferSpotRate() const { return fieldOfferSpotRate.getValue( buf ); }
   const char * ptrToOfferSpotRate() const { return buf + fieldOfferSpotRate.offset; }
   private: FieldOfferSpotRate fieldOfferSpotRate;

   public:
   bool isSetBidForwardPoints() const { return fieldBidForwardPoints.offset >= 0; }
   FieldBidForwardPoints::ValueType getBidForwardPoints() const { return fieldBidForwardPoints.getValue( buf ); }
   const char * ptrToBidForwardPoints() const { return buf + fieldBidForwardPoints.offset; }
   private: FieldBidForwardPoints fieldBidForwardPoints;

   public:
   bool isSetOfferForwardPoints() const { return fieldOfferForwardPoints.offset >= 0; }
   FieldOfferForwardPoints::ValueType getOfferForwardPoints() const { return fieldOfferForwardPoints.getValue( buf ); }
   const char * ptrToOfferForwardPoints() const { return buf + fieldOfferForwardPoints.offset; }
   private: FieldOfferForwardPoints fieldOfferForwardPoints;

   public:
   bool isSetMidPx() const { return fieldMidPx.offset >= 0; }
   FieldMidPx::ValueType getMidPx() const { return fieldMidPx.getValue( buf ); }
   const char * ptrToMidPx() const { return buf + fieldMidPx.offset; }
   private: FieldMidPx fieldMidPx;

   public:
   bool isSetBidYield() const { return fieldBidYield.offset >= 0; }
   FieldBidYield::ValueType getBidYield() const { return fieldBidYield.getValue( buf ); }
   const char * ptrToBidYield() const { return buf + fieldBidYield.offset; }
   private: FieldBidYield fieldBidYield;

   public:
   bool isSetMidYield() const { return fieldMidYield.offset >= 0; }
   FieldMidYield::ValueType getMidYield() const { return fieldMidYield.getValue( buf ); }
   const char * ptrToMidYield() const { return buf + fieldMidYield.offset; }
   private: FieldMidYield fieldMidYield;

   public:
   bool isSetOfferYield() const { return fieldOfferYield.offset >= 0; }
   FieldOfferYield::ValueType getOfferYield() const { return fieldOfferYield.getValue( buf ); }
   const char * ptrToOfferYield() const { return buf + fieldOfferYield.offset; }
   private: FieldOfferYield fieldOfferYield;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetOrdType() const { return fieldOrdType.offset >= 0; }
   FieldOrdType::ValueType getOrdType() const { return fieldOrdType.getValue( buf ); }
   const char * ptrToOrdType() const { return buf + fieldOrdType.offset; }
   private: FieldOrdType fieldOrdType;

   public:
   bool isSetBidForwardPoints2() const { return fieldBidForwardPoints2.offset >= 0; }
   FieldBidForwardPoints2::ValueType getBidForwardPoints2() const { return fieldBidForwardPoints2.getValue( buf ); }
   const char * ptrToBidForwardPoints2() const { return buf + fieldBidForwardPoints2.offset; }
   private: FieldBidForwardPoints2 fieldBidForwardPoints2;

   public:
   bool isSetOfferForwardPoints2() const { return fieldOfferForwardPoints2.offset >= 0; }
   FieldOfferForwardPoints2::ValueType getOfferForwardPoints2() const { return fieldOfferForwardPoints2.getValue( buf ); }
   const char * ptrToOfferForwardPoints2() const { return buf + fieldOfferForwardPoints2.offset; }
   private: FieldOfferForwardPoints2 fieldOfferForwardPoints2;

   public:
   bool isSetSettlCurrBidFxRate() const { return fieldSettlCurrBidFxRate.offset >= 0; }
   FieldSettlCurrBidFxRate::ValueType getSettlCurrBidFxRate() const { return fieldSettlCurrBidFxRate.getValue( buf ); }
   const char * ptrToSettlCurrBidFxRate() const { return buf + fieldSettlCurrBidFxRate.offset; }
   private: FieldSettlCurrBidFxRate fieldSettlCurrBidFxRate;

   public:
   bool isSetSettlCurrOfferFxRate() const { return fieldSettlCurrOfferFxRate.offset >= 0; }
   FieldSettlCurrOfferFxRate::ValueType getSettlCurrOfferFxRate() const { return fieldSettlCurrOfferFxRate.getValue( buf ); }
   const char * ptrToSettlCurrOfferFxRate() const { return buf + fieldSettlCurrOfferFxRate.offset; }
   private: FieldSettlCurrOfferFxRate fieldSettlCurrOfferFxRate;

   public:
   bool isSetSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.offset >= 0; }
   FieldSettlCurrFxRateCalc::ValueType getSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.getValue( buf ); }
   const char * ptrToSettlCurrFxRateCalc() const { return buf + fieldSettlCurrFxRateCalc.offset; }
   private: FieldSettlCurrFxRateCalc fieldSettlCurrFxRateCalc;

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetExDestination() const { return fieldExDestination.offset >= 0; }
   FieldExDestination::ValueType getExDestination() const { return fieldExDestination.getValue( buf ); }
   const char * ptrToExDestination() const { return buf + fieldExDestination.offset; }
   private: FieldExDestination fieldExDestination;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageConfirmation: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetConfirmID() const { return fieldConfirmID.offset >= 0; }
   FieldConfirmID::ValueType getConfirmID() const { return fieldConfirmID.getValue( buf ); }
   const char * ptrToConfirmID() const { return buf + fieldConfirmID.offset; }
   private: FieldConfirmID fieldConfirmID;

   public:
   bool isSetConfirmRefID() const { return fieldConfirmRefID.offset >= 0; }
   FieldConfirmRefID::ValueType getConfirmRefID() const { return fieldConfirmRefID.getValue( buf ); }
   const char * ptrToConfirmRefID() const { return buf + fieldConfirmRefID.offset; }
   private: FieldConfirmRefID fieldConfirmRefID;

   public:
   bool isSetConfirmReqID() const { return fieldConfirmReqID.offset >= 0; }
   FieldConfirmReqID::ValueType getConfirmReqID() const { return fieldConfirmReqID.getValue( buf ); }
   const char * ptrToConfirmReqID() const { return buf + fieldConfirmReqID.offset; }
   private: FieldConfirmReqID fieldConfirmReqID;

   public:
   bool isSetConfirmTransType() const { return fieldConfirmTransType.offset >= 0; }
   FieldConfirmTransType::ValueType getConfirmTransType() const { return fieldConfirmTransType.getValue( buf ); }
   const char * ptrToConfirmTransType() const { return buf + fieldConfirmTransType.offset; }
   private: FieldConfirmTransType fieldConfirmTransType;

   public:
   bool isSetConfirmType() const { return fieldConfirmType.offset >= 0; }
   FieldConfirmType::ValueType getConfirmType() const { return fieldConfirmType.getValue( buf ); }
   const char * ptrToConfirmType() const { return buf + fieldConfirmType.offset; }
   private: FieldConfirmType fieldConfirmType;

   public:
   bool isSetCopyMsgIndicator() const { return fieldCopyMsgIndicator.offset >= 0; }
   FieldCopyMsgIndicator::ValueType getCopyMsgIndicator() const { return fieldCopyMsgIndicator.getValue( buf ); }
   const char * ptrToCopyMsgIndicator() const { return buf + fieldCopyMsgIndicator.offset; }
   private: FieldCopyMsgIndicator fieldCopyMsgIndicator;

   public:
   bool isSetLegalConfirm() const { return fieldLegalConfirm.offset >= 0; }
   FieldLegalConfirm::ValueType getLegalConfirm() const { return fieldLegalConfirm.getValue( buf ); }
   const char * ptrToLegalConfirm() const { return buf + fieldLegalConfirm.offset; }
   private: FieldLegalConfirm fieldLegalConfirm;

   public:
   bool isSetConfirmStatus() const { return fieldConfirmStatus.offset >= 0; }
   FieldConfirmStatus::ValueType getConfirmStatus() const { return fieldConfirmStatus.getValue( buf ); }
   const char * ptrToConfirmStatus() const { return buf + fieldConfirmStatus.offset; }
   private: FieldConfirmStatus fieldConfirmStatus;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetNoOrders() const { return fieldNoOrders.offset >= 0; }
   FieldNoOrders::ValueType getNoOrders() const { return fieldNoOrders.getValue( buf ); }
   const char * ptrToNoOrders() const { return buf + fieldNoOrders.offset; }
   private: FieldNoOrders fieldNoOrders;
  
   public:
   std::size_t getGroupCountOrders() const { return groupsOrders.size(); } 
   const GroupOrders & getGroupOrders( std::size_t idx ) const { return groupsOrders[ idx ]; } 
   private: GroupOrders::Array groupsOrders{ 10 };

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetSecondaryAllocID() const { return fieldSecondaryAllocID.offset >= 0; }
   FieldSecondaryAllocID::ValueType getSecondaryAllocID() const { return fieldSecondaryAllocID.getValue( buf ); }
   const char * ptrToSecondaryAllocID() const { return buf + fieldSecondaryAllocID.offset; }
   private: FieldSecondaryAllocID fieldSecondaryAllocID;

   public:
   bool isSetIndividualAllocID() const { return fieldIndividualAllocID.offset >= 0; }
   FieldIndividualAllocID::ValueType getIndividualAllocID() const { return fieldIndividualAllocID.getValue( buf ); }
   const char * ptrToIndividualAllocID() const { return buf + fieldIndividualAllocID.offset; }
   private: FieldIndividualAllocID fieldIndividualAllocID;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.offset >= 0; }
   FieldNoTrdRegTimestamps::ValueType getNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.getValue( buf ); }
   const char * ptrToNoTrdRegTimestamps() const { return buf + fieldNoTrdRegTimestamps.offset; }
   private: FieldNoTrdRegTimestamps fieldNoTrdRegTimestamps;
  
   public:
   std::size_t getGroupCountTrdRegTimestamps() const { return groupsTrdRegTimestamps.size(); } 
   const GroupTrdRegTimestamps & getGroupTrdRegTimestamps( std::size_t idx ) const { return groupsTrdRegTimestamps[ idx ]; } 
   private: GroupTrdRegTimestamps::Array groupsTrdRegTimestamps{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetAllocQty() const { return fieldAllocQty.offset >= 0; }
   FieldAllocQty::ValueType getAllocQty() const { return fieldAllocQty.getValue( buf ); }
   const char * ptrToAllocQty() const { return buf + fieldAllocQty.offset; }
   private: FieldAllocQty fieldAllocQty;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetLastMkt() const { return fieldLastMkt.offset >= 0; }
   FieldLastMkt::ValueType getLastMkt() const { return fieldLastMkt.getValue( buf ); }
   const char * ptrToLastMkt() const { return buf + fieldLastMkt.offset; }
   private: FieldLastMkt fieldLastMkt;

   public:
   bool isSetNoCapacities() const { return fieldNoCapacities.offset >= 0; }
   FieldNoCapacities::ValueType getNoCapacities() const { return fieldNoCapacities.getValue( buf ); }
   const char * ptrToNoCapacities() const { return buf + fieldNoCapacities.offset; }
   private: FieldNoCapacities fieldNoCapacities;
  
   public:
   std::size_t getGroupCountCapacities() const { return groupsCapacities.size(); } 
   const GroupCapacities & getGroupCapacities( std::size_t idx ) const { return groupsCapacities[ idx ]; } 
   private: GroupCapacities::Array groupsCapacities{ 10 };

   public:
   bool isSetAllocAccount() const { return fieldAllocAccount.offset >= 0; }
   FieldAllocAccount::ValueType getAllocAccount() const { return fieldAllocAccount.getValue( buf ); }
   const char * ptrToAllocAccount() const { return buf + fieldAllocAccount.offset; }
   private: FieldAllocAccount fieldAllocAccount;

   public:
   bool isSetAllocAcctIDSource() const { return fieldAllocAcctIDSource.offset >= 0; }
   FieldAllocAcctIDSource::ValueType getAllocAcctIDSource() const { return fieldAllocAcctIDSource.getValue( buf ); }
   const char * ptrToAllocAcctIDSource() const { return buf + fieldAllocAcctIDSource.offset; }
   private: FieldAllocAcctIDSource fieldAllocAcctIDSource;

   public:
   bool isSetAllocAccountType() const { return fieldAllocAccountType.offset >= 0; }
   FieldAllocAccountType::ValueType getAllocAccountType() const { return fieldAllocAccountType.getValue( buf ); }
   const char * ptrToAllocAccountType() const { return buf + fieldAllocAccountType.offset; }
   private: FieldAllocAccountType fieldAllocAccountType;

   public:
   bool isSetAvgPx() const { return fieldAvgPx.offset >= 0; }
   FieldAvgPx::ValueType getAvgPx() const { return fieldAvgPx.getValue( buf ); }
   const char * ptrToAvgPx() const { return buf + fieldAvgPx.offset; }
   private: FieldAvgPx fieldAvgPx;

   public:
   bool isSetAvgPxPrecision() const { return fieldAvgPxPrecision.offset >= 0; }
   FieldAvgPxPrecision::ValueType getAvgPxPrecision() const { return fieldAvgPxPrecision.getValue( buf ); }
   const char * ptrToAvgPxPrecision() const { return buf + fieldAvgPxPrecision.offset; }
   private: FieldAvgPxPrecision fieldAvgPxPrecision;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetAvgParPx() const { return fieldAvgParPx.offset >= 0; }
   FieldAvgParPx::ValueType getAvgParPx() const { return fieldAvgParPx.getValue( buf ); }
   const char * ptrToAvgParPx() const { return buf + fieldAvgParPx.offset; }
   private: FieldAvgParPx fieldAvgParPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetReportedPx() const { return fieldReportedPx.offset >= 0; }
   FieldReportedPx::ValueType getReportedPx() const { return fieldReportedPx.getValue( buf ); }
   const char * ptrToReportedPx() const { return buf + fieldReportedPx.offset; }
   private: FieldReportedPx fieldReportedPx;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetProcessCode() const { return fieldProcessCode.offset >= 0; }
   FieldProcessCode::ValueType getProcessCode() const { return fieldProcessCode.getValue( buf ); }
   const char * ptrToProcessCode() const { return buf + fieldProcessCode.offset; }
   private: FieldProcessCode fieldProcessCode;

   public:
   bool isSetGrossTradeAmt() const { return fieldGrossTradeAmt.offset >= 0; }
   FieldGrossTradeAmt::ValueType getGrossTradeAmt() const { return fieldGrossTradeAmt.getValue( buf ); }
   const char * ptrToGrossTradeAmt() const { return buf + fieldGrossTradeAmt.offset; }
   private: FieldGrossTradeAmt fieldGrossTradeAmt;

   public:
   bool isSetNumDaysInterest() const { return fieldNumDaysInterest.offset >= 0; }
   FieldNumDaysInterest::ValueType getNumDaysInterest() const { return fieldNumDaysInterest.getValue( buf ); }
   const char * ptrToNumDaysInterest() const { return buf + fieldNumDaysInterest.offset; }
   private: FieldNumDaysInterest fieldNumDaysInterest;

   public:
   bool isSetExDate() const { return fieldExDate.offset >= 0; }
   FieldExDate::ValueType getExDate() const { return fieldExDate.getValue( buf ); }
   const char * ptrToExDate() const { return buf + fieldExDate.offset; }
   private: FieldExDate fieldExDate;

   public:
   bool isSetAccruedInterestRate() const { return fieldAccruedInterestRate.offset >= 0; }
   FieldAccruedInterestRate::ValueType getAccruedInterestRate() const { return fieldAccruedInterestRate.getValue( buf ); }
   const char * ptrToAccruedInterestRate() const { return buf + fieldAccruedInterestRate.offset; }
   private: FieldAccruedInterestRate fieldAccruedInterestRate;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetInterestAtMaturity() const { return fieldInterestAtMaturity.offset >= 0; }
   FieldInterestAtMaturity::ValueType getInterestAtMaturity() const { return fieldInterestAtMaturity.getValue( buf ); }
   const char * ptrToInterestAtMaturity() const { return buf + fieldInterestAtMaturity.offset; }
   private: FieldInterestAtMaturity fieldInterestAtMaturity;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetConcession() const { return fieldConcession.offset >= 0; }
   FieldConcession::ValueType getConcession() const { return fieldConcession.getValue( buf ); }
   const char * ptrToConcession() const { return buf + fieldConcession.offset; }
   private: FieldConcession fieldConcession;

   public:
   bool isSetTotalTakedown() const { return fieldTotalTakedown.offset >= 0; }
   FieldTotalTakedown::ValueType getTotalTakedown() const { return fieldTotalTakedown.getValue( buf ); }
   const char * ptrToTotalTakedown() const { return buf + fieldTotalTakedown.offset; }
   private: FieldTotalTakedown fieldTotalTakedown;

   public:
   bool isSetNetMoney() const { return fieldNetMoney.offset >= 0; }
   FieldNetMoney::ValueType getNetMoney() const { return fieldNetMoney.getValue( buf ); }
   const char * ptrToNetMoney() const { return buf + fieldNetMoney.offset; }
   private: FieldNetMoney fieldNetMoney;

   public:
   bool isSetMaturityNetMoney() const { return fieldMaturityNetMoney.offset >= 0; }
   FieldMaturityNetMoney::ValueType getMaturityNetMoney() const { return fieldMaturityNetMoney.getValue( buf ); }
   const char * ptrToMaturityNetMoney() const { return buf + fieldMaturityNetMoney.offset; }
   private: FieldMaturityNetMoney fieldMaturityNetMoney;

   public:
   bool isSetSettlCurrAmt() const { return fieldSettlCurrAmt.offset >= 0; }
   FieldSettlCurrAmt::ValueType getSettlCurrAmt() const { return fieldSettlCurrAmt.getValue( buf ); }
   const char * ptrToSettlCurrAmt() const { return buf + fieldSettlCurrAmt.offset; }
   private: FieldSettlCurrAmt fieldSettlCurrAmt;

   public:
   bool isSetSettlCurrency() const { return fieldSettlCurrency.offset >= 0; }
   FieldSettlCurrency::ValueType getSettlCurrency() const { return fieldSettlCurrency.getValue( buf ); }
   const char * ptrToSettlCurrency() const { return buf + fieldSettlCurrency.offset; }
   private: FieldSettlCurrency fieldSettlCurrency;

   public:
   bool isSetSettlCurrFxRate() const { return fieldSettlCurrFxRate.offset >= 0; }
   FieldSettlCurrFxRate::ValueType getSettlCurrFxRate() const { return fieldSettlCurrFxRate.getValue( buf ); }
   const char * ptrToSettlCurrFxRate() const { return buf + fieldSettlCurrFxRate.offset; }
   private: FieldSettlCurrFxRate fieldSettlCurrFxRate;

   public:
   bool isSetSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.offset >= 0; }
   FieldSettlCurrFxRateCalc::ValueType getSettlCurrFxRateCalc() const { return fieldSettlCurrFxRateCalc.getValue( buf ); }
   const char * ptrToSettlCurrFxRateCalc() const { return buf + fieldSettlCurrFxRateCalc.offset; }
   private: FieldSettlCurrFxRateCalc fieldSettlCurrFxRateCalc;

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetSettlDeliveryType() const { return fieldSettlDeliveryType.offset >= 0; }
   FieldSettlDeliveryType::ValueType getSettlDeliveryType() const { return fieldSettlDeliveryType.getValue( buf ); }
   const char * ptrToSettlDeliveryType() const { return buf + fieldSettlDeliveryType.offset; }
   private: FieldSettlDeliveryType fieldSettlDeliveryType;

   public:
   bool isSetStandInstDbType() const { return fieldStandInstDbType.offset >= 0; }
   FieldStandInstDbType::ValueType getStandInstDbType() const { return fieldStandInstDbType.getValue( buf ); }
   const char * ptrToStandInstDbType() const { return buf + fieldStandInstDbType.offset; }
   private: FieldStandInstDbType fieldStandInstDbType;

   public:
   bool isSetStandInstDbName() const { return fieldStandInstDbName.offset >= 0; }
   FieldStandInstDbName::ValueType getStandInstDbName() const { return fieldStandInstDbName.getValue( buf ); }
   const char * ptrToStandInstDbName() const { return buf + fieldStandInstDbName.offset; }
   private: FieldStandInstDbName fieldStandInstDbName;

   public:
   bool isSetStandInstDbID() const { return fieldStandInstDbID.offset >= 0; }
   FieldStandInstDbID::ValueType getStandInstDbID() const { return fieldStandInstDbID.getValue( buf ); }
   const char * ptrToStandInstDbID() const { return buf + fieldStandInstDbID.offset; }
   private: FieldStandInstDbID fieldStandInstDbID;

   public:
   bool isSetNoDlvyInst() const { return fieldNoDlvyInst.offset >= 0; }
   FieldNoDlvyInst::ValueType getNoDlvyInst() const { return fieldNoDlvyInst.getValue( buf ); }
   const char * ptrToNoDlvyInst() const { return buf + fieldNoDlvyInst.offset; }
   private: FieldNoDlvyInst fieldNoDlvyInst;
  
   public:
   std::size_t getGroupCountDlvyInst() const { return groupsDlvyInst.size(); } 
   const GroupDlvyInst & getGroupDlvyInst( std::size_t idx ) const { return groupsDlvyInst[ idx ]; } 
   private: GroupDlvyInst::Array groupsDlvyInst{ 10 };

   public:
   bool isSetCommission() const { return fieldCommission.offset >= 0; }
   FieldCommission::ValueType getCommission() const { return fieldCommission.getValue( buf ); }
   const char * ptrToCommission() const { return buf + fieldCommission.offset; }
   private: FieldCommission fieldCommission;

   public:
   bool isSetCommType() const { return fieldCommType.offset >= 0; }
   FieldCommType::ValueType getCommType() const { return fieldCommType.getValue( buf ); }
   const char * ptrToCommType() const { return buf + fieldCommType.offset; }
   private: FieldCommType fieldCommType;

   public:
   bool isSetCommCurrency() const { return fieldCommCurrency.offset >= 0; }
   FieldCommCurrency::ValueType getCommCurrency() const { return fieldCommCurrency.getValue( buf ); }
   const char * ptrToCommCurrency() const { return buf + fieldCommCurrency.offset; }
   private: FieldCommCurrency fieldCommCurrency;

   public:
   bool isSetFundRenewWaiv() const { return fieldFundRenewWaiv.offset >= 0; }
   FieldFundRenewWaiv::ValueType getFundRenewWaiv() const { return fieldFundRenewWaiv.getValue( buf ); }
   const char * ptrToFundRenewWaiv() const { return buf + fieldFundRenewWaiv.offset; }
   private: FieldFundRenewWaiv fieldFundRenewWaiv;

   public:
   bool isSetSharedCommission() const { return fieldSharedCommission.offset >= 0; }
   FieldSharedCommission::ValueType getSharedCommission() const { return fieldSharedCommission.getValue( buf ); }
   const char * ptrToSharedCommission() const { return buf + fieldSharedCommission.offset; }
   private: FieldSharedCommission fieldSharedCommission;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetNoMiscFees() const { return fieldNoMiscFees.offset >= 0; }
   FieldNoMiscFees::ValueType getNoMiscFees() const { return fieldNoMiscFees.getValue( buf ); }
   const char * ptrToNoMiscFees() const { return buf + fieldNoMiscFees.offset; }
   private: FieldNoMiscFees fieldNoMiscFees;
  
   public:
   std::size_t getGroupCountMiscFees() const { return groupsMiscFees.size(); } 
   const GroupMiscFees & getGroupMiscFees( std::size_t idx ) const { return groupsMiscFees[ idx ]; } 
   private: GroupMiscFees::Array groupsMiscFees{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessagePositionMaintenanceRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetPosReqID() const { return fieldPosReqID.offset >= 0; }
   FieldPosReqID::ValueType getPosReqID() const { return fieldPosReqID.getValue( buf ); }
   const char * ptrToPosReqID() const { return buf + fieldPosReqID.offset; }
   private: FieldPosReqID fieldPosReqID;

   public:
   bool isSetPosTransType() const { return fieldPosTransType.offset >= 0; }
   FieldPosTransType::ValueType getPosTransType() const { return fieldPosTransType.getValue( buf ); }
   const char * ptrToPosTransType() const { return buf + fieldPosTransType.offset; }
   private: FieldPosTransType fieldPosTransType;

   public:
   bool isSetPosMaintAction() const { return fieldPosMaintAction.offset >= 0; }
   FieldPosMaintAction::ValueType getPosMaintAction() const { return fieldPosMaintAction.getValue( buf ); }
   const char * ptrToPosMaintAction() const { return buf + fieldPosMaintAction.offset; }
   private: FieldPosMaintAction fieldPosMaintAction;

   public:
   bool isSetOrigPosReqRefID() const { return fieldOrigPosReqRefID.offset >= 0; }
   FieldOrigPosReqRefID::ValueType getOrigPosReqRefID() const { return fieldOrigPosReqRefID.getValue( buf ); }
   const char * ptrToOrigPosReqRefID() const { return buf + fieldOrigPosReqRefID.offset; }
   private: FieldOrigPosReqRefID fieldOrigPosReqRefID;

   public:
   bool isSetPosMaintRptRefID() const { return fieldPosMaintRptRefID.offset >= 0; }
   FieldPosMaintRptRefID::ValueType getPosMaintRptRefID() const { return fieldPosMaintRptRefID.getValue( buf ); }
   const char * ptrToPosMaintRptRefID() const { return buf + fieldPosMaintRptRefID.offset; }
   private: FieldPosMaintRptRefID fieldPosMaintRptRefID;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoPositions() const { return fieldNoPositions.offset >= 0; }
   FieldNoPositions::ValueType getNoPositions() const { return fieldNoPositions.getValue( buf ); }
   const char * ptrToNoPositions() const { return buf + fieldNoPositions.offset; }
   private: FieldNoPositions fieldNoPositions;
  
   public:
   std::size_t getGroupCountPositions() const { return groupsPositions.size(); } 
   const GroupPositions & getGroupPositions( std::size_t idx ) const { return groupsPositions[ idx ]; } 
   private: GroupPositions::Array groupsPositions{ 10 };

   public:
   bool isSetAdjustmentType() const { return fieldAdjustmentType.offset >= 0; }
   FieldAdjustmentType::ValueType getAdjustmentType() const { return fieldAdjustmentType.getValue( buf ); }
   const char * ptrToAdjustmentType() const { return buf + fieldAdjustmentType.offset; }
   private: FieldAdjustmentType fieldAdjustmentType;

   public:
   bool isSetContraryInstructionIndicator() const { return fieldContraryInstructionIndicator.offset >= 0; }
   FieldContraryInstructionIndicator::ValueType getContraryInstructionIndicator() const { return fieldContraryInstructionIndicator.getValue( buf ); }
   const char * ptrToContraryInstructionIndicator() const { return buf + fieldContraryInstructionIndicator.offset; }
   private: FieldContraryInstructionIndicator fieldContraryInstructionIndicator;

   public:
   bool isSetPriorSpreadIndicator() const { return fieldPriorSpreadIndicator.offset >= 0; }
   FieldPriorSpreadIndicator::ValueType getPriorSpreadIndicator() const { return fieldPriorSpreadIndicator.getValue( buf ); }
   const char * ptrToPriorSpreadIndicator() const { return buf + fieldPriorSpreadIndicator.offset; }
   private: FieldPriorSpreadIndicator fieldPriorSpreadIndicator;

   public:
   bool isSetThresholdAmount() const { return fieldThresholdAmount.offset >= 0; }
   FieldThresholdAmount::ValueType getThresholdAmount() const { return fieldThresholdAmount.getValue( buf ); }
   const char * ptrToThresholdAmount() const { return buf + fieldThresholdAmount.offset; }
   private: FieldThresholdAmount fieldThresholdAmount;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessagePositionMaintenanceReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetPosMaintRptID() const { return fieldPosMaintRptID.offset >= 0; }
   FieldPosMaintRptID::ValueType getPosMaintRptID() const { return fieldPosMaintRptID.getValue( buf ); }
   const char * ptrToPosMaintRptID() const { return buf + fieldPosMaintRptID.offset; }
   private: FieldPosMaintRptID fieldPosMaintRptID;

   public:
   bool isSetPosTransType() const { return fieldPosTransType.offset >= 0; }
   FieldPosTransType::ValueType getPosTransType() const { return fieldPosTransType.getValue( buf ); }
   const char * ptrToPosTransType() const { return buf + fieldPosTransType.offset; }
   private: FieldPosTransType fieldPosTransType;

   public:
   bool isSetPosReqID() const { return fieldPosReqID.offset >= 0; }
   FieldPosReqID::ValueType getPosReqID() const { return fieldPosReqID.getValue( buf ); }
   const char * ptrToPosReqID() const { return buf + fieldPosReqID.offset; }
   private: FieldPosReqID fieldPosReqID;

   public:
   bool isSetPosMaintAction() const { return fieldPosMaintAction.offset >= 0; }
   FieldPosMaintAction::ValueType getPosMaintAction() const { return fieldPosMaintAction.getValue( buf ); }
   const char * ptrToPosMaintAction() const { return buf + fieldPosMaintAction.offset; }
   private: FieldPosMaintAction fieldPosMaintAction;

   public:
   bool isSetOrigPosReqRefID() const { return fieldOrigPosReqRefID.offset >= 0; }
   FieldOrigPosReqRefID::ValueType getOrigPosReqRefID() const { return fieldOrigPosReqRefID.getValue( buf ); }
   const char * ptrToOrigPosReqRefID() const { return buf + fieldOrigPosReqRefID.offset; }
   private: FieldOrigPosReqRefID fieldOrigPosReqRefID;

   public:
   bool isSetPosMaintStatus() const { return fieldPosMaintStatus.offset >= 0; }
   FieldPosMaintStatus::ValueType getPosMaintStatus() const { return fieldPosMaintStatus.getValue( buf ); }
   const char * ptrToPosMaintStatus() const { return buf + fieldPosMaintStatus.offset; }
   private: FieldPosMaintStatus fieldPosMaintStatus;

   public:
   bool isSetPosMaintResult() const { return fieldPosMaintResult.offset >= 0; }
   FieldPosMaintResult::ValueType getPosMaintResult() const { return fieldPosMaintResult.getValue( buf ); }
   const char * ptrToPosMaintResult() const { return buf + fieldPosMaintResult.offset; }
   private: FieldPosMaintResult fieldPosMaintResult;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoPositions() const { return fieldNoPositions.offset >= 0; }
   FieldNoPositions::ValueType getNoPositions() const { return fieldNoPositions.getValue( buf ); }
   const char * ptrToNoPositions() const { return buf + fieldNoPositions.offset; }
   private: FieldNoPositions fieldNoPositions;
  
   public:
   std::size_t getGroupCountPositions() const { return groupsPositions.size(); } 
   const GroupPositions & getGroupPositions( std::size_t idx ) const { return groupsPositions[ idx ]; } 
   private: GroupPositions::Array groupsPositions{ 10 };

   public:
   bool isSetNoPosAmt() const { return fieldNoPosAmt.offset >= 0; }
   FieldNoPosAmt::ValueType getNoPosAmt() const { return fieldNoPosAmt.getValue( buf ); }
   const char * ptrToNoPosAmt() const { return buf + fieldNoPosAmt.offset; }
   private: FieldNoPosAmt fieldNoPosAmt;
  
   public:
   std::size_t getGroupCountPosAmt() const { return groupsPosAmt.size(); } 
   const GroupPosAmt & getGroupPosAmt( std::size_t idx ) const { return groupsPosAmt[ idx ]; } 
   private: GroupPosAmt::Array groupsPosAmt{ 10 };

   public:
   bool isSetAdjustmentType() const { return fieldAdjustmentType.offset >= 0; }
   FieldAdjustmentType::ValueType getAdjustmentType() const { return fieldAdjustmentType.getValue( buf ); }
   const char * ptrToAdjustmentType() const { return buf + fieldAdjustmentType.offset; }
   private: FieldAdjustmentType fieldAdjustmentType;

   public:
   bool isSetThresholdAmount() const { return fieldThresholdAmount.offset >= 0; }
   FieldThresholdAmount::ValueType getThresholdAmount() const { return fieldThresholdAmount.getValue( buf ); }
   const char * ptrToThresholdAmount() const { return buf + fieldThresholdAmount.offset; }
   private: FieldThresholdAmount fieldThresholdAmount;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageRequestForPositions: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetPosReqID() const { return fieldPosReqID.offset >= 0; }
   FieldPosReqID::ValueType getPosReqID() const { return fieldPosReqID.getValue( buf ); }
   const char * ptrToPosReqID() const { return buf + fieldPosReqID.offset; }
   private: FieldPosReqID fieldPosReqID;

   public:
   bool isSetPosReqType() const { return fieldPosReqType.offset >= 0; }
   FieldPosReqType::ValueType getPosReqType() const { return fieldPosReqType.getValue( buf ); }
   const char * ptrToPosReqType() const { return buf + fieldPosReqType.offset; }
   private: FieldPosReqType fieldPosReqType;

   public:
   bool isSetMatchStatus() const { return fieldMatchStatus.offset >= 0; }
   FieldMatchStatus::ValueType getMatchStatus() const { return fieldMatchStatus.getValue( buf ); }
   const char * ptrToMatchStatus() const { return buf + fieldMatchStatus.offset; }
   private: FieldMatchStatus fieldMatchStatus;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetNoTradingSessions() const { return fieldNoTradingSessions.offset >= 0; }
   FieldNoTradingSessions::ValueType getNoTradingSessions() const { return fieldNoTradingSessions.getValue( buf ); }
   const char * ptrToNoTradingSessions() const { return buf + fieldNoTradingSessions.offset; }
   private: FieldNoTradingSessions fieldNoTradingSessions;
  
   public:
   std::size_t getGroupCountTradingSessions() const { return groupsTradingSessions.size(); } 
   const GroupTradingSessions & getGroupTradingSessions( std::size_t idx ) const { return groupsTradingSessions[ idx ]; } 
   private: GroupTradingSessions::Array groupsTradingSessions{ 10 };

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetResponseTransportType() const { return fieldResponseTransportType.offset >= 0; }
   FieldResponseTransportType::ValueType getResponseTransportType() const { return fieldResponseTransportType.getValue( buf ); }
   const char * ptrToResponseTransportType() const { return buf + fieldResponseTransportType.offset; }
   private: FieldResponseTransportType fieldResponseTransportType;

   public:
   bool isSetResponseDestination() const { return fieldResponseDestination.offset >= 0; }
   FieldResponseDestination::ValueType getResponseDestination() const { return fieldResponseDestination.getValue( buf ); }
   const char * ptrToResponseDestination() const { return buf + fieldResponseDestination.offset; }
   private: FieldResponseDestination fieldResponseDestination;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageRequestForPositionsAck: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetPosMaintRptID() const { return fieldPosMaintRptID.offset >= 0; }
   FieldPosMaintRptID::ValueType getPosMaintRptID() const { return fieldPosMaintRptID.getValue( buf ); }
   const char * ptrToPosMaintRptID() const { return buf + fieldPosMaintRptID.offset; }
   private: FieldPosMaintRptID fieldPosMaintRptID;

   public:
   bool isSetPosReqID() const { return fieldPosReqID.offset >= 0; }
   FieldPosReqID::ValueType getPosReqID() const { return fieldPosReqID.getValue( buf ); }
   const char * ptrToPosReqID() const { return buf + fieldPosReqID.offset; }
   private: FieldPosReqID fieldPosReqID;

   public:
   bool isSetTotalNumPosReports() const { return fieldTotalNumPosReports.offset >= 0; }
   FieldTotalNumPosReports::ValueType getTotalNumPosReports() const { return fieldTotalNumPosReports.getValue( buf ); }
   const char * ptrToTotalNumPosReports() const { return buf + fieldTotalNumPosReports.offset; }
   private: FieldTotalNumPosReports fieldTotalNumPosReports;

   public:
   bool isSetUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.offset >= 0; }
   FieldUnsolicitedIndicator::ValueType getUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.getValue( buf ); }
   const char * ptrToUnsolicitedIndicator() const { return buf + fieldUnsolicitedIndicator.offset; }
   private: FieldUnsolicitedIndicator fieldUnsolicitedIndicator;

   public:
   bool isSetPosReqResult() const { return fieldPosReqResult.offset >= 0; }
   FieldPosReqResult::ValueType getPosReqResult() const { return fieldPosReqResult.getValue( buf ); }
   const char * ptrToPosReqResult() const { return buf + fieldPosReqResult.offset; }
   private: FieldPosReqResult fieldPosReqResult;

   public:
   bool isSetPosReqStatus() const { return fieldPosReqStatus.offset >= 0; }
   FieldPosReqStatus::ValueType getPosReqStatus() const { return fieldPosReqStatus.getValue( buf ); }
   const char * ptrToPosReqStatus() const { return buf + fieldPosReqStatus.offset; }
   private: FieldPosReqStatus fieldPosReqStatus;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetResponseTransportType() const { return fieldResponseTransportType.offset >= 0; }
   FieldResponseTransportType::ValueType getResponseTransportType() const { return fieldResponseTransportType.getValue( buf ); }
   const char * ptrToResponseTransportType() const { return buf + fieldResponseTransportType.offset; }
   private: FieldResponseTransportType fieldResponseTransportType;

   public:
   bool isSetResponseDestination() const { return fieldResponseDestination.offset >= 0; }
   FieldResponseDestination::ValueType getResponseDestination() const { return fieldResponseDestination.getValue( buf ); }
   const char * ptrToResponseDestination() const { return buf + fieldResponseDestination.offset; }
   private: FieldResponseDestination fieldResponseDestination;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessagePositionReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetPosMaintRptID() const { return fieldPosMaintRptID.offset >= 0; }
   FieldPosMaintRptID::ValueType getPosMaintRptID() const { return fieldPosMaintRptID.getValue( buf ); }
   const char * ptrToPosMaintRptID() const { return buf + fieldPosMaintRptID.offset; }
   private: FieldPosMaintRptID fieldPosMaintRptID;

   public:
   bool isSetPosReqID() const { return fieldPosReqID.offset >= 0; }
   FieldPosReqID::ValueType getPosReqID() const { return fieldPosReqID.getValue( buf ); }
   const char * ptrToPosReqID() const { return buf + fieldPosReqID.offset; }
   private: FieldPosReqID fieldPosReqID;

   public:
   bool isSetPosReqType() const { return fieldPosReqType.offset >= 0; }
   FieldPosReqType::ValueType getPosReqType() const { return fieldPosReqType.getValue( buf ); }
   const char * ptrToPosReqType() const { return buf + fieldPosReqType.offset; }
   private: FieldPosReqType fieldPosReqType;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetTotalNumPosReports() const { return fieldTotalNumPosReports.offset >= 0; }
   FieldTotalNumPosReports::ValueType getTotalNumPosReports() const { return fieldTotalNumPosReports.getValue( buf ); }
   const char * ptrToTotalNumPosReports() const { return buf + fieldTotalNumPosReports.offset; }
   private: FieldTotalNumPosReports fieldTotalNumPosReports;

   public:
   bool isSetUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.offset >= 0; }
   FieldUnsolicitedIndicator::ValueType getUnsolicitedIndicator() const { return fieldUnsolicitedIndicator.getValue( buf ); }
   const char * ptrToUnsolicitedIndicator() const { return buf + fieldUnsolicitedIndicator.offset; }
   private: FieldUnsolicitedIndicator fieldUnsolicitedIndicator;

   public:
   bool isSetPosReqResult() const { return fieldPosReqResult.offset >= 0; }
   FieldPosReqResult::ValueType getPosReqResult() const { return fieldPosReqResult.getValue( buf ); }
   const char * ptrToPosReqResult() const { return buf + fieldPosReqResult.offset; }
   private: FieldPosReqResult fieldPosReqResult;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetSettlPrice() const { return fieldSettlPrice.offset >= 0; }
   FieldSettlPrice::ValueType getSettlPrice() const { return fieldSettlPrice.getValue( buf ); }
   const char * ptrToSettlPrice() const { return buf + fieldSettlPrice.offset; }
   private: FieldSettlPrice fieldSettlPrice;

   public:
   bool isSetSettlPriceType() const { return fieldSettlPriceType.offset >= 0; }
   FieldSettlPriceType::ValueType getSettlPriceType() const { return fieldSettlPriceType.getValue( buf ); }
   const char * ptrToSettlPriceType() const { return buf + fieldSettlPriceType.offset; }
   private: FieldSettlPriceType fieldSettlPriceType;

   public:
   bool isSetPriorSettlPrice() const { return fieldPriorSettlPrice.offset >= 0; }
   FieldPriorSettlPrice::ValueType getPriorSettlPrice() const { return fieldPriorSettlPrice.getValue( buf ); }
   const char * ptrToPriorSettlPrice() const { return buf + fieldPriorSettlPrice.offset; }
   private: FieldPriorSettlPrice fieldPriorSettlPrice;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoPositions() const { return fieldNoPositions.offset >= 0; }
   FieldNoPositions::ValueType getNoPositions() const { return fieldNoPositions.getValue( buf ); }
   const char * ptrToNoPositions() const { return buf + fieldNoPositions.offset; }
   private: FieldNoPositions fieldNoPositions;
  
   public:
   std::size_t getGroupCountPositions() const { return groupsPositions.size(); } 
   const GroupPositions & getGroupPositions( std::size_t idx ) const { return groupsPositions[ idx ]; } 
   private: GroupPositions::Array groupsPositions{ 10 };

   public:
   bool isSetNoPosAmt() const { return fieldNoPosAmt.offset >= 0; }
   FieldNoPosAmt::ValueType getNoPosAmt() const { return fieldNoPosAmt.getValue( buf ); }
   const char * ptrToNoPosAmt() const { return buf + fieldNoPosAmt.offset; }
   private: FieldNoPosAmt fieldNoPosAmt;
  
   public:
   std::size_t getGroupCountPosAmt() const { return groupsPosAmt.size(); } 
   const GroupPosAmt & getGroupPosAmt( std::size_t idx ) const { return groupsPosAmt[ idx ]; } 
   private: GroupPosAmt::Array groupsPosAmt{ 10 };

   public:
   bool isSetRegistStatus() const { return fieldRegistStatus.offset >= 0; }
   FieldRegistStatus::ValueType getRegistStatus() const { return fieldRegistStatus.getValue( buf ); }
   const char * ptrToRegistStatus() const { return buf + fieldRegistStatus.offset; }
   private: FieldRegistStatus fieldRegistStatus;

   public:
   bool isSetDeliveryDate() const { return fieldDeliveryDate.offset >= 0; }
   FieldDeliveryDate::ValueType getDeliveryDate() const { return fieldDeliveryDate.getValue( buf ); }
   const char * ptrToDeliveryDate() const { return buf + fieldDeliveryDate.offset; }
   private: FieldDeliveryDate fieldDeliveryDate;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageTradeCaptureReportRequestAck: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetTradeRequestID() const { return fieldTradeRequestID.offset >= 0; }
   FieldTradeRequestID::ValueType getTradeRequestID() const { return fieldTradeRequestID.getValue( buf ); }
   const char * ptrToTradeRequestID() const { return buf + fieldTradeRequestID.offset; }
   private: FieldTradeRequestID fieldTradeRequestID;

   public:
   bool isSetTradeRequestType() const { return fieldTradeRequestType.offset >= 0; }
   FieldTradeRequestType::ValueType getTradeRequestType() const { return fieldTradeRequestType.getValue( buf ); }
   const char * ptrToTradeRequestType() const { return buf + fieldTradeRequestType.offset; }
   private: FieldTradeRequestType fieldTradeRequestType;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetTotNumTradeReports() const { return fieldTotNumTradeReports.offset >= 0; }
   FieldTotNumTradeReports::ValueType getTotNumTradeReports() const { return fieldTotNumTradeReports.getValue( buf ); }
   const char * ptrToTotNumTradeReports() const { return buf + fieldTotNumTradeReports.offset; }
   private: FieldTotNumTradeReports fieldTotNumTradeReports;

   public:
   bool isSetTradeRequestResult() const { return fieldTradeRequestResult.offset >= 0; }
   FieldTradeRequestResult::ValueType getTradeRequestResult() const { return fieldTradeRequestResult.getValue( buf ); }
   const char * ptrToTradeRequestResult() const { return buf + fieldTradeRequestResult.offset; }
   private: FieldTradeRequestResult fieldTradeRequestResult;

   public:
   bool isSetTradeRequestStatus() const { return fieldTradeRequestStatus.offset >= 0; }
   FieldTradeRequestStatus::ValueType getTradeRequestStatus() const { return fieldTradeRequestStatus.getValue( buf ); }
   const char * ptrToTradeRequestStatus() const { return buf + fieldTradeRequestStatus.offset; }
   private: FieldTradeRequestStatus fieldTradeRequestStatus;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetMultiLegReportingType() const { return fieldMultiLegReportingType.offset >= 0; }
   FieldMultiLegReportingType::ValueType getMultiLegReportingType() const { return fieldMultiLegReportingType.getValue( buf ); }
   const char * ptrToMultiLegReportingType() const { return buf + fieldMultiLegReportingType.offset; }
   private: FieldMultiLegReportingType fieldMultiLegReportingType;

   public:
   bool isSetResponseTransportType() const { return fieldResponseTransportType.offset >= 0; }
   FieldResponseTransportType::ValueType getResponseTransportType() const { return fieldResponseTransportType.getValue( buf ); }
   const char * ptrToResponseTransportType() const { return buf + fieldResponseTransportType.offset; }
   private: FieldResponseTransportType fieldResponseTransportType;

   public:
   bool isSetResponseDestination() const { return fieldResponseDestination.offset >= 0; }
   FieldResponseDestination::ValueType getResponseDestination() const { return fieldResponseDestination.getValue( buf ); }
   const char * ptrToResponseDestination() const { return buf + fieldResponseDestination.offset; }
   private: FieldResponseDestination fieldResponseDestination;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageTradeCaptureReportAck: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetTradeReportID() const { return fieldTradeReportID.offset >= 0; }
   FieldTradeReportID::ValueType getTradeReportID() const { return fieldTradeReportID.getValue( buf ); }
   const char * ptrToTradeReportID() const { return buf + fieldTradeReportID.offset; }
   private: FieldTradeReportID fieldTradeReportID;

   public:
   bool isSetTradeReportTransType() const { return fieldTradeReportTransType.offset >= 0; }
   FieldTradeReportTransType::ValueType getTradeReportTransType() const { return fieldTradeReportTransType.getValue( buf ); }
   const char * ptrToTradeReportTransType() const { return buf + fieldTradeReportTransType.offset; }
   private: FieldTradeReportTransType fieldTradeReportTransType;

   public:
   bool isSetTradeReportType() const { return fieldTradeReportType.offset >= 0; }
   FieldTradeReportType::ValueType getTradeReportType() const { return fieldTradeReportType.getValue( buf ); }
   const char * ptrToTradeReportType() const { return buf + fieldTradeReportType.offset; }
   private: FieldTradeReportType fieldTradeReportType;

   public:
   bool isSetTrdType() const { return fieldTrdType.offset >= 0; }
   FieldTrdType::ValueType getTrdType() const { return fieldTrdType.getValue( buf ); }
   const char * ptrToTrdType() const { return buf + fieldTrdType.offset; }
   private: FieldTrdType fieldTrdType;

   public:
   bool isSetTrdSubType() const { return fieldTrdSubType.offset >= 0; }
   FieldTrdSubType::ValueType getTrdSubType() const { return fieldTrdSubType.getValue( buf ); }
   const char * ptrToTrdSubType() const { return buf + fieldTrdSubType.offset; }
   private: FieldTrdSubType fieldTrdSubType;

   public:
   bool isSetSecondaryTrdType() const { return fieldSecondaryTrdType.offset >= 0; }
   FieldSecondaryTrdType::ValueType getSecondaryTrdType() const { return fieldSecondaryTrdType.getValue( buf ); }
   const char * ptrToSecondaryTrdType() const { return buf + fieldSecondaryTrdType.offset; }
   private: FieldSecondaryTrdType fieldSecondaryTrdType;

   public:
   bool isSetTransferReason() const { return fieldTransferReason.offset >= 0; }
   FieldTransferReason::ValueType getTransferReason() const { return fieldTransferReason.getValue( buf ); }
   const char * ptrToTransferReason() const { return buf + fieldTransferReason.offset; }
   private: FieldTransferReason fieldTransferReason;

   public:
   bool isSetExecType() const { return fieldExecType.offset >= 0; }
   FieldExecType::ValueType getExecType() const { return fieldExecType.getValue( buf ); }
   const char * ptrToExecType() const { return buf + fieldExecType.offset; }
   private: FieldExecType fieldExecType;

   public:
   bool isSetTradeReportRefID() const { return fieldTradeReportRefID.offset >= 0; }
   FieldTradeReportRefID::ValueType getTradeReportRefID() const { return fieldTradeReportRefID.getValue( buf ); }
   const char * ptrToTradeReportRefID() const { return buf + fieldTradeReportRefID.offset; }
   private: FieldTradeReportRefID fieldTradeReportRefID;

   public:
   bool isSetSecondaryTradeReportRefID() const { return fieldSecondaryTradeReportRefID.offset >= 0; }
   FieldSecondaryTradeReportRefID::ValueType getSecondaryTradeReportRefID() const { return fieldSecondaryTradeReportRefID.getValue( buf ); }
   const char * ptrToSecondaryTradeReportRefID() const { return buf + fieldSecondaryTradeReportRefID.offset; }
   private: FieldSecondaryTradeReportRefID fieldSecondaryTradeReportRefID;

   public:
   bool isSetTrdRptStatus() const { return fieldTrdRptStatus.offset >= 0; }
   FieldTrdRptStatus::ValueType getTrdRptStatus() const { return fieldTrdRptStatus.getValue( buf ); }
   const char * ptrToTrdRptStatus() const { return buf + fieldTrdRptStatus.offset; }
   private: FieldTrdRptStatus fieldTrdRptStatus;

   public:
   bool isSetTradeReportRejectReason() const { return fieldTradeReportRejectReason.offset >= 0; }
   FieldTradeReportRejectReason::ValueType getTradeReportRejectReason() const { return fieldTradeReportRejectReason.getValue( buf ); }
   const char * ptrToTradeReportRejectReason() const { return buf + fieldTradeReportRejectReason.offset; }
   private: FieldTradeReportRejectReason fieldTradeReportRejectReason;

   public:
   bool isSetSecondaryTradeReportID() const { return fieldSecondaryTradeReportID.offset >= 0; }
   FieldSecondaryTradeReportID::ValueType getSecondaryTradeReportID() const { return fieldSecondaryTradeReportID.getValue( buf ); }
   const char * ptrToSecondaryTradeReportID() const { return buf + fieldSecondaryTradeReportID.offset; }
   private: FieldSecondaryTradeReportID fieldSecondaryTradeReportID;

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetTradeLinkID() const { return fieldTradeLinkID.offset >= 0; }
   FieldTradeLinkID::ValueType getTradeLinkID() const { return fieldTradeLinkID.getValue( buf ); }
   const char * ptrToTradeLinkID() const { return buf + fieldTradeLinkID.offset; }
   private: FieldTradeLinkID fieldTradeLinkID;

   public:
   bool isSetTrdMatchID() const { return fieldTrdMatchID.offset >= 0; }
   FieldTrdMatchID::ValueType getTrdMatchID() const { return fieldTrdMatchID.getValue( buf ); }
   const char * ptrToTrdMatchID() const { return buf + fieldTrdMatchID.offset; }
   private: FieldTrdMatchID fieldTrdMatchID;

   public:
   bool isSetExecID() const { return fieldExecID.offset >= 0; }
   FieldExecID::ValueType getExecID() const { return fieldExecID.getValue( buf ); }
   const char * ptrToExecID() const { return buf + fieldExecID.offset; }
   private: FieldExecID fieldExecID;

   public:
   bool isSetSecondaryExecID() const { return fieldSecondaryExecID.offset >= 0; }
   FieldSecondaryExecID::ValueType getSecondaryExecID() const { return fieldSecondaryExecID.getValue( buf ); }
   const char * ptrToSecondaryExecID() const { return buf + fieldSecondaryExecID.offset; }
   private: FieldSecondaryExecID fieldSecondaryExecID;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.offset >= 0; }
   FieldNoTrdRegTimestamps::ValueType getNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.getValue( buf ); }
   const char * ptrToNoTrdRegTimestamps() const { return buf + fieldNoTrdRegTimestamps.offset; }
   private: FieldNoTrdRegTimestamps fieldNoTrdRegTimestamps;
  
   public:
   std::size_t getGroupCountTrdRegTimestamps() const { return groupsTrdRegTimestamps.size(); } 
   const GroupTrdRegTimestamps & getGroupTrdRegTimestamps( std::size_t idx ) const { return groupsTrdRegTimestamps[ idx ]; } 
   private: GroupTrdRegTimestamps::Array groupsTrdRegTimestamps{ 10 };

   public:
   bool isSetResponseTransportType() const { return fieldResponseTransportType.offset >= 0; }
   FieldResponseTransportType::ValueType getResponseTransportType() const { return fieldResponseTransportType.getValue( buf ); }
   const char * ptrToResponseTransportType() const { return buf + fieldResponseTransportType.offset; }
   private: FieldResponseTransportType fieldResponseTransportType;

   public:
   bool isSetResponseDestination() const { return fieldResponseDestination.offset >= 0; }
   FieldResponseDestination::ValueType getResponseDestination() const { return fieldResponseDestination.getValue( buf ); }
   const char * ptrToResponseDestination() const { return buf + fieldResponseDestination.offset; }
   private: FieldResponseDestination fieldResponseDestination;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetClearingFeeIndicator() const { return fieldClearingFeeIndicator.offset >= 0; }
   FieldClearingFeeIndicator::ValueType getClearingFeeIndicator() const { return fieldClearingFeeIndicator.getValue( buf ); }
   const char * ptrToClearingFeeIndicator() const { return buf + fieldClearingFeeIndicator.offset; }
   private: FieldClearingFeeIndicator fieldClearingFeeIndicator;

   public:
   bool isSetOrderCapacity() const { return fieldOrderCapacity.offset >= 0; }
   FieldOrderCapacity::ValueType getOrderCapacity() const { return fieldOrderCapacity.getValue( buf ); }
   const char * ptrToOrderCapacity() const { return buf + fieldOrderCapacity.offset; }
   private: FieldOrderCapacity fieldOrderCapacity;

   public:
   bool isSetOrderRestrictions() const { return fieldOrderRestrictions.offset >= 0; }
   FieldOrderRestrictions::ValueType getOrderRestrictions() const { return fieldOrderRestrictions.getValue( buf ); }
   const char * ptrToOrderRestrictions() const { return buf + fieldOrderRestrictions.offset; }
   private: FieldOrderRestrictions fieldOrderRestrictions;

   public:
   bool isSetCustOrderCapacity() const { return fieldCustOrderCapacity.offset >= 0; }
   FieldCustOrderCapacity::ValueType getCustOrderCapacity() const { return fieldCustOrderCapacity.getValue( buf ); }
   const char * ptrToCustOrderCapacity() const { return buf + fieldCustOrderCapacity.offset; }
   private: FieldCustOrderCapacity fieldCustOrderCapacity;

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAcctIDSource() const { return fieldAcctIDSource.offset >= 0; }
   FieldAcctIDSource::ValueType getAcctIDSource() const { return fieldAcctIDSource.getValue( buf ); }
   const char * ptrToAcctIDSource() const { return buf + fieldAcctIDSource.offset; }
   private: FieldAcctIDSource fieldAcctIDSource;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetPreallocMethod() const { return fieldPreallocMethod.offset >= 0; }
   FieldPreallocMethod::ValueType getPreallocMethod() const { return fieldPreallocMethod.getValue( buf ); }
   const char * ptrToPreallocMethod() const { return buf + fieldPreallocMethod.offset; }
   private: FieldPreallocMethod fieldPreallocMethod;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageAllocationReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetAllocReportID() const { return fieldAllocReportID.offset >= 0; }
   FieldAllocReportID::ValueType getAllocReportID() const { return fieldAllocReportID.getValue( buf ); }
   const char * ptrToAllocReportID() const { return buf + fieldAllocReportID.offset; }
   private: FieldAllocReportID fieldAllocReportID;

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetAllocTransType() const { return fieldAllocTransType.offset >= 0; }
   FieldAllocTransType::ValueType getAllocTransType() const { return fieldAllocTransType.getValue( buf ); }
   const char * ptrToAllocTransType() const { return buf + fieldAllocTransType.offset; }
   private: FieldAllocTransType fieldAllocTransType;

   public:
   bool isSetAllocReportRefID() const { return fieldAllocReportRefID.offset >= 0; }
   FieldAllocReportRefID::ValueType getAllocReportRefID() const { return fieldAllocReportRefID.getValue( buf ); }
   const char * ptrToAllocReportRefID() const { return buf + fieldAllocReportRefID.offset; }
   private: FieldAllocReportRefID fieldAllocReportRefID;

   public:
   bool isSetAllocCancReplaceReason() const { return fieldAllocCancReplaceReason.offset >= 0; }
   FieldAllocCancReplaceReason::ValueType getAllocCancReplaceReason() const { return fieldAllocCancReplaceReason.getValue( buf ); }
   const char * ptrToAllocCancReplaceReason() const { return buf + fieldAllocCancReplaceReason.offset; }
   private: FieldAllocCancReplaceReason fieldAllocCancReplaceReason;

   public:
   bool isSetSecondaryAllocID() const { return fieldSecondaryAllocID.offset >= 0; }
   FieldSecondaryAllocID::ValueType getSecondaryAllocID() const { return fieldSecondaryAllocID.getValue( buf ); }
   const char * ptrToSecondaryAllocID() const { return buf + fieldSecondaryAllocID.offset; }
   private: FieldSecondaryAllocID fieldSecondaryAllocID;

   public:
   bool isSetAllocReportType() const { return fieldAllocReportType.offset >= 0; }
   FieldAllocReportType::ValueType getAllocReportType() const { return fieldAllocReportType.getValue( buf ); }
   const char * ptrToAllocReportType() const { return buf + fieldAllocReportType.offset; }
   private: FieldAllocReportType fieldAllocReportType;

   public:
   bool isSetAllocStatus() const { return fieldAllocStatus.offset >= 0; }
   FieldAllocStatus::ValueType getAllocStatus() const { return fieldAllocStatus.getValue( buf ); }
   const char * ptrToAllocStatus() const { return buf + fieldAllocStatus.offset; }
   private: FieldAllocStatus fieldAllocStatus;

   public:
   bool isSetAllocRejCode() const { return fieldAllocRejCode.offset >= 0; }
   FieldAllocRejCode::ValueType getAllocRejCode() const { return fieldAllocRejCode.getValue( buf ); }
   const char * ptrToAllocRejCode() const { return buf + fieldAllocRejCode.offset; }
   private: FieldAllocRejCode fieldAllocRejCode;

   public:
   bool isSetRefAllocID() const { return fieldRefAllocID.offset >= 0; }
   FieldRefAllocID::ValueType getRefAllocID() const { return fieldRefAllocID.getValue( buf ); }
   const char * ptrToRefAllocID() const { return buf + fieldRefAllocID.offset; }
   private: FieldRefAllocID fieldRefAllocID;

   public:
   bool isSetAllocIntermedReqType() const { return fieldAllocIntermedReqType.offset >= 0; }
   FieldAllocIntermedReqType::ValueType getAllocIntermedReqType() const { return fieldAllocIntermedReqType.getValue( buf ); }
   const char * ptrToAllocIntermedReqType() const { return buf + fieldAllocIntermedReqType.offset; }
   private: FieldAllocIntermedReqType fieldAllocIntermedReqType;

   public:
   bool isSetAllocLinkID() const { return fieldAllocLinkID.offset >= 0; }
   FieldAllocLinkID::ValueType getAllocLinkID() const { return fieldAllocLinkID.getValue( buf ); }
   const char * ptrToAllocLinkID() const { return buf + fieldAllocLinkID.offset; }
   private: FieldAllocLinkID fieldAllocLinkID;

   public:
   bool isSetAllocLinkType() const { return fieldAllocLinkType.offset >= 0; }
   FieldAllocLinkType::ValueType getAllocLinkType() const { return fieldAllocLinkType.getValue( buf ); }
   const char * ptrToAllocLinkType() const { return buf + fieldAllocLinkType.offset; }
   private: FieldAllocLinkType fieldAllocLinkType;

   public:
   bool isSetBookingRefID() const { return fieldBookingRefID.offset >= 0; }
   FieldBookingRefID::ValueType getBookingRefID() const { return fieldBookingRefID.getValue( buf ); }
   const char * ptrToBookingRefID() const { return buf + fieldBookingRefID.offset; }
   private: FieldBookingRefID fieldBookingRefID;

   public:
   bool isSetAllocNoOrdersType() const { return fieldAllocNoOrdersType.offset >= 0; }
   FieldAllocNoOrdersType::ValueType getAllocNoOrdersType() const { return fieldAllocNoOrdersType.getValue( buf ); }
   const char * ptrToAllocNoOrdersType() const { return buf + fieldAllocNoOrdersType.offset; }
   private: FieldAllocNoOrdersType fieldAllocNoOrdersType;

   public:
   bool isSetNoOrders() const { return fieldNoOrders.offset >= 0; }
   FieldNoOrders::ValueType getNoOrders() const { return fieldNoOrders.getValue( buf ); }
   const char * ptrToNoOrders() const { return buf + fieldNoOrders.offset; }
   private: FieldNoOrders fieldNoOrders;
  
   public:
   std::size_t getGroupCountOrders() const { return groupsOrders.size(); } 
   const GroupOrders & getGroupOrders( std::size_t idx ) const { return groupsOrders[ idx ]; } 
   private: GroupOrders::Array groupsOrders{ 10 };

   public:
   bool isSetNoExecs() const { return fieldNoExecs.offset >= 0; }
   FieldNoExecs::ValueType getNoExecs() const { return fieldNoExecs.getValue( buf ); }
   const char * ptrToNoExecs() const { return buf + fieldNoExecs.offset; }
   private: FieldNoExecs fieldNoExecs;
  
   public:
   std::size_t getGroupCountExecs() const { return groupsExecs.size(); } 
   const GroupExecs & getGroupExecs( std::size_t idx ) const { return groupsExecs[ idx ]; } 
   private: GroupExecs::Array groupsExecs{ 10 };

   public:
   bool isSetPreviouslyReported() const { return fieldPreviouslyReported.offset >= 0; }
   FieldPreviouslyReported::ValueType getPreviouslyReported() const { return fieldPreviouslyReported.getValue( buf ); }
   const char * ptrToPreviouslyReported() const { return buf + fieldPreviouslyReported.offset; }
   private: FieldPreviouslyReported fieldPreviouslyReported;

   public:
   bool isSetReversalIndicator() const { return fieldReversalIndicator.offset >= 0; }
   FieldReversalIndicator::ValueType getReversalIndicator() const { return fieldReversalIndicator.getValue( buf ); }
   const char * ptrToReversalIndicator() const { return buf + fieldReversalIndicator.offset; }
   private: FieldReversalIndicator fieldReversalIndicator;

   public:
   bool isSetMatchType() const { return fieldMatchType.offset >= 0; }
   FieldMatchType::ValueType getMatchType() const { return fieldMatchType.getValue( buf ); }
   const char * ptrToMatchType() const { return buf + fieldMatchType.offset; }
   private: FieldMatchType fieldMatchType;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetDeliveryForm() const { return fieldDeliveryForm.offset >= 0; }
   FieldDeliveryForm::ValueType getDeliveryForm() const { return fieldDeliveryForm.getValue( buf ); }
   const char * ptrToDeliveryForm() const { return buf + fieldDeliveryForm.offset; }
   private: FieldDeliveryForm fieldDeliveryForm;

   public:
   bool isSetPctAtRisk() const { return fieldPctAtRisk.offset >= 0; }
   FieldPctAtRisk::ValueType getPctAtRisk() const { return fieldPctAtRisk.getValue( buf ); }
   const char * ptrToPctAtRisk() const { return buf + fieldPctAtRisk.offset; }
   private: FieldPctAtRisk fieldPctAtRisk;

   public:
   bool isSetNoInstrAttrib() const { return fieldNoInstrAttrib.offset >= 0; }
   FieldNoInstrAttrib::ValueType getNoInstrAttrib() const { return fieldNoInstrAttrib.getValue( buf ); }
   const char * ptrToNoInstrAttrib() const { return buf + fieldNoInstrAttrib.offset; }
   private: FieldNoInstrAttrib fieldNoInstrAttrib;
  
   public:
   std::size_t getGroupCountInstrAttrib() const { return groupsInstrAttrib.size(); } 
   const GroupInstrAttrib & getGroupInstrAttrib( std::size_t idx ) const { return groupsInstrAttrib[ idx ]; } 
   private: GroupInstrAttrib::Array groupsInstrAttrib{ 10 };

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetLastMkt() const { return fieldLastMkt.offset >= 0; }
   FieldLastMkt::ValueType getLastMkt() const { return fieldLastMkt.getValue( buf ); }
   const char * ptrToLastMkt() const { return buf + fieldLastMkt.offset; }
   private: FieldLastMkt fieldLastMkt;

   public:
   bool isSetTradeOriginationDate() const { return fieldTradeOriginationDate.offset >= 0; }
   FieldTradeOriginationDate::ValueType getTradeOriginationDate() const { return fieldTradeOriginationDate.getValue( buf ); }
   const char * ptrToTradeOriginationDate() const { return buf + fieldTradeOriginationDate.offset; }
   private: FieldTradeOriginationDate fieldTradeOriginationDate;

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetAvgPx() const { return fieldAvgPx.offset >= 0; }
   FieldAvgPx::ValueType getAvgPx() const { return fieldAvgPx.getValue( buf ); }
   const char * ptrToAvgPx() const { return buf + fieldAvgPx.offset; }
   private: FieldAvgPx fieldAvgPx;

   public:
   bool isSetAvgParPx() const { return fieldAvgParPx.offset >= 0; }
   FieldAvgParPx::ValueType getAvgParPx() const { return fieldAvgParPx.getValue( buf ); }
   const char * ptrToAvgParPx() const { return buf + fieldAvgParPx.offset; }
   private: FieldAvgParPx fieldAvgParPx;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetAvgPxPrecision() const { return fieldAvgPxPrecision.offset >= 0; }
   FieldAvgPxPrecision::ValueType getAvgPxPrecision() const { return fieldAvgPxPrecision.getValue( buf ); }
   const char * ptrToAvgPxPrecision() const { return buf + fieldAvgPxPrecision.offset; }
   private: FieldAvgPxPrecision fieldAvgPxPrecision;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetSettlType() const { return fieldSettlType.offset >= 0; }
   FieldSettlType::ValueType getSettlType() const { return fieldSettlType.getValue( buf ); }
   const char * ptrToSettlType() const { return buf + fieldSettlType.offset; }
   private: FieldSettlType fieldSettlType;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetBookingType() const { return fieldBookingType.offset >= 0; }
   FieldBookingType::ValueType getBookingType() const { return fieldBookingType.getValue( buf ); }
   const char * ptrToBookingType() const { return buf + fieldBookingType.offset; }
   private: FieldBookingType fieldBookingType;

   public:
   bool isSetGrossTradeAmt() const { return fieldGrossTradeAmt.offset >= 0; }
   FieldGrossTradeAmt::ValueType getGrossTradeAmt() const { return fieldGrossTradeAmt.getValue( buf ); }
   const char * ptrToGrossTradeAmt() const { return buf + fieldGrossTradeAmt.offset; }
   private: FieldGrossTradeAmt fieldGrossTradeAmt;

   public:
   bool isSetConcession() const { return fieldConcession.offset >= 0; }
   FieldConcession::ValueType getConcession() const { return fieldConcession.getValue( buf ); }
   const char * ptrToConcession() const { return buf + fieldConcession.offset; }
   private: FieldConcession fieldConcession;

   public:
   bool isSetTotalTakedown() const { return fieldTotalTakedown.offset >= 0; }
   FieldTotalTakedown::ValueType getTotalTakedown() const { return fieldTotalTakedown.getValue( buf ); }
   const char * ptrToTotalTakedown() const { return buf + fieldTotalTakedown.offset; }
   private: FieldTotalTakedown fieldTotalTakedown;

   public:
   bool isSetNetMoney() const { return fieldNetMoney.offset >= 0; }
   FieldNetMoney::ValueType getNetMoney() const { return fieldNetMoney.getValue( buf ); }
   const char * ptrToNetMoney() const { return buf + fieldNetMoney.offset; }
   private: FieldNetMoney fieldNetMoney;

   public:
   bool isSetPositionEffect() const { return fieldPositionEffect.offset >= 0; }
   FieldPositionEffect::ValueType getPositionEffect() const { return fieldPositionEffect.getValue( buf ); }
   const char * ptrToPositionEffect() const { return buf + fieldPositionEffect.offset; }
   private: FieldPositionEffect fieldPositionEffect;

   public:
   bool isSetAutoAcceptIndicator() const { return fieldAutoAcceptIndicator.offset >= 0; }
   FieldAutoAcceptIndicator::ValueType getAutoAcceptIndicator() const { return fieldAutoAcceptIndicator.getValue( buf ); }
   const char * ptrToAutoAcceptIndicator() const { return buf + fieldAutoAcceptIndicator.offset; }
   private: FieldAutoAcceptIndicator fieldAutoAcceptIndicator;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetNumDaysInterest() const { return fieldNumDaysInterest.offset >= 0; }
   FieldNumDaysInterest::ValueType getNumDaysInterest() const { return fieldNumDaysInterest.getValue( buf ); }
   const char * ptrToNumDaysInterest() const { return buf + fieldNumDaysInterest.offset; }
   private: FieldNumDaysInterest fieldNumDaysInterest;

   public:
   bool isSetAccruedInterestRate() const { return fieldAccruedInterestRate.offset >= 0; }
   FieldAccruedInterestRate::ValueType getAccruedInterestRate() const { return fieldAccruedInterestRate.getValue( buf ); }
   const char * ptrToAccruedInterestRate() const { return buf + fieldAccruedInterestRate.offset; }
   private: FieldAccruedInterestRate fieldAccruedInterestRate;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetTotalAccruedInterestAmt() const { return fieldTotalAccruedInterestAmt.offset >= 0; }
   FieldTotalAccruedInterestAmt::ValueType getTotalAccruedInterestAmt() const { return fieldTotalAccruedInterestAmt.getValue( buf ); }
   const char * ptrToTotalAccruedInterestAmt() const { return buf + fieldTotalAccruedInterestAmt.offset; }
   private: FieldTotalAccruedInterestAmt fieldTotalAccruedInterestAmt;

   public:
   bool isSetInterestAtMaturity() const { return fieldInterestAtMaturity.offset >= 0; }
   FieldInterestAtMaturity::ValueType getInterestAtMaturity() const { return fieldInterestAtMaturity.getValue( buf ); }
   const char * ptrToInterestAtMaturity() const { return buf + fieldInterestAtMaturity.offset; }
   private: FieldInterestAtMaturity fieldInterestAtMaturity;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetLegalConfirm() const { return fieldLegalConfirm.offset >= 0; }
   FieldLegalConfirm::ValueType getLegalConfirm() const { return fieldLegalConfirm.getValue( buf ); }
   const char * ptrToLegalConfirm() const { return buf + fieldLegalConfirm.offset; }
   private: FieldLegalConfirm fieldLegalConfirm;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetYieldType() const { return fieldYieldType.offset >= 0; }
   FieldYieldType::ValueType getYieldType() const { return fieldYieldType.getValue( buf ); }
   const char * ptrToYieldType() const { return buf + fieldYieldType.offset; }
   private: FieldYieldType fieldYieldType;

   public:
   bool isSetYield() const { return fieldYield.offset >= 0; }
   FieldYield::ValueType getYield() const { return fieldYield.getValue( buf ); }
   const char * ptrToYield() const { return buf + fieldYield.offset; }
   private: FieldYield fieldYield;

   public:
   bool isSetYieldCalcDate() const { return fieldYieldCalcDate.offset >= 0; }
   FieldYieldCalcDate::ValueType getYieldCalcDate() const { return fieldYieldCalcDate.getValue( buf ); }
   const char * ptrToYieldCalcDate() const { return buf + fieldYieldCalcDate.offset; }
   private: FieldYieldCalcDate fieldYieldCalcDate;

   public:
   bool isSetYieldRedemptionDate() const { return fieldYieldRedemptionDate.offset >= 0; }
   FieldYieldRedemptionDate::ValueType getYieldRedemptionDate() const { return fieldYieldRedemptionDate.getValue( buf ); }
   const char * ptrToYieldRedemptionDate() const { return buf + fieldYieldRedemptionDate.offset; }
   private: FieldYieldRedemptionDate fieldYieldRedemptionDate;

   public:
   bool isSetYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.offset >= 0; }
   FieldYieldRedemptionPrice::ValueType getYieldRedemptionPrice() const { return fieldYieldRedemptionPrice.getValue( buf ); }
   const char * ptrToYieldRedemptionPrice() const { return buf + fieldYieldRedemptionPrice.offset; }
   private: FieldYieldRedemptionPrice fieldYieldRedemptionPrice;

   public:
   bool isSetYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.offset >= 0; }
   FieldYieldRedemptionPriceType::ValueType getYieldRedemptionPriceType() const { return fieldYieldRedemptionPriceType.getValue( buf ); }
   const char * ptrToYieldRedemptionPriceType() const { return buf + fieldYieldRedemptionPriceType.offset; }
   private: FieldYieldRedemptionPriceType fieldYieldRedemptionPriceType;

   public:
   bool isSetTotNoAllocs() const { return fieldTotNoAllocs.offset >= 0; }
   FieldTotNoAllocs::ValueType getTotNoAllocs() const { return fieldTotNoAllocs.getValue( buf ); }
   const char * ptrToTotNoAllocs() const { return buf + fieldTotNoAllocs.offset; }
   private: FieldTotNoAllocs fieldTotNoAllocs;

   public:
   bool isSetLastFragment() const { return fieldLastFragment.offset >= 0; }
   FieldLastFragment::ValueType getLastFragment() const { return fieldLastFragment.getValue( buf ); }
   const char * ptrToLastFragment() const { return buf + fieldLastFragment.offset; }
   private: FieldLastFragment fieldLastFragment;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageAllocationReportAck: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetAllocReportID() const { return fieldAllocReportID.offset >= 0; }
   FieldAllocReportID::ValueType getAllocReportID() const { return fieldAllocReportID.getValue( buf ); }
   const char * ptrToAllocReportID() const { return buf + fieldAllocReportID.offset; }
   private: FieldAllocReportID fieldAllocReportID;

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetSecondaryAllocID() const { return fieldSecondaryAllocID.offset >= 0; }
   FieldSecondaryAllocID::ValueType getSecondaryAllocID() const { return fieldSecondaryAllocID.getValue( buf ); }
   const char * ptrToSecondaryAllocID() const { return buf + fieldSecondaryAllocID.offset; }
   private: FieldSecondaryAllocID fieldSecondaryAllocID;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetAllocStatus() const { return fieldAllocStatus.offset >= 0; }
   FieldAllocStatus::ValueType getAllocStatus() const { return fieldAllocStatus.getValue( buf ); }
   const char * ptrToAllocStatus() const { return buf + fieldAllocStatus.offset; }
   private: FieldAllocStatus fieldAllocStatus;

   public:
   bool isSetAllocRejCode() const { return fieldAllocRejCode.offset >= 0; }
   FieldAllocRejCode::ValueType getAllocRejCode() const { return fieldAllocRejCode.getValue( buf ); }
   const char * ptrToAllocRejCode() const { return buf + fieldAllocRejCode.offset; }
   private: FieldAllocRejCode fieldAllocRejCode;

   public:
   bool isSetAllocReportType() const { return fieldAllocReportType.offset >= 0; }
   FieldAllocReportType::ValueType getAllocReportType() const { return fieldAllocReportType.getValue( buf ); }
   const char * ptrToAllocReportType() const { return buf + fieldAllocReportType.offset; }
   private: FieldAllocReportType fieldAllocReportType;

   public:
   bool isSetAllocIntermedReqType() const { return fieldAllocIntermedReqType.offset >= 0; }
   FieldAllocIntermedReqType::ValueType getAllocIntermedReqType() const { return fieldAllocIntermedReqType.getValue( buf ); }
   const char * ptrToAllocIntermedReqType() const { return buf + fieldAllocIntermedReqType.offset; }
   private: FieldAllocIntermedReqType fieldAllocIntermedReqType;

   public:
   bool isSetMatchStatus() const { return fieldMatchStatus.offset >= 0; }
   FieldMatchStatus::ValueType getMatchStatus() const { return fieldMatchStatus.getValue( buf ); }
   const char * ptrToMatchStatus() const { return buf + fieldMatchStatus.offset; }
   private: FieldMatchStatus fieldMatchStatus;

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

   public:
   bool isSetNoAllocs() const { return fieldNoAllocs.offset >= 0; }
   FieldNoAllocs::ValueType getNoAllocs() const { return fieldNoAllocs.getValue( buf ); }
   const char * ptrToNoAllocs() const { return buf + fieldNoAllocs.offset; }
   private: FieldNoAllocs fieldNoAllocs;
  
   public:
   std::size_t getGroupCountAllocs() const { return groupsAllocs.size(); } 
   const GroupAllocs & getGroupAllocs( std::size_t idx ) const { return groupsAllocs[ idx ]; } 
   private: GroupAllocs::Array groupsAllocs{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageConfirmationAck: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetConfirmID() const { return fieldConfirmID.offset >= 0; }
   FieldConfirmID::ValueType getConfirmID() const { return fieldConfirmID.getValue( buf ); }
   const char * ptrToConfirmID() const { return buf + fieldConfirmID.offset; }
   private: FieldConfirmID fieldConfirmID;

   public:
   bool isSetTradeDate() const { return fieldTradeDate.offset >= 0; }
   FieldTradeDate::ValueType getTradeDate() const { return fieldTradeDate.getValue( buf ); }
   const char * ptrToTradeDate() const { return buf + fieldTradeDate.offset; }
   private: FieldTradeDate fieldTradeDate;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetAffirmStatus() const { return fieldAffirmStatus.offset >= 0; }
   FieldAffirmStatus::ValueType getAffirmStatus() const { return fieldAffirmStatus.getValue( buf ); }
   const char * ptrToAffirmStatus() const { return buf + fieldAffirmStatus.offset; }
   private: FieldAffirmStatus fieldAffirmStatus;

   public:
   bool isSetConfirmRejReason() const { return fieldConfirmRejReason.offset >= 0; }
   FieldConfirmRejReason::ValueType getConfirmRejReason() const { return fieldConfirmRejReason.getValue( buf ); }
   const char * ptrToConfirmRejReason() const { return buf + fieldConfirmRejReason.offset; }
   private: FieldConfirmRejReason fieldConfirmRejReason;

   public:
   bool isSetMatchStatus() const { return fieldMatchStatus.offset >= 0; }
   FieldMatchStatus::ValueType getMatchStatus() const { return fieldMatchStatus.getValue( buf ); }
   const char * ptrToMatchStatus() const { return buf + fieldMatchStatus.offset; }
   private: FieldMatchStatus fieldMatchStatus;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageSettlementInstructionRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetSettlInstReqID() const { return fieldSettlInstReqID.offset >= 0; }
   FieldSettlInstReqID::ValueType getSettlInstReqID() const { return fieldSettlInstReqID.getValue( buf ); }
   const char * ptrToSettlInstReqID() const { return buf + fieldSettlInstReqID.offset; }
   private: FieldSettlInstReqID fieldSettlInstReqID;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAllocAccount() const { return fieldAllocAccount.offset >= 0; }
   FieldAllocAccount::ValueType getAllocAccount() const { return fieldAllocAccount.getValue( buf ); }
   const char * ptrToAllocAccount() const { return buf + fieldAllocAccount.offset; }
   private: FieldAllocAccount fieldAllocAccount;

   public:
   bool isSetAllocAcctIDSource() const { return fieldAllocAcctIDSource.offset >= 0; }
   FieldAllocAcctIDSource::ValueType getAllocAcctIDSource() const { return fieldAllocAcctIDSource.getValue( buf ); }
   const char * ptrToAllocAcctIDSource() const { return buf + fieldAllocAcctIDSource.offset; }
   private: FieldAllocAcctIDSource fieldAllocAcctIDSource;

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetEffectiveTime() const { return fieldEffectiveTime.offset >= 0; }
   FieldEffectiveTime::ValueType getEffectiveTime() const { return fieldEffectiveTime.getValue( buf ); }
   const char * ptrToEffectiveTime() const { return buf + fieldEffectiveTime.offset; }
   private: FieldEffectiveTime fieldEffectiveTime;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetLastUpdateTime() const { return fieldLastUpdateTime.offset >= 0; }
   FieldLastUpdateTime::ValueType getLastUpdateTime() const { return fieldLastUpdateTime.getValue( buf ); }
   const char * ptrToLastUpdateTime() const { return buf + fieldLastUpdateTime.offset; }
   private: FieldLastUpdateTime fieldLastUpdateTime;

   public:
   bool isSetStandInstDbType() const { return fieldStandInstDbType.offset >= 0; }
   FieldStandInstDbType::ValueType getStandInstDbType() const { return fieldStandInstDbType.getValue( buf ); }
   const char * ptrToStandInstDbType() const { return buf + fieldStandInstDbType.offset; }
   private: FieldStandInstDbType fieldStandInstDbType;

   public:
   bool isSetStandInstDbName() const { return fieldStandInstDbName.offset >= 0; }
   FieldStandInstDbName::ValueType getStandInstDbName() const { return fieldStandInstDbName.getValue( buf ); }
   const char * ptrToStandInstDbName() const { return buf + fieldStandInstDbName.offset; }
   private: FieldStandInstDbName fieldStandInstDbName;

   public:
   bool isSetStandInstDbID() const { return fieldStandInstDbID.offset >= 0; }
   FieldStandInstDbID::ValueType getStandInstDbID() const { return fieldStandInstDbID.getValue( buf ); }
   const char * ptrToStandInstDbID() const { return buf + fieldStandInstDbID.offset; }
   private: FieldStandInstDbID fieldStandInstDbID;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageAssignmentReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetAsgnRptID() const { return fieldAsgnRptID.offset >= 0; }
   FieldAsgnRptID::ValueType getAsgnRptID() const { return fieldAsgnRptID.getValue( buf ); }
   const char * ptrToAsgnRptID() const { return buf + fieldAsgnRptID.offset; }
   private: FieldAsgnRptID fieldAsgnRptID;

   public:
   bool isSetTotNumAssignmentReports() const { return fieldTotNumAssignmentReports.offset >= 0; }
   FieldTotNumAssignmentReports::ValueType getTotNumAssignmentReports() const { return fieldTotNumAssignmentReports.getValue( buf ); }
   const char * ptrToTotNumAssignmentReports() const { return buf + fieldTotNumAssignmentReports.offset; }
   private: FieldTotNumAssignmentReports fieldTotNumAssignmentReports;

   public:
   bool isSetLastRptRequested() const { return fieldLastRptRequested.offset >= 0; }
   FieldLastRptRequested::ValueType getLastRptRequested() const { return fieldLastRptRequested.getValue( buf ); }
   const char * ptrToLastRptRequested() const { return buf + fieldLastRptRequested.offset; }
   private: FieldLastRptRequested fieldLastRptRequested;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetNoPositions() const { return fieldNoPositions.offset >= 0; }
   FieldNoPositions::ValueType getNoPositions() const { return fieldNoPositions.getValue( buf ); }
   const char * ptrToNoPositions() const { return buf + fieldNoPositions.offset; }
   private: FieldNoPositions fieldNoPositions;
  
   public:
   std::size_t getGroupCountPositions() const { return groupsPositions.size(); } 
   const GroupPositions & getGroupPositions( std::size_t idx ) const { return groupsPositions[ idx ]; } 
   private: GroupPositions::Array groupsPositions{ 10 };

   public:
   bool isSetNoPosAmt() const { return fieldNoPosAmt.offset >= 0; }
   FieldNoPosAmt::ValueType getNoPosAmt() const { return fieldNoPosAmt.getValue( buf ); }
   const char * ptrToNoPosAmt() const { return buf + fieldNoPosAmt.offset; }
   private: FieldNoPosAmt fieldNoPosAmt;
  
   public:
   std::size_t getGroupCountPosAmt() const { return groupsPosAmt.size(); } 
   const GroupPosAmt & getGroupPosAmt( std::size_t idx ) const { return groupsPosAmt[ idx ]; } 
   private: GroupPosAmt::Array groupsPosAmt{ 10 };

   public:
   bool isSetThresholdAmount() const { return fieldThresholdAmount.offset >= 0; }
   FieldThresholdAmount::ValueType getThresholdAmount() const { return fieldThresholdAmount.getValue( buf ); }
   const char * ptrToThresholdAmount() const { return buf + fieldThresholdAmount.offset; }
   private: FieldThresholdAmount fieldThresholdAmount;

   public:
   bool isSetSettlPrice() const { return fieldSettlPrice.offset >= 0; }
   FieldSettlPrice::ValueType getSettlPrice() const { return fieldSettlPrice.getValue( buf ); }
   const char * ptrToSettlPrice() const { return buf + fieldSettlPrice.offset; }
   private: FieldSettlPrice fieldSettlPrice;

   public:
   bool isSetSettlPriceType() const { return fieldSettlPriceType.offset >= 0; }
   FieldSettlPriceType::ValueType getSettlPriceType() const { return fieldSettlPriceType.getValue( buf ); }
   const char * ptrToSettlPriceType() const { return buf + fieldSettlPriceType.offset; }
   private: FieldSettlPriceType fieldSettlPriceType;

   public:
   bool isSetUnderlyingSettlPrice() const { return fieldUnderlyingSettlPrice.offset >= 0; }
   FieldUnderlyingSettlPrice::ValueType getUnderlyingSettlPrice() const { return fieldUnderlyingSettlPrice.getValue( buf ); }
   const char * ptrToUnderlyingSettlPrice() const { return buf + fieldUnderlyingSettlPrice.offset; }
   private: FieldUnderlyingSettlPrice fieldUnderlyingSettlPrice;

   public:
   bool isSetExpireDate() const { return fieldExpireDate.offset >= 0; }
   FieldExpireDate::ValueType getExpireDate() const { return fieldExpireDate.getValue( buf ); }
   const char * ptrToExpireDate() const { return buf + fieldExpireDate.offset; }
   private: FieldExpireDate fieldExpireDate;

   public:
   bool isSetAssignmentMethod() const { return fieldAssignmentMethod.offset >= 0; }
   FieldAssignmentMethod::ValueType getAssignmentMethod() const { return fieldAssignmentMethod.getValue( buf ); }
   const char * ptrToAssignmentMethod() const { return buf + fieldAssignmentMethod.offset; }
   private: FieldAssignmentMethod fieldAssignmentMethod;

   public:
   bool isSetAssignmentUnit() const { return fieldAssignmentUnit.offset >= 0; }
   FieldAssignmentUnit::ValueType getAssignmentUnit() const { return fieldAssignmentUnit.getValue( buf ); }
   const char * ptrToAssignmentUnit() const { return buf + fieldAssignmentUnit.offset; }
   private: FieldAssignmentUnit fieldAssignmentUnit;

   public:
   bool isSetOpenInterest() const { return fieldOpenInterest.offset >= 0; }
   FieldOpenInterest::ValueType getOpenInterest() const { return fieldOpenInterest.getValue( buf ); }
   const char * ptrToOpenInterest() const { return buf + fieldOpenInterest.offset; }
   private: FieldOpenInterest fieldOpenInterest;

   public:
   bool isSetExerciseMethod() const { return fieldExerciseMethod.offset >= 0; }
   FieldExerciseMethod::ValueType getExerciseMethod() const { return fieldExerciseMethod.getValue( buf ); }
   const char * ptrToExerciseMethod() const { return buf + fieldExerciseMethod.offset; }
   private: FieldExerciseMethod fieldExerciseMethod;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageCollateralRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetCollReqID() const { return fieldCollReqID.offset >= 0; }
   FieldCollReqID::ValueType getCollReqID() const { return fieldCollReqID.getValue( buf ); }
   const char * ptrToCollReqID() const { return buf + fieldCollReqID.offset; }
   private: FieldCollReqID fieldCollReqID;

   public:
   bool isSetCollAsgnReason() const { return fieldCollAsgnReason.offset >= 0; }
   FieldCollAsgnReason::ValueType getCollAsgnReason() const { return fieldCollAsgnReason.getValue( buf ); }
   const char * ptrToCollAsgnReason() const { return buf + fieldCollAsgnReason.offset; }
   private: FieldCollAsgnReason fieldCollAsgnReason;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetNoExecs() const { return fieldNoExecs.offset >= 0; }
   FieldNoExecs::ValueType getNoExecs() const { return fieldNoExecs.getValue( buf ); }
   const char * ptrToNoExecs() const { return buf + fieldNoExecs.offset; }
   private: FieldNoExecs fieldNoExecs;
  
   public:
   std::size_t getGroupCountExecs() const { return groupsExecs.size(); } 
   const GroupExecs & getGroupExecs( std::size_t idx ) const { return groupsExecs[ idx ]; } 
   private: GroupExecs::Array groupsExecs{ 10 };

   public:
   bool isSetNoTrades() const { return fieldNoTrades.offset >= 0; }
   FieldNoTrades::ValueType getNoTrades() const { return fieldNoTrades.getValue( buf ); }
   const char * ptrToNoTrades() const { return buf + fieldNoTrades.offset; }
   private: FieldNoTrades fieldNoTrades;
  
   public:
   std::size_t getGroupCountTrades() const { return groupsTrades.size(); } 
   const GroupTrades & getGroupTrades( std::size_t idx ) const { return groupsTrades[ idx ]; } 
   private: GroupTrades::Array groupsTrades{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetMarginExcess() const { return fieldMarginExcess.offset >= 0; }
   FieldMarginExcess::ValueType getMarginExcess() const { return fieldMarginExcess.getValue( buf ); }
   const char * ptrToMarginExcess() const { return buf + fieldMarginExcess.offset; }
   private: FieldMarginExcess fieldMarginExcess;

   public:
   bool isSetTotalNetValue() const { return fieldTotalNetValue.offset >= 0; }
   FieldTotalNetValue::ValueType getTotalNetValue() const { return fieldTotalNetValue.getValue( buf ); }
   const char * ptrToTotalNetValue() const { return buf + fieldTotalNetValue.offset; }
   private: FieldTotalNetValue fieldTotalNetValue;

   public:
   bool isSetCashOutstanding() const { return fieldCashOutstanding.offset >= 0; }
   FieldCashOutstanding::ValueType getCashOutstanding() const { return fieldCashOutstanding.getValue( buf ); }
   const char * ptrToCashOutstanding() const { return buf + fieldCashOutstanding.offset; }
   private: FieldCashOutstanding fieldCashOutstanding;

   public:
   bool isSetNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.offset >= 0; }
   FieldNoTrdRegTimestamps::ValueType getNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.getValue( buf ); }
   const char * ptrToNoTrdRegTimestamps() const { return buf + fieldNoTrdRegTimestamps.offset; }
   private: FieldNoTrdRegTimestamps fieldNoTrdRegTimestamps;
  
   public:
   std::size_t getGroupCountTrdRegTimestamps() const { return groupsTrdRegTimestamps.size(); } 
   const GroupTrdRegTimestamps & getGroupTrdRegTimestamps( std::size_t idx ) const { return groupsTrdRegTimestamps[ idx ]; } 
   private: GroupTrdRegTimestamps::Array groupsTrdRegTimestamps{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetNoMiscFees() const { return fieldNoMiscFees.offset >= 0; }
   FieldNoMiscFees::ValueType getNoMiscFees() const { return fieldNoMiscFees.getValue( buf ); }
   const char * ptrToNoMiscFees() const { return buf + fieldNoMiscFees.offset; }
   private: FieldNoMiscFees fieldNoMiscFees;
  
   public:
   std::size_t getGroupCountMiscFees() const { return groupsMiscFees.size(); } 
   const GroupMiscFees & getGroupMiscFees( std::size_t idx ) const { return groupsMiscFees[ idx ]; } 
   private: GroupMiscFees::Array groupsMiscFees{ 10 };

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageCollateralAssignment: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetCollAsgnID() const { return fieldCollAsgnID.offset >= 0; }
   FieldCollAsgnID::ValueType getCollAsgnID() const { return fieldCollAsgnID.getValue( buf ); }
   const char * ptrToCollAsgnID() const { return buf + fieldCollAsgnID.offset; }
   private: FieldCollAsgnID fieldCollAsgnID;

   public:
   bool isSetCollReqID() const { return fieldCollReqID.offset >= 0; }
   FieldCollReqID::ValueType getCollReqID() const { return fieldCollReqID.getValue( buf ); }
   const char * ptrToCollReqID() const { return buf + fieldCollReqID.offset; }
   private: FieldCollReqID fieldCollReqID;

   public:
   bool isSetCollAsgnReason() const { return fieldCollAsgnReason.offset >= 0; }
   FieldCollAsgnReason::ValueType getCollAsgnReason() const { return fieldCollAsgnReason.getValue( buf ); }
   const char * ptrToCollAsgnReason() const { return buf + fieldCollAsgnReason.offset; }
   private: FieldCollAsgnReason fieldCollAsgnReason;

   public:
   bool isSetCollAsgnTransType() const { return fieldCollAsgnTransType.offset >= 0; }
   FieldCollAsgnTransType::ValueType getCollAsgnTransType() const { return fieldCollAsgnTransType.getValue( buf ); }
   const char * ptrToCollAsgnTransType() const { return buf + fieldCollAsgnTransType.offset; }
   private: FieldCollAsgnTransType fieldCollAsgnTransType;

   public:
   bool isSetCollAsgnRefID() const { return fieldCollAsgnRefID.offset >= 0; }
   FieldCollAsgnRefID::ValueType getCollAsgnRefID() const { return fieldCollAsgnRefID.getValue( buf ); }
   const char * ptrToCollAsgnRefID() const { return buf + fieldCollAsgnRefID.offset; }
   private: FieldCollAsgnRefID fieldCollAsgnRefID;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetExpireTime() const { return fieldExpireTime.offset >= 0; }
   FieldExpireTime::ValueType getExpireTime() const { return fieldExpireTime.getValue( buf ); }
   const char * ptrToExpireTime() const { return buf + fieldExpireTime.offset; }
   private: FieldExpireTime fieldExpireTime;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetNoExecs() const { return fieldNoExecs.offset >= 0; }
   FieldNoExecs::ValueType getNoExecs() const { return fieldNoExecs.getValue( buf ); }
   const char * ptrToNoExecs() const { return buf + fieldNoExecs.offset; }
   private: FieldNoExecs fieldNoExecs;
  
   public:
   std::size_t getGroupCountExecs() const { return groupsExecs.size(); } 
   const GroupExecs & getGroupExecs( std::size_t idx ) const { return groupsExecs[ idx ]; } 
   private: GroupExecs::Array groupsExecs{ 10 };

   public:
   bool isSetNoTrades() const { return fieldNoTrades.offset >= 0; }
   FieldNoTrades::ValueType getNoTrades() const { return fieldNoTrades.getValue( buf ); }
   const char * ptrToNoTrades() const { return buf + fieldNoTrades.offset; }
   private: FieldNoTrades fieldNoTrades;
  
   public:
   std::size_t getGroupCountTrades() const { return groupsTrades.size(); } 
   const GroupTrades & getGroupTrades( std::size_t idx ) const { return groupsTrades[ idx ]; } 
   private: GroupTrades::Array groupsTrades{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetMarginExcess() const { return fieldMarginExcess.offset >= 0; }
   FieldMarginExcess::ValueType getMarginExcess() const { return fieldMarginExcess.getValue( buf ); }
   const char * ptrToMarginExcess() const { return buf + fieldMarginExcess.offset; }
   private: FieldMarginExcess fieldMarginExcess;

   public:
   bool isSetTotalNetValue() const { return fieldTotalNetValue.offset >= 0; }
   FieldTotalNetValue::ValueType getTotalNetValue() const { return fieldTotalNetValue.getValue( buf ); }
   const char * ptrToTotalNetValue() const { return buf + fieldTotalNetValue.offset; }
   private: FieldTotalNetValue fieldTotalNetValue;

   public:
   bool isSetCashOutstanding() const { return fieldCashOutstanding.offset >= 0; }
   FieldCashOutstanding::ValueType getCashOutstanding() const { return fieldCashOutstanding.getValue( buf ); }
   const char * ptrToCashOutstanding() const { return buf + fieldCashOutstanding.offset; }
   private: FieldCashOutstanding fieldCashOutstanding;

   public:
   bool isSetNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.offset >= 0; }
   FieldNoTrdRegTimestamps::ValueType getNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.getValue( buf ); }
   const char * ptrToNoTrdRegTimestamps() const { return buf + fieldNoTrdRegTimestamps.offset; }
   private: FieldNoTrdRegTimestamps fieldNoTrdRegTimestamps;
  
   public:
   std::size_t getGroupCountTrdRegTimestamps() const { return groupsTrdRegTimestamps.size(); } 
   const GroupTrdRegTimestamps & getGroupTrdRegTimestamps( std::size_t idx ) const { return groupsTrdRegTimestamps[ idx ]; } 
   private: GroupTrdRegTimestamps::Array groupsTrdRegTimestamps{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetNoMiscFees() const { return fieldNoMiscFees.offset >= 0; }
   FieldNoMiscFees::ValueType getNoMiscFees() const { return fieldNoMiscFees.getValue( buf ); }
   const char * ptrToNoMiscFees() const { return buf + fieldNoMiscFees.offset; }
   private: FieldNoMiscFees fieldNoMiscFees;
  
   public:
   std::size_t getGroupCountMiscFees() const { return groupsMiscFees.size(); } 
   const GroupMiscFees & getGroupMiscFees( std::size_t idx ) const { return groupsMiscFees[ idx ]; } 
   private: GroupMiscFees::Array groupsMiscFees{ 10 };

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetSettlDeliveryType() const { return fieldSettlDeliveryType.offset >= 0; }
   FieldSettlDeliveryType::ValueType getSettlDeliveryType() const { return fieldSettlDeliveryType.getValue( buf ); }
   const char * ptrToSettlDeliveryType() const { return buf + fieldSettlDeliveryType.offset; }
   private: FieldSettlDeliveryType fieldSettlDeliveryType;

   public:
   bool isSetStandInstDbType() const { return fieldStandInstDbType.offset >= 0; }
   FieldStandInstDbType::ValueType getStandInstDbType() const { return fieldStandInstDbType.getValue( buf ); }
   const char * ptrToStandInstDbType() const { return buf + fieldStandInstDbType.offset; }
   private: FieldStandInstDbType fieldStandInstDbType;

   public:
   bool isSetStandInstDbName() const { return fieldStandInstDbName.offset >= 0; }
   FieldStandInstDbName::ValueType getStandInstDbName() const { return fieldStandInstDbName.getValue( buf ); }
   const char * ptrToStandInstDbName() const { return buf + fieldStandInstDbName.offset; }
   private: FieldStandInstDbName fieldStandInstDbName;

   public:
   bool isSetStandInstDbID() const { return fieldStandInstDbID.offset >= 0; }
   FieldStandInstDbID::ValueType getStandInstDbID() const { return fieldStandInstDbID.getValue( buf ); }
   const char * ptrToStandInstDbID() const { return buf + fieldStandInstDbID.offset; }
   private: FieldStandInstDbID fieldStandInstDbID;

   public:
   bool isSetNoDlvyInst() const { return fieldNoDlvyInst.offset >= 0; }
   FieldNoDlvyInst::ValueType getNoDlvyInst() const { return fieldNoDlvyInst.getValue( buf ); }
   const char * ptrToNoDlvyInst() const { return buf + fieldNoDlvyInst.offset; }
   private: FieldNoDlvyInst fieldNoDlvyInst;
  
   public:
   std::size_t getGroupCountDlvyInst() const { return groupsDlvyInst.size(); } 
   const GroupDlvyInst & getGroupDlvyInst( std::size_t idx ) const { return groupsDlvyInst[ idx ]; } 
   private: GroupDlvyInst::Array groupsDlvyInst{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageCollateralResponse: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetCollRespID() const { return fieldCollRespID.offset >= 0; }
   FieldCollRespID::ValueType getCollRespID() const { return fieldCollRespID.getValue( buf ); }
   const char * ptrToCollRespID() const { return buf + fieldCollRespID.offset; }
   private: FieldCollRespID fieldCollRespID;

   public:
   bool isSetCollAsgnID() const { return fieldCollAsgnID.offset >= 0; }
   FieldCollAsgnID::ValueType getCollAsgnID() const { return fieldCollAsgnID.getValue( buf ); }
   const char * ptrToCollAsgnID() const { return buf + fieldCollAsgnID.offset; }
   private: FieldCollAsgnID fieldCollAsgnID;

   public:
   bool isSetCollReqID() const { return fieldCollReqID.offset >= 0; }
   FieldCollReqID::ValueType getCollReqID() const { return fieldCollReqID.getValue( buf ); }
   const char * ptrToCollReqID() const { return buf + fieldCollReqID.offset; }
   private: FieldCollReqID fieldCollReqID;

   public:
   bool isSetCollAsgnReason() const { return fieldCollAsgnReason.offset >= 0; }
   FieldCollAsgnReason::ValueType getCollAsgnReason() const { return fieldCollAsgnReason.getValue( buf ); }
   const char * ptrToCollAsgnReason() const { return buf + fieldCollAsgnReason.offset; }
   private: FieldCollAsgnReason fieldCollAsgnReason;

   public:
   bool isSetCollAsgnTransType() const { return fieldCollAsgnTransType.offset >= 0; }
   FieldCollAsgnTransType::ValueType getCollAsgnTransType() const { return fieldCollAsgnTransType.getValue( buf ); }
   const char * ptrToCollAsgnTransType() const { return buf + fieldCollAsgnTransType.offset; }
   private: FieldCollAsgnTransType fieldCollAsgnTransType;

   public:
   bool isSetCollAsgnRespType() const { return fieldCollAsgnRespType.offset >= 0; }
   FieldCollAsgnRespType::ValueType getCollAsgnRespType() const { return fieldCollAsgnRespType.getValue( buf ); }
   const char * ptrToCollAsgnRespType() const { return buf + fieldCollAsgnRespType.offset; }
   private: FieldCollAsgnRespType fieldCollAsgnRespType;

   public:
   bool isSetCollAsgnRejectReason() const { return fieldCollAsgnRejectReason.offset >= 0; }
   FieldCollAsgnRejectReason::ValueType getCollAsgnRejectReason() const { return fieldCollAsgnRejectReason.getValue( buf ); }
   const char * ptrToCollAsgnRejectReason() const { return buf + fieldCollAsgnRejectReason.offset; }
   private: FieldCollAsgnRejectReason fieldCollAsgnRejectReason;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetNoExecs() const { return fieldNoExecs.offset >= 0; }
   FieldNoExecs::ValueType getNoExecs() const { return fieldNoExecs.getValue( buf ); }
   const char * ptrToNoExecs() const { return buf + fieldNoExecs.offset; }
   private: FieldNoExecs fieldNoExecs;
  
   public:
   std::size_t getGroupCountExecs() const { return groupsExecs.size(); } 
   const GroupExecs & getGroupExecs( std::size_t idx ) const { return groupsExecs[ idx ]; } 
   private: GroupExecs::Array groupsExecs{ 10 };

   public:
   bool isSetNoTrades() const { return fieldNoTrades.offset >= 0; }
   FieldNoTrades::ValueType getNoTrades() const { return fieldNoTrades.getValue( buf ); }
   const char * ptrToNoTrades() const { return buf + fieldNoTrades.offset; }
   private: FieldNoTrades fieldNoTrades;
  
   public:
   std::size_t getGroupCountTrades() const { return groupsTrades.size(); } 
   const GroupTrades & getGroupTrades( std::size_t idx ) const { return groupsTrades[ idx ]; } 
   private: GroupTrades::Array groupsTrades{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetMarginExcess() const { return fieldMarginExcess.offset >= 0; }
   FieldMarginExcess::ValueType getMarginExcess() const { return fieldMarginExcess.getValue( buf ); }
   const char * ptrToMarginExcess() const { return buf + fieldMarginExcess.offset; }
   private: FieldMarginExcess fieldMarginExcess;

   public:
   bool isSetTotalNetValue() const { return fieldTotalNetValue.offset >= 0; }
   FieldTotalNetValue::ValueType getTotalNetValue() const { return fieldTotalNetValue.getValue( buf ); }
   const char * ptrToTotalNetValue() const { return buf + fieldTotalNetValue.offset; }
   private: FieldTotalNetValue fieldTotalNetValue;

   public:
   bool isSetCashOutstanding() const { return fieldCashOutstanding.offset >= 0; }
   FieldCashOutstanding::ValueType getCashOutstanding() const { return fieldCashOutstanding.getValue( buf ); }
   const char * ptrToCashOutstanding() const { return buf + fieldCashOutstanding.offset; }
   private: FieldCashOutstanding fieldCashOutstanding;

   public:
   bool isSetNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.offset >= 0; }
   FieldNoTrdRegTimestamps::ValueType getNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.getValue( buf ); }
   const char * ptrToNoTrdRegTimestamps() const { return buf + fieldNoTrdRegTimestamps.offset; }
   private: FieldNoTrdRegTimestamps fieldNoTrdRegTimestamps;
  
   public:
   std::size_t getGroupCountTrdRegTimestamps() const { return groupsTrdRegTimestamps.size(); } 
   const GroupTrdRegTimestamps & getGroupTrdRegTimestamps( std::size_t idx ) const { return groupsTrdRegTimestamps[ idx ]; } 
   private: GroupTrdRegTimestamps::Array groupsTrdRegTimestamps{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetNoMiscFees() const { return fieldNoMiscFees.offset >= 0; }
   FieldNoMiscFees::ValueType getNoMiscFees() const { return fieldNoMiscFees.getValue( buf ); }
   const char * ptrToNoMiscFees() const { return buf + fieldNoMiscFees.offset; }
   private: FieldNoMiscFees fieldNoMiscFees;
  
   public:
   std::size_t getGroupCountMiscFees() const { return groupsMiscFees.size(); } 
   const GroupMiscFees & getGroupMiscFees( std::size_t idx ) const { return groupsMiscFees[ idx ]; } 
   private: GroupMiscFees::Array groupsMiscFees{ 10 };

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageCollateralReport: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetCollRptID() const { return fieldCollRptID.offset >= 0; }
   FieldCollRptID::ValueType getCollRptID() const { return fieldCollRptID.getValue( buf ); }
   const char * ptrToCollRptID() const { return buf + fieldCollRptID.offset; }
   private: FieldCollRptID fieldCollRptID;

   public:
   bool isSetCollInquiryID() const { return fieldCollInquiryID.offset >= 0; }
   FieldCollInquiryID::ValueType getCollInquiryID() const { return fieldCollInquiryID.getValue( buf ); }
   const char * ptrToCollInquiryID() const { return buf + fieldCollInquiryID.offset; }
   private: FieldCollInquiryID fieldCollInquiryID;

   public:
   bool isSetCollStatus() const { return fieldCollStatus.offset >= 0; }
   FieldCollStatus::ValueType getCollStatus() const { return fieldCollStatus.getValue( buf ); }
   const char * ptrToCollStatus() const { return buf + fieldCollStatus.offset; }
   private: FieldCollStatus fieldCollStatus;

   public:
   bool isSetTotNumReports() const { return fieldTotNumReports.offset >= 0; }
   FieldTotNumReports::ValueType getTotNumReports() const { return fieldTotNumReports.getValue( buf ); }
   const char * ptrToTotNumReports() const { return buf + fieldTotNumReports.offset; }
   private: FieldTotNumReports fieldTotNumReports;

   public:
   bool isSetLastRptRequested() const { return fieldLastRptRequested.offset >= 0; }
   FieldLastRptRequested::ValueType getLastRptRequested() const { return fieldLastRptRequested.getValue( buf ); }
   const char * ptrToLastRptRequested() const { return buf + fieldLastRptRequested.offset; }
   private: FieldLastRptRequested fieldLastRptRequested;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetNoExecs() const { return fieldNoExecs.offset >= 0; }
   FieldNoExecs::ValueType getNoExecs() const { return fieldNoExecs.getValue( buf ); }
   const char * ptrToNoExecs() const { return buf + fieldNoExecs.offset; }
   private: FieldNoExecs fieldNoExecs;
  
   public:
   std::size_t getGroupCountExecs() const { return groupsExecs.size(); } 
   const GroupExecs & getGroupExecs( std::size_t idx ) const { return groupsExecs[ idx ]; } 
   private: GroupExecs::Array groupsExecs{ 10 };

   public:
   bool isSetNoTrades() const { return fieldNoTrades.offset >= 0; }
   FieldNoTrades::ValueType getNoTrades() const { return fieldNoTrades.getValue( buf ); }
   const char * ptrToNoTrades() const { return buf + fieldNoTrades.offset; }
   private: FieldNoTrades fieldNoTrades;
  
   public:
   std::size_t getGroupCountTrades() const { return groupsTrades.size(); } 
   const GroupTrades & getGroupTrades( std::size_t idx ) const { return groupsTrades[ idx ]; } 
   private: GroupTrades::Array groupsTrades{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetMarginExcess() const { return fieldMarginExcess.offset >= 0; }
   FieldMarginExcess::ValueType getMarginExcess() const { return fieldMarginExcess.getValue( buf ); }
   const char * ptrToMarginExcess() const { return buf + fieldMarginExcess.offset; }
   private: FieldMarginExcess fieldMarginExcess;

   public:
   bool isSetTotalNetValue() const { return fieldTotalNetValue.offset >= 0; }
   FieldTotalNetValue::ValueType getTotalNetValue() const { return fieldTotalNetValue.getValue( buf ); }
   const char * ptrToTotalNetValue() const { return buf + fieldTotalNetValue.offset; }
   private: FieldTotalNetValue fieldTotalNetValue;

   public:
   bool isSetCashOutstanding() const { return fieldCashOutstanding.offset >= 0; }
   FieldCashOutstanding::ValueType getCashOutstanding() const { return fieldCashOutstanding.getValue( buf ); }
   const char * ptrToCashOutstanding() const { return buf + fieldCashOutstanding.offset; }
   private: FieldCashOutstanding fieldCashOutstanding;

   public:
   bool isSetNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.offset >= 0; }
   FieldNoTrdRegTimestamps::ValueType getNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.getValue( buf ); }
   const char * ptrToNoTrdRegTimestamps() const { return buf + fieldNoTrdRegTimestamps.offset; }
   private: FieldNoTrdRegTimestamps fieldNoTrdRegTimestamps;
  
   public:
   std::size_t getGroupCountTrdRegTimestamps() const { return groupsTrdRegTimestamps.size(); } 
   const GroupTrdRegTimestamps & getGroupTrdRegTimestamps( std::size_t idx ) const { return groupsTrdRegTimestamps[ idx ]; } 
   private: GroupTrdRegTimestamps::Array groupsTrdRegTimestamps{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetNoMiscFees() const { return fieldNoMiscFees.offset >= 0; }
   FieldNoMiscFees::ValueType getNoMiscFees() const { return fieldNoMiscFees.getValue( buf ); }
   const char * ptrToNoMiscFees() const { return buf + fieldNoMiscFees.offset; }
   private: FieldNoMiscFees fieldNoMiscFees;
  
   public:
   std::size_t getGroupCountMiscFees() const { return groupsMiscFees.size(); } 
   const GroupMiscFees & getGroupMiscFees( std::size_t idx ) const { return groupsMiscFees[ idx ]; } 
   private: GroupMiscFees::Array groupsMiscFees{ 10 };

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetSettlDeliveryType() const { return fieldSettlDeliveryType.offset >= 0; }
   FieldSettlDeliveryType::ValueType getSettlDeliveryType() const { return fieldSettlDeliveryType.getValue( buf ); }
   const char * ptrToSettlDeliveryType() const { return buf + fieldSettlDeliveryType.offset; }
   private: FieldSettlDeliveryType fieldSettlDeliveryType;

   public:
   bool isSetStandInstDbType() const { return fieldStandInstDbType.offset >= 0; }
   FieldStandInstDbType::ValueType getStandInstDbType() const { return fieldStandInstDbType.getValue( buf ); }
   const char * ptrToStandInstDbType() const { return buf + fieldStandInstDbType.offset; }
   private: FieldStandInstDbType fieldStandInstDbType;

   public:
   bool isSetStandInstDbName() const { return fieldStandInstDbName.offset >= 0; }
   FieldStandInstDbName::ValueType getStandInstDbName() const { return fieldStandInstDbName.getValue( buf ); }
   const char * ptrToStandInstDbName() const { return buf + fieldStandInstDbName.offset; }
   private: FieldStandInstDbName fieldStandInstDbName;

   public:
   bool isSetStandInstDbID() const { return fieldStandInstDbID.offset >= 0; }
   FieldStandInstDbID::ValueType getStandInstDbID() const { return fieldStandInstDbID.getValue( buf ); }
   const char * ptrToStandInstDbID() const { return buf + fieldStandInstDbID.offset; }
   private: FieldStandInstDbID fieldStandInstDbID;

   public:
   bool isSetNoDlvyInst() const { return fieldNoDlvyInst.offset >= 0; }
   FieldNoDlvyInst::ValueType getNoDlvyInst() const { return fieldNoDlvyInst.getValue( buf ); }
   const char * ptrToNoDlvyInst() const { return buf + fieldNoDlvyInst.offset; }
   private: FieldNoDlvyInst fieldNoDlvyInst;
  
   public:
   std::size_t getGroupCountDlvyInst() const { return groupsDlvyInst.size(); } 
   const GroupDlvyInst & getGroupDlvyInst( std::size_t idx ) const { return groupsDlvyInst[ idx ]; } 
   private: GroupDlvyInst::Array groupsDlvyInst{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageCollateralInquiry: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetCollInquiryID() const { return fieldCollInquiryID.offset >= 0; }
   FieldCollInquiryID::ValueType getCollInquiryID() const { return fieldCollInquiryID.getValue( buf ); }
   const char * ptrToCollInquiryID() const { return buf + fieldCollInquiryID.offset; }
   private: FieldCollInquiryID fieldCollInquiryID;

   public:
   bool isSetNoCollInquiryQualifier() const { return fieldNoCollInquiryQualifier.offset >= 0; }
   FieldNoCollInquiryQualifier::ValueType getNoCollInquiryQualifier() const { return fieldNoCollInquiryQualifier.getValue( buf ); }
   const char * ptrToNoCollInquiryQualifier() const { return buf + fieldNoCollInquiryQualifier.offset; }
   private: FieldNoCollInquiryQualifier fieldNoCollInquiryQualifier;
  
   public:
   std::size_t getGroupCountCollInquiryQualifier() const { return groupsCollInquiryQualifier.size(); } 
   const GroupCollInquiryQualifier & getGroupCollInquiryQualifier( std::size_t idx ) const { return groupsCollInquiryQualifier[ idx ]; } 
   private: GroupCollInquiryQualifier::Array groupsCollInquiryQualifier{ 10 };

   public:
   bool isSetSubscriptionRequestType() const { return fieldSubscriptionRequestType.offset >= 0; }
   FieldSubscriptionRequestType::ValueType getSubscriptionRequestType() const { return fieldSubscriptionRequestType.getValue( buf ); }
   const char * ptrToSubscriptionRequestType() const { return buf + fieldSubscriptionRequestType.offset; }
   private: FieldSubscriptionRequestType fieldSubscriptionRequestType;

   public:
   bool isSetResponseTransportType() const { return fieldResponseTransportType.offset >= 0; }
   FieldResponseTransportType::ValueType getResponseTransportType() const { return fieldResponseTransportType.getValue( buf ); }
   const char * ptrToResponseTransportType() const { return buf + fieldResponseTransportType.offset; }
   private: FieldResponseTransportType fieldResponseTransportType;

   public:
   bool isSetResponseDestination() const { return fieldResponseDestination.offset >= 0; }
   FieldResponseDestination::ValueType getResponseDestination() const { return fieldResponseDestination.getValue( buf ); }
   const char * ptrToResponseDestination() const { return buf + fieldResponseDestination.offset; }
   private: FieldResponseDestination fieldResponseDestination;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetNoExecs() const { return fieldNoExecs.offset >= 0; }
   FieldNoExecs::ValueType getNoExecs() const { return fieldNoExecs.getValue( buf ); }
   const char * ptrToNoExecs() const { return buf + fieldNoExecs.offset; }
   private: FieldNoExecs fieldNoExecs;
  
   public:
   std::size_t getGroupCountExecs() const { return groupsExecs.size(); } 
   const GroupExecs & getGroupExecs( std::size_t idx ) const { return groupsExecs[ idx ]; } 
   private: GroupExecs::Array groupsExecs{ 10 };

   public:
   bool isSetNoTrades() const { return fieldNoTrades.offset >= 0; }
   FieldNoTrades::ValueType getNoTrades() const { return fieldNoTrades.getValue( buf ); }
   const char * ptrToNoTrades() const { return buf + fieldNoTrades.offset; }
   private: FieldNoTrades fieldNoTrades;
  
   public:
   std::size_t getGroupCountTrades() const { return groupsTrades.size(); } 
   const GroupTrades & getGroupTrades( std::size_t idx ) const { return groupsTrades[ idx ]; } 
   private: GroupTrades::Array groupsTrades{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetMarginExcess() const { return fieldMarginExcess.offset >= 0; }
   FieldMarginExcess::ValueType getMarginExcess() const { return fieldMarginExcess.getValue( buf ); }
   const char * ptrToMarginExcess() const { return buf + fieldMarginExcess.offset; }
   private: FieldMarginExcess fieldMarginExcess;

   public:
   bool isSetTotalNetValue() const { return fieldTotalNetValue.offset >= 0; }
   FieldTotalNetValue::ValueType getTotalNetValue() const { return fieldTotalNetValue.getValue( buf ); }
   const char * ptrToTotalNetValue() const { return buf + fieldTotalNetValue.offset; }
   private: FieldTotalNetValue fieldTotalNetValue;

   public:
   bool isSetCashOutstanding() const { return fieldCashOutstanding.offset >= 0; }
   FieldCashOutstanding::ValueType getCashOutstanding() const { return fieldCashOutstanding.getValue( buf ); }
   const char * ptrToCashOutstanding() const { return buf + fieldCashOutstanding.offset; }
   private: FieldCashOutstanding fieldCashOutstanding;

   public:
   bool isSetNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.offset >= 0; }
   FieldNoTrdRegTimestamps::ValueType getNoTrdRegTimestamps() const { return fieldNoTrdRegTimestamps.getValue( buf ); }
   const char * ptrToNoTrdRegTimestamps() const { return buf + fieldNoTrdRegTimestamps.offset; }
   private: FieldNoTrdRegTimestamps fieldNoTrdRegTimestamps;
  
   public:
   std::size_t getGroupCountTrdRegTimestamps() const { return groupsTrdRegTimestamps.size(); } 
   const GroupTrdRegTimestamps & getGroupTrdRegTimestamps( std::size_t idx ) const { return groupsTrdRegTimestamps[ idx ]; } 
   private: GroupTrdRegTimestamps::Array groupsTrdRegTimestamps{ 10 };

   public:
   bool isSetSide() const { return fieldSide.offset >= 0; }
   FieldSide::ValueType getSide() const { return fieldSide.getValue( buf ); }
   const char * ptrToSide() const { return buf + fieldSide.offset; }
   private: FieldSide fieldSide;

   public:
   bool isSetPrice() const { return fieldPrice.offset >= 0; }
   FieldPrice::ValueType getPrice() const { return fieldPrice.getValue( buf ); }
   const char * ptrToPrice() const { return buf + fieldPrice.offset; }
   private: FieldPrice fieldPrice;

   public:
   bool isSetPriceType() const { return fieldPriceType.offset >= 0; }
   FieldPriceType::ValueType getPriceType() const { return fieldPriceType.getValue( buf ); }
   const char * ptrToPriceType() const { return buf + fieldPriceType.offset; }
   private: FieldPriceType fieldPriceType;

   public:
   bool isSetAccruedInterestAmt() const { return fieldAccruedInterestAmt.offset >= 0; }
   FieldAccruedInterestAmt::ValueType getAccruedInterestAmt() const { return fieldAccruedInterestAmt.getValue( buf ); }
   const char * ptrToAccruedInterestAmt() const { return buf + fieldAccruedInterestAmt.offset; }
   private: FieldAccruedInterestAmt fieldAccruedInterestAmt;

   public:
   bool isSetEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.offset >= 0; }
   FieldEndAccruedInterestAmt::ValueType getEndAccruedInterestAmt() const { return fieldEndAccruedInterestAmt.getValue( buf ); }
   const char * ptrToEndAccruedInterestAmt() const { return buf + fieldEndAccruedInterestAmt.offset; }
   private: FieldEndAccruedInterestAmt fieldEndAccruedInterestAmt;

   public:
   bool isSetStartCash() const { return fieldStartCash.offset >= 0; }
   FieldStartCash::ValueType getStartCash() const { return fieldStartCash.getValue( buf ); }
   const char * ptrToStartCash() const { return buf + fieldStartCash.offset; }
   private: FieldStartCash fieldStartCash;

   public:
   bool isSetEndCash() const { return fieldEndCash.offset >= 0; }
   FieldEndCash::ValueType getEndCash() const { return fieldEndCash.getValue( buf ); }
   const char * ptrToEndCash() const { return buf + fieldEndCash.offset; }
   private: FieldEndCash fieldEndCash;

   public:
   bool isSetSpread() const { return fieldSpread.offset >= 0; }
   FieldSpread::ValueType getSpread() const { return fieldSpread.getValue( buf ); }
   const char * ptrToSpread() const { return buf + fieldSpread.offset; }
   private: FieldSpread fieldSpread;

   public:
   bool isSetBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.offset >= 0; }
   FieldBenchmarkCurveCurrency::ValueType getBenchmarkCurveCurrency() const { return fieldBenchmarkCurveCurrency.getValue( buf ); }
   const char * ptrToBenchmarkCurveCurrency() const { return buf + fieldBenchmarkCurveCurrency.offset; }
   private: FieldBenchmarkCurveCurrency fieldBenchmarkCurveCurrency;

   public:
   bool isSetBenchmarkCurveName() const { return fieldBenchmarkCurveName.offset >= 0; }
   FieldBenchmarkCurveName::ValueType getBenchmarkCurveName() const { return fieldBenchmarkCurveName.getValue( buf ); }
   const char * ptrToBenchmarkCurveName() const { return buf + fieldBenchmarkCurveName.offset; }
   private: FieldBenchmarkCurveName fieldBenchmarkCurveName;

   public:
   bool isSetBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.offset >= 0; }
   FieldBenchmarkCurvePoint::ValueType getBenchmarkCurvePoint() const { return fieldBenchmarkCurvePoint.getValue( buf ); }
   const char * ptrToBenchmarkCurvePoint() const { return buf + fieldBenchmarkCurvePoint.offset; }
   private: FieldBenchmarkCurvePoint fieldBenchmarkCurvePoint;

   public:
   bool isSetBenchmarkPrice() const { return fieldBenchmarkPrice.offset >= 0; }
   FieldBenchmarkPrice::ValueType getBenchmarkPrice() const { return fieldBenchmarkPrice.getValue( buf ); }
   const char * ptrToBenchmarkPrice() const { return buf + fieldBenchmarkPrice.offset; }
   private: FieldBenchmarkPrice fieldBenchmarkPrice;

   public:
   bool isSetBenchmarkPriceType() const { return fieldBenchmarkPriceType.offset >= 0; }
   FieldBenchmarkPriceType::ValueType getBenchmarkPriceType() const { return fieldBenchmarkPriceType.getValue( buf ); }
   const char * ptrToBenchmarkPriceType() const { return buf + fieldBenchmarkPriceType.offset; }
   private: FieldBenchmarkPriceType fieldBenchmarkPriceType;

   public:
   bool isSetBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.offset >= 0; }
   FieldBenchmarkSecurityID::ValueType getBenchmarkSecurityID() const { return fieldBenchmarkSecurityID.getValue( buf ); }
   const char * ptrToBenchmarkSecurityID() const { return buf + fieldBenchmarkSecurityID.offset; }
   private: FieldBenchmarkSecurityID fieldBenchmarkSecurityID;

   public:
   bool isSetBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.offset >= 0; }
   FieldBenchmarkSecurityIDSource::ValueType getBenchmarkSecurityIDSource() const { return fieldBenchmarkSecurityIDSource.getValue( buf ); }
   const char * ptrToBenchmarkSecurityIDSource() const { return buf + fieldBenchmarkSecurityIDSource.offset; }
   private: FieldBenchmarkSecurityIDSource fieldBenchmarkSecurityIDSource;

   public:
   bool isSetNoStipulations() const { return fieldNoStipulations.offset >= 0; }
   FieldNoStipulations::ValueType getNoStipulations() const { return fieldNoStipulations.getValue( buf ); }
   const char * ptrToNoStipulations() const { return buf + fieldNoStipulations.offset; }
   private: FieldNoStipulations fieldNoStipulations;
  
   public:
   std::size_t getGroupCountStipulations() const { return groupsStipulations.size(); } 
   const GroupStipulations & getGroupStipulations( std::size_t idx ) const { return groupsStipulations[ idx ]; } 
   private: GroupStipulations::Array groupsStipulations{ 10 };

   public:
   bool isSetSettlDeliveryType() const { return fieldSettlDeliveryType.offset >= 0; }
   FieldSettlDeliveryType::ValueType getSettlDeliveryType() const { return fieldSettlDeliveryType.getValue( buf ); }
   const char * ptrToSettlDeliveryType() const { return buf + fieldSettlDeliveryType.offset; }
   private: FieldSettlDeliveryType fieldSettlDeliveryType;

   public:
   bool isSetStandInstDbType() const { return fieldStandInstDbType.offset >= 0; }
   FieldStandInstDbType::ValueType getStandInstDbType() const { return fieldStandInstDbType.getValue( buf ); }
   const char * ptrToStandInstDbType() const { return buf + fieldStandInstDbType.offset; }
   private: FieldStandInstDbType fieldStandInstDbType;

   public:
   bool isSetStandInstDbName() const { return fieldStandInstDbName.offset >= 0; }
   FieldStandInstDbName::ValueType getStandInstDbName() const { return fieldStandInstDbName.getValue( buf ); }
   const char * ptrToStandInstDbName() const { return buf + fieldStandInstDbName.offset; }
   private: FieldStandInstDbName fieldStandInstDbName;

   public:
   bool isSetStandInstDbID() const { return fieldStandInstDbID.offset >= 0; }
   FieldStandInstDbID::ValueType getStandInstDbID() const { return fieldStandInstDbID.getValue( buf ); }
   const char * ptrToStandInstDbID() const { return buf + fieldStandInstDbID.offset; }
   private: FieldStandInstDbID fieldStandInstDbID;

   public:
   bool isSetNoDlvyInst() const { return fieldNoDlvyInst.offset >= 0; }
   FieldNoDlvyInst::ValueType getNoDlvyInst() const { return fieldNoDlvyInst.getValue( buf ); }
   const char * ptrToNoDlvyInst() const { return buf + fieldNoDlvyInst.offset; }
   private: FieldNoDlvyInst fieldNoDlvyInst;
  
   public:
   std::size_t getGroupCountDlvyInst() const { return groupsDlvyInst.size(); } 
   const GroupDlvyInst & getGroupDlvyInst( std::size_t idx ) const { return groupsDlvyInst[ idx ]; } 
   private: GroupDlvyInst::Array groupsDlvyInst{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageNetworkCounterpartySystemStatusRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetNetworkRequestType() const { return fieldNetworkRequestType.offset >= 0; }
   FieldNetworkRequestType::ValueType getNetworkRequestType() const { return fieldNetworkRequestType.getValue( buf ); }
   const char * ptrToNetworkRequestType() const { return buf + fieldNetworkRequestType.offset; }
   private: FieldNetworkRequestType fieldNetworkRequestType;

   public:
   bool isSetNetworkRequestID() const { return fieldNetworkRequestID.offset >= 0; }
   FieldNetworkRequestID::ValueType getNetworkRequestID() const { return fieldNetworkRequestID.getValue( buf ); }
   const char * ptrToNetworkRequestID() const { return buf + fieldNetworkRequestID.offset; }
   private: FieldNetworkRequestID fieldNetworkRequestID;

   public:
   bool isSetNoCompIDs() const { return fieldNoCompIDs.offset >= 0; }
   FieldNoCompIDs::ValueType getNoCompIDs() const { return fieldNoCompIDs.getValue( buf ); }
   const char * ptrToNoCompIDs() const { return buf + fieldNoCompIDs.offset; }
   private: FieldNoCompIDs fieldNoCompIDs;
  
   public:
   std::size_t getGroupCountCompIDs() const { return groupsCompIDs.size(); } 
   const GroupCompIDs & getGroupCompIDs( std::size_t idx ) const { return groupsCompIDs[ idx ]; } 
   private: GroupCompIDs::Array groupsCompIDs{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageNetworkCounterpartySystemStatusResponse: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetNetworkStatusResponseType() const { return fieldNetworkStatusResponseType.offset >= 0; }
   FieldNetworkStatusResponseType::ValueType getNetworkStatusResponseType() const { return fieldNetworkStatusResponseType.getValue( buf ); }
   const char * ptrToNetworkStatusResponseType() const { return buf + fieldNetworkStatusResponseType.offset; }
   private: FieldNetworkStatusResponseType fieldNetworkStatusResponseType;

   public:
   bool isSetNetworkRequestID() const { return fieldNetworkRequestID.offset >= 0; }
   FieldNetworkRequestID::ValueType getNetworkRequestID() const { return fieldNetworkRequestID.getValue( buf ); }
   const char * ptrToNetworkRequestID() const { return buf + fieldNetworkRequestID.offset; }
   private: FieldNetworkRequestID fieldNetworkRequestID;

   public:
   bool isSetNetworkResponseID() const { return fieldNetworkResponseID.offset >= 0; }
   FieldNetworkResponseID::ValueType getNetworkResponseID() const { return fieldNetworkResponseID.getValue( buf ); }
   const char * ptrToNetworkResponseID() const { return buf + fieldNetworkResponseID.offset; }
   private: FieldNetworkResponseID fieldNetworkResponseID;

   public:
   bool isSetLastNetworkResponseID() const { return fieldLastNetworkResponseID.offset >= 0; }
   FieldLastNetworkResponseID::ValueType getLastNetworkResponseID() const { return fieldLastNetworkResponseID.getValue( buf ); }
   const char * ptrToLastNetworkResponseID() const { return buf + fieldLastNetworkResponseID.offset; }
   private: FieldLastNetworkResponseID fieldLastNetworkResponseID;

   public:
   bool isSetNoCompIDs() const { return fieldNoCompIDs.offset >= 0; }
   FieldNoCompIDs::ValueType getNoCompIDs() const { return fieldNoCompIDs.getValue( buf ); }
   const char * ptrToNoCompIDs() const { return buf + fieldNoCompIDs.offset; }
   private: FieldNoCompIDs fieldNoCompIDs;
  
   public:
   std::size_t getGroupCountCompIDs() const { return groupsCompIDs.size(); } 
   const GroupCompIDs & getGroupCompIDs( std::size_t idx ) const { return groupsCompIDs[ idx ]; } 
   private: GroupCompIDs::Array groupsCompIDs{ 10 };

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageUserRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetUserRequestID() const { return fieldUserRequestID.offset >= 0; }
   FieldUserRequestID::ValueType getUserRequestID() const { return fieldUserRequestID.getValue( buf ); }
   const char * ptrToUserRequestID() const { return buf + fieldUserRequestID.offset; }
   private: FieldUserRequestID fieldUserRequestID;

   public:
   bool isSetUserRequestType() const { return fieldUserRequestType.offset >= 0; }
   FieldUserRequestType::ValueType getUserRequestType() const { return fieldUserRequestType.getValue( buf ); }
   const char * ptrToUserRequestType() const { return buf + fieldUserRequestType.offset; }
   private: FieldUserRequestType fieldUserRequestType;

   public:
   bool isSetUsername() const { return fieldUsername.offset >= 0; }
   FieldUsername::ValueType getUsername() const { return fieldUsername.getValue( buf ); }
   const char * ptrToUsername() const { return buf + fieldUsername.offset; }
   private: FieldUsername fieldUsername;

   public:
   bool isSetPassword() const { return fieldPassword.offset >= 0; }
   FieldPassword::ValueType getPassword() const { return fieldPassword.getValue( buf ); }
   const char * ptrToPassword() const { return buf + fieldPassword.offset; }
   private: FieldPassword fieldPassword;

   public:
   bool isSetNewPassword() const { return fieldNewPassword.offset >= 0; }
   FieldNewPassword::ValueType getNewPassword() const { return fieldNewPassword.getValue( buf ); }
   const char * ptrToNewPassword() const { return buf + fieldNewPassword.offset; }
   private: FieldNewPassword fieldNewPassword;

   public:
   bool isSetRawDataLength() const { return fieldRawDataLength.offset >= 0; }
   FieldRawDataLength::ValueType getRawDataLength() const { return fieldRawDataLength.getValue( buf ); }
   const char * ptrToRawDataLength() const { return buf + fieldRawDataLength.offset; }
   private: FieldRawDataLength fieldRawDataLength;

   public:
   bool isSetRawData() const { return fieldRawData.offset >= 0; }
   FieldRawData::ValueType getRawData() const { return fieldRawData.getValue( buf ); }
   const char * ptrToRawData() const { return buf + fieldRawData.offset; }
   private: FieldRawData fieldRawData;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageUserResponse: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetUserRequestID() const { return fieldUserRequestID.offset >= 0; }
   FieldUserRequestID::ValueType getUserRequestID() const { return fieldUserRequestID.getValue( buf ); }
   const char * ptrToUserRequestID() const { return buf + fieldUserRequestID.offset; }
   private: FieldUserRequestID fieldUserRequestID;

   public:
   bool isSetUsername() const { return fieldUsername.offset >= 0; }
   FieldUsername::ValueType getUsername() const { return fieldUsername.getValue( buf ); }
   const char * ptrToUsername() const { return buf + fieldUsername.offset; }
   private: FieldUsername fieldUsername;

   public:
   bool isSetUserStatus() const { return fieldUserStatus.offset >= 0; }
   FieldUserStatus::ValueType getUserStatus() const { return fieldUserStatus.getValue( buf ); }
   const char * ptrToUserStatus() const { return buf + fieldUserStatus.offset; }
   private: FieldUserStatus fieldUserStatus;

   public:
   bool isSetUserStatusText() const { return fieldUserStatusText.offset >= 0; }
   FieldUserStatusText::ValueType getUserStatusText() const { return fieldUserStatusText.getValue( buf ); }
   const char * ptrToUserStatusText() const { return buf + fieldUserStatusText.offset; }
   private: FieldUserStatusText fieldUserStatusText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageCollateralInquiryAck: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetCollInquiryID() const { return fieldCollInquiryID.offset >= 0; }
   FieldCollInquiryID::ValueType getCollInquiryID() const { return fieldCollInquiryID.getValue( buf ); }
   const char * ptrToCollInquiryID() const { return buf + fieldCollInquiryID.offset; }
   private: FieldCollInquiryID fieldCollInquiryID;

   public:
   bool isSetCollInquiryStatus() const { return fieldCollInquiryStatus.offset >= 0; }
   FieldCollInquiryStatus::ValueType getCollInquiryStatus() const { return fieldCollInquiryStatus.getValue( buf ); }
   const char * ptrToCollInquiryStatus() const { return buf + fieldCollInquiryStatus.offset; }
   private: FieldCollInquiryStatus fieldCollInquiryStatus;

   public:
   bool isSetCollInquiryResult() const { return fieldCollInquiryResult.offset >= 0; }
   FieldCollInquiryResult::ValueType getCollInquiryResult() const { return fieldCollInquiryResult.getValue( buf ); }
   const char * ptrToCollInquiryResult() const { return buf + fieldCollInquiryResult.offset; }
   private: FieldCollInquiryResult fieldCollInquiryResult;

   public:
   bool isSetNoCollInquiryQualifier() const { return fieldNoCollInquiryQualifier.offset >= 0; }
   FieldNoCollInquiryQualifier::ValueType getNoCollInquiryQualifier() const { return fieldNoCollInquiryQualifier.getValue( buf ); }
   const char * ptrToNoCollInquiryQualifier() const { return buf + fieldNoCollInquiryQualifier.offset; }
   private: FieldNoCollInquiryQualifier fieldNoCollInquiryQualifier;
  
   public:
   std::size_t getGroupCountCollInquiryQualifier() const { return groupsCollInquiryQualifier.size(); } 
   const GroupCollInquiryQualifier & getGroupCollInquiryQualifier( std::size_t idx ) const { return groupsCollInquiryQualifier[ idx ]; } 
   private: GroupCollInquiryQualifier::Array groupsCollInquiryQualifier{ 10 };

   public:
   bool isSetTotNumReports() const { return fieldTotNumReports.offset >= 0; }
   FieldTotNumReports::ValueType getTotNumReports() const { return fieldTotNumReports.getValue( buf ); }
   const char * ptrToTotNumReports() const { return buf + fieldTotNumReports.offset; }
   private: FieldTotNumReports fieldTotNumReports;

   public:
   bool isSetNoPartyIDs() const { return fieldNoPartyIDs.offset >= 0; }
   FieldNoPartyIDs::ValueType getNoPartyIDs() const { return fieldNoPartyIDs.getValue( buf ); }
   const char * ptrToNoPartyIDs() const { return buf + fieldNoPartyIDs.offset; }
   private: FieldNoPartyIDs fieldNoPartyIDs;
  
   public:
   std::size_t getGroupCountPartyIDs() const { return groupsPartyIDs.size(); } 
   const GroupPartyIDs & getGroupPartyIDs( std::size_t idx ) const { return groupsPartyIDs[ idx ]; } 
   private: GroupPartyIDs::Array groupsPartyIDs{ 10 };

   public:
   bool isSetAccount() const { return fieldAccount.offset >= 0; }
   FieldAccount::ValueType getAccount() const { return fieldAccount.getValue( buf ); }
   const char * ptrToAccount() const { return buf + fieldAccount.offset; }
   private: FieldAccount fieldAccount;

   public:
   bool isSetAccountType() const { return fieldAccountType.offset >= 0; }
   FieldAccountType::ValueType getAccountType() const { return fieldAccountType.getValue( buf ); }
   const char * ptrToAccountType() const { return buf + fieldAccountType.offset; }
   private: FieldAccountType fieldAccountType;

   public:
   bool isSetClOrdID() const { return fieldClOrdID.offset >= 0; }
   FieldClOrdID::ValueType getClOrdID() const { return fieldClOrdID.getValue( buf ); }
   const char * ptrToClOrdID() const { return buf + fieldClOrdID.offset; }
   private: FieldClOrdID fieldClOrdID;

   public:
   bool isSetOrderID() const { return fieldOrderID.offset >= 0; }
   FieldOrderID::ValueType getOrderID() const { return fieldOrderID.getValue( buf ); }
   const char * ptrToOrderID() const { return buf + fieldOrderID.offset; }
   private: FieldOrderID fieldOrderID;

   public:
   bool isSetSecondaryOrderID() const { return fieldSecondaryOrderID.offset >= 0; }
   FieldSecondaryOrderID::ValueType getSecondaryOrderID() const { return fieldSecondaryOrderID.getValue( buf ); }
   const char * ptrToSecondaryOrderID() const { return buf + fieldSecondaryOrderID.offset; }
   private: FieldSecondaryOrderID fieldSecondaryOrderID;

   public:
   bool isSetSecondaryClOrdID() const { return fieldSecondaryClOrdID.offset >= 0; }
   FieldSecondaryClOrdID::ValueType getSecondaryClOrdID() const { return fieldSecondaryClOrdID.getValue( buf ); }
   const char * ptrToSecondaryClOrdID() const { return buf + fieldSecondaryClOrdID.offset; }
   private: FieldSecondaryClOrdID fieldSecondaryClOrdID;

   public:
   bool isSetNoExecs() const { return fieldNoExecs.offset >= 0; }
   FieldNoExecs::ValueType getNoExecs() const { return fieldNoExecs.getValue( buf ); }
   const char * ptrToNoExecs() const { return buf + fieldNoExecs.offset; }
   private: FieldNoExecs fieldNoExecs;
  
   public:
   std::size_t getGroupCountExecs() const { return groupsExecs.size(); } 
   const GroupExecs & getGroupExecs( std::size_t idx ) const { return groupsExecs[ idx ]; } 
   private: GroupExecs::Array groupsExecs{ 10 };

   public:
   bool isSetNoTrades() const { return fieldNoTrades.offset >= 0; }
   FieldNoTrades::ValueType getNoTrades() const { return fieldNoTrades.getValue( buf ); }
   const char * ptrToNoTrades() const { return buf + fieldNoTrades.offset; }
   private: FieldNoTrades fieldNoTrades;
  
   public:
   std::size_t getGroupCountTrades() const { return groupsTrades.size(); } 
   const GroupTrades & getGroupTrades( std::size_t idx ) const { return groupsTrades[ idx ]; } 
   private: GroupTrades::Array groupsTrades{ 10 };

   public:
   bool isSetSymbol() const { return fieldSymbol.offset >= 0; }
   FieldSymbol::ValueType getSymbol() const { return fieldSymbol.getValue( buf ); }
   const char * ptrToSymbol() const { return buf + fieldSymbol.offset; }
   private: FieldSymbol fieldSymbol;

   public:
   bool isSetSymbolSfx() const { return fieldSymbolSfx.offset >= 0; }
   FieldSymbolSfx::ValueType getSymbolSfx() const { return fieldSymbolSfx.getValue( buf ); }
   const char * ptrToSymbolSfx() const { return buf + fieldSymbolSfx.offset; }
   private: FieldSymbolSfx fieldSymbolSfx;

   public:
   bool isSetSecurityID() const { return fieldSecurityID.offset >= 0; }
   FieldSecurityID::ValueType getSecurityID() const { return fieldSecurityID.getValue( buf ); }
   const char * ptrToSecurityID() const { return buf + fieldSecurityID.offset; }
   private: FieldSecurityID fieldSecurityID;

   public:
   bool isSetSecurityIDSource() const { return fieldSecurityIDSource.offset >= 0; }
   FieldSecurityIDSource::ValueType getSecurityIDSource() const { return fieldSecurityIDSource.getValue( buf ); }
   const char * ptrToSecurityIDSource() const { return buf + fieldSecurityIDSource.offset; }
   private: FieldSecurityIDSource fieldSecurityIDSource;

   public:
   bool isSetNoSecurityAltID() const { return fieldNoSecurityAltID.offset >= 0; }
   FieldNoSecurityAltID::ValueType getNoSecurityAltID() const { return fieldNoSecurityAltID.getValue( buf ); }
   const char * ptrToNoSecurityAltID() const { return buf + fieldNoSecurityAltID.offset; }
   private: FieldNoSecurityAltID fieldNoSecurityAltID;
  
   public:
   std::size_t getGroupCountSecurityAltID() const { return groupsSecurityAltID.size(); } 
   const GroupSecurityAltID & getGroupSecurityAltID( std::size_t idx ) const { return groupsSecurityAltID[ idx ]; } 
   private: GroupSecurityAltID::Array groupsSecurityAltID{ 10 };

   public:
   bool isSetProduct() const { return fieldProduct.offset >= 0; }
   FieldProduct::ValueType getProduct() const { return fieldProduct.getValue( buf ); }
   const char * ptrToProduct() const { return buf + fieldProduct.offset; }
   private: FieldProduct fieldProduct;

   public:
   bool isSetCFICode() const { return fieldCFICode.offset >= 0; }
   FieldCFICode::ValueType getCFICode() const { return fieldCFICode.getValue( buf ); }
   const char * ptrToCFICode() const { return buf + fieldCFICode.offset; }
   private: FieldCFICode fieldCFICode;

   public:
   bool isSetSecurityType() const { return fieldSecurityType.offset >= 0; }
   FieldSecurityType::ValueType getSecurityType() const { return fieldSecurityType.getValue( buf ); }
   const char * ptrToSecurityType() const { return buf + fieldSecurityType.offset; }
   private: FieldSecurityType fieldSecurityType;

   public:
   bool isSetSecuritySubType() const { return fieldSecuritySubType.offset >= 0; }
   FieldSecuritySubType::ValueType getSecuritySubType() const { return fieldSecuritySubType.getValue( buf ); }
   const char * ptrToSecuritySubType() const { return buf + fieldSecuritySubType.offset; }
   private: FieldSecuritySubType fieldSecuritySubType;

   public:
   bool isSetMaturityMonthYear() const { return fieldMaturityMonthYear.offset >= 0; }
   FieldMaturityMonthYear::ValueType getMaturityMonthYear() const { return fieldMaturityMonthYear.getValue( buf ); }
   const char * ptrToMaturityMonthYear() const { return buf + fieldMaturityMonthYear.offset; }
   private: FieldMaturityMonthYear fieldMaturityMonthYear;

   public:
   bool isSetMaturityDate() const { return fieldMaturityDate.offset >= 0; }
   FieldMaturityDate::ValueType getMaturityDate() const { return fieldMaturityDate.getValue( buf ); }
   const char * ptrToMaturityDate() const { return buf + fieldMaturityDate.offset; }
   private: FieldMaturityDate fieldMaturityDate;

   public:
   bool isSetPutOrCall() const { return fieldPutOrCall.offset >= 0; }
   FieldPutOrCall::ValueType getPutOrCall() const { return fieldPutOrCall.getValue( buf ); }
   const char * ptrToPutOrCall() const { return buf + fieldPutOrCall.offset; }
   private: FieldPutOrCall fieldPutOrCall;

   public:
   bool isSetCouponPaymentDate() const { return fieldCouponPaymentDate.offset >= 0; }
   FieldCouponPaymentDate::ValueType getCouponPaymentDate() const { return fieldCouponPaymentDate.getValue( buf ); }
   const char * ptrToCouponPaymentDate() const { return buf + fieldCouponPaymentDate.offset; }
   private: FieldCouponPaymentDate fieldCouponPaymentDate;

   public:
   bool isSetIssueDate() const { return fieldIssueDate.offset >= 0; }
   FieldIssueDate::ValueType getIssueDate() const { return fieldIssueDate.getValue( buf ); }
   const char * ptrToIssueDate() const { return buf + fieldIssueDate.offset; }
   private: FieldIssueDate fieldIssueDate;

   public:
   bool isSetRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.offset >= 0; }
   FieldRepoCollateralSecurityType::ValueType getRepoCollateralSecurityType() const { return fieldRepoCollateralSecurityType.getValue( buf ); }
   const char * ptrToRepoCollateralSecurityType() const { return buf + fieldRepoCollateralSecurityType.offset; }
   private: FieldRepoCollateralSecurityType fieldRepoCollateralSecurityType;

   public:
   bool isSetRepurchaseTerm() const { return fieldRepurchaseTerm.offset >= 0; }
   FieldRepurchaseTerm::ValueType getRepurchaseTerm() const { return fieldRepurchaseTerm.getValue( buf ); }
   const char * ptrToRepurchaseTerm() const { return buf + fieldRepurchaseTerm.offset; }
   private: FieldRepurchaseTerm fieldRepurchaseTerm;

   public:
   bool isSetRepurchaseRate() const { return fieldRepurchaseRate.offset >= 0; }
   FieldRepurchaseRate::ValueType getRepurchaseRate() const { return fieldRepurchaseRate.getValue( buf ); }
   const char * ptrToRepurchaseRate() const { return buf + fieldRepurchaseRate.offset; }
   private: FieldRepurchaseRate fieldRepurchaseRate;

   public:
   bool isSetFactor() const { return fieldFactor.offset >= 0; }
   FieldFactor::ValueType getFactor() const { return fieldFactor.getValue( buf ); }
   const char * ptrToFactor() const { return buf + fieldFactor.offset; }
   private: FieldFactor fieldFactor;

   public:
   bool isSetCreditRating() const { return fieldCreditRating.offset >= 0; }
   FieldCreditRating::ValueType getCreditRating() const { return fieldCreditRating.getValue( buf ); }
   const char * ptrToCreditRating() const { return buf + fieldCreditRating.offset; }
   private: FieldCreditRating fieldCreditRating;

   public:
   bool isSetInstrRegistry() const { return fieldInstrRegistry.offset >= 0; }
   FieldInstrRegistry::ValueType getInstrRegistry() const { return fieldInstrRegistry.getValue( buf ); }
   const char * ptrToInstrRegistry() const { return buf + fieldInstrRegistry.offset; }
   private: FieldInstrRegistry fieldInstrRegistry;

   public:
   bool isSetCountryOfIssue() const { return fieldCountryOfIssue.offset >= 0; }
   FieldCountryOfIssue::ValueType getCountryOfIssue() const { return fieldCountryOfIssue.getValue( buf ); }
   const char * ptrToCountryOfIssue() const { return buf + fieldCountryOfIssue.offset; }
   private: FieldCountryOfIssue fieldCountryOfIssue;

   public:
   bool isSetStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.offset >= 0; }
   FieldStateOrProvinceOfIssue::ValueType getStateOrProvinceOfIssue() const { return fieldStateOrProvinceOfIssue.getValue( buf ); }
   const char * ptrToStateOrProvinceOfIssue() const { return buf + fieldStateOrProvinceOfIssue.offset; }
   private: FieldStateOrProvinceOfIssue fieldStateOrProvinceOfIssue;

   public:
   bool isSetLocaleOfIssue() const { return fieldLocaleOfIssue.offset >= 0; }
   FieldLocaleOfIssue::ValueType getLocaleOfIssue() const { return fieldLocaleOfIssue.getValue( buf ); }
   const char * ptrToLocaleOfIssue() const { return buf + fieldLocaleOfIssue.offset; }
   private: FieldLocaleOfIssue fieldLocaleOfIssue;

   public:
   bool isSetRedemptionDate() const { return fieldRedemptionDate.offset >= 0; }
   FieldRedemptionDate::ValueType getRedemptionDate() const { return fieldRedemptionDate.getValue( buf ); }
   const char * ptrToRedemptionDate() const { return buf + fieldRedemptionDate.offset; }
   private: FieldRedemptionDate fieldRedemptionDate;

   public:
   bool isSetStrikePrice() const { return fieldStrikePrice.offset >= 0; }
   FieldStrikePrice::ValueType getStrikePrice() const { return fieldStrikePrice.getValue( buf ); }
   const char * ptrToStrikePrice() const { return buf + fieldStrikePrice.offset; }
   private: FieldStrikePrice fieldStrikePrice;

   public:
   bool isSetStrikeCurrency() const { return fieldStrikeCurrency.offset >= 0; }
   FieldStrikeCurrency::ValueType getStrikeCurrency() const { return fieldStrikeCurrency.getValue( buf ); }
   const char * ptrToStrikeCurrency() const { return buf + fieldStrikeCurrency.offset; }
   private: FieldStrikeCurrency fieldStrikeCurrency;

   public:
   bool isSetOptAttribute() const { return fieldOptAttribute.offset >= 0; }
   FieldOptAttribute::ValueType getOptAttribute() const { return fieldOptAttribute.getValue( buf ); }
   const char * ptrToOptAttribute() const { return buf + fieldOptAttribute.offset; }
   private: FieldOptAttribute fieldOptAttribute;

   public:
   bool isSetContractMultiplier() const { return fieldContractMultiplier.offset >= 0; }
   FieldContractMultiplier::ValueType getContractMultiplier() const { return fieldContractMultiplier.getValue( buf ); }
   const char * ptrToContractMultiplier() const { return buf + fieldContractMultiplier.offset; }
   private: FieldContractMultiplier fieldContractMultiplier;

   public:
   bool isSetCouponRate() const { return fieldCouponRate.offset >= 0; }
   FieldCouponRate::ValueType getCouponRate() const { return fieldCouponRate.getValue( buf ); }
   const char * ptrToCouponRate() const { return buf + fieldCouponRate.offset; }
   private: FieldCouponRate fieldCouponRate;

   public:
   bool isSetSecurityExchange() const { return fieldSecurityExchange.offset >= 0; }
   FieldSecurityExchange::ValueType getSecurityExchange() const { return fieldSecurityExchange.getValue( buf ); }
   const char * ptrToSecurityExchange() const { return buf + fieldSecurityExchange.offset; }
   private: FieldSecurityExchange fieldSecurityExchange;

   public:
   bool isSetIssuer() const { return fieldIssuer.offset >= 0; }
   FieldIssuer::ValueType getIssuer() const { return fieldIssuer.getValue( buf ); }
   const char * ptrToIssuer() const { return buf + fieldIssuer.offset; }
   private: FieldIssuer fieldIssuer;

   public:
   bool isSetEncodedIssuerLen() const { return fieldEncodedIssuerLen.offset >= 0; }
   FieldEncodedIssuerLen::ValueType getEncodedIssuerLen() const { return fieldEncodedIssuerLen.getValue( buf ); }
   const char * ptrToEncodedIssuerLen() const { return buf + fieldEncodedIssuerLen.offset; }
   private: FieldEncodedIssuerLen fieldEncodedIssuerLen;

   public:
   bool isSetEncodedIssuer() const { return fieldEncodedIssuer.offset >= 0; }
   FieldEncodedIssuer::ValueType getEncodedIssuer() const { return fieldEncodedIssuer.getValue( buf ); }
   const char * ptrToEncodedIssuer() const { return buf + fieldEncodedIssuer.offset; }
   private: FieldEncodedIssuer fieldEncodedIssuer;

   public:
   bool isSetSecurityDesc() const { return fieldSecurityDesc.offset >= 0; }
   FieldSecurityDesc::ValueType getSecurityDesc() const { return fieldSecurityDesc.getValue( buf ); }
   const char * ptrToSecurityDesc() const { return buf + fieldSecurityDesc.offset; }
   private: FieldSecurityDesc fieldSecurityDesc;

   public:
   bool isSetEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.offset >= 0; }
   FieldEncodedSecurityDescLen::ValueType getEncodedSecurityDescLen() const { return fieldEncodedSecurityDescLen.getValue( buf ); }
   const char * ptrToEncodedSecurityDescLen() const { return buf + fieldEncodedSecurityDescLen.offset; }
   private: FieldEncodedSecurityDescLen fieldEncodedSecurityDescLen;

   public:
   bool isSetEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.offset >= 0; }
   FieldEncodedSecurityDesc::ValueType getEncodedSecurityDesc() const { return fieldEncodedSecurityDesc.getValue( buf ); }
   const char * ptrToEncodedSecurityDesc() const { return buf + fieldEncodedSecurityDesc.offset; }
   private: FieldEncodedSecurityDesc fieldEncodedSecurityDesc;

   public:
   bool isSetPool() const { return fieldPool.offset >= 0; }
   FieldPool::ValueType getPool() const { return fieldPool.getValue( buf ); }
   const char * ptrToPool() const { return buf + fieldPool.offset; }
   private: FieldPool fieldPool;

   public:
   bool isSetContractSettlMonth() const { return fieldContractSettlMonth.offset >= 0; }
   FieldContractSettlMonth::ValueType getContractSettlMonth() const { return fieldContractSettlMonth.getValue( buf ); }
   const char * ptrToContractSettlMonth() const { return buf + fieldContractSettlMonth.offset; }
   private: FieldContractSettlMonth fieldContractSettlMonth;

   public:
   bool isSetCPProgram() const { return fieldCPProgram.offset >= 0; }
   FieldCPProgram::ValueType getCPProgram() const { return fieldCPProgram.getValue( buf ); }
   const char * ptrToCPProgram() const { return buf + fieldCPProgram.offset; }
   private: FieldCPProgram fieldCPProgram;

   public:
   bool isSetCPRegType() const { return fieldCPRegType.offset >= 0; }
   FieldCPRegType::ValueType getCPRegType() const { return fieldCPRegType.getValue( buf ); }
   const char * ptrToCPRegType() const { return buf + fieldCPRegType.offset; }
   private: FieldCPRegType fieldCPRegType;

   public:
   bool isSetNoEvents() const { return fieldNoEvents.offset >= 0; }
   FieldNoEvents::ValueType getNoEvents() const { return fieldNoEvents.getValue( buf ); }
   const char * ptrToNoEvents() const { return buf + fieldNoEvents.offset; }
   private: FieldNoEvents fieldNoEvents;
  
   public:
   std::size_t getGroupCountEvents() const { return groupsEvents.size(); } 
   const GroupEvents & getGroupEvents( std::size_t idx ) const { return groupsEvents[ idx ]; } 
   private: GroupEvents::Array groupsEvents{ 10 };

   public:
   bool isSetDatedDate() const { return fieldDatedDate.offset >= 0; }
   FieldDatedDate::ValueType getDatedDate() const { return fieldDatedDate.getValue( buf ); }
   const char * ptrToDatedDate() const { return buf + fieldDatedDate.offset; }
   private: FieldDatedDate fieldDatedDate;

   public:
   bool isSetInterestAccrualDate() const { return fieldInterestAccrualDate.offset >= 0; }
   FieldInterestAccrualDate::ValueType getInterestAccrualDate() const { return fieldInterestAccrualDate.getValue( buf ); }
   const char * ptrToInterestAccrualDate() const { return buf + fieldInterestAccrualDate.offset; }
   private: FieldInterestAccrualDate fieldInterestAccrualDate;

   public:
   bool isSetAgreementDesc() const { return fieldAgreementDesc.offset >= 0; }
   FieldAgreementDesc::ValueType getAgreementDesc() const { return fieldAgreementDesc.getValue( buf ); }
   const char * ptrToAgreementDesc() const { return buf + fieldAgreementDesc.offset; }
   private: FieldAgreementDesc fieldAgreementDesc;

   public:
   bool isSetAgreementID() const { return fieldAgreementID.offset >= 0; }
   FieldAgreementID::ValueType getAgreementID() const { return fieldAgreementID.getValue( buf ); }
   const char * ptrToAgreementID() const { return buf + fieldAgreementID.offset; }
   private: FieldAgreementID fieldAgreementID;

   public:
   bool isSetAgreementDate() const { return fieldAgreementDate.offset >= 0; }
   FieldAgreementDate::ValueType getAgreementDate() const { return fieldAgreementDate.getValue( buf ); }
   const char * ptrToAgreementDate() const { return buf + fieldAgreementDate.offset; }
   private: FieldAgreementDate fieldAgreementDate;

   public:
   bool isSetAgreementCurrency() const { return fieldAgreementCurrency.offset >= 0; }
   FieldAgreementCurrency::ValueType getAgreementCurrency() const { return fieldAgreementCurrency.getValue( buf ); }
   const char * ptrToAgreementCurrency() const { return buf + fieldAgreementCurrency.offset; }
   private: FieldAgreementCurrency fieldAgreementCurrency;

   public:
   bool isSetTerminationType() const { return fieldTerminationType.offset >= 0; }
   FieldTerminationType::ValueType getTerminationType() const { return fieldTerminationType.getValue( buf ); }
   const char * ptrToTerminationType() const { return buf + fieldTerminationType.offset; }
   private: FieldTerminationType fieldTerminationType;

   public:
   bool isSetStartDate() const { return fieldStartDate.offset >= 0; }
   FieldStartDate::ValueType getStartDate() const { return fieldStartDate.getValue( buf ); }
   const char * ptrToStartDate() const { return buf + fieldStartDate.offset; }
   private: FieldStartDate fieldStartDate;

   public:
   bool isSetEndDate() const { return fieldEndDate.offset >= 0; }
   FieldEndDate::ValueType getEndDate() const { return fieldEndDate.getValue( buf ); }
   const char * ptrToEndDate() const { return buf + fieldEndDate.offset; }
   private: FieldEndDate fieldEndDate;

   public:
   bool isSetDeliveryType() const { return fieldDeliveryType.offset >= 0; }
   FieldDeliveryType::ValueType getDeliveryType() const { return fieldDeliveryType.getValue( buf ); }
   const char * ptrToDeliveryType() const { return buf + fieldDeliveryType.offset; }
   private: FieldDeliveryType fieldDeliveryType;

   public:
   bool isSetMarginRatio() const { return fieldMarginRatio.offset >= 0; }
   FieldMarginRatio::ValueType getMarginRatio() const { return fieldMarginRatio.getValue( buf ); }
   const char * ptrToMarginRatio() const { return buf + fieldMarginRatio.offset; }
   private: FieldMarginRatio fieldMarginRatio;

   public:
   bool isSetSettlDate() const { return fieldSettlDate.offset >= 0; }
   FieldSettlDate::ValueType getSettlDate() const { return fieldSettlDate.getValue( buf ); }
   const char * ptrToSettlDate() const { return buf + fieldSettlDate.offset; }
   private: FieldSettlDate fieldSettlDate;

   public:
   bool isSetQuantity() const { return fieldQuantity.offset >= 0; }
   FieldQuantity::ValueType getQuantity() const { return fieldQuantity.getValue( buf ); }
   const char * ptrToQuantity() const { return buf + fieldQuantity.offset; }
   private: FieldQuantity fieldQuantity;

   public:
   bool isSetQtyType() const { return fieldQtyType.offset >= 0; }
   FieldQtyType::ValueType getQtyType() const { return fieldQtyType.getValue( buf ); }
   const char * ptrToQtyType() const { return buf + fieldQtyType.offset; }
   private: FieldQtyType fieldQtyType;

   public:
   bool isSetCurrency() const { return fieldCurrency.offset >= 0; }
   FieldCurrency::ValueType getCurrency() const { return fieldCurrency.getValue( buf ); }
   const char * ptrToCurrency() const { return buf + fieldCurrency.offset; }
   private: FieldCurrency fieldCurrency;

   public:
   bool isSetNoLegs() const { return fieldNoLegs.offset >= 0; }
   FieldNoLegs::ValueType getNoLegs() const { return fieldNoLegs.getValue( buf ); }
   const char * ptrToNoLegs() const { return buf + fieldNoLegs.offset; }
   private: FieldNoLegs fieldNoLegs;
  
   public:
   std::size_t getGroupCountLegs() const { return groupsLegs.size(); } 
   const GroupLegs & getGroupLegs( std::size_t idx ) const { return groupsLegs[ idx ]; } 
   private: GroupLegs::Array groupsLegs{ 10 };

   public:
   bool isSetNoUnderlyings() const { return fieldNoUnderlyings.offset >= 0; }
   FieldNoUnderlyings::ValueType getNoUnderlyings() const { return fieldNoUnderlyings.getValue( buf ); }
   const char * ptrToNoUnderlyings() const { return buf + fieldNoUnderlyings.offset; }
   private: FieldNoUnderlyings fieldNoUnderlyings;
  
   public:
   std::size_t getGroupCountUnderlyings() const { return groupsUnderlyings.size(); } 
   const GroupUnderlyings & getGroupUnderlyings( std::size_t idx ) const { return groupsUnderlyings[ idx ]; } 
   private: GroupUnderlyings::Array groupsUnderlyings{ 10 };

   public:
   bool isSetTradingSessionID() const { return fieldTradingSessionID.offset >= 0; }
   FieldTradingSessionID::ValueType getTradingSessionID() const { return fieldTradingSessionID.getValue( buf ); }
   const char * ptrToTradingSessionID() const { return buf + fieldTradingSessionID.offset; }
   private: FieldTradingSessionID fieldTradingSessionID;

   public:
   bool isSetTradingSessionSubID() const { return fieldTradingSessionSubID.offset >= 0; }
   FieldTradingSessionSubID::ValueType getTradingSessionSubID() const { return fieldTradingSessionSubID.getValue( buf ); }
   const char * ptrToTradingSessionSubID() const { return buf + fieldTradingSessionSubID.offset; }
   private: FieldTradingSessionSubID fieldTradingSessionSubID;

   public:
   bool isSetSettlSessID() const { return fieldSettlSessID.offset >= 0; }
   FieldSettlSessID::ValueType getSettlSessID() const { return fieldSettlSessID.getValue( buf ); }
   const char * ptrToSettlSessID() const { return buf + fieldSettlSessID.offset; }
   private: FieldSettlSessID fieldSettlSessID;

   public:
   bool isSetSettlSessSubID() const { return fieldSettlSessSubID.offset >= 0; }
   FieldSettlSessSubID::ValueType getSettlSessSubID() const { return fieldSettlSessSubID.getValue( buf ); }
   const char * ptrToSettlSessSubID() const { return buf + fieldSettlSessSubID.offset; }
   private: FieldSettlSessSubID fieldSettlSessSubID;

   public:
   bool isSetClearingBusinessDate() const { return fieldClearingBusinessDate.offset >= 0; }
   FieldClearingBusinessDate::ValueType getClearingBusinessDate() const { return fieldClearingBusinessDate.getValue( buf ); }
   const char * ptrToClearingBusinessDate() const { return buf + fieldClearingBusinessDate.offset; }
   private: FieldClearingBusinessDate fieldClearingBusinessDate;

   public:
   bool isSetResponseTransportType() const { return fieldResponseTransportType.offset >= 0; }
   FieldResponseTransportType::ValueType getResponseTransportType() const { return fieldResponseTransportType.getValue( buf ); }
   const char * ptrToResponseTransportType() const { return buf + fieldResponseTransportType.offset; }
   private: FieldResponseTransportType fieldResponseTransportType;

   public:
   bool isSetResponseDestination() const { return fieldResponseDestination.offset >= 0; }
   FieldResponseDestination::ValueType getResponseDestination() const { return fieldResponseDestination.getValue( buf ); }
   const char * ptrToResponseDestination() const { return buf + fieldResponseDestination.offset; }
   private: FieldResponseDestination fieldResponseDestination;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};

class MessageConfirmationRequest: public MessageBase
{
  
// Methods

   public:
   static const char * getMessageName();
   static const std::string & getMessageType();
   offset_t scan( const char * fix, unsigned len );
   offset_t skip( const char * fix, unsigned len ) const;
   void reset();
   const char * getFieldValue( tag_t tag ) const;
   static FieldDepth getFieldDepth( raw_tag_t tag );
   static const std::vector<tag_t> & getKnownFields();
   private: static GetDepthMethod groupGetDepthMethods[];

// Fields

   public:
   bool isSetConfirmReqID() const { return fieldConfirmReqID.offset >= 0; }
   FieldConfirmReqID::ValueType getConfirmReqID() const { return fieldConfirmReqID.getValue( buf ); }
   const char * ptrToConfirmReqID() const { return buf + fieldConfirmReqID.offset; }
   private: FieldConfirmReqID fieldConfirmReqID;

   public:
   bool isSetConfirmType() const { return fieldConfirmType.offset >= 0; }
   FieldConfirmType::ValueType getConfirmType() const { return fieldConfirmType.getValue( buf ); }
   const char * ptrToConfirmType() const { return buf + fieldConfirmType.offset; }
   private: FieldConfirmType fieldConfirmType;

   public:
   bool isSetNoOrders() const { return fieldNoOrders.offset >= 0; }
   FieldNoOrders::ValueType getNoOrders() const { return fieldNoOrders.getValue( buf ); }
   const char * ptrToNoOrders() const { return buf + fieldNoOrders.offset; }
   private: FieldNoOrders fieldNoOrders;
  
   public:
   std::size_t getGroupCountOrders() const { return groupsOrders.size(); } 
   const GroupOrders & getGroupOrders( std::size_t idx ) const { return groupsOrders[ idx ]; } 
   private: GroupOrders::Array groupsOrders{ 10 };

   public:
   bool isSetAllocID() const { return fieldAllocID.offset >= 0; }
   FieldAllocID::ValueType getAllocID() const { return fieldAllocID.getValue( buf ); }
   const char * ptrToAllocID() const { return buf + fieldAllocID.offset; }
   private: FieldAllocID fieldAllocID;

   public:
   bool isSetSecondaryAllocID() const { return fieldSecondaryAllocID.offset >= 0; }
   FieldSecondaryAllocID::ValueType getSecondaryAllocID() const { return fieldSecondaryAllocID.getValue( buf ); }
   const char * ptrToSecondaryAllocID() const { return buf + fieldSecondaryAllocID.offset; }
   private: FieldSecondaryAllocID fieldSecondaryAllocID;

   public:
   bool isSetIndividualAllocID() const { return fieldIndividualAllocID.offset >= 0; }
   FieldIndividualAllocID::ValueType getIndividualAllocID() const { return fieldIndividualAllocID.getValue( buf ); }
   const char * ptrToIndividualAllocID() const { return buf + fieldIndividualAllocID.offset; }
   private: FieldIndividualAllocID fieldIndividualAllocID;

   public:
   bool isSetTransactTime() const { return fieldTransactTime.offset >= 0; }
   FieldTransactTime::ValueType getTransactTime() const { return fieldTransactTime.getValue( buf ); }
   const char * ptrToTransactTime() const { return buf + fieldTransactTime.offset; }
   private: FieldTransactTime fieldTransactTime;

   public:
   bool isSetAllocAccount() const { return fieldAllocAccount.offset >= 0; }
   FieldAllocAccount::ValueType getAllocAccount() const { return fieldAllocAccount.getValue( buf ); }
   const char * ptrToAllocAccount() const { return buf + fieldAllocAccount.offset; }
   private: FieldAllocAccount fieldAllocAccount;

   public:
   bool isSetAllocAcctIDSource() const { return fieldAllocAcctIDSource.offset >= 0; }
   FieldAllocAcctIDSource::ValueType getAllocAcctIDSource() const { return fieldAllocAcctIDSource.getValue( buf ); }
   const char * ptrToAllocAcctIDSource() const { return buf + fieldAllocAcctIDSource.offset; }
   private: FieldAllocAcctIDSource fieldAllocAcctIDSource;

   public:
   bool isSetAllocAccountType() const { return fieldAllocAccountType.offset >= 0; }
   FieldAllocAccountType::ValueType getAllocAccountType() const { return fieldAllocAccountType.getValue( buf ); }
   const char * ptrToAllocAccountType() const { return buf + fieldAllocAccountType.offset; }
   private: FieldAllocAccountType fieldAllocAccountType;

   public:
   bool isSetText() const { return fieldText.offset >= 0; }
   FieldText::ValueType getText() const { return fieldText.getValue( buf ); }
   const char * ptrToText() const { return buf + fieldText.offset; }
   private: FieldText fieldText;

   public:
   bool isSetEncodedTextLen() const { return fieldEncodedTextLen.offset >= 0; }
   FieldEncodedTextLen::ValueType getEncodedTextLen() const { return fieldEncodedTextLen.getValue( buf ); }
   const char * ptrToEncodedTextLen() const { return buf + fieldEncodedTextLen.offset; }
   private: FieldEncodedTextLen fieldEncodedTextLen;

   public:
   bool isSetEncodedText() const { return fieldEncodedText.offset >= 0; }
   FieldEncodedText::ValueType getEncodedText() const { return fieldEncodedText.getValue( buf ); }
   const char * ptrToEncodedText() const { return buf + fieldEncodedText.offset; }
   private: FieldEncodedText fieldEncodedText;

 
   public:
   bool isSetCheckSum() const { return fieldCheckSum.offset >= 0; }
   FieldCheckSum::ValueType getCheckSum() const { return fieldCheckSum.getValue( buf ); }
   const char * ptrToCheckSum() const { return buf + fieldCheckSum.offset; }
   private: FieldCheckSum fieldCheckSum;
};


class ParserDispatcher
{
   public:

     virtual const char * parseAndDipatch( const char * buf, unsigned len, bool resetMessage = true );

   protected:

     ParserDispatcher();

     virtual ~ParserDispatcher() = 0;

     virtual void onUnknownMessage( raw_enum_t msgType );

     virtual bool ignoreMessage( raw_enum_t msgType ) const;

     virtual void unprocessedMessage( raw_enum_t msgType, MessageBase & msg );

     inline MessageHeader & getCurrentHeader() { return _msgHeader; }

     
// dispatching
 
// onHeader will never be called


     virtual void onMessage( MessageHeader & msg );


     virtual void onMessage( MessageHeartbeat & msg );


     virtual void onMessage( MessageTestRequest & msg );


     virtual void onMessage( MessageResendRequest & msg );


     virtual void onMessage( MessageReject & msg );


     virtual void onMessage( MessageSequenceReset & msg );


     virtual void onMessage( MessageLogout & msg );


     virtual void onMessage( MessageIOI & msg );


     virtual void onMessage( MessageAdvertisement & msg );


     virtual void onMessage( MessageExecutionReport & msg );


     virtual void onMessage( MessageOrderCancelReject & msg );


     virtual void onMessage( MessageLogon & msg );


     virtual void onMessage( MessageNews & msg );


     virtual void onMessage( MessageEmail & msg );


     virtual void onMessage( MessageNewOrderSingle & msg );


     virtual void onMessage( MessageNewOrderList & msg );


     virtual void onMessage( MessageOrderCancelRequest & msg );


     virtual void onMessage( MessageOrderCancelReplaceRequest & msg );


     virtual void onMessage( MessageOrderStatusRequest & msg );


     virtual void onMessage( MessageAllocationInstruction & msg );


     virtual void onMessage( MessageListCancelRequest & msg );


     virtual void onMessage( MessageListExecute & msg );


     virtual void onMessage( MessageListStatusRequest & msg );


     virtual void onMessage( MessageListStatus & msg );


     virtual void onMessage( MessageAllocationInstructionAck & msg );


     virtual void onMessage( MessageDontKnowTrade & msg );


     virtual void onMessage( MessageQuoteRequest & msg );


     virtual void onMessage( MessageQuote & msg );


     virtual void onMessage( MessageSettlementInstructions & msg );


     virtual void onMessage( MessageMarketDataRequest & msg );


     virtual void onMessage( MessageMarketDataSnapshotFullRefresh & msg );


     virtual void onMessage( MessageMarketDataIncrementalRefresh & msg );


     virtual void onMessage( MessageMarketDataRequestReject & msg );


     virtual void onMessage( MessageQuoteCancel & msg );


     virtual void onMessage( MessageQuoteStatusRequest & msg );


     virtual void onMessage( MessageMassQuoteAcknowledgement & msg );


     virtual void onMessage( MessageSecurityDefinitionRequest & msg );


     virtual void onMessage( MessageSecurityDefinition & msg );


     virtual void onMessage( MessageSecurityStatusRequest & msg );


     virtual void onMessage( MessageSecurityStatus & msg );


     virtual void onMessage( MessageTradingSessionStatusRequest & msg );


     virtual void onMessage( MessageTradingSessionStatus & msg );


     virtual void onMessage( MessageMassQuote & msg );


     virtual void onMessage( MessageBusinessMessageReject & msg );


     virtual void onMessage( MessageBidRequest & msg );


     virtual void onMessage( MessageBidResponse & msg );


     virtual void onMessage( MessageListStrikePrice & msg );


     virtual void onMessage( MessageXMLnonFIX & msg );


     virtual void onMessage( MessageRegistrationInstructions & msg );


     virtual void onMessage( MessageRegistrationInstructionsResponse & msg );


     virtual void onMessage( MessageOrderMassCancelRequest & msg );


     virtual void onMessage( MessageOrderMassCancelReport & msg );


     virtual void onMessage( MessageNewOrderCross & msg );


     virtual void onMessage( MessageCrossOrderCancelReplaceRequest & msg );


     virtual void onMessage( MessageCrossOrderCancelRequest & msg );


     virtual void onMessage( MessageSecurityTypeRequest & msg );


     virtual void onMessage( MessageSecurityTypes & msg );


     virtual void onMessage( MessageSecurityListRequest & msg );


     virtual void onMessage( MessageSecurityList & msg );


     virtual void onMessage( MessageDerivativeSecurityListRequest & msg );


     virtual void onMessage( MessageDerivativeSecurityList & msg );


     virtual void onMessage( MessageNewOrderMultileg & msg );


     virtual void onMessage( MessageMultilegOrderCancelReplace & msg );


     virtual void onMessage( MessageTradeCaptureReportRequest & msg );


     virtual void onMessage( MessageTradeCaptureReport & msg );


     virtual void onMessage( MessageOrderMassStatusRequest & msg );


     virtual void onMessage( MessageQuoteRequestReject & msg );


     virtual void onMessage( MessageRFQRequest & msg );


     virtual void onMessage( MessageQuoteStatusReport & msg );


     virtual void onMessage( MessageQuoteResponse & msg );


     virtual void onMessage( MessageConfirmation & msg );


     virtual void onMessage( MessagePositionMaintenanceRequest & msg );


     virtual void onMessage( MessagePositionMaintenanceReport & msg );


     virtual void onMessage( MessageRequestForPositions & msg );


     virtual void onMessage( MessageRequestForPositionsAck & msg );


     virtual void onMessage( MessagePositionReport & msg );


     virtual void onMessage( MessageTradeCaptureReportRequestAck & msg );


     virtual void onMessage( MessageTradeCaptureReportAck & msg );


     virtual void onMessage( MessageAllocationReport & msg );


     virtual void onMessage( MessageAllocationReportAck & msg );


     virtual void onMessage( MessageConfirmationAck & msg );


     virtual void onMessage( MessageSettlementInstructionRequest & msg );


     virtual void onMessage( MessageAssignmentReport & msg );


     virtual void onMessage( MessageCollateralRequest & msg );


     virtual void onMessage( MessageCollateralAssignment & msg );


     virtual void onMessage( MessageCollateralResponse & msg );


     virtual void onMessage( MessageCollateralReport & msg );


     virtual void onMessage( MessageCollateralInquiry & msg );


     virtual void onMessage( MessageNetworkCounterpartySystemStatusRequest & msg );


     virtual void onMessage( MessageNetworkCounterpartySystemStatusResponse & msg );


     virtual void onMessage( MessageUserRequest & msg );


     virtual void onMessage( MessageUserResponse & msg );


     virtual void onMessage( MessageCollateralInquiryAck & msg );


     virtual void onMessage( MessageConfirmationRequest & msg );


   private:


     MessageHeader _msgHeader;


     MessageHeartbeat _msgHeartbeat;


     MessageTestRequest _msgTestRequest;


     MessageResendRequest _msgResendRequest;


     MessageReject _msgReject;


     MessageSequenceReset _msgSequenceReset;


     MessageLogout _msgLogout;


     MessageIOI _msgIOI;


     MessageAdvertisement _msgAdvertisement;


     MessageExecutionReport _msgExecutionReport;


     MessageOrderCancelReject _msgOrderCancelReject;


     MessageLogon _msgLogon;


     MessageNews _msgNews;


     MessageEmail _msgEmail;


     MessageNewOrderSingle _msgNewOrderSingle;


     MessageNewOrderList _msgNewOrderList;


     MessageOrderCancelRequest _msgOrderCancelRequest;


     MessageOrderCancelReplaceRequest _msgOrderCancelReplaceRequest;


     MessageOrderStatusRequest _msgOrderStatusRequest;


     MessageAllocationInstruction _msgAllocationInstruction;


     MessageListCancelRequest _msgListCancelRequest;


     MessageListExecute _msgListExecute;


     MessageListStatusRequest _msgListStatusRequest;


     MessageListStatus _msgListStatus;


     MessageAllocationInstructionAck _msgAllocationInstructionAck;


     MessageDontKnowTrade _msgDontKnowTrade;


     MessageQuoteRequest _msgQuoteRequest;


     MessageQuote _msgQuote;


     MessageSettlementInstructions _msgSettlementInstructions;


     MessageMarketDataRequest _msgMarketDataRequest;


     MessageMarketDataSnapshotFullRefresh _msgMarketDataSnapshotFullRefresh;


     MessageMarketDataIncrementalRefresh _msgMarketDataIncrementalRefresh;


     MessageMarketDataRequestReject _msgMarketDataRequestReject;


     MessageQuoteCancel _msgQuoteCancel;


     MessageQuoteStatusRequest _msgQuoteStatusRequest;


     MessageMassQuoteAcknowledgement _msgMassQuoteAcknowledgement;


     MessageSecurityDefinitionRequest _msgSecurityDefinitionRequest;


     MessageSecurityDefinition _msgSecurityDefinition;


     MessageSecurityStatusRequest _msgSecurityStatusRequest;


     MessageSecurityStatus _msgSecurityStatus;


     MessageTradingSessionStatusRequest _msgTradingSessionStatusRequest;


     MessageTradingSessionStatus _msgTradingSessionStatus;


     MessageMassQuote _msgMassQuote;


     MessageBusinessMessageReject _msgBusinessMessageReject;


     MessageBidRequest _msgBidRequest;


     MessageBidResponse _msgBidResponse;


     MessageListStrikePrice _msgListStrikePrice;


     MessageXMLnonFIX _msgXMLnonFIX;


     MessageRegistrationInstructions _msgRegistrationInstructions;


     MessageRegistrationInstructionsResponse _msgRegistrationInstructionsResponse;


     MessageOrderMassCancelRequest _msgOrderMassCancelRequest;


     MessageOrderMassCancelReport _msgOrderMassCancelReport;


     MessageNewOrderCross _msgNewOrderCross;


     MessageCrossOrderCancelReplaceRequest _msgCrossOrderCancelReplaceRequest;


     MessageCrossOrderCancelRequest _msgCrossOrderCancelRequest;


     MessageSecurityTypeRequest _msgSecurityTypeRequest;


     MessageSecurityTypes _msgSecurityTypes;


     MessageSecurityListRequest _msgSecurityListRequest;


     MessageSecurityList _msgSecurityList;


     MessageDerivativeSecurityListRequest _msgDerivativeSecurityListRequest;


     MessageDerivativeSecurityList _msgDerivativeSecurityList;


     MessageNewOrderMultileg _msgNewOrderMultileg;


     MessageMultilegOrderCancelReplace _msgMultilegOrderCancelReplace;


     MessageTradeCaptureReportRequest _msgTradeCaptureReportRequest;


     MessageTradeCaptureReport _msgTradeCaptureReport;


     MessageOrderMassStatusRequest _msgOrderMassStatusRequest;


     MessageQuoteRequestReject _msgQuoteRequestReject;


     MessageRFQRequest _msgRFQRequest;


     MessageQuoteStatusReport _msgQuoteStatusReport;


     MessageQuoteResponse _msgQuoteResponse;


     MessageConfirmation _msgConfirmation;


     MessagePositionMaintenanceRequest _msgPositionMaintenanceRequest;


     MessagePositionMaintenanceReport _msgPositionMaintenanceReport;


     MessageRequestForPositions _msgRequestForPositions;


     MessageRequestForPositionsAck _msgRequestForPositionsAck;


     MessagePositionReport _msgPositionReport;


     MessageTradeCaptureReportRequestAck _msgTradeCaptureReportRequestAck;


     MessageTradeCaptureReportAck _msgTradeCaptureReportAck;


     MessageAllocationReport _msgAllocationReport;


     MessageAllocationReportAck _msgAllocationReportAck;


     MessageConfirmationAck _msgConfirmationAck;


     MessageSettlementInstructionRequest _msgSettlementInstructionRequest;


     MessageAssignmentReport _msgAssignmentReport;


     MessageCollateralRequest _msgCollateralRequest;


     MessageCollateralAssignment _msgCollateralAssignment;


     MessageCollateralResponse _msgCollateralResponse;


     MessageCollateralReport _msgCollateralReport;


     MessageCollateralInquiry _msgCollateralInquiry;


     MessageNetworkCounterpartySystemStatusRequest _msgNetworkCounterpartySystemStatusRequest;


     MessageNetworkCounterpartySystemStatusResponse _msgNetworkCounterpartySystemStatusResponse;


     MessageUserRequest _msgUserRequest;


     MessageUserResponse _msgUserResponse;


     MessageCollateralInquiryAck _msgCollateralInquiryAck;


     MessageConfirmationRequest _msgConfirmationRequest;


};


// -------------------------------------- convenience message namespace ----------------------------------------
namespace message
{

typedef MessageHeader Header;


typedef MessageHeartbeat Heartbeat;


typedef MessageTestRequest TestRequest;


typedef MessageResendRequest ResendRequest;


typedef MessageReject Reject;


typedef MessageSequenceReset SequenceReset;


typedef MessageLogout Logout;


typedef MessageIOI IOI;


typedef MessageAdvertisement Advertisement;


typedef MessageExecutionReport ExecutionReport;


typedef MessageOrderCancelReject OrderCancelReject;


typedef MessageLogon Logon;


typedef MessageNews News;


typedef MessageEmail Email;


typedef MessageNewOrderSingle NewOrderSingle;


typedef MessageNewOrderList NewOrderList;


typedef MessageOrderCancelRequest OrderCancelRequest;


typedef MessageOrderCancelReplaceRequest OrderCancelReplaceRequest;


typedef MessageOrderStatusRequest OrderStatusRequest;


typedef MessageAllocationInstruction AllocationInstruction;


typedef MessageListCancelRequest ListCancelRequest;


typedef MessageListExecute ListExecute;


typedef MessageListStatusRequest ListStatusRequest;


typedef MessageListStatus ListStatus;


typedef MessageAllocationInstructionAck AllocationInstructionAck;


typedef MessageDontKnowTrade DontKnowTrade;


typedef MessageQuoteRequest QuoteRequest;


typedef MessageQuote Quote;


typedef MessageSettlementInstructions SettlementInstructions;


typedef MessageMarketDataRequest MarketDataRequest;


typedef MessageMarketDataSnapshotFullRefresh MarketDataSnapshotFullRefresh;


typedef MessageMarketDataIncrementalRefresh MarketDataIncrementalRefresh;


typedef MessageMarketDataRequestReject MarketDataRequestReject;


typedef MessageQuoteCancel QuoteCancel;


typedef MessageQuoteStatusRequest QuoteStatusRequest;


typedef MessageMassQuoteAcknowledgement MassQuoteAcknowledgement;


typedef MessageSecurityDefinitionRequest SecurityDefinitionRequest;


typedef MessageSecurityDefinition SecurityDefinition;


typedef MessageSecurityStatusRequest SecurityStatusRequest;


typedef MessageSecurityStatus SecurityStatus;


typedef MessageTradingSessionStatusRequest TradingSessionStatusRequest;


typedef MessageTradingSessionStatus TradingSessionStatus;


typedef MessageMassQuote MassQuote;


typedef MessageBusinessMessageReject BusinessMessageReject;


typedef MessageBidRequest BidRequest;


typedef MessageBidResponse BidResponse;


typedef MessageListStrikePrice ListStrikePrice;


typedef MessageXMLnonFIX XMLnonFIX;


typedef MessageRegistrationInstructions RegistrationInstructions;


typedef MessageRegistrationInstructionsResponse RegistrationInstructionsResponse;


typedef MessageOrderMassCancelRequest OrderMassCancelRequest;


typedef MessageOrderMassCancelReport OrderMassCancelReport;


typedef MessageNewOrderCross NewOrderCross;


typedef MessageCrossOrderCancelReplaceRequest CrossOrderCancelReplaceRequest;


typedef MessageCrossOrderCancelRequest CrossOrderCancelRequest;


typedef MessageSecurityTypeRequest SecurityTypeRequest;


typedef MessageSecurityTypes SecurityTypes;


typedef MessageSecurityListRequest SecurityListRequest;


typedef MessageSecurityList SecurityList;


typedef MessageDerivativeSecurityListRequest DerivativeSecurityListRequest;


typedef MessageDerivativeSecurityList DerivativeSecurityList;


typedef MessageNewOrderMultileg NewOrderMultileg;


typedef MessageMultilegOrderCancelReplace MultilegOrderCancelReplace;


typedef MessageTradeCaptureReportRequest TradeCaptureReportRequest;


typedef MessageTradeCaptureReport TradeCaptureReport;


typedef MessageOrderMassStatusRequest OrderMassStatusRequest;


typedef MessageQuoteRequestReject QuoteRequestReject;


typedef MessageRFQRequest RFQRequest;


typedef MessageQuoteStatusReport QuoteStatusReport;


typedef MessageQuoteResponse QuoteResponse;


typedef MessageConfirmation Confirmation;


typedef MessagePositionMaintenanceRequest PositionMaintenanceRequest;


typedef MessagePositionMaintenanceReport PositionMaintenanceReport;


typedef MessageRequestForPositions RequestForPositions;


typedef MessageRequestForPositionsAck RequestForPositionsAck;


typedef MessagePositionReport PositionReport;


typedef MessageTradeCaptureReportRequestAck TradeCaptureReportRequestAck;


typedef MessageTradeCaptureReportAck TradeCaptureReportAck;


typedef MessageAllocationReport AllocationReport;


typedef MessageAllocationReportAck AllocationReportAck;


typedef MessageConfirmationAck ConfirmationAck;


typedef MessageSettlementInstructionRequest SettlementInstructionRequest;


typedef MessageAssignmentReport AssignmentReport;


typedef MessageCollateralRequest CollateralRequest;


typedef MessageCollateralAssignment CollateralAssignment;


typedef MessageCollateralResponse CollateralResponse;


typedef MessageCollateralReport CollateralReport;


typedef MessageCollateralInquiry CollateralInquiry;


typedef MessageNetworkCounterpartySystemStatusRequest NetworkCounterpartySystemStatusRequest;


typedef MessageNetworkCounterpartySystemStatusResponse NetworkCounterpartySystemStatusResponse;


typedef MessageUserRequest UserRequest;


typedef MessageUserResponse UserResponse;


typedef MessageCollateralInquiryAck CollateralInquiryAck;


typedef MessageConfirmationRequest ConfirmationRequest;


}
// end of Messages.hxx

struct FixFormatStyle
{
    const char * messageBegin   ;
    const char * messageEnd     ;
    const char * indent         ;
    const char * groupFirstField;
    const char * fieldBegin     ;
    const char * fieldEnd       ;
    const char * headerTagNameStart;
    const char * headerTagNameStop ;
    const char * tagNameStart   ;
    const char * tagNameStop    ;
    const char * tagValueStart  ;
    const char * tagValueStop   ;
    const char * equal          ;
    const char * valueStart     ;
    const char * valueStop      ;
    const char * enumStart      ;
    const char * enumStop       ;
    const char * unknownStart   ;
    const char * unknownStop    ;
};

extern const FixFormatStyle defaultStyle;
extern const FixFormatStyle defaultVerticalStyle;
extern const FixFormatStyle ttyStyle;
extern const FixFormatStyle ttyRgbStyle;
extern const FixFormatStyle ttyRgbSingleLineStyle;

const GetDepthMethod autoIndentFields = (GetDepthMethod)(-1);

std::ostream & fixToHuman( const char * fix, offset_t & pos, std::ostream & os, const FixFormatStyle & style = defaultStyle, GetDepthMethod indentator = nullptr );

unsigned computeChecksum( const char * begin, const char * end );

unsigned parseMessageLength( const char * fix, unsigned & msgTypePos );

struct fixstr
{
    explicit fixstr( const char * fix, const FixFormatStyle & fstyle = defaultStyle, GetDepthMethod ind = autoIndentFields ): ptr(fix), style(fstyle), indentator{ind} {}
    const char * const ptr;
    const FixFormatStyle & style;
    const GetDepthMethod indentator;
};

const char * getEnumName( const char * fix, int valueOffset );

} // namespace fix44

inline std::ostream & operator << ( std::ostream & os, const fix44::fixstr & msg )
{
    fix44::offset_t pos = 0;
    return fix44::fixToHuman( msg.ptr, pos, os, msg.style, msg.indentator );
}

#endif /* fix44_MESSAGES_H */

